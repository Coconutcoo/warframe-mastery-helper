/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars.runtime.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _handlebarsBase = __webpack_require__(/*! ./handlebars/base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

var _handlebarsSafeString = __webpack_require__(/*! ./handlebars/safe-string */ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js");

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = __webpack_require__(/*! ./handlebars/exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = __webpack_require__(/*! ./handlebars/utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = __webpack_require__(/*! ./handlebars/runtime */ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js");

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = __webpack_require__(/*! ./handlebars/no-conflict */ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js");

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;

exports['default'] = inst;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OEJBQXNCLG1CQUFtQjs7SUFBN0IsSUFBSTs7Ozs7b0NBSU8sMEJBQTBCOzs7O21DQUMzQix3QkFBd0I7Ozs7K0JBQ3ZCLG9CQUFvQjs7SUFBL0IsS0FBSzs7aUNBQ1Esc0JBQXNCOztJQUFuQyxPQUFPOztvQ0FFSSwwQkFBMEI7Ozs7O0FBR2pELFNBQVMsTUFBTSxHQUFHO0FBQ2hCLE1BQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7O0FBRTFDLE9BQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQyxVQUFVLG9DQUFhLENBQUM7QUFDM0IsSUFBRSxDQUFDLFNBQVMsbUNBQVksQ0FBQztBQUN6QixJQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDOztBQUU3QyxJQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNoQixJQUFFLENBQUMsUUFBUSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQzNCLFdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDbkMsQ0FBQzs7QUFFRixTQUFPLEVBQUUsQ0FBQztDQUNYOztBQUVELElBQUksSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUVyQixrQ0FBVyxJQUFJLENBQUMsQ0FBQzs7QUFFakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7cUJBRVIsSUFBSSIsImZpbGUiOiJoYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/base.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _helpers = __webpack_require__(/*! ./helpers */ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js");

var _decorators = __webpack_require__(/*! ./decorators */ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js");

var _logger = __webpack_require__(/*! ./logger */ "./node_modules/handlebars/dist/cjs/handlebars/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var VERSION = '4.1.2';
exports.VERSION = VERSION;
var COMPILER_REVISION = 7;

exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0'
};

exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: _logger2['default'],
  log: _logger2['default'].log,

  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }
      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },

  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },

  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }
      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  }
};

var log = _logger2['default'].log;

exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cUJBQTRDLFNBQVM7O3lCQUMvQixhQUFhOzs7O3VCQUNFLFdBQVc7OzBCQUNSLGNBQWM7O3NCQUNuQyxVQUFVOzs7O0FBRXRCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQzs7QUFDeEIsSUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7OztBQUU1QixJQUFNLGdCQUFnQixHQUFHO0FBQzlCLEdBQUMsRUFBRSxhQUFhO0FBQ2hCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxVQUFVO0FBQ2IsR0FBQyxFQUFFLGtCQUFrQjtBQUNyQixHQUFDLEVBQUUsaUJBQWlCO0FBQ3BCLEdBQUMsRUFBRSxVQUFVO0NBQ2QsQ0FBQzs7O0FBRUYsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUM7O0FBRTlCLFNBQVMscUJBQXFCLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7QUFDbkUsTUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQzdCLE1BQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxJQUFJLEVBQUUsQ0FBQztBQUMvQixNQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7O0FBRW5DLGtDQUF1QixJQUFJLENBQUMsQ0FBQztBQUM3Qix3Q0FBMEIsSUFBSSxDQUFDLENBQUM7Q0FDakM7O0FBRUQscUJBQXFCLENBQUMsU0FBUyxHQUFHO0FBQ2hDLGFBQVcsRUFBRSxxQkFBcUI7O0FBRWxDLFFBQU0scUJBQVE7QUFDZCxLQUFHLEVBQUUsb0JBQU8sR0FBRzs7QUFFZixnQkFBYyxFQUFFLHdCQUFTLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDakMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFVBQUksRUFBRSxFQUFFO0FBQUUsY0FBTSwyQkFBYyx5Q0FBeUMsQ0FBQyxDQUFDO09BQUU7QUFDM0Usb0JBQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1QixNQUFNO0FBQ0wsVUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDekI7R0FDRjtBQUNELGtCQUFnQixFQUFFLDBCQUFTLElBQUksRUFBRTtBQUMvQixXQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDM0I7O0FBRUQsaUJBQWUsRUFBRSx5QkFBUyxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQ3ZDLFFBQUksZ0JBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUN0QyxvQkFBTyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzdCLE1BQU07QUFDTCxVQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsRUFBRTtBQUNsQyxjQUFNLHlFQUEwRCxJQUFJLG9CQUFpQixDQUFDO09BQ3ZGO0FBQ0QsVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7S0FDL0I7R0FDRjtBQUNELG1CQUFpQixFQUFFLDJCQUFTLElBQUksRUFBRTtBQUNoQyxXQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDNUI7O0FBRUQsbUJBQWlCLEVBQUUsMkJBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNwQyxRQUFJLGdCQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDdEMsVUFBSSxFQUFFLEVBQUU7QUFBRSxjQUFNLDJCQUFjLDRDQUE0QyxDQUFDLENBQUM7T0FBRTtBQUM5RSxvQkFBTyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQy9CLE1BQU07QUFDTCxVQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUM1QjtHQUNGO0FBQ0QscUJBQW1CLEVBQUUsNkJBQVMsSUFBSSxFQUFFO0FBQ2xDLFdBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUM5QjtDQUNGLENBQUM7O0FBRUssSUFBSSxHQUFHLEdBQUcsb0JBQU8sR0FBRyxDQUFDOzs7UUFFcEIsV0FBVztRQUFFLE1BQU0iLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmd9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdEhlbHBlcnN9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnN9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4xLjInO1xuZXhwb3J0IGNvbnN0IENPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0IGNvbnN0IFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAnXG59O1xuXG5jb25zdCBvYmplY3RUeXBlID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcbiAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcbiAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG4gIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XG59XG5cbkhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGViYXJzRW52aXJvbm1lbnQsXG5cbiAgbG9nZ2VyOiBsb2dnZXIsXG4gIGxvZzogbG9nZ2VyLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgaGVscGVycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oYEF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIiR7bmFtZX1cIiBhcyB1bmRlZmluZWRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBsb2cgPSBsb2dnZXIubG9nO1xuXG5leHBvcnQge2NyZWF0ZUZyYW1lLCBsb2dnZXJ9O1xuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _decoratorsInline = __webpack_require__(/*! ./decorators/inline */ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js");

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0NBQTJCLHFCQUFxQjs7OztBQUV6QyxTQUFTLHlCQUF5QixDQUFDLFFBQVEsRUFBRTtBQUNsRCxnQ0FBZSxRQUFRLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJkZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG5cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;
    if (!props.partials) {
      props.partials = {};
      ret = function (context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQXFCLFVBQVU7O3FCQUVoQixVQUFTLFFBQVEsRUFBRTtBQUNoQyxVQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQzNFLFFBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25CLFdBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFNBQUcsR0FBRyxVQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUU7O0FBRS9CLFlBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbEMsaUJBQVMsQ0FBQyxRQUFRLEdBQUcsY0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRCxZQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLGlCQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QixlQUFPLEdBQUcsQ0FBQztPQUNaLENBQUM7S0FDSDs7QUFFRCxTQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUU3QyxXQUFPLEdBQUcsQ0FBQztHQUNaLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlubGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGxldCByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFydGlhbHMgc3RhY2sgZnJhbWUgcHJpb3IgdG8gZXhlYy5cbiAgICAgICAgbGV0IG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBleHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG4gICAgICAgIGxldCByZXQgPSBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/exception.js":
/*!******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/exception.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      column = undefined;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  /* istanbul ignore else */
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line;

      // Work around issue under safari where we can't directly set the column value
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
      } else {
        this.column = column;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();

exports['default'] = Exception;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsSUFBTSxVQUFVLEdBQUcsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQzs7QUFFbkcsU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNoQyxNQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUc7TUFDdEIsSUFBSSxZQUFBO01BQ0osTUFBTSxZQUFBLENBQUM7QUFDWCxNQUFJLEdBQUcsRUFBRTtBQUNQLFFBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN0QixVQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7O0FBRTFCLFdBQU8sSUFBSSxLQUFLLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7R0FDeEM7O0FBRUQsTUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQzs7O0FBRzFELE9BQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO0FBQ2hELFFBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7R0FDOUM7OztBQUdELE1BQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFO0FBQzNCLFNBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7R0FDMUM7O0FBRUQsTUFBSTtBQUNGLFFBQUksR0FBRyxFQUFFO0FBQ1AsVUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7Ozs7QUFJdkIsVUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFO0FBQ3pCLGNBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUNwQyxlQUFLLEVBQUUsTUFBTTtBQUNiLG9CQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7T0FDSixNQUFNO0FBQ0wsWUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7T0FDdEI7S0FDRjtHQUNGLENBQUMsT0FBTyxHQUFHLEVBQUU7O0dBRWI7Q0FDRjs7QUFFRCxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7O3FCQUVuQixTQUFTIiwiZmlsZSI6ImV4Y2VwdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgZXJyb3JQcm9wcyA9IFsnZGVzY3JpcHRpb24nLCAnZmlsZU5hbWUnLCAnbGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgICAgbGluZSxcbiAgICAgIGNvbHVtbjtcbiAgaWYgKGxvYykge1xuICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcblxuICAgICAgLy8gV29yayBhcm91bmQgaXNzdWUgdW5kZXIgc2FmYXJpIHdoZXJlIHdlIGNhbid0IGRpcmVjdGx5IHNldCB0aGUgY29sdW1uIHZhbHVlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogY29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKG5vcCkge1xuICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cbiAgfVxufVxuXG5FeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbmV4cG9ydCBkZWZhdWx0IEV4Y2VwdGlvbjtcbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _helpersBlockHelperMissing = __webpack_require__(/*! ./helpers/block-helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js");

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = __webpack_require__(/*! ./helpers/each */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js");

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = __webpack_require__(/*! ./helpers/helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js");

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = __webpack_require__(/*! ./helpers/if */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js");

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = __webpack_require__(/*! ./helpers/log */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js");

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = __webpack_require__(/*! ./helpers/lookup */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js");

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = __webpack_require__(/*! ./helpers/with */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js");

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);
  _helpersEach2['default'](instance);
  _helpersHelperMissing2['default'](instance);
  _helpersIf2['default'](instance);
  _helpersLog2['default'](instance);
  _helpersLookup2['default'](instance);
  _helpersWith2['default'](instance);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7eUNBQXVDLGdDQUFnQzs7OzsyQkFDOUMsZ0JBQWdCOzs7O29DQUNQLDBCQUEwQjs7Ozt5QkFDckMsY0FBYzs7OzswQkFDYixlQUFlOzs7OzZCQUNaLGtCQUFrQjs7OzsyQkFDcEIsZ0JBQWdCOzs7O0FBRWxDLFNBQVMsc0JBQXNCLENBQUMsUUFBUSxFQUFFO0FBQy9DLHlDQUEyQixRQUFRLENBQUMsQ0FBQztBQUNyQywyQkFBYSxRQUFRLENBQUMsQ0FBQztBQUN2QixvQ0FBc0IsUUFBUSxDQUFDLENBQUM7QUFDaEMseUJBQVcsUUFBUSxDQUFDLENBQUM7QUFDckIsMEJBQVksUUFBUSxDQUFDLENBQUM7QUFDdEIsNkJBQWUsUUFBUSxDQUFDLENBQUM7QUFDekIsMkJBQWEsUUFBUSxDQUFDLENBQUM7Q0FDeEIiLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZWdpc3RlckJsb2NrSGVscGVyTWlzc2luZyBmcm9tICcuL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcnO1xuaW1wb3J0IHJlZ2lzdGVyRWFjaCBmcm9tICcuL2hlbHBlcnMvZWFjaCc7XG5pbXBvcnQgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJJZiBmcm9tICcuL2hlbHBlcnMvaWYnO1xuaW1wb3J0IHJlZ2lzdGVyTG9nIGZyb20gJy4vaGVscGVycy9sb2cnO1xuaW1wb3J0IHJlZ2lzdGVyTG9va3VwIGZyb20gJy4vaGVscGVycy9sb29rdXAnO1xuaW1wb3J0IHJlZ2lzdGVyV2l0aCBmcm9tICcuL2hlbHBlcnMvd2l0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XG4gIHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJFYWNoKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJJZihpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyTG9nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb29rdXAoaW5zdGFuY2UpO1xuICByZWdpc3RlcldpdGgoaW5zdGFuY2UpO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = { data: data };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBc0QsVUFBVTs7cUJBRWpELFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3ZFLFFBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPO1FBQ3pCLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVwQixRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsYUFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakIsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtBQUMvQyxhQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QixNQUFNLElBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUMzQixVQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLFlBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNmLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCOztBQUVELGVBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2hELE1BQU07QUFDTCxlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN0QjtLQUNGLE1BQU07QUFDTCxVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLElBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdFLGVBQU8sR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztPQUN4Qjs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0I7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJibG9jay1oZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && typeof context === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else {
        var priorKey = undefined;

        for (var key in context) {
          if (context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey !== undefined) {
          execIteration(priorKey, i - 1, true);
        }
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQUErRSxVQUFVOzt5QkFDbkUsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksQ0FBQyxPQUFPLEVBQUU7QUFDWixZQUFNLDJCQUFjLDZCQUE2QixDQUFDLENBQUM7S0FDcEQ7O0FBRUQsUUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFDZixPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU87UUFDekIsQ0FBQyxHQUFHLENBQUM7UUFDTCxHQUFHLEdBQUcsRUFBRTtRQUNSLElBQUksWUFBQTtRQUNKLFdBQVcsWUFBQSxDQUFDOztBQUVoQixRQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixpQkFBVyxHQUFHLHlCQUFrQixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ2pGOztBQUVELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFBRSxhQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOztBQUUxRCxRQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDaEIsVUFBSSxHQUFHLG1CQUFZLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNsQzs7QUFFRCxhQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUN6QyxVQUFJLElBQUksRUFBRTtBQUNSLFlBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2pCLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUN6QixZQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7O0FBRW5CLFlBQUksV0FBVyxFQUFFO0FBQ2YsY0FBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQ3hDO09BQ0Y7O0FBRUQsU0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzdCLFlBQUksRUFBRSxJQUFJO0FBQ1YsbUJBQVcsRUFBRSxtQkFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDL0UsQ0FBQyxDQUFDO0tBQ0o7O0FBRUQsUUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzFDLFVBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNwQixhQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxjQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDaEIseUJBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQy9DO1NBQ0Y7T0FDRixNQUFNO0FBQ0wsWUFBSSxRQUFRLFlBQUEsQ0FBQzs7QUFFYixhQUFLLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtBQUN2QixjQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Ozs7QUFJL0IsZ0JBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQiwyQkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDaEM7QUFDRCxvQkFBUSxHQUFHLEdBQUcsQ0FBQztBQUNmLGFBQUMsRUFBRSxDQUFDO1dBQ0w7U0FDRjtBQUNELFlBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQix1QkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3RDO09BQ0Y7S0FDRjs7QUFFRCxRQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDWCxTQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCOztBQUVELFdBQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiZWFjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNBcnJheSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICAgIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICByZXQgPSAnJyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dFBhdGg7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICBjb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7IGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7IH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmtleSA9IGZpZWxkO1xuICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcbiAgICAgICAgZGF0YS5sYXN0ID0gISFsYXN0O1xuXG4gICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbZmllbGRdLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcbiAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAgIC8vIGFuIGl0ZXJtZWRpYXRlIGtleXMgYXJyYXkuXG4gICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmlvcktleSA9IGtleTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('helperMissing', function () /* [args, ]options */{
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt5QkFBc0IsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsaUNBQWdDO0FBQ3ZFLFFBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7O0FBRTFCLGFBQU8sU0FBUyxDQUFDO0tBQ2xCLE1BQU07O0FBRUwsWUFBTSwyQkFBYyxtQkFBbUIsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDdkY7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJoZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbigvKiBbYXJncywgXW9wdGlvbnMgKi8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function (conditional, options) {
    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBa0MsVUFBVTs7cUJBRTdCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVMsV0FBVyxFQUFFLE9BQU8sRUFBRTtBQUMzRCxRQUFJLGtCQUFXLFdBQVcsQ0FBQyxFQUFFO0FBQUUsaUJBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQUU7Ozs7O0FBS3RFLFFBQUksQUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxJQUFLLGVBQVEsV0FBVyxDQUFDLEVBQUU7QUFDdkUsYUFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7R0FDRixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxXQUFXLEVBQUUsT0FBTyxFQUFFO0FBQy9ELFdBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztHQUN2SCxDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJpZi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNFbXB0eSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaWYnLCBmdW5jdGlvbihjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkgeyBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7IH1cblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG4gICAgaWYgKCghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCkgfHwgaXNFbXB0eShjb25kaXRpb25hbCkpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnNbJ2lmJ10uY2FsbCh0aGlzLCBjb25kaXRpb25hbCwge2ZuOiBvcHRpb25zLmludmVyc2UsIGludmVyc2U6IG9wdGlvbnMuZm4sIGhhc2g6IG9wdGlvbnMuaGFzaH0pO1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('log', function () /* message, options */{
    var args = [undefined],
        options = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;
    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }
    args[0] = level;

    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsa0NBQWlDO0FBQzlELFFBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ2xCLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM5QyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0MsVUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7QUFFRCxRQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtBQUM5QixXQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDNUIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JELFdBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUM1QjtBQUNELFFBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRWhCLFlBQVEsQ0FBQyxHQUFHLE1BQUEsQ0FBWixRQUFRLEVBQVMsSUFBSSxDQUFDLENBQUM7R0FDeEIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIGxldCBsZXZlbCA9IDE7XG4gICAgaWYgKG9wdGlvbnMuaGFzaC5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuaGFzaC5sZXZlbDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGEubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmRhdGEubGV2ZWw7XG4gICAgfVxuICAgIGFyZ3NbMF0gPSBsZXZlbDtcblxuICAgIGluc3RhbmNlLmxvZyguLi4gYXJncyk7XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js":
/*!***********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('lookup', function (obj, field) {
    if (!obj) {
      return obj;
    }
    if (field === 'constructor' && !obj.propertyIsEnumerable(field)) {
      return undefined;
    }
    return obj[field];
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQ3JELFFBQUksQ0FBQyxHQUFHLEVBQUU7QUFDUixhQUFPLEdBQUcsQ0FBQztLQUNaO0FBQ0QsUUFBSSxLQUFLLEtBQUssYUFBYSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQy9ELGFBQU8sU0FBUyxDQUFDO0tBQ2xCO0FBQ0QsV0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDbkIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9va3VwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvb2t1cCcsIGZ1bmN0aW9uKG9iaiwgZmllbGQpIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgaWYgKGZpZWxkID09PSAnY29uc3RydWN0b3InICYmICFvYmoucHJvcGVydHlJc0VudW1lcmFibGUoZmllbGQpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gb2JqW2ZpZWxkXTtcbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;
      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUErRSxVQUFVOztxQkFFMUUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFBRSxhQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOztBQUUxRCxRQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVwQixRQUFJLENBQUMsZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNyQixVQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFVBQUksT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO0FBQy9CLFlBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ2hGOztBQUVELGFBQU8sRUFBRSxDQUFDLE9BQU8sRUFBRTtBQUNqQixZQUFJLEVBQUUsSUFBSTtBQUNWLG1CQUFXLEVBQUUsbUJBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7T0FDaEUsQ0FBQyxDQUFDO0tBQ0osTUFBTTtBQUNMLGFBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QjtHQUNGLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6IndpdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/logger.js":
/*!***************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/logger.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',

  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },

  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];
      if (!console[method]) {
        // eslint-disable-line no-console
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};

exports['default'] = logger;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFzQixTQUFTOztBQUUvQixJQUFJLE1BQU0sR0FBRztBQUNYLFdBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztBQUM3QyxPQUFLLEVBQUUsTUFBTTs7O0FBR2IsYUFBVyxFQUFFLHFCQUFTLEtBQUssRUFBRTtBQUMzQixRQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUM3QixVQUFJLFFBQVEsR0FBRyxlQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDOUQsVUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ2pCLGFBQUssR0FBRyxRQUFRLENBQUM7T0FDbEIsTUFBTTtBQUNMLGFBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO09BQzdCO0tBQ0Y7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZDs7O0FBR0QsS0FBRyxFQUFFLGFBQVMsS0FBSyxFQUFjO0FBQy9CLFNBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVsQyxRQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7QUFDL0UsVUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxVQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFOztBQUNwQixjQUFNLEdBQUcsS0FBSyxDQUFDO09BQ2hCOzt3Q0FQbUIsT0FBTztBQUFQLGVBQU87OztBQVEzQixhQUFPLENBQUMsTUFBTSxPQUFDLENBQWYsT0FBTyxFQUFZLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0dBQ0Y7Q0FDRixDQUFDOztxQkFFYSxNQUFNIiwiZmlsZSI6ImxvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aW5kZXhPZn0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGVbbWV0aG9kXSguLi5tZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* global window */


exports.__esModule = true;

exports['default'] = function (Handlebars) {
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */
  Handlebars.noConflict = function () {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }
    return Handlebars;
  };
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O3FCQUNlLFVBQVMsVUFBVSxFQUFFOztBQUVsQyxNQUFJLElBQUksR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLEdBQUcsTUFBTSxHQUFHLE1BQU07TUFDdEQsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7O0FBRWxDLFlBQVUsQ0FBQyxVQUFVLEdBQUcsWUFBVztBQUNqQyxRQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO0FBQ2xDLFVBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO0tBQy9CO0FBQ0QsV0FBTyxVQUFVLENBQUM7R0FDbkIsQ0FBQztDQUNIIiwiZmlsZSI6Im5vLWNvbmZsaWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIHdpbmRvdyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oSGFuZGxlYmFycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBsZXQgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxuICAgICAgJEhhbmRsZWJhcnMgPSByb290LkhhbmRsZWJhcnM7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcbiAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xuICAgIH1cbiAgICByZXR1cm4gSGFuZGxlYmFycztcbiAgfTtcbn1cbiJdfQ==

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/runtime.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_utils);

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _base = __webpack_require__(/*! ./base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
    }
  }
}

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
  }

  templateSpec.main.decorator = templateSpec.main_d;

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  }

  // Just add water
  var container = {
    strict: function strict(obj, name) {
      if (!(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },

    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }
      return programWrapper;
    },

    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    merge: function merge(param, common) {
      var obj = param || common;

      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }

      return obj;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context /*, options*/) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }
    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }
  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = container.merge(options.decorators, env.decorators);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;
  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data);
      // Wrapper function to get access to currentPartialBlock from the closure
      var fn = options.fn;
      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.
        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };
      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }
  return prog;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3J1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBQXVCLFNBQVM7O0lBQXBCLEtBQUs7O3lCQUNLLGFBQWE7Ozs7b0JBQzhCLFFBQVE7O0FBRWxFLFNBQVMsYUFBYSxDQUFDLFlBQVksRUFBRTtBQUMxQyxNQUFNLGdCQUFnQixHQUFHLFlBQVksSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztNQUN2RCxlQUFlLDBCQUFvQixDQUFDOztBQUUxQyxNQUFJLGdCQUFnQixLQUFLLGVBQWUsRUFBRTtBQUN4QyxRQUFJLGdCQUFnQixHQUFHLGVBQWUsRUFBRTtBQUN0QyxVQUFNLGVBQWUsR0FBRyx1QkFBaUIsZUFBZSxDQUFDO1VBQ25ELGdCQUFnQixHQUFHLHVCQUFpQixnQkFBZ0IsQ0FBQyxDQUFDO0FBQzVELFlBQU0sMkJBQWMseUZBQXlGLEdBQ3ZHLHFEQUFxRCxHQUFHLGVBQWUsR0FBRyxtREFBbUQsR0FBRyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUNoSyxNQUFNOztBQUVMLFlBQU0sMkJBQWMsd0ZBQXdGLEdBQ3RHLGlEQUFpRCxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUNuRjtHQUNGO0NBQ0Y7O0FBRU0sU0FBUyxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTs7QUFFMUMsTUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNSLFVBQU0sMkJBQWMsbUNBQW1DLENBQUMsQ0FBQztHQUMxRDtBQUNELE1BQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFO0FBQ3ZDLFVBQU0sMkJBQWMsMkJBQTJCLEdBQUcsT0FBTyxZQUFZLENBQUMsQ0FBQztHQUN4RTs7QUFFRCxjQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDOzs7O0FBSWxELEtBQUcsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFNUMsV0FBUyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRTtBQUN2RCxRQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDaEIsYUFBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEQsVUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO0FBQ2YsZUFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7T0FDdkI7S0FDRjs7QUFFRCxXQUFPLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RFLFFBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQzs7QUFFeEUsUUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7QUFDakMsYUFBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN6RixZQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzNEO0FBQ0QsUUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ2xCLFVBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUNsQixZQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLGFBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDNUMsY0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUM1QixrQkFBTTtXQUNQOztBQUVELGVBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QztBQUNELGNBQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO09BQzNCO0FBQ0QsYUFBTyxNQUFNLENBQUM7S0FDZixNQUFNO0FBQ0wsWUFBTSwyQkFBYyxjQUFjLEdBQUcsT0FBTyxDQUFDLElBQUksR0FBRywwREFBMEQsQ0FBQyxDQUFDO0tBQ2pIO0dBQ0Y7OztBQUdELE1BQUksU0FBUyxHQUFHO0FBQ2QsVUFBTSxFQUFFLGdCQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUU7QUFDMUIsVUFBSSxFQUFFLElBQUksSUFBSSxHQUFHLENBQUEsQUFBQyxFQUFFO0FBQ2xCLGNBQU0sMkJBQWMsR0FBRyxHQUFHLElBQUksR0FBRyxtQkFBbUIsR0FBRyxHQUFHLENBQUMsQ0FBQztPQUM3RDtBQUNELGFBQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2xCO0FBQ0QsVUFBTSxFQUFFLGdCQUFTLE1BQU0sRUFBRSxJQUFJLEVBQUU7QUFDN0IsVUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUMxQixXQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzVCLFlBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7QUFDeEMsaUJBQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hCO09BQ0Y7S0FDRjtBQUNELFVBQU0sRUFBRSxnQkFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ2pDLGFBQU8sT0FBTyxPQUFPLEtBQUssVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO0tBQ3hFOztBQUVELG9CQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7QUFDeEMsaUJBQWEsRUFBRSxvQkFBb0I7O0FBRW5DLE1BQUUsRUFBRSxZQUFTLENBQUMsRUFBRTtBQUNkLFVBQUksR0FBRyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixTQUFHLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDdkMsYUFBTyxHQUFHLENBQUM7S0FDWjs7QUFFRCxZQUFRLEVBQUUsRUFBRTtBQUNaLFdBQU8sRUFBRSxpQkFBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUU7QUFDbkUsVUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7VUFDakMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsVUFBSSxJQUFJLElBQUksTUFBTSxJQUFJLFdBQVcsSUFBSSxtQkFBbUIsRUFBRTtBQUN4RCxzQkFBYyxHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO09BQzNGLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRTtBQUMxQixzQkFBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7T0FDOUQ7QUFDRCxhQUFPLGNBQWMsQ0FBQztLQUN2Qjs7QUFFRCxRQUFJLEVBQUUsY0FBUyxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQzNCLGFBQU8sS0FBSyxJQUFJLEtBQUssRUFBRSxFQUFFO0FBQ3ZCLGFBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO09BQ3ZCO0FBQ0QsYUFBTyxLQUFLLENBQUM7S0FDZDtBQUNELFNBQUssRUFBRSxlQUFTLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFDN0IsVUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLE1BQU0sQ0FBQzs7QUFFMUIsVUFBSSxLQUFLLElBQUksTUFBTSxJQUFLLEtBQUssS0FBSyxNQUFNLEFBQUMsRUFBRTtBQUN6QyxXQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO09BQ3ZDOztBQUVELGFBQU8sR0FBRyxDQUFDO0tBQ1o7O0FBRUQsZUFBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDOztBQUU1QixRQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJO0FBQ2pCLGdCQUFZLEVBQUUsWUFBWSxDQUFDLFFBQVE7R0FDcEMsQ0FBQzs7QUFFRixXQUFTLEdBQUcsQ0FBQyxPQUFPLEVBQWdCO1FBQWQsT0FBTyx5REFBRyxFQUFFOztBQUNoQyxRQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDOztBQUV4QixPQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BCLFFBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUU7QUFDNUMsVUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDaEM7QUFDRCxRQUFJLE1BQU0sWUFBQTtRQUNOLFdBQVcsR0FBRyxZQUFZLENBQUMsY0FBYyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUM7QUFDL0QsUUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFO0FBQzFCLFVBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUNsQixjQUFNLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7T0FDM0YsTUFBTTtBQUNMLGNBQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO09BQ3BCO0tBQ0Y7O0FBRUQsYUFBUyxJQUFJLENBQUMsT0FBTyxnQkFBZTtBQUNsQyxhQUFPLEVBQUUsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDckg7QUFDRCxRQUFJLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztBQUN0RyxXQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDL0I7QUFDRCxLQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQzs7QUFFakIsS0FBRyxDQUFDLE1BQU0sR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUM3QixRQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtBQUNwQixlQUFTLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRWxFLFVBQUksWUFBWSxDQUFDLFVBQVUsRUFBRTtBQUMzQixpQkFBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQ3RFO0FBQ0QsVUFBSSxZQUFZLENBQUMsVUFBVSxJQUFJLFlBQVksQ0FBQyxhQUFhLEVBQUU7QUFDekQsaUJBQVMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztPQUM1RTtLQUNGLE1BQU07QUFDTCxlQUFTLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDcEMsZUFBUyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ3RDLGVBQVMsQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztLQUMzQztHQUNGLENBQUM7O0FBRUYsS0FBRyxDQUFDLE1BQU0sR0FBRyxVQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRTtBQUNsRCxRQUFJLFlBQVksQ0FBQyxjQUFjLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDL0MsWUFBTSwyQkFBYyx3QkFBd0IsQ0FBQyxDQUFDO0tBQy9DO0FBQ0QsUUFBSSxZQUFZLENBQUMsU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3JDLFlBQU0sMkJBQWMseUJBQXlCLENBQUMsQ0FBQztLQUNoRDs7QUFFRCxXQUFPLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUNqRixDQUFDO0FBQ0YsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxTQUFTLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRTtBQUM1RixXQUFTLElBQUksQ0FBQyxPQUFPLEVBQWdCO1FBQWQsT0FBTyx5REFBRyxFQUFFOztBQUNqQyxRQUFJLGFBQWEsR0FBRyxNQUFNLENBQUM7QUFDM0IsUUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLE9BQU8sS0FBSyxTQUFTLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUEsQUFBQyxFQUFFO0FBQ2hHLG1CQUFhLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDMUM7O0FBRUQsV0FBTyxFQUFFLENBQUMsU0FBUyxFQUNmLE9BQU8sRUFDUCxTQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQ3JDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxFQUNwQixXQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUN4RCxhQUFhLENBQUMsQ0FBQztHQUNwQjs7QUFFRCxNQUFJLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQzs7QUFFekUsTUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDakIsTUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDeEMsTUFBSSxDQUFDLFdBQVcsR0FBRyxtQkFBbUIsSUFBSSxDQUFDLENBQUM7QUFDNUMsU0FBTyxJQUFJLENBQUM7Q0FDYjs7QUFFTSxTQUFTLGNBQWMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRTtBQUN4RCxNQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osUUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLGdCQUFnQixFQUFFO0FBQ3JDLGFBQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ3pDLE1BQU07QUFDTCxhQUFPLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDMUM7R0FDRixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTs7QUFFekMsV0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7QUFDdkIsV0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7R0FDckM7QUFDRCxTQUFPLE9BQU8sQ0FBQztDQUNoQjs7QUFFTSxTQUFTLGFBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRTs7QUFFdkQsTUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDMUUsU0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDdkIsTUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO0FBQ2YsV0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztHQUN2RTs7QUFFRCxNQUFJLFlBQVksWUFBQSxDQUFDO0FBQ2pCLE1BQUksT0FBTyxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRTs7QUFDckMsYUFBTyxDQUFDLElBQUksR0FBRyxrQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRXpDLFVBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUM7QUFDcEIsa0JBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLFNBQVMsbUJBQW1CLENBQUMsT0FBTyxFQUFnQjtZQUFkLE9BQU8seURBQUcsRUFBRTs7OztBQUkvRixlQUFPLENBQUMsSUFBSSxHQUFHLGtCQUFZLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QyxlQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLG1CQUFtQixDQUFDO0FBQ3BELGVBQU8sRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztPQUM3QixDQUFDO0FBQ0YsVUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFO0FBQ2YsZUFBTyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUNwRTs7R0FDRjs7QUFFRCxNQUFJLE9BQU8sS0FBSyxTQUFTLElBQUksWUFBWSxFQUFFO0FBQ3pDLFdBQU8sR0FBRyxZQUFZLENBQUM7R0FDeEI7O0FBRUQsTUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO0FBQ3pCLFVBQU0sMkJBQWMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcscUJBQXFCLENBQUMsQ0FBQztHQUM1RSxNQUFNLElBQUksT0FBTyxZQUFZLFFBQVEsRUFBRTtBQUN0QyxXQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDbEM7Q0FDRjs7QUFFTSxTQUFTLElBQUksR0FBRztBQUFFLFNBQU8sRUFBRSxDQUFDO0NBQUU7O0FBRXJDLFNBQVMsUUFBUSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUU7QUFDL0IsTUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUEsQUFBQyxFQUFFO0FBQzlCLFFBQUksR0FBRyxJQUFJLEdBQUcsa0JBQVksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3JDLFFBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO0dBQ3JCO0FBQ0QsU0FBTyxJQUFJLENBQUM7Q0FDYjs7QUFFRCxTQUFTLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFO0FBQ3pFLE1BQUksRUFBRSxDQUFDLFNBQVMsRUFBRTtBQUNoQixRQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDZixRQUFJLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUYsU0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDM0I7QUFDRCxTQUFPLElBQUksQ0FBQztDQUNiIiwiZmlsZSI6InJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9leGNlcHRpb24nO1xuaW1wb3J0IHsgQ09NUElMRVJfUkVWSVNJT04sIFJFVklTSU9OX0NIQU5HRVMsIGNyZWF0ZUZyYW1lIH0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmV2aXNpb24oY29tcGlsZXJJbmZvKSB7XG4gIGNvbnN0IGNvbXBpbGVyUmV2aXNpb24gPSBjb21waWxlckluZm8gJiYgY29tcGlsZXJJbmZvWzBdIHx8IDEsXG4gICAgICAgIGN1cnJlbnRSZXZpc2lvbiA9IENPTVBJTEVSX1JFVklTSU9OO1xuXG4gIGlmIChjb21waWxlclJldmlzaW9uICE9PSBjdXJyZW50UmV2aXNpb24pIHtcbiAgICBpZiAoY29tcGlsZXJSZXZpc2lvbiA8IGN1cnJlbnRSZXZpc2lvbikge1xuICAgICAgY29uc3QgcnVudGltZVZlcnNpb25zID0gUkVWSVNJT05fQ0hBTkdFU1tjdXJyZW50UmV2aXNpb25dLFxuICAgICAgICAgICAgY29tcGlsZXJWZXJzaW9ucyA9IFJFVklTSU9OX0NIQU5HRVNbY29tcGlsZXJSZXZpc2lvbl07XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhbiBvbGRlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICtcbiAgICAgICAgICAgICdQbGVhc2UgdXBkYXRlIHlvdXIgcHJlY29tcGlsZXIgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgcnVudGltZVZlcnNpb25zICsgJykgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uICgnICsgY29tcGlsZXJWZXJzaW9ucyArICcpLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVc2UgdGhlIGVtYmVkZGVkIHZlcnNpb24gaW5mbyBzaW5jZSB0aGUgcnVudGltZSBkb2Vzbid0IGtub3cgYWJvdXQgdGhpcyByZXZpc2lvbiB5ZXRcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGEgbmV3ZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIHVwZGF0ZSB5b3VyIHJ1bnRpbWUgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgY29tcGlsZXJJbmZvWzFdICsgJykuJyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMsIGVudikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIWVudikge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ05vIGVudmlyb25tZW50IHBhc3NlZCB0byB0ZW1wbGF0ZScpO1xuICB9XG4gIGlmICghdGVtcGxhdGVTcGVjIHx8ICF0ZW1wbGF0ZVNwZWMubWFpbikge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1Vua25vd24gdGVtcGxhdGUgb2JqZWN0OiAnICsgdHlwZW9mIHRlbXBsYXRlU3BlYyk7XG4gIH1cblxuICB0ZW1wbGF0ZVNwZWMubWFpbi5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWMubWFpbl9kO1xuXG4gIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XG4gIC8vIGZvciBleHRlcm5hbCB1c2VycyB0byBvdmVycmlkZSB0aGVzZSBhcyBwc3VlZG8tc3VwcG9ydGVkIEFQSXMuXG4gIGVudi5WTS5jaGVja1JldmlzaW9uKHRlbXBsYXRlU3BlYy5jb21waWxlcik7XG5cbiAgZnVuY3Rpb24gaW52b2tlUGFydGlhbFdyYXBwZXIocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAgIGNvbnRleHQgPSBVdGlscy5leHRlbmQoe30sIGNvbnRleHQsIG9wdGlvbnMuaGFzaCk7XG4gICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgb3B0aW9ucy5pZHNbMF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnRpYWwgPSBlbnYuVk0ucmVzb2x2ZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcbiAgICBsZXQgcmVzdWx0ID0gZW52LlZNLmludm9rZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcblxuICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xuICAgICAgb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdID0gZW52LmNvbXBpbGUocGFydGlhbCwgdGVtcGxhdGVTcGVjLmNvbXBpbGVyT3B0aW9ucywgZW52KTtcbiAgICAgIHJlc3VsdCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXShjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICBpZiAob3B0aW9ucy5pbmRlbnQpIHtcbiAgICAgICAgbGV0IGxpbmVzID0gcmVzdWx0LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoIWxpbmVzW2ldICYmIGkgKyAxID09PSBsKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaW5lc1tpXSA9IG9wdGlvbnMuaW5kZW50ICsgbGluZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gbGluZXMuam9pbignXFxuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgY29tcGlsZWQgd2hlbiBydW5uaW5nIGluIHJ1bnRpbWUtb25seSBtb2RlJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSnVzdCBhZGQgd2F0ZXJcbiAgbGV0IGNvbnRhaW5lciA9IHtcbiAgICBzdHJpY3Q6IGZ1bmN0aW9uKG9iaiwgbmFtZSkge1xuICAgICAgaWYgKCEobmFtZSBpbiBvYmopKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1wiJyArIG5hbWUgKyAnXCIgbm90IGRlZmluZWQgaW4gJyArIG9iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqW25hbWVdO1xuICAgIH0sXG4gICAgbG9va3VwOiBmdW5jdGlvbihkZXB0aHMsIG5hbWUpIHtcbiAgICAgIGNvbnN0IGxlbiA9IGRlcHRocy5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChkZXB0aHNbaV0gJiYgZGVwdGhzW2ldW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZGVwdGhzW2ldW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBsYW1iZGE6IGZ1bmN0aW9uKGN1cnJlbnQsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgY3VycmVudCA9PT0gJ2Z1bmN0aW9uJyA/IGN1cnJlbnQuY2FsbChjb250ZXh0KSA6IGN1cnJlbnQ7XG4gICAgfSxcblxuICAgIGVzY2FwZUV4cHJlc3Npb246IFV0aWxzLmVzY2FwZUV4cHJlc3Npb24sXG4gICAgaW52b2tlUGFydGlhbDogaW52b2tlUGFydGlhbFdyYXBwZXIsXG5cbiAgICBmbjogZnVuY3Rpb24oaSkge1xuICAgICAgbGV0IHJldCA9IHRlbXBsYXRlU3BlY1tpXTtcbiAgICAgIHJldC5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWNbaSArICdfZCddO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgcHJvZ3JhbXM6IFtdLFxuICAgIHByb2dyYW06IGZ1bmN0aW9uKGksIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICAgIGxldCBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0sXG4gICAgICAgICAgZm4gPSB0aGlzLmZuKGkpO1xuICAgICAgaWYgKGRhdGEgfHwgZGVwdGhzIHx8IGJsb2NrUGFyYW1zIHx8IGRlY2xhcmVkQmxvY2tQYXJhbXMpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgICB9IGVsc2UgaWYgKCFwcm9ncmFtV3JhcHBlcikge1xuICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0gPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZ3JhbVdyYXBwZXI7XG4gICAgfSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKHZhbHVlLCBkZXB0aCkge1xuICAgICAgd2hpbGUgKHZhbHVlICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5fcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgbWVyZ2U6IGZ1bmN0aW9uKHBhcmFtLCBjb21tb24pIHtcbiAgICAgIGxldCBvYmogPSBwYXJhbSB8fCBjb21tb247XG5cbiAgICAgIGlmIChwYXJhbSAmJiBjb21tb24gJiYgKHBhcmFtICE9PSBjb21tb24pKSB7XG4gICAgICAgIG9iaiA9IFV0aWxzLmV4dGVuZCh7fSwgY29tbW9uLCBwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICAvLyBBbiBlbXB0eSBvYmplY3QgdG8gdXNlIGFzIHJlcGxhY2VtZW50IGZvciBudWxsLWNvbnRleHRzXG4gICAgbnVsbENvbnRleHQ6IE9iamVjdC5zZWFsKHt9KSxcblxuICAgIG5vb3A6IGVudi5WTS5ub29wLFxuICAgIGNvbXBpbGVySW5mbzogdGVtcGxhdGVTcGVjLmNvbXBpbGVyXG4gIH07XG5cbiAgZnVuY3Rpb24gcmV0KGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuXG4gICAgcmV0Ll9zZXR1cChvcHRpb25zKTtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCAmJiB0ZW1wbGF0ZVNwZWMudXNlRGF0YSkge1xuICAgICAgZGF0YSA9IGluaXREYXRhKGNvbnRleHQsIGRhdGEpO1xuICAgIH1cbiAgICBsZXQgZGVwdGhzLFxuICAgICAgICBibG9ja1BhcmFtcyA9IHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyA/IFtdIDogdW5kZWZpbmVkO1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzKSB7XG4gICAgICBpZiAob3B0aW9ucy5kZXB0aHMpIHtcbiAgICAgICAgZGVwdGhzID0gY29udGV4dCAhPSBvcHRpb25zLmRlcHRoc1swXSA/IFtjb250ZXh0XS5jb25jYXQob3B0aW9ucy5kZXB0aHMpIDogb3B0aW9ucy5kZXB0aHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXB0aHMgPSBbY29udGV4dF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFpbihjb250ZXh0LyosIG9wdGlvbnMqLykge1xuICAgICAgcmV0dXJuICcnICsgdGVtcGxhdGVTcGVjLm1haW4oY29udGFpbmVyLCBjb250ZXh0LCBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICB9XG4gICAgbWFpbiA9IGV4ZWN1dGVEZWNvcmF0b3JzKHRlbXBsYXRlU3BlYy5tYWluLCBtYWluLCBjb250YWluZXIsIG9wdGlvbnMuZGVwdGhzIHx8IFtdLCBkYXRhLCBibG9ja1BhcmFtcyk7XG4gICAgcmV0dXJuIG1haW4oY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0LmlzVG9wID0gdHJ1ZTtcblxuICByZXQuX3NldHVwID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsKSB7XG4gICAgICBjb250YWluZXIuaGVscGVycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmhlbHBlcnMsIGVudi5oZWxwZXJzKTtcblxuICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsKSB7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLnBhcnRpYWxzLCBlbnYucGFydGlhbHMpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsIHx8IHRlbXBsYXRlU3BlYy51c2VEZWNvcmF0b3JzKSB7XG4gICAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMuZGVjb3JhdG9ycywgZW52LmRlY29yYXRvcnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXIuaGVscGVycyA9IG9wdGlvbnMuaGVscGVycztcbiAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9wdGlvbnMucGFydGlhbHM7XG4gICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IG9wdGlvbnMuZGVjb3JhdG9ycztcbiAgICB9XG4gIH07XG5cbiAgcmV0Ll9jaGlsZCA9IGZ1bmN0aW9uKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZUJsb2NrUGFyYW1zICYmICFibG9ja1BhcmFtcykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocyAmJiAhZGVwdGhzKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdtdXN0IHBhc3MgcGFyZW50IGRlcHRocycpO1xuICAgIH1cblxuICAgIHJldHVybiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIHRlbXBsYXRlU3BlY1tpXSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gIGZ1bmN0aW9uIHByb2coY29udGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGN1cnJlbnREZXB0aHMgPSBkZXB0aHM7XG4gICAgaWYgKGRlcHRocyAmJiBjb250ZXh0ICE9IGRlcHRoc1swXSAmJiAhKGNvbnRleHQgPT09IGNvbnRhaW5lci5udWxsQ29udGV4dCAmJiBkZXB0aHNbMF0gPT09IG51bGwpKSB7XG4gICAgICBjdXJyZW50RGVwdGhzID0gW2NvbnRleHRdLmNvbmNhdChkZXB0aHMpO1xuICAgIH1cblxuICAgIHJldHVybiBmbihjb250YWluZXIsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNvbnRhaW5lci5oZWxwZXJzLCBjb250YWluZXIucGFydGlhbHMsXG4gICAgICAgIG9wdGlvbnMuZGF0YSB8fCBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtcyAmJiBbb3B0aW9ucy5ibG9ja1BhcmFtc10uY29uY2F0KGJsb2NrUGFyYW1zKSxcbiAgICAgICAgY3VycmVudERlcHRocyk7XG4gIH1cblxuICBwcm9nID0gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcyk7XG5cbiAgcHJvZy5wcm9ncmFtID0gaTtcbiAgcHJvZy5kZXB0aCA9IGRlcHRocyA/IGRlcHRocy5sZW5ndGggOiAwO1xuICBwcm9nLmJsb2NrUGFyYW1zID0gZGVjbGFyZWRCbG9ja1BhcmFtcyB8fCAwO1xuICByZXR1cm4gcHJvZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKCFwYXJ0aWFsKSB7XG4gICAgaWYgKG9wdGlvbnMubmFtZSA9PT0gJ0BwYXJ0aWFsLWJsb2NrJykge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdO1xuICAgIH1cbiAgfSBlbHNlIGlmICghcGFydGlhbC5jYWxsICYmICFvcHRpb25zLm5hbWUpIHtcbiAgICAvLyBUaGlzIGlzIGEgZHluYW1pYyBwYXJ0aWFsIHRoYXQgcmV0dXJuZWQgYSBzdHJpbmdcbiAgICBvcHRpb25zLm5hbWUgPSBwYXJ0aWFsO1xuICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW3BhcnRpYWxdO1xuICB9XG4gIHJldHVybiBwYXJ0aWFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52b2tlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIC8vIFVzZSB0aGUgY3VycmVudCBjbG9zdXJlIGNvbnRleHQgdG8gc2F2ZSB0aGUgcGFydGlhbC1ibG9jayBpZiB0aGlzIHBhcnRpYWxcbiAgY29uc3QgY3VycmVudFBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgb3B0aW9ucy5wYXJ0aWFsID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoID0gb3B0aW9ucy5pZHNbMF0gfHwgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoO1xuICB9XG5cbiAgbGV0IHBhcnRpYWxCbG9jaztcbiAgaWYgKG9wdGlvbnMuZm4gJiYgb3B0aW9ucy5mbiAhPT0gbm9vcCkge1xuICAgIG9wdGlvbnMuZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgLy8gV3JhcHBlciBmdW5jdGlvbiB0byBnZXQgYWNjZXNzIHRvIGN1cnJlbnRQYXJ0aWFsQmxvY2sgZnJvbSB0aGUgY2xvc3VyZVxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm47XG4gICAgcGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBmdW5jdGlvbiBwYXJ0aWFsQmxvY2tXcmFwcGVyKGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuXG4gICAgICAvLyBSZXN0b3JlIHRoZSBwYXJ0aWFsLWJsb2NrIGZyb20gdGhlIGNsb3N1cmUgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhlIGJsb2NrXG4gICAgICAvLyBpLmUuIHRoZSBwYXJ0IGluc2lkZSB0aGUgYmxvY2sgb2YgdGhlIHBhcnRpYWwgY2FsbC5cbiAgICAgIG9wdGlvbnMuZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGN1cnJlbnRQYXJ0aWFsQmxvY2s7XG4gICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBpZiAoZm4ucGFydGlhbHMpIHtcbiAgICAgIG9wdGlvbnMucGFydGlhbHMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucGFydGlhbHMsIGZuLnBhcnRpYWxzKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkICYmIHBhcnRpYWxCbG9jaykge1xuICAgIHBhcnRpYWwgPSBwYXJ0aWFsQmxvY2s7XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGhlIHBhcnRpYWwgJyArIG9wdGlvbnMubmFtZSArICcgY291bGQgbm90IGJlIGZvdW5kJyk7XG4gIH0gZWxzZSBpZiAocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHBhcnRpYWwoY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IHJldHVybiAnJzsgfVxuXG5mdW5jdGlvbiBpbml0RGF0YShjb250ZXh0LCBkYXRhKSB7XG4gIGlmICghZGF0YSB8fCAhKCdyb290JyBpbiBkYXRhKSkge1xuICAgIGRhdGEgPSBkYXRhID8gY3JlYXRlRnJhbWUoZGF0YSkgOiB7fTtcbiAgICBkYXRhLnJvb3QgPSBjb250ZXh0O1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKSB7XG4gIGlmIChmbi5kZWNvcmF0b3IpIHtcbiAgICBsZXQgcHJvcHMgPSB7fTtcbiAgICBwcm9nID0gZm4uZGVjb3JhdG9yKHByb2csIHByb3BzLCBjb250YWluZXIsIGRlcHRocyAmJiBkZXB0aHNbMF0sIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgIFV0aWxzLmV4dGVuZChwcm9nLCBwcm9wcyk7XG4gIH1cbiAgcmV0dXJuIHByb2c7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/safe-string.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Build out our basic SafeString type


exports.__esModule = true;
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports['default'] = SafeString;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Q0FDdEI7O0FBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBVztBQUN2RSxTQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ3pCLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoic2FmZS1zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/utils.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;
var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;

exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
/* eslint-disable func-style */
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  exports.isFunction = isFunction = function (value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
exports.isFunction = isFunction;

/* eslint-enable func-style */

/* istanbul ignore next */
var isArray = Array.isArray || function (value) {
  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFNLE1BQU0sR0FBRztBQUNiLEtBQUcsRUFBRSxPQUFPO0FBQ1osS0FBRyxFQUFFLE1BQU07QUFDWCxLQUFHLEVBQUUsTUFBTTtBQUNYLEtBQUcsRUFBRSxRQUFRO0FBQ2IsS0FBRyxFQUFFLFFBQVE7QUFDYixLQUFHLEVBQUUsUUFBUTtBQUNiLEtBQUcsRUFBRSxRQUFRO0NBQ2QsQ0FBQzs7QUFFRixJQUFNLFFBQVEsR0FBRyxZQUFZO0lBQ3ZCLFFBQVEsR0FBRyxXQUFXLENBQUM7O0FBRTdCLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUN2QixTQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNwQjs7QUFFTSxTQUFTLE1BQU0sQ0FBQyxHQUFHLG9CQUFtQjtBQUMzQyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6QyxTQUFLLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUM1QixVQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDM0QsV0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUM5QjtLQUNGO0dBQ0Y7O0FBRUQsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7O0FBS2hELElBQUksVUFBVSxHQUFHLG9CQUFTLEtBQUssRUFBRTtBQUMvQixTQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztDQUNwQyxDQUFDOzs7QUFHRixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQixVQUlNLFVBQVUsR0FKaEIsVUFBVSxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQzNCLFdBQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssbUJBQW1CLENBQUM7R0FDcEYsQ0FBQztDQUNIO1FBQ08sVUFBVSxHQUFWLFVBQVU7Ozs7O0FBSVgsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sSUFBSSxVQUFTLEtBQUssRUFBRTtBQUN0RCxTQUFPLEFBQUMsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsR0FBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGdCQUFnQixHQUFHLEtBQUssQ0FBQztDQUNqRyxDQUFDOzs7OztBQUdLLFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDcEMsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoRCxRQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDdEIsYUFBTyxDQUFDLENBQUM7S0FDVjtHQUNGO0FBQ0QsU0FBTyxDQUFDLENBQUMsQ0FBQztDQUNYOztBQUdNLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ3ZDLE1BQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFOztBQUU5QixRQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzNCLGFBQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3hCLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3pCLGFBQU8sRUFBRSxDQUFDO0tBQ1gsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2xCLGFBQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQztLQUNwQjs7Ozs7QUFLRCxVQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztHQUN0Qjs7QUFFRCxNQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUFFLFdBQU8sTUFBTSxDQUFDO0dBQUU7QUFDOUMsU0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztDQUM3Qzs7QUFFTSxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDN0IsTUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFdBQU8sSUFBSSxDQUFDO0dBQ2IsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvQyxXQUFPLElBQUksQ0FBQztHQUNiLE1BQU07QUFDTCxXQUFPLEtBQUssQ0FBQztHQUNkO0NBQ0Y7O0FBRU0sU0FBUyxXQUFXLENBQUMsTUFBTSxFQUFFO0FBQ2xDLE1BQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsT0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDdkIsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFTSxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ3ZDLFFBQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRU0sU0FBUyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO0FBQ2pELFNBQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUEsR0FBSSxFQUFFLENBQUM7Q0FDcEQiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gICAgICBwb3NzaWJsZSA9IC9bJjw+XCInYD1dLztcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcihjaHIpIHtcbiAgcmV0dXJuIGVzY2FwZVtjaHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iai8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydCB7aXNGdW5jdGlvbn07XG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcbn07XG5cbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkgeyByZXR1cm4gc3RyaW5nOyB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICBsZXQgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG4gIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/runtime.js":
/*!********************************************!*\
  !*** ./node_modules/handlebars/runtime.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = __webpack_require__(/*! ./dist/cjs/handlebars.runtime */ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js")['default'];


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.4.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code, options ) {
		DOMEval( code, { nonce: options && options.nonce } );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) &&

				// Support: IE 8 only
				// Exclude object elements
				(nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 && rdescend.test( selector ) ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = (elem.ownerDocument || elem).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( typeof elem.contentDocument !== "undefined" ) {
			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								} );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	// Support: IE 9-11 only
	// Also use offsetWidth/offsetHeight for when box sizing is unreliable
	// We use getClientRects() to check for hidden/disconnected.
	// In those cases, the computed value can be trusted to be border-box
	if ( ( !support.boxSizingReliable() && isBorderBox ||
		val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url, options ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js-exposed":
/*!****************************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js-exposed ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(/*! -!./jquery.js */ "./node_modules/jquery/dist/jquery.js");
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/font/fontello.eot":
/*!*******************************!*\
  !*** ./src/font/fontello.eot ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.eot";

/***/ }),

/***/ "./src/font/fontello.svg":
/*!*******************************!*\
  !*** ./src/font/fontello.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.svg";

/***/ }),

/***/ "./src/font/fontello.ttf":
/*!*******************************!*\
  !*** ./src/font/fontello.ttf ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.ttf";

/***/ }),

/***/ "./src/font/fontello.woff":
/*!********************************!*\
  !*** ./src/font/fontello.woff ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.woff";

/***/ }),

/***/ "./src/font/fontello.woff2":
/*!*********************************!*\
  !*** ./src/font/fontello.woff2 ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.woff2";

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

const {utils} = __webpack_require__(/*! ./utils.js */ "./src/js/utils.js");
const warframeData = __webpack_require__(/*! ./warframe-data.js */ "./src/js/warframe-data.js");
const ClockEidolon = __webpack_require__(/*! ./clock-eidolon.js */ "./src/js/clock-eidolon.js");
const ClockOrbvallis = __webpack_require__(/*! ./clock-orbvallis.js */ "./src/js/clock-orbvallis.js");

var app = {
  name: "Warframe Mastery Helper",
  version: "2.4.5",
  data: {},
  config: {
    modal: {
      animation: "pop",
      animation_speed: 0
    }
  },
  init: function () {
    app.render.spinner.show();
    utils.tryLocalStorage();
    utils.registerHandlebarHelpers();
    app.clocks.init();
    if (utils.readLocalStorage("data") == false) {
      app.tools.firstRun();
    }
    app.data = JSON.parse(JSON.stringify(warframeData));
    app.storage.getData(
      function (data) {
        // Ugly hack in order to solve backwards compability with old data-sources
        for (var i = 0; i < data.data.length; i++) {
          if (data.data[i].indexOf("MK1") == 0) {
            data.data[i] = data.data[i].replace("MK1", "Mk1");
          }
        }
        utils.writeLocalStorage("data", JSON.stringify(data.data));
        app.tools.mapFromStorage();
        app.render.page.start();
        app.render.spinner.show();
        $(document).foundation();
        app.render.spinner.hide();
        app.search.updateIndicator();
      }
    );

  },
  tools: {
    restart: function () {
      window.location.reload();
    },
    firstRun: function () {
      utils.writeLocalStorage("data", "[]");
      app.render.page.help();
    },
    mapFromStorage: function () {
      var checked = app.storage.list();
      if (checked.length) {
        for (var i = 0; i < checked.length; i++) {
          app.item.setState(checked[i], true)
        }
      }
    },
    closeModal: function () {
      $('.reveal-modal').foundation('reveal', 'close');
    },
    closeMenu: function () {
      $('.top-bar').removeClass('expanded');
    },
    statusByType: function (type) {
      var items = {
        ranked: [],
        unranked: []
      }
      var l = app.data.array.length;
      for (var k = 0; k < l; k++) {
        if (app.data.array[k]["type"] == type && app.data.array[k]["checked"] == true) {
          items.ranked.push(app.data.array[k]);
        } else if (app.data.array[k]["type"] == type && app.data.array[k]["checked"] == false) {
          items.unranked.push(app.data.array[k]);
        }
      }
      return items;
    },
    itemCountByType: function (type) {
      var l = app.data.array.length;
      var list = [];
      for (var k = 0; k < l; k++) {
        if (app.data.array[k]["type"] == type) {
          list.push(app.data.array[k]);
        }
      }
      return list.length;
    },
    checkData: function(){
      var missingWikiaUrl = [];
      var missingMasteryReq = [];
      var missingImageName = [];
      app.data.array.forEach(function(item){
        if (typeof(item.wikiaUrl) == "undefined") {
          missingWikiaUrl.push(item.name);
        }
        if (typeof(item.masteryReq) == "undefined") {
          missingMasteryReq.push(item.name);
        }
        if (typeof(item.imageName) == "undefined") {
          missingImageName.push(item.name);
        }
      });
      console.log("missingWikiaUrl", missingWikiaUrl);
      console.log("missingMasteryReq", missingMasteryReq);
      console.log("missingImageName", missingImageName);
    }
  },
  render: {
    views: {
      search: function () {
        var template = __webpack_require__(/*! ./../views/search.hbs */ "./src/views/search.hbs");
        var html = template();
        $("#search-placeholder").html(html);
      },
      filter: function () {
        var template = __webpack_require__(/*! ./../views/filter.hbs */ "./src/views/filter.hbs");
        var html = template();
        $("#filter-placeholder").html(html);
      },
      allItems: function () {
        var template = __webpack_require__(/*! ./../views/all-items.hbs */ "./src/views/all-items.hbs");
        var html = template(app.data.array);
        $("#all-items-placeholder").html(html);
      },
      status: function () {
        var checkedItems = app.storage.list().length;
        var availableItems = app.data.array.length;
        var template = __webpack_require__(/*! ./../views/status.hbs */ "./src/views/status.hbs");
        var html = template({
          "checkedItems": checkedItems,
          "availableItems": availableItems
        });
        $("#status-placeholder").html(html);
      },
      item: function (name) {
        var data = app.data.array[app.item.getIndexByName(name)];
        var template = __webpack_require__(/*! ./../views/item.hbs */ "./src/views/item.hbs");
        var html = template(data);
        $('*[data-name="' + name + '"]').replaceWith(html);
      },
      help: function () {
        var template = __webpack_require__(/*! ./../views/pages/help.hbs */ "./src/views/pages/help.hbs");
        var html = template(app.data);
        $("#help-placeholder").html(html);
      },
      stats: function () {
        var template = __webpack_require__(/*! ./../views/pages/stats.hbs */ "./src/views/pages/stats.hbs");
        var html = template(app.stats.create());
        $("#stats-placeholder").html(html);
      },
      user: function () {
        var template = __webpack_require__(/*! ./../views/pages/user.hbs */ "./src/views/pages/user.hbs");
        var html = template(user);
        $("#user-placeholder").html(html);
      },
      clock: function () {
        var template = __webpack_require__(/*! ./../views/clock-modal.hbs */ "./src/views/clock-modal.hbs");
        var html = template();
        $("#clock-placeholder").html(html);
      },
      guide: function () {
        var template = __webpack_require__(/*! ./../views/beginner-guide.hbs */ "./src/views/beginner-guide.hbs");
        var html = template(app.data);
        $("#guide-placeholder").html(html);
      }
    },
    page: {
      start: function () {
        app.render.reset();
        app.render.views.search();
        app.render.views.filter();
        app.render.views.status();
        app.render.views.allItems();
        app.render.views.clock();
        app.render.views.help();
        app.search.updateIndicator();
      },
      help: function () {
        app.render.views.help();
        $("#help-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
      },
      stats: function () {
        app.render.views.stats();
        $("#stats-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
      },
      clock: function () {
        $("#clock-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
      },
      guide: function () {
        app.render.views.guide();
        $("#guide-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
      },
      user: function () {
        app.render.views.user();
        $("#user-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
      }
    },
    reset: function () {
      $(".view-placeholder").each(function () {
        $(this).html("");
      })
    },
    spinner: {
      show: function () {
        $(".spinner-loaded").hide();
        $("#spinner").show();
      },
      hide: function () {
        $("#spinner").hide();
        $(".spinner-loaded").show();
      }
    }
  },
  storage: {
    list: function () {
      var data = JSON.parse(utils.readLocalStorage("data"));
      return data;
    },
    get: function (item) {
      //TODO rename to itemExist
      var data = app.storage.list();
      if (data.indexOf(item) !== -1) {
        return true
      } else {
        return false;
      }
    },
    add: function (item) {
      var checked = app.storage.list();
      if (checked.indexOf(item) == -1) {
        checked.push(item);
        utils.writeLocalStorage("data", JSON.stringify(checked));
      } else {
        console.log("Item already exists in storage", item);
      }
    },
    remove: function (item) {
      var data = app.storage.list();
      var index = data.indexOf(item);
      if (index !== -1) {
        data.splice(index, 1);
        utils.writeLocalStorage("data", JSON.stringify(data));
      } else {
        console.log("Item do not exist in storage", item);
      }
    },
    clear: function () {
      utils.writeLocalStorage("data", "[]");
    },
    saveData: function (callback) {
      var payload = app.storage.list();
      $.ajax({
        url: "ajax-controller.php?action=save",
        type: "POST",
        data: {
          json: JSON.stringify(payload)
        },
        dataType: "json",
        success: function (data) {
          if (typeof data["ERROR"] !="undefined"){
            app.tools.restart();            
          }
          if (typeof callback == "function") {
            callback(data);
          }
        }
      });
    },
    getData: function (callback) {
      $.ajax({
        url: "ajax-controller.php?action=get",
        type: "GET",
        dataType: "json",
        success: function (data) {
          if (typeof callback == "function") {
            callback(data);
          }
        }
      });
    }
  },
  filter: {
    activate: function (status) {
      app.search.action();
    },
    getStatus: function () {
      return $(".filter-status:checked").val();
    },
    setBodyClass: function (status) {
      if (status) {
        $("body").addClass("filter-active");
      } else {
        $("body").removeClass("filter-active");
      }
    }
  },
  search: {
    action: function () {
      var input, filter, li, name, i, category, type, acquisition;
      var filterStatus = app.filter.getStatus();
      app.filter.setBodyClass(filterStatus);
      input = document.getElementById("search");
      filter = input.value.toUpperCase();
      li = document.getElementsByClassName("item");
      for (i = 0; i < li.length; i++) {
        name = li[i].getElementsByClassName("name")[0];
        type = li[i].getElementsByClassName("type")[0];
        category = li[i].getElementsByClassName("category")[0];
        acquisition = li[i].getElementsByClassName("acquisition")[0];
        if (name.innerHTML.toUpperCase().indexOf(filter) > -1
          || category.innerHTML.toUpperCase().indexOf(filter) > -1
          || type.innerHTML.toUpperCase().indexOf(filter) > -1
          || acquisition.innerHTML.toUpperCase().indexOf(filter) > -1) {
          li[i].style.display = "";
        } else {
          li[i].style.display = "none";
        }
      }
      switch (filterStatus) {
        case "all":
          app.filter.setBodyClass(false);
          break;
        case "ranked":
          $(".item.item-unchecked").hide();
          break;
        case "unranked":
          $(".item.item-checked").hide();
          break;
      }
      app.search.updateIndicator();
    },
    updateIndicator: function () {
      var count = $(".item:visible").length;
      var string = $("#search").val();
      if (string.length) {
        $("#search-indicator").find("#search-indicator-string").html("Searching for <b>" + string + "</b>. ");
      } else {
        $("#search-indicator").find("#search-indicator-string").html("");
      }
      $("#search-indicator").find("#search-indicator-value").html(count);
      var filterStatus = app.filter.getStatus();
      if (filterStatus == "unranked" || filterStatus == "ranked") {
        $("#search-indicator").addClass("search-indicator-filtered");
        app.filter.setBodyClass(true);
      } else {
        $("#search-indicator").removeClass("search-indicator-filtered");
        app.filter.setBodyClass(false);
      }
    },
    clear: function () {
      $("#search").val("").focus();
      $(":radio[value=all]").click();
      app.search.action();
    },
    searchFor: function (string) {
      Foundation.libs.reveal.close();
      app.search.clear();
      $("#search").val(string).keyup();
    }
  },
  item: {
    getDataByName: function (name) {
      var index = utils.getIndexOf(app.data.array, "name", name);
      return app.data.array[index];
    },
    getIndexByName: function (name) {
      return utils.getIndexOf(app.data.array, "name", name);
    },
    toggleInfo: function (name) {
      var data = app.item.getDataByName(name);
      var template = __webpack_require__(/*! ./../views/item-modal.hbs */ "./src/views/item-modal.hbs");
      var html = template(data);
      $("#item-info-placeholder").html(html).foundation("reveal", "open", app.config.modal);
      app.tools.closeMenu();
    },
    check: function (name, state) {
      if (state) {
        app.storage.add(name);
      } else {
        app.storage.remove(name);
      }
      app.item.setState(name, state);
      app.storage.saveData(function () {
        app.render.views.status();
        app.render.views.item(name);
        app.search.updateIndicator();
      });
    },
    setState: function (name, state) {
      var objIndex = app.item.getIndexByName(name);
      if (objIndex !== -1 && objIndex !== false) {
        app.data.array[objIndex]["checked"] = state;
      } else {
        console.error("Can't find index for " + name);
        alert("Can't find index for " + name);
      }
    },
    checkAll: function () {
      var data = warframeData.array;
      var allItems = [];
      for (var i = 0; i < data.length; i++) {
        allItems.push(data[i]["name"]);
      }
      utils.writeLocalStorage("data", JSON.stringify(allItems));
      app.storage.saveData(
        function () {
          app.tools.restart();
        }
      );
    },
    unCheckAll: function () {
      utils.writeLocalStorage("data", JSON.stringify([]));
      app.storage.saveData(
        function () {
          app.tools.restart();
        }
      );
    }
  },
  stats: {
    create: function () {
      //var types = app.data.constants.TYPES;
      var categories = [
        {
          "label": "Warframe",
          "types": [
            "Warframe"           
          ]
        },
        {
          "label": "Primary",
          "types": [
            "Primary"           
          ]
        },
        {
          "label": "Secondary",
          "types": [
            "Secondary"           
          ]
        },
        {
          "label": "Melee",
          "types": [
            "Melee",
            "Zaw"           
          ]
        },
        {
          "label": "Robotic",
          "types": [
            "Sentinel",           
            "Sentinel Weapon"           
          ]
        },
        {
          "label": "Companions",
          "types": [
            "Companion"
          ]
        },
        {
          "label": "Vehicles",
          "types": [
            "Vehicle"            
          ]
        },
        {
          "label": "Archgun",
          "types": [
            "Archwing Gun"       
          ]
        },
        {
          "label": "Archmelee",
          "types": [
            "Archwing Melee"       
          ]
        },
        {
          "label": "Amps",
          "types": [
            "Amp"
          ]
        }
      ];
      var data = [];
      var totalItems = 0;
      var totalItemsRanked = 0;
      var totalItemsUnranked = 0;

      for (var key in categories) {
        var typeDataRanked = [];
        var typeDataUnranked = [];
        var typeDataTotal = 0;
        for (var type in categories[key]["types"]) {
          var typeStatus = app.tools.statusByType(categories[key]["types"][type]);
          for (var i=0; i < typeStatus["unranked"].length; i++) {
            typeDataUnranked.push(typeStatus["unranked"][i]);
          }
          for (var i=0; i < typeStatus["ranked"].length; i++) {
            typeDataRanked.push(typeStatus["ranked"][i]);
          }
        }
        var total = typeDataTotal + (typeDataRanked.length + typeDataUnranked.length);;
        var item = {
          "name": categories[key]["label"],
          "ranked": typeDataRanked,
          "unranked": typeDataUnranked,
          "total": total
        };
        data.push(item);
        totalItems += total;
        totalItemsRanked += typeDataRanked.length;
        totalItemsUnranked += typeDataUnranked.length;
      }
      data.totalItemsRanked = totalItemsRanked;
      data.totalItemsUnranked = totalItemsUnranked;
      data.totalItems = totalItems;
      return data;
    }
  },
  import: {
    showModal: function () {
      $("#modal-import").foundation('reveal', 'open', app.config.modal)
    },
    list: function () {
      var data = JSON.parse($('#import-data').val());
      console.log("Data to import", data);
      utils.writeLocalStorage("data", JSON.stringify(data));
      app.storage.saveData(null);
      app.tools.restart();
    }
  },
  export: {
    showModal: function () {
      var data = utils.readLocalStorage("data");
      console.log("Data to export", JSON.parse(data));
      $("#export-data-placeholder").html(data);
      $("#modal-export").foundation('reveal', 'open', app.config.modal)
    },
    csv: function () {
      var today = new Date().toISOString().slice(0, 10);
      var array = JSON.parse(utils.readLocalStorage("data"));
      var str = 'Ranked items ' + today + ': ' + array.length + '\r\n';
      for (var i = 0; i < array.length; i++) {
        str += array[i] + '\r\n';
      }
      window.open("data:text/csv;charset=utf-8," + escape(str))
    }
  },
  clocks: {
    init: function () {
      var clockEidolon = new ClockEidolon();
      var clockOrbvallis = new ClockOrbvallis();
      clockEidolon.init();
      clockOrbvallis.init();
      $("#clock-modal").bind('closed.fndtn.reveal', function () {
        clockEidolon.stop();
        clockOrbvallis.stop();
      });
      $("#clock-modal").bind('open.fndtn.reveal', function () {
        clockEidolon.start();
        clockOrbvallis.updateTime();
        clockOrbvallis.start();
      });
    }
  }
};

$(document).ready(function () {
  app.init();
});

window.app = app; //TODO delete or not?

module.exports = {
  app: app
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed")))

/***/ }),

/***/ "./src/js/clock-eidolon.js":
/*!*********************************!*\
  !*** ./src/js/clock-eidolon.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {module.exports = function () {
  var eido_timestamp = 1540015141;
  const UPDATE_INTERVAL = 1000;
  const WARNING_MESSAGE = "Warning: unable to get time. Retrying soon.";

  function defaultGetTimeCallback(t) {
    eido_timestamp = t;
  }

  function pad(s) {
    if (s.toString().length == 1) return '0' + s.toString();
    return s.toString();
  }

  function setTimeFailure(hasIssue) {
    var e = document.getElementById("warning-container");
    if (hasIssue) {
      e.innerHTML = WARNING_MESSAGE;
      setTimeout(this.getCetusTime, 30000, true, defaultGetTimeCallback);
    }
    else
      e.innerHTML = "";
  }

  this.getCetusTime = function (fetch, callback) {
    var timestamp = 1522764301;	//Static timestamp to be returned in case of an error. Correct as of 2018-04-03, for PC version 22.17.0.1. Might not be accurate in the future.
    if (!fetch) {
      callback(timestamp);
      return;
    }

    var worldStateFileUrl = "http://content.warframe.com/dynamic/worldState.php";
    var worldStateCORSUrl = "https://whatever-origin.herokuapp.com/get?callback=?&url=" + encodeURIComponent(worldStateFileUrl);

    $.ajax(
      {
        url: worldStateCORSUrl,
        dataType: "json",
        mimeType: "application/json",
        success: function (data) {
          var worldStateData;
          try {
            worldStateData = JSON.parse(data.contents); //The data is returned as a string inside a JSON response and has to be parsed.
          }
          catch (e) {
            console.warn("Could not fetch Cetus time (", e.message, "). Using static timestamp. Accuracy not guaranteed.");
            callback(timestamp);
            setTimeFailure(true);
            return;
          }
          var syndicate = worldStateData["SyndicateMissions"].find(element => (element["Tag"] == "CetusSyndicate"));
          if (syndicate == undefined) {
            setTimeFailure(true);
            callback(timestamp);
            return;
          }
          setTimeFailure(false);
          timestamp = Math.floor(syndicate["Expiry"]["$date"]["$numberLong"] / 1000);	//The activation time, converted to whole seconds
          callback(timestamp);
        },
        error: function (xhr, status, error) {
          console.warn("Cound not fetch Cetus time:", status, error, ". Using static timestamp. Accuracy not guaranteed.");
          setTimeFailure(true);
          callback(timestamp);
        }
      });
  };

  function updateTime() {
    var d = new Date();
    var time = d.getTime() / 1000;
    // This time is the end of night and start of day
    var start_time = (eido_timestamp - 150 * 60)
    var irltime_m = ((time - start_time) / 60) % 150;  // 100m of day + 50m of night

    var eidotime_in_h = (irltime_m / 6.25) + 6;
    if (eidotime_in_h < 0) eidotime_in_h += 24;
    if (eidotime_in_h > 24) eidotime_in_h -= 24;
    var eidotime_h = Math.floor(eidotime_in_h);
    var eidotime_m = Math.floor((eidotime_in_h * 60) % 60);
    var eidotime_s = Math.floor((eidotime_in_h * 60 * 60) % 60);

    var wrapped_time = eidotime_in_h - 5;
    if (wrapped_time < 0) wrapped_time += 24;
    //var slider_percent = wrapped_time / 24 * 90 + 5
    //$('.slider').css('top', slider_percent + '%');

    var next_interval;

    // Night is from 9pm to 5am
    // Day is from 5am to 9pm
    if (150 - irltime_m > 50) {
      $('#eidolon-clock').addClass('time-is-day').removeClass('time-is-night');
      $('#eidolon-clock .day').addClass('night').removeClass('day');
      $('#eidolon-clock .night').text('night');
      next_interval = 21;
    } else {
      $('#eidolon-clock').addClass('time-is-night').removeClass('time-is-day');
      $('#eidolon-clock .night').addClass('day').removeClass('night');
      $('#eidolon-clock .day').text('day');
      next_interval = 5;
    }

    var eido_until_h = next_interval - (eidotime_h % 24);
    if (eido_until_h < 0) eido_until_h += 24
    var irl_until_in_m = 150 - irltime_m;
    if (irl_until_in_m > 50) irl_until_in_m -= 50

    var irl_until_h = Math.floor(irl_until_in_m / 60);
    var irl_until_m = Math.floor(irl_until_in_m % 60);
    var irl_until_s = Math.floor((irl_until_in_m * 60) % 60);

    $('.time>.big-hour').text(pad(irl_until_h));
    $('.time>.big-minute').text(pad(irl_until_m));
    $('.time>.big-second').text(pad(irl_until_s));
  }

  this.init = function () {
    this.getCetusTime(1, defaultGetTimeCallback);
  };

  this.start = function () {
    updateTime();
    this.interval = setInterval(updateTime, UPDATE_INTERVAL);
  };

  this.stop = function () {
    clearInterval(this.interval);
  };
};

//module.exports = {
//  Clock: Clock
//};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed")))

/***/ }),

/***/ "./src/js/clock-orbvallis.js":
/*!***********************************!*\
  !*** ./src/js/clock-orbvallis.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {module.exports = function () {

    function convertMilliseconds(millis) {
        var minutes = Math.floor(millis / 60000);
        var seconds = ((millis % 60000) / 1000).toFixed(0);
        return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
    }

    this.updateTime = function () {
        var nextState;
        var nextPeriod;
        var tStart = 1542132024000;
        var cycleLength = 1600000;
        var warmLength = 400000;
        var currentTime = (Date.now() - tStart) % cycleLength;
        if (currentTime < warmLength) {
            nextPeriod = warmLength - currentTime;
            nextState = "cold";
            $('#orbvallis-clock').addClass('weather-is-warm').removeClass('weather-is-cold');
        } else {
            nextPeriod = cycleLength - currentTime;
            nextState = "warm";
            $('#orbvallis-clock').addClass('weather-is-cold').removeClass('weather-is-warm');
        }
        $('#orbvallis-clock .next-period').text(nextState);
        $('.weather>.big-minute').text(convertMilliseconds(nextPeriod));
    }
    this.init = function () {
        this.updateTime();
    };

    this.start = function () {
        this.interval = setInterval(this.updateTime, 1000);
    };

    this.stop = function () {
        clearInterval(this.interval);
    };
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed")))

/***/ }),

/***/ "./src/js/config.js":
/*!**************************!*\
  !*** ./src/js/config.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  localstorage: {
    domain: "warframe-mastery-helper."
  }
};


/***/ }),

/***/ "./src/js/utils.js":
/*!*************************!*\
  !*** ./src/js/utils.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const config = __webpack_require__(/*! ./config.js */ "./src/js/config.js");
const Handlebars = __webpack_require__(/*! handlebars/runtime */ "./node_modules/handlebars/runtime.js");

var utils = {

  isInArray: function (arr, obj) {
    return (arr.indexOf(obj) != -1);
  },

  getIndexOf: function (array, key, value) {
    var l = array.length;
    for (var k = 0; k < l; k++) {
      if (array[k][key] == value) {
        return k;
      }
    }
    return false;
  },

  scrubName: function (string) {
    var temp = string.replace(/[^a-zA-Z]+/g, '');
    return temp.replace(/\s/g, '');
  },

  formatNumber: function(num) {
    return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1.")
  },

  sortNumber: function(a, b) {
    return b - a;
  },

  //
  //  Localstorage
  //
  supportsLocalStorage: function () {
    try {
      return 'localStorage' in window && window['localStorage'] !== null;
    } catch (e) {
      return false;
    }
  },

  privateModeEnabled: function () {
    try {
      localStorage.setItem(config["localstorage"]["domain"] + "localstorage.test", "data");
    } catch (e) {
      if (/QUOTA_?EXCEEDED/i.test(e.name)) {
        return false;
      }
    }
    localStorage.removeItem(config["localstorage"]["domain"] + "localstorage.test");
    return true;
  },

  tryLocalStorage: function () {
    if (!utils.supportsLocalStorage()) {
      window.localStorageEnabled = false;
      return false;
    } else if (!utils.privateModeEnabled()) {
      window.localStorageEnabled = false;
      return false;
    } else {
      window.localStorageEnabled = true;
      return true;
    }
  },

  LocalStorage: function () {
    if (window.localStorageEnabled) {
      return true;
    } else {
      return false;
    }
  },

  writeLocalStorage: function (key, value) {
    if (utils.LocalStorage()) {
      localStorage[config["localstorage"]["domain"] + key] = JSON.stringify(value);
    }
  },

  readLocalStorage: function (key) {
    if (utils.LocalStorage()) {
      if (localStorage[config["localstorage"]["domain"] + key]) {
        var data = JSON.parse(localStorage[config["localstorage"]["domain"] + key]);
        return data;
      } else {
        return false;
      }
    }
  },

  //
  //  Handlebars
  //
  registerHandlebarHelpers: function () {
    Handlebars.registerHelper('config', function (obj) {
      var str = arguments[0];
      if (str.indexOf(".") !== -1) {
        var strPart = str.split(".");
        return J.config[strPart[0]][strPart[1]];
      } else {
        return J.config[str];
      }
    });
    Handlebars.registerHelper('escape', function(variable) {
      if (typeof(variable) != "undefined"){
        return variable.replace(/(['"])/g, '\\$1');
      }
    });
    Handlebars.registerHelper('unescape', function (obj) {
      var doc = new DOMParser().parseFromString(arguments[0], "text/html");
      return doc.documentElement.textContent;
    });
    Handlebars.registerHelper("ifValue", function (conditional, options) {
      if (conditional == options.hash.equals) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    });
    Handlebars.registerHelper("replace", function (str, a, b) {
      // Example: {{{replace ImageUrl.Url "small" "medium"}}}
      if (str && typeof str === 'string') {
        if (!a || typeof a !== 'string') return str;
        if (!b || typeof b !== 'string') b = '';
        return str.split(a).join(b);
      }
    });
    Handlebars.registerHelper('ifCond', function (v1, operator, v2, options) {
      switch (operator) {
        case '==':
          return (v1 == v2) ? options.fn(this) : options.inverse(this);
        case '===':
          return (v1 === v2) ? options.fn(this) : options.inverse(this);
        case '!=':
          return (v1 != v2) ? options.fn(this) : options.inverse(this);
        case '!==':
          return (v1 !== v2) ? options.fn(this) : options.inverse(this);
        case '<':
          return (v1 < v2) ? options.fn(this) : options.inverse(this);
        case '<=':
          return (v1 <= v2) ? options.fn(this) : options.inverse(this);
        case '>':
          return (v1 > v2) ? options.fn(this) : options.inverse(this);
        case '>=':
          return (v1 >= v2) ? options.fn(this) : options.inverse(this);
        case '&&':
          return (v1 && v2) ? options.fn(this) : options.inverse(this);
        case '||':
          return (v1 || v2) ? options.fn(this) : options.inverse(this);
        default:
          return options.inverse(this);
      }
    });
  }

};

module.exports = {
  utils: utils
};


/***/ }),

/***/ "./src/js/vendor/foundation.js":
/*!*************************************!*\
  !*** ./src/js/vendor/foundation.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*
 * Foundation Responsive Library
 * http://foundation.zurb.com
 * Copyright 2015, ZURB
 * Free to use under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
*/

(function ($, window, document, undefined) {
  'use strict';

  var header_helpers = function (class_array) {
    var head = $('head');
    head.prepend($.map(class_array, function (class_name) {
      if (head.has('.' + class_name).length === 0) {
        return '<meta class="' + class_name + '" />';
      }
    }));
  };

  header_helpers([
    'foundation-mq-small',
    'foundation-mq-small-only',
    'foundation-mq-medium',
    'foundation-mq-medium-only',
    'foundation-mq-large',
    'foundation-mq-large-only',
    'foundation-mq-xlarge',
    'foundation-mq-xlarge-only',
    'foundation-mq-xxlarge',
    'foundation-data-attribute-namespace']);

  // Enable FastClick if present

  $(function () {
    if (typeof FastClick !== 'undefined') {
      // Don't attach to body if undefined
      if (typeof document.body !== 'undefined') {
        FastClick.attach(document.body);
      }
    }
  });

  // private Fast Selector wrapper,
  // returns jQuery object. Only use where
  // getElementById is not available.
  var S = function (selector, context) {
    if (typeof selector === 'string') {
      if (context) {
        var cont;
        if (context.jquery) {
          cont = context[0];
          if (!cont) {
            return context;
          }
        } else {
          cont = context;
        }
        return $(cont.querySelectorAll(selector));
      }

      return $(document.querySelectorAll(selector));
    }

    return $(selector, context);
  };

  // Namespace functions.

  var attr_name = function (init) {
    var arr = [];
    if (!init) {
      arr.push('data');
    }
    if (this.namespace.length > 0) {
      arr.push(this.namespace);
    }
    arr.push(this.name);

    return arr.join('-');
  };

  var add_namespace = function (str) {
    var parts = str.split('-'),
        i = parts.length,
        arr = [];

    while (i--) {
      if (i !== 0) {
        arr.push(parts[i]);
      } else {
        if (this.namespace.length > 0) {
          arr.push(this.namespace, parts[i]);
        } else {
          arr.push(parts[i]);
        }
      }
    }

    return arr.reverse().join('-');
  };

  // Event binding and data-options updating.

  var bindings = function (method, options) {
    var self = this,
        bind = function(){
          var $this = S(this),
              should_bind_events = !$this.data(self.attr_name(true) + '-init');
          $this.data(self.attr_name(true) + '-init', $.extend({}, self.settings, (options || method), self.data_options($this)));

          if (should_bind_events) {
            self.events(this);
          }
        };

    if (S(this.scope).is('[' + this.attr_name() +']')) {
      bind.call(this.scope);
    } else {
      S('[' + this.attr_name() +']', this.scope).each(bind);
    }
    // # Patch to fix #5043 to move this *after* the if/else clause in order for Backbone and similar frameworks to have improved control over event binding and data-options updating.
    if (typeof method === 'string') {
      return this[method].call(this, options);
    }

  };

  var single_image_loaded = function (image, callback) {
    function loaded () {
      callback(image[0]);
    }

    function bindLoad () {
      this.one('load', loaded);

      if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
        var src = this.attr( 'src' ),
            param = src.match( /\?/ ) ? '&' : '?';

        param += 'random=' + (new Date()).getTime();
        this.attr('src', src + param);
      }
    }

    if (!image.attr('src')) {
      loaded();
      return;
    }

    if (image[0].complete || image[0].readyState === 4) {
      loaded();
    } else {
      bindLoad.call(image);
    }
  };

  /*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */

  window.matchMedia || (window.matchMedia = function() {
      "use strict";

      // For browsers that support matchMedium api such as IE 9 and webkit
      var styleMedia = (window.styleMedia || window.media);

      // For those that don't support matchMedium
      if (!styleMedia) {
          var style       = document.createElement('style'),
              script      = document.getElementsByTagName('script')[0],
              info        = null;

          style.type  = 'text/css';
          style.id    = 'matchmediajs-test';

          script.parentNode.insertBefore(style, script);

          // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
          info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;

          styleMedia = {
              matchMedium: function(media) {
                  var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

                  // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
                  if (style.styleSheet) {
                      style.styleSheet.cssText = text;
                  } else {
                      style.textContent = text;
                  }

                  // Test if media query is true or false
                  return info.width === '1px';
              }
          };
      }

      return function(media) {
          return {
              matches: styleMedia.matchMedium(media || 'all'),
              media: media || 'all'
          };
      };
  }());

  /*
   * jquery.requestAnimationFrame
   * https://github.com/gnarf37/jquery-requestAnimationFrame
   * Requires jQuery 1.8+
   *
   * Copyright (c) 2012 Corey Frang
   * Licensed under the MIT license.
   */

  (function(jQuery) {


  // requestAnimationFrame polyfill adapted from Erik Möller
  // fixes from Paul Irish and Tino Zijdel
  // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
  // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

  var animating,
      lastTime = 0,
      vendors = ['webkit', 'moz'],
      requestAnimationFrame = window.requestAnimationFrame,
      cancelAnimationFrame = window.cancelAnimationFrame,
      jqueryFxAvailable = 'undefined' !== typeof jQuery.fx;

  for (; lastTime < vendors.length && !requestAnimationFrame; lastTime++) {
    requestAnimationFrame = window[ vendors[lastTime] + 'RequestAnimationFrame' ];
    cancelAnimationFrame = cancelAnimationFrame ||
      window[ vendors[lastTime] + 'CancelAnimationFrame' ] ||
      window[ vendors[lastTime] + 'CancelRequestAnimationFrame' ];
  }

  function raf() {
    if (animating) {
      requestAnimationFrame(raf);

      if (jqueryFxAvailable) {
        jQuery.fx.tick();
      }
    }
  }

  if (requestAnimationFrame) {
    // use rAF
    window.requestAnimationFrame = requestAnimationFrame;
    window.cancelAnimationFrame = cancelAnimationFrame;

    if (jqueryFxAvailable) {
      jQuery.fx.timer = function (timer) {
        if (timer() && jQuery.timers.push(timer) && !animating) {
          animating = true;
          raf();
        }
      };

      jQuery.fx.stop = function () {
        animating = false;
      };
    }
  } else {
    // polyfill
    window.requestAnimationFrame = function (callback) {
      var currTime = new Date().getTime(),
        timeToCall = Math.max(0, 16 - (currTime - lastTime)),
        id = window.setTimeout(function () {
          callback(currTime + timeToCall);
        }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };

    window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };

  }

  }( $ ));

  function removeQuotes (string) {
    if (typeof string === 'string' || string instanceof String) {
      string = string.replace(/^['\\/"]+|(;\s?})+|['\\/"]+$/g, '');
    }

    return string;
  }

  function MediaQuery(selector) {
    this.selector = selector;
    this.query = '';
  }

  MediaQuery.prototype.toString = function () {
    return this.query || (this.query = S(this.selector).css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''));
  };

  window.Foundation = {
    name : 'Foundation',

    version : '5.5.3',

    media_queries : {
      'small'       : new MediaQuery('.foundation-mq-small'),
      'small-only'  : new MediaQuery('.foundation-mq-small-only'),
      'medium'      : new MediaQuery('.foundation-mq-medium'),
      'medium-only' : new MediaQuery('.foundation-mq-medium-only'),
      'large'       : new MediaQuery('.foundation-mq-large'),
      'large-only'  : new MediaQuery('.foundation-mq-large-only'),
      'xlarge'      : new MediaQuery('.foundation-mq-xlarge'),
      'xlarge-only' : new MediaQuery('.foundation-mq-xlarge-only'),
      'xxlarge'     : new MediaQuery('.foundation-mq-xxlarge')
    },

    stylesheet : $('<style></style>').appendTo('head')[0].sheet,

    global : {
      namespace : undefined
    },

    init : function (scope, libraries, method, options, response) {
      var args = [scope, method, options, response],
          responses = [];

      // check RTL
      this.rtl = /rtl/i.test(S('html').attr('dir'));

      // set foundation global scope
      this.scope = scope || this.scope;

      this.set_namespace();

      if (libraries && typeof libraries === 'string' && !/reflow/i.test(libraries)) {
        if (this.libs.hasOwnProperty(libraries)) {
          responses.push(this.init_lib(libraries, args));
        }
      } else {
        for (var lib in this.libs) {
          responses.push(this.init_lib(lib, libraries));
        }
      }

      S(window).on("load", function () {
        S(window)
          .trigger('resize.fndtn.clearing')
          .trigger('resize.fndtn.dropdown')
          .trigger('resize.fndtn.equalizer')
          .trigger('resize.fndtn.interchange')
          .trigger('resize.fndtn.joyride')
          .trigger('resize.fndtn.magellan')
          .trigger('resize.fndtn.topbar')
          .trigger('resize.fndtn.slider');
      });

      return scope;
    },

    init_lib : function (lib, args) {
      if (this.libs.hasOwnProperty(lib)) {
        this.patch(this.libs[lib]);

        if (args && args.hasOwnProperty(lib)) {
            if (typeof this.libs[lib].settings !== 'undefined') {
              $.extend(true, this.libs[lib].settings, args[lib]);
            } else if (typeof this.libs[lib].defaults !== 'undefined') {
              $.extend(true, this.libs[lib].defaults, args[lib]);
            }
          return this.libs[lib].init.apply(this.libs[lib], [this.scope, args[lib]]);
        }

        args = args instanceof Array ? args : new Array(args);
        return this.libs[lib].init.apply(this.libs[lib], args);
      }

      return function () {};
    },

    patch : function (lib) {
      lib.scope = this.scope;
      lib.namespace = this.global.namespace;
      lib.rtl = this.rtl;
      lib['data_options'] = this.utils.data_options;
      lib['attr_name'] = attr_name;
      lib['add_namespace'] = add_namespace;
      lib['bindings'] = bindings;
      lib['S'] = this.utils.S;
    },

    inherit : function (scope, methods) {
      var methods_arr = methods.split(' '),
          i = methods_arr.length;

      while (i--) {
        if (this.utils.hasOwnProperty(methods_arr[i])) {
          scope[methods_arr[i]] = this.utils[methods_arr[i]];
        }
      }
    },

    set_namespace : function () {

      // Description:
      //    Don't bother reading the namespace out of the meta tag
      //    if the namespace has been set globally in javascript
      //
      // Example:
      //    Foundation.global.namespace = 'my-namespace';
      // or make it an empty string:
      //    Foundation.global.namespace = '';
      //
      //

      // If the namespace has not been set (is undefined), try to read it out of the meta element.
      // Otherwise use the globally defined namespace, even if it's empty ('')
      var namespace = ( this.global.namespace === undefined ) ? $('.foundation-data-attribute-namespace').css('font-family') : this.global.namespace;

      // Finally, if the namsepace is either undefined or false, set it to an empty string.
      // Otherwise use the namespace value.
      this.global.namespace = ( namespace === undefined || /false/i.test(namespace) ) ? '' : namespace;
    },

    libs : {},

    // methods that can be inherited in libraries
    utils : {

      // Description:
      //    Fast Selector wrapper returns jQuery object. Only use where getElementById
      //    is not available.
      //
      // Arguments:
      //    Selector (String): CSS selector describing the element(s) to be
      //    returned as a jQuery object.
      //
      //    Scope (String): CSS selector describing the area to be searched. Default
      //    is document.
      //
      // Returns:
      //    Element (jQuery Object): jQuery object containing elements matching the
      //    selector within the scope.
      S : S,

      // Description:
      //    Executes a function a max of once every n milliseconds
      //
      // Arguments:
      //    Func (Function): Function to be throttled.
      //
      //    Delay (Integer): Function execution threshold in milliseconds.
      //
      // Returns:
      //    Lazy_function (Function): Function with throttling applied.
      throttle : function (func, delay) {
        var timer = null;

        return function () {
          var context = this, args = arguments;

          if (timer == null) {
            timer = setTimeout(function () {
              func.apply(context, args);
              timer = null;
            }, delay);
          }
        };
      },

      // Description:
      //    Executes a function when it stops being invoked for n seconds
      //    Modified version of _.debounce() http://underscorejs.org
      //
      // Arguments:
      //    Func (Function): Function to be debounced.
      //
      //    Delay (Integer): Function execution threshold in milliseconds.
      //
      //    Immediate (Bool): Whether the function should be called at the beginning
      //    of the delay instead of the end. Default is false.
      //
      // Returns:
      //    Lazy_function (Function): Function with debouncing applied.
      debounce : function (func, delay, immediate) {
        var timeout, result;
        return function () {
          var context = this, args = arguments;
          var later = function () {
            timeout = null;
            if (!immediate) {
              result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, delay);
          if (callNow) {
            result = func.apply(context, args);
          }
          return result;
        };
      },

      // Description:
      //    Parses data-options attribute
      //
      // Arguments:
      //    El (jQuery Object): Element to be parsed.
      //
      // Returns:
      //    Options (Javascript Object): Contents of the element's data-options
      //    attribute.
      data_options : function (el, data_attr_name) {
        data_attr_name = data_attr_name || 'options';
        var opts = {}, ii, p, opts_arr,
            data_options = function (el) {
              var namespace = Foundation.global.namespace;

              if (namespace.length > 0) {
                return el.data(namespace + '-' + data_attr_name);
              }

              return el.data(data_attr_name);
            };

        var cached_options = data_options(el);

        if (typeof cached_options === 'object') {
          return cached_options;
        }

        opts_arr = (cached_options || ':').split(';');
        ii = opts_arr.length;

        function isNumber (o) {
          return !isNaN (o - 0) && o !== null && o !== '' && o !== false && o !== true;
        }

        function trim (str) {
          if (typeof str === 'string') {
            return $.trim(str);
          }
          return str;
        }

        while (ii--) {
          p = opts_arr[ii].split(':');
          p = [p[0], p.slice(1).join(':')];

          if (/true/i.test(p[1])) {
            p[1] = true;
          }
          if (/false/i.test(p[1])) {
            p[1] = false;
          }
          if (isNumber(p[1])) {
            if (p[1].indexOf('.') === -1) {
              p[1] = parseInt(p[1], 10);
            } else {
              p[1] = parseFloat(p[1]);
            }
          }

          if (p.length === 2 && p[0].length > 0) {
            opts[trim(p[0])] = trim(p[1]);
          }
        }

        return opts;
      },

      // Description:
      //    Adds JS-recognizable media queries
      //
      // Arguments:
      //    Media (String): Key string for the media query to be stored as in
      //    Foundation.media_queries
      //
      //    Class (String): Class name for the generated <meta> tag
      register_media : function (media, media_class) {
        if (Foundation.media_queries[media] === undefined) {
          $('head').append('<meta class="' + media_class + '"/>');
          Foundation.media_queries[media] = removeQuotes($('.' + media_class).css('font-family'));
        }
      },

      // Description:
      //    Add custom CSS within a JS-defined media query
      //
      // Arguments:
      //    Rule (String): CSS rule to be appended to the document.
      //
      //    Media (String): Optional media query string for the CSS rule to be
      //    nested under.
      add_custom_rule : function (rule, media) {
        if (media === undefined && Foundation.stylesheet) {
          Foundation.stylesheet.insertRule(rule, Foundation.stylesheet.cssRules.length);
        } else {
          var query = Foundation.media_queries[media];

          if (query !== undefined) {
            Foundation.stylesheet.insertRule('@media ' +
              Foundation.media_queries[media] + '{ ' + rule + ' }', Foundation.stylesheet.cssRules.length);
          }
        }
      },

      // Description:
      //    Performs a callback function when an image is fully loaded
      //
      // Arguments:
      //    Image (jQuery Object): Image(s) to check if loaded.
      //
      //    Callback (Function): Function to execute when image is fully loaded.
      image_loaded : function (images, callback) {
        var self = this,
            unloaded = images.length;

        function pictures_has_height(images) {
          var pictures_number = images.length;

          for (var i = pictures_number - 1; i >= 0; i--) {
            if(images.attr('height') === undefined) {
              return false;
            };
          };

          return true;
        }

        if (unloaded === 0 || pictures_has_height(images)) {
          callback(images);
        }

        images.each(function () {
          single_image_loaded(self.S(this), function () {
            unloaded -= 1;
            if (unloaded === 0) {
              callback(images);
            }
          });
        });
      },

      // Description:
      //    Returns a random, alphanumeric string
      //
      // Arguments:
      //    Length (Integer): Length of string to be generated. Defaults to random
      //    integer.
      //
      // Returns:
      //    Rand (String): Pseudo-random, alphanumeric string.
      random_str : function () {
        if (!this.fidx) {
          this.fidx = 0;
        }
        this.prefix = this.prefix || [(this.name || 'F'), (+new Date).toString(36)].join('-');

        return this.prefix + (this.fidx++).toString(36);
      },

      // Description:
      //    Helper for window.matchMedia
      //
      // Arguments:
      //    mq (String): Media query
      //
      // Returns:
      //    (Boolean): Whether the media query passes or not
      match : function (mq) {
        return window.matchMedia(mq).matches;
      },

      // Description:
      //    Helpers for checking Foundation default media queries with JS
      //
      // Returns:
      //    (Boolean): Whether the media query passes or not

      is_small_up : function () {
        return this.match(Foundation.media_queries.small);
      },

      is_medium_up : function () {
        return this.match(Foundation.media_queries.medium);
      },

      is_large_up : function () {
        return this.match(Foundation.media_queries.large);
      },

      is_xlarge_up : function () {
        return this.match(Foundation.media_queries.xlarge);
      },

      is_xxlarge_up : function () {
        return this.match(Foundation.media_queries.xxlarge);
      },

      is_small_only : function () {
        return !this.is_medium_up() && !this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_medium_only : function () {
        return this.is_medium_up() && !this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_large_only : function () {
        return this.is_medium_up() && this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_xlarge_only : function () {
        return this.is_medium_up() && this.is_large_up() && this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_xxlarge_only : function () {
        return this.is_medium_up() && this.is_large_up() && this.is_xlarge_up() && this.is_xxlarge_up();
      }
    }
  };

  $.fn.foundation = function () {
    var args = Array.prototype.slice.call(arguments, 0);

    return this.each(function () {
      Foundation.init.apply(Foundation, [this].concat(args));
      return this;
    });
  };

}(jQuery, window, window.document));

;(function ($, window, document, undefined) {
  'use strict';

  var openModals = [];

  Foundation.libs.reveal = {
    name : 'reveal',

    version : '5.5.3',

    locked : false,

    settings : {
      animation : 'fadeAndPop',
      animation_speed : 250,
      close_on_background_click : true,
      close_on_esc : true,
      dismiss_modal_class : 'close-reveal-modal',
      multiple_opened : false,
      bg_class : 'reveal-modal-bg',
      root_element : 'body',
      open : function(){},
      opened : function(){},
      close : function(){},
      closed : function(){},
      on_ajax_error: $.noop,
      bg : $('.reveal-modal-bg'),
      css : {
        open : {
          'opacity' : 0,
          'visibility' : 'visible',
          'display' : 'block'
        },
        close : {
          'opacity' : 1,
          'visibility' : 'hidden',
          'display' : 'none'
        }
      }
    },

    init : function (scope, method, options) {
      $.extend(true, this.settings, method, options);
      this.bindings(method, options);
    },

    events : function (scope) {
      var self = this,
          S = self.S;

      S(this.scope)
        .off('.reveal')
        .on('click.fndtn.reveal', '[' + this.add_namespace('data-reveal-id') + ']:not([disabled])', function (e) {
          e.preventDefault();

          if (!self.locked) {
            var element = S(this),
                ajax = element.data(self.data_attr('reveal-ajax')),
                replaceContentSel = element.data(self.data_attr('reveal-replace-content'));

            self.locked = true;

            if (typeof ajax === 'undefined') {
              self.open.call(self, element);
            } else {
              var url = ajax === true ? element.attr('href') : ajax;
              self.open.call(self, element, {url : url}, { replaceContentSel : replaceContentSel });
            }
          }
        });

      S(document)
        .on('click.fndtn.reveal', this.close_targets(), function (e) {
          e.preventDefault();
          if (!self.locked) {
            var settings = S('[' + self.attr_name() + '].open').data(self.attr_name(true) + '-init') || self.settings,
                bg_clicked = S(e.target)[0] === S('.' + settings.bg_class)[0];

            if (bg_clicked) {
              if (settings.close_on_background_click) {
                e.stopPropagation();
              } else {
                return;
              }
            }

            self.locked = true;
            self.close.call(self, bg_clicked ? S('[' + self.attr_name() + '].open:not(.toback)') : S(this).closest('[' + self.attr_name() + ']'));
          }
        });

      if (S('[' + self.attr_name() + ']', this.scope).length > 0) {
        S(this.scope)
          // .off('.reveal')
          .on('open.fndtn.reveal', this.settings.open)
          .on('opened.fndtn.reveal', this.settings.opened)
          .on('opened.fndtn.reveal', this.open_video)
          .on('close.fndtn.reveal', this.settings.close)
          .on('closed.fndtn.reveal', this.settings.closed)
          .on('closed.fndtn.reveal', this.close_video);
      } else {
        S(this.scope)
          // .off('.reveal')
          .on('open.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.open)
          .on('opened.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.opened)
          .on('opened.fndtn.reveal', '[' + self.attr_name() + ']', this.open_video)
          .on('close.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.close)
          .on('closed.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.closed)
          .on('closed.fndtn.reveal', '[' + self.attr_name() + ']', this.close_video);
      }

      return true;
    },

    // PATCH #3: turning on key up capture only when a reveal window is open
    key_up_on : function (scope) {
      var self = this;

      // PATCH #1: fixing multiple keyup event trigger from single key press
      self.S('body').off('keyup.fndtn.reveal').on('keyup.fndtn.reveal', function ( event ) {
        var open_modal = self.S('[' + self.attr_name() + '].open'),
            settings = open_modal.data(self.attr_name(true) + '-init') || self.settings ;
        // PATCH #2: making sure that the close event can be called only while unlocked,
        //           so that multiple keyup.fndtn.reveal events don't prevent clean closing of the reveal window.
        if ( settings && event.which === 27  && settings.close_on_esc && !self.locked) { // 27 is the keycode for the Escape key
          self.close.call(self, open_modal);
        }
      });

      return true;
    },

    // PATCH #3: turning on key up capture only when a reveal window is open
    key_up_off : function (scope) {
      this.S('body').off('keyup.fndtn.reveal');
      return true;
    },

    open : function (target, ajax_settings) {
      var self = this,
          modal;

      if (target) {
        if (typeof target.selector !== 'undefined') {
          // Find the named node; only use the first one found, since the rest of the code assumes there's only one node
          modal = self.S('#' + target.data(self.data_attr('reveal-id'))).first();
        } else {
          modal = self.S(this.scope);

          ajax_settings = target;
        }
      } else {
        modal = self.S(this.scope);
      }

      var settings = modal.data(self.attr_name(true) + '-init');
      settings = settings || this.settings;


      if (modal.hasClass('open') && target !== undefined && target.attr('data-reveal-id') == modal.attr('id')) {
        return self.close(modal);
      }

      if (!modal.hasClass('open')) {
        var open_modal = self.S('[' + self.attr_name() + '].open');

        if (typeof modal.data('css-top') === 'undefined') {
          modal.data('css-top', parseInt(modal.css('top'), 10))
            .data('offset', this.cache_offset(modal));
        }

        modal.attr('tabindex','0').attr('aria-hidden','false');

        this.key_up_on(modal);    // PATCH #3: turning on key up capture only when a reveal window is open

        // Prevent namespace event from triggering twice
        modal.on('open.fndtn.reveal', function(e) {
          if (e.namespace !== 'fndtn.reveal') return;
        });

        modal.on('open.fndtn.reveal').trigger('open.fndtn.reveal');

        if (open_modal.length < 1) {
          this.toggle_bg(modal, true);
        }

        if (typeof ajax_settings === 'string') {
          ajax_settings = {
            url : ajax_settings
          };
        }

        var openModal = function() {
          if(open_modal.length > 0) {
            if(settings.multiple_opened) {
              self.to_back(open_modal);
            } else {
              self.hide(open_modal, settings.css.close);
            }
          }

          // bl: add the open_modal that isn't already in the background to the openModals array
          if(settings.multiple_opened) {
            openModals.push(modal);
          }

          self.show(modal, settings.css.open);
        };

        if (typeof ajax_settings === 'undefined' || !ajax_settings.url) {
          openModal();
        } else {
          var old_success = typeof ajax_settings.success !== 'undefined' ? ajax_settings.success : null;
          $.extend(ajax_settings, {
            success : function (data, textStatus, jqXHR) {
              if ( $.isFunction(old_success) ) {
                var result = old_success(data, textStatus, jqXHR);
                if (typeof result == 'string') {
                  data = result;
                }
              }

              if (typeof options !== 'undefined' && typeof options.replaceContentSel !== 'undefined') {
                modal.find(options.replaceContentSel).html(data);
              } else {
                modal.html(data);
              }

              self.S(modal).foundation('section', 'reflow');
              self.S(modal).children().foundation();

              openModal();
            }
          });

          // check for if user initalized with error callback
          if (settings.on_ajax_error !== $.noop) {
            $.extend(ajax_settings, {
              error : settings.on_ajax_error
            });
          }

          $.ajax(ajax_settings);
        }
      }
      self.S(window).trigger('resize');
    },

    close : function (modal) {
      var modal = modal && modal.length ? modal : this.S(this.scope),
          open_modals = this.S('[' + this.attr_name() + '].open'),
          settings = modal.data(this.attr_name(true) + '-init') || this.settings,
          self = this;

      if (open_modals.length > 0) {

        modal.removeAttr('tabindex','0').attr('aria-hidden','true');

        this.locked = true;
        this.key_up_off(modal);   // PATCH #3: turning on key up capture only when a reveal window is open

        modal.trigger('close.fndtn.reveal');

        if ((settings.multiple_opened && open_modals.length === 1) || !settings.multiple_opened || modal.length > 1) {
          self.toggle_bg(modal, false);
          self.to_front(modal);
        }

        if (settings.multiple_opened) {
          var isCurrent = modal.is(':not(.toback)');
          self.hide(modal, settings.css.close, settings);
          if(isCurrent) {
            // remove the last modal since it is now closed
            openModals.pop();
          } else {
            // if this isn't the current modal, then find it in the array and remove it
            openModals = $.grep(openModals, function(elt) {
              var isThis = elt[0]===modal[0];
              if(isThis) {
                // since it's not currently in the front, put it in the front now that it is hidden
                // so that if it's re-opened, it won't be .toback
                self.to_front(modal);
              }
              return !isThis;
            });
          }
          // finally, show the next modal in the stack, if there is one
          if(openModals.length>0) {
            self.to_front(openModals[openModals.length - 1]);
          }
        } else {
          self.hide(open_modals, settings.css.close, settings);
        }
      }
    },

    close_targets : function () {
      var base = '.' + this.settings.dismiss_modal_class;

      if (this.settings.close_on_background_click) {
        return base + ', .' + this.settings.bg_class;
      }

      return base;
    },

    toggle_bg : function (modal, state) {
      if (this.S('.' + this.settings.bg_class).length === 0) {
        this.settings.bg = $('<div />', {'class': this.settings.bg_class})
          .appendTo('body').hide();
      }

      var visible = this.settings.bg.filter(':visible').length > 0;
      if ( state != visible ) {
        if ( state == undefined ? visible : !state ) {
          this.hide(this.settings.bg);
        } else {
          this.show(this.settings.bg);
        }
      }
    },

    show : function (el, css) {
      // is modal
      if (css) {
        var settings = el.data(this.attr_name(true) + '-init') || this.settings,
            root_element = settings.root_element,
            context = this;

        if (el.parent(root_element).length === 0) {
          var placeholder = el.wrap('<div style="display: none;" />').parent();

          el.on('closed.fndtn.reveal.wrapped', function () {
            el.detach().appendTo(placeholder);
            el.unwrap().unbind('closed.fndtn.reveal.wrapped');
          });

          el.detach().appendTo(root_element);
        }

        var animData = getAnimationData(settings.animation);
        if (!animData.animate) {
          this.locked = false;
        }
        if (animData.pop) {
          css.top = $(window).scrollTop() - el.data('offset') + 'px';
          var end_css = {
            top: $(window).scrollTop() + el.data('css-top') + 'px',
            opacity: 1
          };

          return setTimeout(function () {
            return el
              .css(css)
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.trigger('opened.fndtn.reveal');
              })
              .addClass('open');
          }, settings.animation_speed / 2);
        }

        css.top = $(window).scrollTop() + el.data('css-top') + 'px';

        if (animData.fade) {
          var end_css = {opacity: 1};

          return setTimeout(function () {
            return el
              .css(css)
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.trigger('opened.fndtn.reveal');
              })
              .addClass('open');
          }, settings.animation_speed / 2);
        }

        return el.css(css).show().css({opacity : 1}).addClass('open').trigger('opened.fndtn.reveal');
      }

      var settings = this.settings;

      // should we animate the background?
      if (getAnimationData(settings.animation).fade) {
        return el.fadeIn(settings.animation_speed / 2);
      }

      this.locked = false;

      return el.show();
    },

    to_back : function(el) {
      el.addClass('toback');
    },

    to_front : function(el) {
      el.removeClass('toback');
    },

    hide : function (el, css) {
      // is modal
      if (css) {
        var settings = el.data(this.attr_name(true) + '-init'),
            context = this;
        settings = settings || this.settings;

        var animData = getAnimationData(settings.animation);
        if (!animData.animate) {
          this.locked = false;
        }
        if (animData.pop) {
          var end_css = {
            top: - $(window).scrollTop() - el.data('offset') + 'px',
            opacity: 0
          };

          return setTimeout(function () {
            return el
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.css(css).trigger('closed.fndtn.reveal');
              })
              .removeClass('open');
          }, settings.animation_speed / 2);
        }

        if (animData.fade) {
          var end_css = {opacity : 0};

          return setTimeout(function () {
            return el
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.css(css).trigger('closed.fndtn.reveal');
              })
              .removeClass('open');
          }, settings.animation_speed / 2);
        }

        return el.hide().css(css).removeClass('open').trigger('closed.fndtn.reveal');
      }

      var settings = this.settings;

      // should we animate the background?
      if (getAnimationData(settings.animation).fade) {
        return el.fadeOut(settings.animation_speed / 2);
      }

      return el.hide();
    },

    close_video : function (e) {
      var video = $('.flex-video', e.target),
          iframe = $('iframe', video);

      if (iframe.length > 0) {
        iframe.attr('data-src', iframe[0].src);
        iframe.attr('src', iframe.attr('src'));
        video.hide();
      }
    },

    open_video : function (e) {
      var video = $('.flex-video', e.target),
          iframe = video.find('iframe');

      if (iframe.length > 0) {
        var data_src = iframe.attr('data-src');
        if (typeof data_src === 'string') {
          iframe[0].src = iframe.attr('data-src');
        } else {
          var src = iframe[0].src;
          iframe[0].src = undefined;
          iframe[0].src = src;
        }
        video.show();
      }
    },

    data_attr : function (str) {
      if (this.namespace.length > 0) {
        return this.namespace + '-' + str;
      }

      return str;
    },

    cache_offset : function (modal) {
      var offset = modal.show().height() + parseInt(modal.css('top'), 10) + modal.scrollY;

      modal.hide();

      return offset;
    },

    off : function () {
      $(this.scope).off('.fndtn.reveal');
    },

    reflow : function () {}
  };

  /*
   * getAnimationData('popAndFade') // {animate: true,  pop: true,  fade: true}
   * getAnimationData('fade')       // {animate: true,  pop: false, fade: true}
   * getAnimationData('pop')        // {animate: true,  pop: true,  fade: false}
   * getAnimationData('foo')        // {animate: false, pop: false, fade: false}
   * getAnimationData(null)         // {animate: false, pop: false, fade: false}
   */
  function getAnimationData(str) {
    var fade = /fade/i.test(str);
    var pop = /pop/i.test(str);
    return {
      animate : fade || pop,
      pop : pop,
      fade : fade
    };
  }
}(jQuery, window, window.document));

;(function ($, window, document, undefined) {
  'use strict';

  Foundation.libs.tooltip = {
    name : 'tooltip',

    version : '5.5.3',

    settings : {
      additional_inheritable_classes : [],
      tooltip_class : '.tooltip',
      append_to : 'body',
      touch_close_text : 'Tap To Close',
      disable_for_touch : false,
      hover_delay : 200,
      fade_in_duration : 150,
      fade_out_duration : 150,
      show_on : 'all',
      tip_template : function (selector, content) {
        return '<span data-selector="' + selector + '" id="' + selector + '" class="'
          + Foundation.libs.tooltip.settings.tooltip_class.substring(1)
          + '" role="tooltip">' + content + '<span class="nub"></span></span>';
      }
    },

    cache : {},

    init : function (scope, method, options) {
      Foundation.inherit(this, 'random_str');
      this.bindings(method, options);
    },

    should_show : function (target, tip) {
      var settings = $.extend({}, this.settings, this.data_options(target));

      if (settings.show_on === 'all') {
        return true;
      } else if (this.small() && settings.show_on === 'small') {
        return true;
      } else if (this.medium() && settings.show_on === 'medium') {
        return true;
      } else if (this.large() && settings.show_on === 'large') {
        return true;
      }
      return false;
    },

    medium : function () {
      return matchMedia(Foundation.media_queries['medium']).matches;
    },

    large : function () {
      return matchMedia(Foundation.media_queries['large']).matches;
    },

    events : function (instance) {
      var self = this,
          S = self.S;

      self.create(this.S(instance));

      function _startShow(elt, $this, immediate) {
        if (elt.timer) {
          return;
        }

        if (immediate) {
          elt.timer = null;
          self.showTip($this);
        } else {
          elt.timer = setTimeout(function () {
            elt.timer = null;
            self.showTip($this);
          }.bind(elt), self.settings.hover_delay);
        }
      }

      function _startHide(elt, $this) {
        if (elt.timer) {
          clearTimeout(elt.timer);
          elt.timer = null;
        }

        self.hide($this);
      }

      $(this.scope)
        .off('.tooltip')
        .on('mouseenter.fndtn.tooltip mouseleave.fndtn.tooltip touchstart.fndtn.tooltip MSPointerDown.fndtn.tooltip',
          '[' + this.attr_name() + ']', function (e) {
          var $this = S(this),
              settings = $.extend({}, self.settings, self.data_options($this)),
              is_touch = false;

          if (Modernizr.touch && /touchstart|MSPointerDown/i.test(e.type) && S(e.target).is('a')) {
            return false;
          }

          if (/mouse/i.test(e.type) && self.ie_touch(e)) {
            return false;
          }
          
          if ($this.hasClass('open')) {
            if (Modernizr.touch && /touchstart|MSPointerDown/i.test(e.type)) {
              e.preventDefault();
            }
            self.hide($this);
          } else {
            if (settings.disable_for_touch && Modernizr.touch && /touchstart|MSPointerDown/i.test(e.type)) {
              return;
            } else if (!settings.disable_for_touch && Modernizr.touch && /touchstart|MSPointerDown/i.test(e.type)) {
              e.preventDefault();
              S(settings.tooltip_class + '.open').hide();
              is_touch = true;
              // close other open tooltips on touch
              if ($('.open[' + self.attr_name() + ']').length > 0) {
               var prevOpen = S($('.open[' + self.attr_name() + ']')[0]);
               self.hide(prevOpen);
              }
            }

            if (/enter|over/i.test(e.type)) {
              _startShow(this, $this);

            } else if (e.type === 'mouseout' || e.type === 'mouseleave') {
              _startHide(this, $this);
            } else {
              _startShow(this, $this, true);
            }
          }
        })
        .on('mouseleave.fndtn.tooltip touchstart.fndtn.tooltip MSPointerDown.fndtn.tooltip', '[' + this.attr_name() + '].open', function (e) {
          if (/mouse/i.test(e.type) && self.ie_touch(e)) {
            return false;
          }

          if ($(this).data('tooltip-open-event-type') == 'touch' && e.type == 'mouseleave') {
            return;
          } else if ($(this).data('tooltip-open-event-type') == 'mouse' && /MSPointerDown|touchstart/i.test(e.type)) {
            self.convert_to_touch($(this));
          } else {
            _startHide(this, $(this));
          }
        })
        .on('DOMNodeRemoved DOMAttrModified', '[' + this.attr_name() + ']:not(a)', function (e) {
          _startHide(this, S(this));
        });
    },

    ie_touch : function (e) {
      // How do I distinguish between IE11 and Windows Phone 8?????
      return false;
    },

    showTip : function ($target) {
      var $tip = this.getTip($target);
      if (this.should_show($target, $tip)) {
        return this.show($target);
      }
      return;
    },

    getTip : function ($target) {
      var selector = this.selector($target),
          settings = $.extend({}, this.settings, this.data_options($target)),
          tip = null;

      if (selector) {
        tip = this.S('span[data-selector="' + selector + '"]' + settings.tooltip_class);
      }

      return (typeof tip === 'object') ? tip : false;
    },

    selector : function ($target) {
      var dataSelector = $target.attr(this.attr_name()) || $target.attr('data-selector');

      if (typeof dataSelector != 'string') {
        dataSelector = this.random_str(6);
        $target
          .attr('data-selector', dataSelector)
          .attr('aria-describedby', dataSelector);
      }

      return dataSelector;
    },

    create : function ($target) {
      var self = this,
          settings = $.extend({}, this.settings, this.data_options($target)),
          tip_template = this.settings.tip_template;

      if (typeof settings.tip_template === 'string' && window.hasOwnProperty(settings.tip_template)) {
        tip_template = window[settings.tip_template];
      }

      var $tip = $(tip_template(this.selector($target), $('<div></div>').html($target.attr('title')).html())),
          classes = this.inheritable_classes($target);

      $tip.addClass(classes).appendTo(settings.append_to);

      if (Modernizr.touch) {
        $tip.append('<span class="tap-to-close">' + settings.touch_close_text + '</span>');
        $tip.on('touchstart.fndtn.tooltip MSPointerDown.fndtn.tooltip', function (e) {
          self.hide($target);
        });
      }

      $target.removeAttr('title').attr('title', '');
    },

    reposition : function (target, tip, classes) {
      var width, nub, nubHeight, nubWidth, objPos;

      tip.css('visibility', 'hidden').show();

      width = target.data('width');
      nub = tip.children('.nub');
      nubHeight = nub.outerHeight();
      nubWidth = nub.outerWidth();

      if (this.small()) {
        tip.css({'width' : '100%'});
      } else {
        tip.css({'width' : (width) ? width : 'auto'});
      }

      objPos = function (obj, top, right, bottom, left, width) {
        return obj.css({
          'top' : (top) ? top : 'auto',
          'bottom' : (bottom) ? bottom : 'auto',
          'left' : (left) ? left : 'auto',
          'right' : (right) ? right : 'auto'
        }).end();
      };
      
      var o_top = target.offset().top;
      var o_left = target.offset().left;
      var outerHeight = target.outerHeight();

      objPos(tip, (o_top + outerHeight + 10), 'auto', 'auto', o_left);

      if (this.small()) {
        objPos(tip, (o_top + outerHeight + 10), 'auto', 'auto', 12.5, $(this.scope).width());
        tip.addClass('tip-override');
        objPos(nub, -nubHeight, 'auto', 'auto', o_left);
      } else {
        
        if (Foundation.rtl) {
          nub.addClass('rtl');
          o_left = o_left + target.outerWidth() - tip.outerWidth();
        }

        objPos(tip, (o_top + outerHeight + 10), 'auto', 'auto', o_left);
        // reset nub from small styles, if they've been applied
        if (nub.attr('style')) {
          nub.removeAttr('style');
        }
        
        tip.removeClass('tip-override');
        
        var tip_outerHeight = tip.outerHeight();
        
        if (classes && classes.indexOf('tip-top') > -1) {
          if (Foundation.rtl) {
            nub.addClass('rtl');
          }
          objPos(tip, (o_top - tip_outerHeight), 'auto', 'auto', o_left)
            .removeClass('tip-override');
        } else if (classes && classes.indexOf('tip-left') > -1) {
          objPos(tip, (o_top + (outerHeight / 2) - (tip_outerHeight / 2)), 'auto', 'auto', (o_left - tip.outerWidth() - nubHeight))
            .removeClass('tip-override');
          nub.removeClass('rtl');
        } else if (classes && classes.indexOf('tip-right') > -1) {
          objPos(tip, (o_top + (outerHeight / 2) - (tip_outerHeight / 2)), 'auto', 'auto', (o_left + target.outerWidth() + nubHeight))
            .removeClass('tip-override');
          nub.removeClass('rtl');
        }
      }

      tip.css('visibility', 'visible').hide();
    },

    small : function () {
      return matchMedia(Foundation.media_queries.small).matches &&
        !matchMedia(Foundation.media_queries.medium).matches;
    },

    inheritable_classes : function ($target) {
      var settings = $.extend({}, this.settings, this.data_options($target)),
          inheritables = ['tip-top', 'tip-left', 'tip-bottom', 'tip-right', 'radius', 'round'].concat(settings.additional_inheritable_classes),
          classes = $target.attr('class'),
          filtered = classes ? $.map(classes.split(' '), function (el, i) {
            if ($.inArray(el, inheritables) !== -1) {
              return el;
            }
          }).join(' ') : '';

      return $.trim(filtered);
    },

    convert_to_touch : function ($target) {
      var self = this,
          $tip = self.getTip($target),
          settings = $.extend({}, self.settings, self.data_options($target));

      if ($tip.find('.tap-to-close').length === 0) {
        $tip.append('<span class="tap-to-close">' + settings.touch_close_text + '</span>');
        $tip.on('click.fndtn.tooltip.tapclose touchstart.fndtn.tooltip.tapclose MSPointerDown.fndtn.tooltip.tapclose', function (e) {
          self.hide($target);
        });
      }

      $target.data('tooltip-open-event-type', 'touch');
    },

    show : function ($target) {
      var $tip = this.getTip($target);
      if ($target.data('tooltip-open-event-type') == 'touch') {
        this.convert_to_touch($target);
      }

      this.reposition($target, $tip, $target.attr('class'));
      $target.addClass('open');
      $tip.fadeIn(this.settings.fade_in_duration);
    },

    hide : function ($target) {
      var $tip = this.getTip($target);

      $tip.fadeOut(this.settings.fade_out_duration, function () {
        $tip.find('.tap-to-close').remove();
        $tip.off('click.fndtn.tooltip.tapclose MSPointerDown.fndtn.tapclose');
        $target.removeClass('open');
      });
    },

    off : function () {
      var self = this;
      this.S(this.scope).off('.fndtn.tooltip');
      this.S(this.settings.tooltip_class).each(function (i) {
        $('[' + self.attr_name() + ']').eq(i).attr('title', $(this).text());
      }).remove();
    },

    reflow : function () {}
  };
}(jQuery, window, window.document));

;(function ($, window, document, undefined) {
  'use strict';

  Foundation.libs.topbar = {
    name : 'topbar',

    version : '5.5.3',

    settings : {
      index : 0,
      start_offset : 0,
      sticky_class : 'sticky',
      custom_back_text : true,
      back_text : 'Back',
      mobile_show_parent_link : true,
      is_hover : true,
      scrolltop : true, // jump to top when sticky nav menu toggle is clicked
      sticky_on : 'all',
      dropdown_autoclose: true
    },

    init : function (section, method, options) {
      Foundation.inherit(this, 'add_custom_rule register_media throttle');
      var self = this;

      self.register_media('topbar', 'foundation-mq-topbar');

      this.bindings(method, options);

      self.S('[' + this.attr_name() + ']', this.scope).each(function () {
        var topbar = $(this),
            settings = topbar.data(self.attr_name(true) + '-init'),
            section = self.S('section, .top-bar-section', this);
        topbar.data('index', 0);
        var topbarContainer = topbar.parent();
        if (topbarContainer.hasClass('fixed') || self.is_sticky(topbar, topbarContainer, settings) ) {
          self.settings.sticky_class = settings.sticky_class;
          self.settings.sticky_topbar = topbar;
          topbar.data('height', topbarContainer.outerHeight());
          topbar.data('stickyoffset', topbarContainer.offset().top);
        } else {
          topbar.data('height', topbar.outerHeight());
        }

        if (!settings.assembled) {
          self.assemble(topbar);
        }

        if (settings.is_hover) {
          self.S('.has-dropdown', topbar).addClass('not-click');
        } else {
          self.S('.has-dropdown', topbar).removeClass('not-click');
        }

        // Pad body when sticky (scrolled) or fixed.
        self.add_custom_rule('.f-topbar-fixed { padding-top: ' + topbar.data('height') + 'px }');

        if (topbarContainer.hasClass('fixed')) {
          self.S('body').addClass('f-topbar-fixed');
        }
      });

    },

    is_sticky : function (topbar, topbarContainer, settings) {
      var sticky     = topbarContainer.hasClass(settings.sticky_class);
      var smallMatch = matchMedia(Foundation.media_queries.small).matches;
      var medMatch   = matchMedia(Foundation.media_queries.medium).matches;
      var lrgMatch   = matchMedia(Foundation.media_queries.large).matches;

      if (sticky && settings.sticky_on === 'all') {
        return true;
      }
      if (sticky && this.small() && settings.sticky_on.indexOf('small') !== -1) {
        if (smallMatch && !medMatch && !lrgMatch) { return true; }
      }
      if (sticky && this.medium() && settings.sticky_on.indexOf('medium') !== -1) {
        if (smallMatch && medMatch && !lrgMatch) { return true; }
      }
      if (sticky && this.large() && settings.sticky_on.indexOf('large') !== -1) {
        if (smallMatch && medMatch && lrgMatch) { return true; }
      }

       return false;
    },

    toggle : function (toggleEl) {
      var self = this,
          topbar;

      if (toggleEl) {
        topbar = self.S(toggleEl).closest('[' + this.attr_name() + ']');
      } else {
        topbar = self.S('[' + this.attr_name() + ']');
      }

      var settings = topbar.data(this.attr_name(true) + '-init');

      var section = self.S('section, .top-bar-section', topbar);

      if (self.breakpoint()) {
        if (!self.rtl) {
          section.css({left : '0%'});
          $('>.name', section).css({left : '100%'});
        } else {
          section.css({right : '0%'});
          $('>.name', section).css({right : '100%'});
        }

        self.S('li.moved', section).removeClass('moved');
        topbar.data('index', 0);

        topbar
          .toggleClass('expanded')
          .css('height', '');
      }

      if (settings.scrolltop) {
        if (!topbar.hasClass('expanded')) {
          if (topbar.hasClass('fixed')) {
            topbar.parent().addClass('fixed');
            topbar.removeClass('fixed');
            self.S('body').addClass('f-topbar-fixed');
          }
        } else if (topbar.parent().hasClass('fixed')) {
          if (settings.scrolltop) {
            topbar.parent().removeClass('fixed');
            topbar.addClass('fixed');
            self.S('body').removeClass('f-topbar-fixed');

            window.scrollTo(0, 0);
          } else {
            topbar.parent().removeClass('expanded');
          }
        }
      } else {
        if (self.is_sticky(topbar, topbar.parent(), settings)) {
          topbar.parent().addClass('fixed');
        }

        if (topbar.parent().hasClass('fixed')) {
          if (!topbar.hasClass('expanded')) {
            topbar.removeClass('fixed');
            topbar.parent().removeClass('expanded');
            self.update_sticky_positioning();
          } else {
            topbar.addClass('fixed');
            topbar.parent().addClass('expanded');
            self.S('body').addClass('f-topbar-fixed');
          }
        }
      }
    },

    timer : null,

    events : function (bar) {
      var self = this,
          S = this.S;

      S(this.scope)
        .off('.topbar')
        .on('click.fndtn.topbar', '[' + this.attr_name() + '] .toggle-topbar', function (e) {
          e.preventDefault();
          self.toggle(this);
        })
        .on('click.fndtn.topbar contextmenu.fndtn.topbar', '.top-bar .top-bar-section li a[href^="#"],[' + this.attr_name() + '] .top-bar-section li a[href^="#"]', function (e) {
          var li = $(this).closest('li'),
              topbar = li.closest('[' + self.attr_name() + ']'),
              settings = topbar.data(self.attr_name(true) + '-init');

          if (settings.dropdown_autoclose && settings.is_hover) {
            var hoverLi = $(this).closest('.hover');
            hoverLi.removeClass('hover');
          }
          if (self.breakpoint() && !li.hasClass('back') && !li.hasClass('has-dropdown')) {
            self.toggle();
          }

        })
        .on('click.fndtn.topbar', '[' + this.attr_name() + '] li.has-dropdown', function (e) {
          var li = S(this),
              target = S(e.target),
              topbar = li.closest('[' + self.attr_name() + ']'),
              settings = topbar.data(self.attr_name(true) + '-init');

          if (target.data('revealId')) {
            self.toggle();
            return;
          }

          if (self.breakpoint()) {
            return;
          }

          if (settings.is_hover && !Modernizr.touch) {
            return;
          }

          e.stopImmediatePropagation();

          if (li.hasClass('hover')) {
            li
              .removeClass('hover')
              .find('li')
              .removeClass('hover');

            li.parents('li.hover')
              .removeClass('hover');
          } else {
            li.addClass('hover');

            $(li).siblings().removeClass('hover');

            if (target[0].nodeName === 'A' && target.parent().hasClass('has-dropdown')) {
              e.preventDefault();
            }
          }
        })
        .on('click.fndtn.topbar', '[' + this.attr_name() + '] .has-dropdown>a', function (e) {
          if (self.breakpoint()) {

            e.preventDefault();

            var $this = S(this),
                topbar = $this.closest('[' + self.attr_name() + ']'),
                section = topbar.find('section, .top-bar-section'),
                dropdownHeight = $this.next('.dropdown').outerHeight(),
                $selectedLi = $this.closest('li');

            topbar.data('index', topbar.data('index') + 1);
            $selectedLi.addClass('moved');

            if (!self.rtl) {
              section.css({left : -(100 * topbar.data('index')) + '%'});
              section.find('>.name').css({left : 100 * topbar.data('index') + '%'});
            } else {
              section.css({right : -(100 * topbar.data('index')) + '%'});
              section.find('>.name').css({right : 100 * topbar.data('index') + '%'});
            }

            topbar.css('height', $this.siblings('ul').outerHeight(true) + topbar.data('height'));
          }
        });

      S(window).off('.topbar').on('resize.fndtn.topbar', self.throttle(function () {
          self.resize.call(self);
      }, 50)).trigger('resize.fndtn.topbar').on("load", function () {
          // Ensure that the offset is calculated after all of the pages resources have loaded
          S(this).trigger('resize.fndtn.topbar');
      });

      S('body').off('.topbar').on('click.fndtn.topbar', function (e) {
        var parent = S(e.target).closest('li').closest('li.hover');

        if (parent.length > 0) {
          return;
        }

        S('[' + self.attr_name() + '] li.hover').removeClass('hover');
      });

      // Go up a level on Click
      S(this.scope).on('click.fndtn.topbar', '[' + this.attr_name() + '] .has-dropdown .back', function (e) {
        e.preventDefault();

        var $this = S(this),
            topbar = $this.closest('[' + self.attr_name() + ']'),
            section = topbar.find('section, .top-bar-section'),
            settings = topbar.data(self.attr_name(true) + '-init'),
            $movedLi = $this.closest('li.moved'),
            $previousLevelUl = $movedLi.parent();

        topbar.data('index', topbar.data('index') - 1);

        if (!self.rtl) {
          section.css({left : -(100 * topbar.data('index')) + '%'});
          section.find('>.name').css({left : 100 * topbar.data('index') + '%'});
        } else {
          section.css({right : -(100 * topbar.data('index')) + '%'});
          section.find('>.name').css({right : 100 * topbar.data('index') + '%'});
        }

        if (topbar.data('index') === 0) {
          topbar.css('height', '');
        } else {
          topbar.css('height', $previousLevelUl.outerHeight(true) + topbar.data('height'));
        }

        setTimeout(function () {
          $movedLi.removeClass('moved');
        }, 300);
      });

      // Show dropdown menus when their items are focused
      S(this.scope).find('.dropdown a')
        .focus(function () {
          $(this).parents('.has-dropdown').addClass('hover');
        })
        .blur(function () {
          $(this).parents('.has-dropdown').removeClass('hover');
        });
    },

    resize : function () {
      var self = this;
      self.S('[' + this.attr_name() + ']').each(function () {
        var topbar = self.S(this),
            settings = topbar.data(self.attr_name(true) + '-init');

        var stickyContainer = topbar.parent('.' + self.settings.sticky_class);
        var stickyOffset;

        if (!self.breakpoint()) {
          var doToggle = topbar.hasClass('expanded');
          topbar
            .css('height', '')
            .removeClass('expanded')
            .find('li')
            .removeClass('hover');

            if (doToggle) {
              self.toggle(topbar);
            }
        }

        if (self.is_sticky(topbar, stickyContainer, settings)) {
          if (stickyContainer.hasClass('fixed')) {
            // Remove the fixed to allow for correct calculation of the offset.
            stickyContainer.removeClass('fixed');

            stickyOffset = stickyContainer.offset().top;
            if (self.S(document.body).hasClass('f-topbar-fixed')) {
              stickyOffset -= topbar.data('height');
            }

            topbar.data('stickyoffset', stickyOffset);
            stickyContainer.addClass('fixed');
          } else {
            stickyOffset = stickyContainer.offset().top;
            topbar.data('stickyoffset', stickyOffset);
          }
        }

      });
    },

    breakpoint : function () {
      return !matchMedia(Foundation.media_queries['topbar']).matches;
    },

    small : function () {
      return matchMedia(Foundation.media_queries['small']).matches;
    },

    medium : function () {
      return matchMedia(Foundation.media_queries['medium']).matches;
    },

    large : function () {
      return matchMedia(Foundation.media_queries['large']).matches;
    },

    assemble : function (topbar) {
      var self = this,
          settings = topbar.data(this.attr_name(true) + '-init'),
          section = self.S('section, .top-bar-section', topbar);

      // Pull element out of the DOM for manipulation
      section.detach();

      self.S('.has-dropdown>a', section).each(function () {
        var $link = self.S(this),
            $dropdown = $link.siblings('.dropdown'),
            url = $link.attr('href'),
            $titleLi;

        if (!$dropdown.find('.title.back').length) {

          if (settings.mobile_show_parent_link == true && url) {
            $titleLi = $('<li class="title back js-generated"><h5><a href="javascript:void(0)"></a></h5></li><li class="parent-link hide-for-medium-up"><a class="parent-link js-generated" href="' + url + '">' + $link.html() +'</a></li>');
          } else {
            $titleLi = $('<li class="title back js-generated"><h5><a href="javascript:void(0)"></a></h5>');
          }

          // Copy link to subnav
          if (settings.custom_back_text == true) {
            $('h5>a', $titleLi).html(settings.back_text);
          } else {
            $('h5>a', $titleLi).html('&laquo; ' + $link.html());
          }
          $dropdown.prepend($titleLi);
        }
      });

      // Put element back in the DOM
      section.appendTo(topbar);

      // check for sticky
      this.sticky();

      this.assembled(topbar);
    },

    assembled : function (topbar) {
      topbar.data(this.attr_name(true), $.extend({}, topbar.data(this.attr_name(true)), {assembled : true}));
    },

    height : function (ul) {
      var total = 0,
          self = this;

      $('> li', ul).each(function () {
        total += self.S(this).outerHeight(true);
      });

      return total;
    },

    sticky : function () {
      var self = this;

      this.S(window).on('scroll', function () {
        self.update_sticky_positioning();
      });
    },

    update_sticky_positioning : function () {
      var klass = '.' + this.settings.sticky_class,
          $window = this.S(window),
          self = this;

      if (self.settings.sticky_topbar && self.is_sticky(this.settings.sticky_topbar,this.settings.sticky_topbar.parent(), this.settings)) {
        var distance = this.settings.sticky_topbar.data('stickyoffset') + this.settings.start_offset;
        if (!self.S(klass).hasClass('expanded')) {
          if ($window.scrollTop() > (distance)) {
            if (!self.S(klass).hasClass('fixed')) {
              self.S(klass).addClass('fixed');
              self.S('body').addClass('f-topbar-fixed');
            }
          } else if ($window.scrollTop() <= distance) {
            if (self.S(klass).hasClass('fixed')) {
              self.S(klass).removeClass('fixed');
              self.S('body').removeClass('f-topbar-fixed');
            }
          }
        }
      }
    },

    off : function () {
      this.S(this.scope).off('.fndtn.topbar');
      this.S(window).off('.fndtn.topbar');
    },

    reflow : function () {}
  };
}(jQuery, window, window.document));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed")))

/***/ }),

/***/ "./src/js/warframe-data.js":
/*!*********************************!*\
  !*** ./src/js/warframe-data.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  "array": [
    {
      "name": "Ack & Brunt",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerTylAxeAndBoar/RegorAxeShield",
      "totalDamage": 50,
      "trigger": "Melee",
      "description": "Tyl Regor’s custom axe and shield are how he likes to eliminate ‘frustrations’.",
      "accuracy": 100,
      "wallAttack": 200,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 0.89999998,
      "type": "Melee",
      "imageName": "ack-&-brunt.png",
      "category": "Sword and Shield",
      "tradable": false,
      "channeling": 1.5,
      "damage": "50.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/41/RegorAxeShield.png/revision/latest?cb=20150731174942",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ack_%26_Brunt",
      "disposition": 3,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 49.53,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, low attack speed. Suffers from relatively poor consistency. ",
      "stance": "Final Harbinger",
      "stanceNotes": "",
      "combo": "Systemic Shred",
      "component": false
    },
    {
      "name": "Acrid",
      "uniqueName": "/Lotus/Weapons/ClanTech/Bio/AcidDartPistol",
      "totalDamage": 35,
      "trigger": "Semi",
      "description": "The Acrid fires an acidic-infused needle.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.33,
      "type": "Secondary",
      "imageName": "acrid.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "35.0 toxin",
      "flight": 65,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a8/Acrid2.png/revision/latest?cb=20130530193010",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Acrid",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot, moderate DPS,  projectile munitions. Each flechette delivers toxin DoT (scales with modified base damage and toxin damage) regardless of elemental modding. ",
      "dmg": "Status",
      "rank": 83.3,
      "tierRank": 1,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Game/CatbrowPet/MirrorCatbrowPetPowerSuit",
      "name": "Adarza Kavat",
      "description": "Piercing eyes reflect deadly instincts.",
      "type": "Companion",
      "imageName": "adarza-kavat.png",
      "category": "Kavat",
      "tradable": false,
      "acquisition": "Kavat Incubator Upgrade Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Adarza_Kavat"
    },
    {
      "name": "Afuris",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboAutoPistols",
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "Furis pistols equipped in each hand. Twice the Magazine Capacity and slightly faster Fire Rate, but Accuracy and Reload Speed are lowered.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.39,
      "type": "Secondary",
      "imageName": "afuris.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "20.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/20/Afuris.png/revision/latest?cb=20170606011035",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Afuris",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS,  hitscan munitions. ",
      "dmg": "Raw/Status",
      "rank": 109,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Agkuza",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/ArchSwordHook/ArchHookSwordWeapon",
      "totalDamage": 350,
      "trigger": "Melee",
      "description": "Tear apart incoming enemies with this massive hooked blade.",
      "accuracy": 100,
      "wallAttack": 350,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "imageName": "agkuza.png",
      "tradable": false,
      "damage": "350.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c2/ArchHookSword.png/revision/latest?cb=20160710175147",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Agkuza",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Akbolto",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboBolto",
      "totalDamage": 40,
      "trigger": "Semi",
      "description": "A Bolto equipped in each hand. Twice the Magazine Capacity and slightly faster Fire Rate, but reload time is doubled and accuracy is lowered.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 0.80000001,
      "itemCount": 1,
      "parents": [
        "Akjagara"
      ],
      "type": "Secondary",
      "imageName": "akbolto.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "40.0",
      "flight": 75,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0e/Akbolto.png/revision/latest?cb=20130426075511",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akbolto",
      "disposition": 2,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Akbolto Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeAkbolto/PrimeAkBoltoWeapon",
      "totalDamage": 32,
      "trigger": "Semi",
      "description": "Gilded rails adorn these two vicious bolt launching pistols.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "omegaAttenuation": 0.80000001,
      "type": "Secondary",
      "imageName": "akbolto-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "32.0",
      "flight": 75,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/88/MirageAkboltoPrime.png/revision/latest?cb=20171213095347",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akbolto_Prime",
      "disposition": 2,
      "releaseDate": "2017 12 12",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2019 10 10",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot, moderate DPS,  projectile munitions. Keep your friends close; keep your enemies closer. Because bolts have travel time. ",
      "dmg": "Crit/Status",
      "rank": 67.2,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Akbronco",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboShotGun",
      "totalDamage": 280,
      "trigger": "Semi",
      "description": "A Bronco equipped in each hand.",
      "accuracy": 3.7037036,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.25,
      "type": "Secondary",
      "imageName": "akbronco.png",
      "category": "Dual Shotguns",
      "tradable": false,
      "damage": "280.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/Dual_Broncos.png/revision/latest?cb=20130524143655",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akbronco",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Akbronco Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/PrimeAkimboShotGun",
      "totalDamage": 350,
      "trigger": "Semi",
      "description": "Used together, these Orokin pistols feed off each other, inflicting greater damage with an enhanced chance for inducing elemental effects on targets.",
      "accuracy": 3.7037036,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.25,
      "type": "Secondary",
      "imageName": "akbronco-prime.png",
      "category": "Dual Shotguns",
      "tradable": true,
      "damage": "350.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/af/DEPrimeDualBroncos.png/revision/latest?cb=20140306030523",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akbronco_Prime",
      "disposition": 4,
      "releaseDate": "2014 03 06",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS,  hitscan munitions. Suffers from relatively poor consistency. ",
      "dmg": "100% Status",
      "rank": 79.7,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Akjagara",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TigrisRedeemerSetPistol/TnoBladedPistols",
      "totalDamage": 30,
      "trigger": "Burst",
      "description": "The design of these hard-hitting dual pistols is a mix of organic and bladed elements.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.05,
      "type": "Secondary",
      "imageName": "akjagara.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/89/TnoBladedPistols.png/revision/latest?cb=20150205211110",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akjagara",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Akjagara Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeAkjagara/AkJagaraPrime",
      "totalDamage": 36,
      "trigger": "Burst",
      "description": "Precision machined mirrored pistols. Primed and ready.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.05,
      "type": "Secondary",
      "imageName": "akjagara-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "36.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/ba/AkjagaraPrime.png/revision/latest?cb=20181218224226",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akjagara_Prime",
      "disposition": 3,
      "releaseDate": "2018 12 12",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 10 24",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps,  hitscan munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 46.3,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Aklato",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboPistol",
      "totalDamage": 30,
      "trigger": "Semi",
      "description": "A Lato equipped in each hand. Twice the Magazine Capacity and Fire Rate, but Reload time is doubled and Accuracy is lowered.",
      "accuracy": 11.111111,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.52,
      "type": "Secondary",
      "imageName": "aklato.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/47/Aklato.png/revision/latest?cb=20170210002057",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Aklato",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS,  hitscan munitions. ",
      "dmg": "Status",
      "rank": 244.6,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Aklex",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkLexPistols",
      "totalDamage": 130,
      "trigger": "Semi",
      "description": "Dual Lex pistols double the amount of high caliber lead you can throw at the enemy, but accuracy and reload time suffer.",
      "accuracy": 9.7560978,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 0.80000001,
      "type": "Secondary",
      "imageName": "aklex.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "130.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/85/DEAklex.png/revision/latest?cb=20140124173940",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Aklex",
      "disposition": 2,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Aklex Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkLexPrimePistols",
      "totalDamage": 150,
      "trigger": "Semi",
      "description": "Savage the enemy with a Lex Prime in each hand.",
      "accuracy": 9.7560978,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 15,
      "omegaAttenuation": 0.80000001,
      "type": "Secondary",
      "imageName": "aklex-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "150.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/61/Aklex_Prime.png/revision/latest?cb=20170127212929",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Aklex_Prime",
      "disposition": 2,
      "releaseDate": "2017 01 27",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot, moderate DPS,  hitscan munitions. Massive recoil hurts overall DPS. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 80.4,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Akmagnus",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/DualMagnus",
      "totalDamage": 76,
      "trigger": "Semi",
      "description": "Twice the ammo and twice the stopping power of a single Magnus.",
      "accuracy": 11.111111,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.28,
      "type": "Secondary",
      "imageName": "akmagnus.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "76.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/11/DEAkmagnus.png/revision/latest?cb=20140204013038",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akmagnus",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot, moderate DPS,  hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 82.4,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Aksomati",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/SomaSidearm/AkimboSomaPistols",
      "totalDamage": 18,
      "trigger": "Auto",
      "description": "The devastating power of the Soma rifle compacted into two elegant pistols.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1.2,
      "type": "Secondary",
      "imageName": "aksomati.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "18.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/de/AkimboSomaPistols.png/revision/latest?cb=20150408223719",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Aksomati",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot, insane dps,  hitscan munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 46.1,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Akstiletto",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TennoUzi/TennoUzi",
      "totalDamage": 28,
      "trigger": "Auto",
      "description": "These diminutive rapid-fire Stiletto machine-pistols are just the right size to be akimbo style without sacrificing accuracy.",
      "accuracy": 23.529411,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.5,
      "type": "Secondary",
      "imageName": "akstiletto.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "28.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ef/TennoUzi.png/revision/latest?cb=20140206061957",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akstiletto",
      "disposition": 1,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Akstiletto Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeAkstiletto/PrimeAkstiletto",
      "totalDamage": 36,
      "trigger": "Auto",
      "description": "Stylish, discreet and accurate, perfect for the Tenno of distinction.",
      "accuracy": 23.529411,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.5,
      "type": "Secondary",
      "imageName": "akstiletto-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "36.0",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/43/PrimeAkstiletto.png/revision/latest?cb=20160520210650",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akstiletto_Prime",
      "disposition": 1,
      "releaseDate": "2016 05 17",
      "vaultDate": "2018 03 20",
      "estimatedVaultDate": "2018 03 20",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  hitscan munitions. Very good all-rounder secondary. ",
      "dmg": "Crit/Status",
      "rank": 60.6,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Akvasto",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/DualVastos",
      "totalDamage": 58,
      "trigger": "Semi",
      "description": "Vasto revolvers equipped in each hand.",
      "accuracy": 11.111111,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.2,
      "type": "Secondary",
      "imageName": "akvasto.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "58.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fa/Dual_vastos.png/revision/latest?cb=20130901100333",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akvasto",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Akvasto Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeVasto/AkPrimeVasto/AkPrimeVastoPistol",
      "totalDamage": 66,
      "trigger": "Semi",
      "description": "Orokin craftsmanship married with superior firepower. Dual Vastos, primed and ready to strike.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.2,
      "type": "Secondary",
      "imageName": "akvasto-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "66.0",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/AkvastoPrime.png/revision/latest?cb=20181113201313",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akvasto_Prime",
      "disposition": 4,
      "releaseDate": "2018 11 14",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot, monstrous DPS,  hitscan munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 57.1,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Akzani",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/HarlequinGun/HarlequinPistols",
      "totalDamage": 12,
      "trigger": "Auto",
      "description": "The choice weapon of Mirage, these fast-firing dual pistols deliver a deadly performance.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.52,
      "type": "Secondary",
      "imageName": "akzani.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "12.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/Akzani.png/revision/latest?cb=20170403054851",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akzani",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS,  hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 88.9,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/SupportJetPack/SupportJetPack",
      "name": "Amesha",
      "description": "Transform into a winged guardian.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "type": "Vehicle",
      "imageName": "amesha.png",
      "category": "Archwing",
      "tradable": false,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Amesha"
    },
    {
      "name": "Amphis",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/GrnStaff",
      "totalDamage": 55,
      "trigger": "Melee",
      "description": "Fashioned with Grineer materials and balanced for marine infantry use, the Amphis is a traditional staff weapon that has received a monstrous makeover that enables shock damage on jump attacks. Connects with multiple enemies with each strike.",
      "accuracy": 100,
      "wallAttack": 92,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.5,
      "type": "Melee",
      "imageName": "amphis.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "55.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f9/DEAmphis.png/revision/latest?cb=20140407035856",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Amphis",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 59,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, very high attack speed. ",
      "stance": "Clashing Forest",
      "stanceNotes": "",
      "combo": "Resolute Flurry",
      "component": true
    },
    {
      "name": "Amprex",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/ChainLightningGun/ChainLightningRifle",
      "totalDamage": 22,
      "trigger": "Held",
      "description": "The Amprex rifle fires a continuous beam of high voltage electricity that arcs among nearby enemies. This weapon excels at Crowd Control.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.69999999,
      "type": "Primary",
      "imageName": "amprex.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "22.0 electricity",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8f/ChainLightningGunEdit.png/revision/latest?cb=20140425171112",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Amprex",
      "disposition": 1,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps, beam munitions. Beam chains to nearby enemies giving it decent AOE. ",
      "dmg": "Crit/Status",
      "rank": 40.6,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Angstrum",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpHandRL/CorpusHandRocketLauncher",
      "totalDamage": 1350,
      "trigger": "Charge",
      "description": "Capable of firing multiple rockets at once, the Angstrum is a handheld instrument of destruction.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.3,
      "type": "Secondary",
      "imageName": "angstrum.png",
      "category": "Pistol",
      "tradable": false,
      "damage": 200,
      "projectile": "Projectile",
      "secondary": {
        "name": "3-Rocket Barrage Explosion",
        "pellet": {
          "name": "Rocket",
          "count": 3
        },
        "blast": 750,
        "damage": "750.0 blast"
      },
      "secondaryArea": {
        "name": "3-Rocket Barrage Impact",
        "status_chance": 52.5,
        "pellet": {
          "name": "Rocket",
          "count": 3
        },
        "blast": 600,
        "damage": "600.0 blast"
      },
      "statusChance": 22,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fe/CorpusHandRocket.png/revision/latest?cb=20170606150901",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Angstrum",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Anku",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Scythe/ParisScythe/ParisScythe",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "Reap havoc with this full sized Tenno-crafted scythe.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.46,
      "type": "Melee",
      "imageName": "anku.png",
      "category": "Scythe",
      "tradable": false,
      "channeling": 1.5,
      "damage": "70.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e7/ParisScythe.png/revision/latest?cb=20150605002310",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Anku",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 90.59,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. ",
      "stance": "Stalking Fan",
      "stanceNotes": "",
      "combo": "Dying Light",
      "component": false
    },
    {
      "name": "Ankyros",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gauntlet/Gauntlet",
      "totalDamage": 30,
      "trigger": "Melee",
      "description": "A pair of mighty gauntlets, the Ankyros were designed by the Tenno for close quarters combat. What they lack in range they make up for in speed.",
      "accuracy": 100,
      "wallAttack": 90,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.45,
      "type": "Melee",
      "imageName": "ankyros.png",
      "category": "Fist",
      "tradable": false,
      "channeling": 1.5,
      "damage": "30.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/20/Ankyros.png/revision/latest?cb=20160221144002",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ankyros",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Ankyros Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gauntlet/PrimeAnkyros/PrimeAnkyros",
      "totalDamage": 38,
      "trigger": "Melee",
      "description": "This Orokin variation of the Ankyros is superior to its successor in every way.",
      "accuracy": 100,
      "wallAttack": 114,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.45,
      "type": "Melee",
      "imageName": "ankyros-prime.png",
      "category": "Fist",
      "tradable": true,
      "channeling": 1.5,
      "damage": "38.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/87/PrimeAnkyros.png/revision/latest?cb=20160221144022",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ankyros_Prime",
      "disposition": 5,
      "releaseDate": "2014 03 06",
      "vaultDate": "2016 02 16",
      "estimatedVaultDate": "2016 02 16",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 62.96,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, very high attack speed. ",
      "stance": "Gaia's Tragedy",
      "stanceNotes": "",
      "combo": "Forest's Remorse",
      "component": false
    },
    {
      "name": "Arca Plasmor",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpShotgun/CrpShotgun",
      "totalDamage": 600,
      "trigger": "Semi",
      "description": "Stagger targets with blasts from this Corpus engineered plasma shotgun. Surviving enemies are consumed with radiation.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.60000002,
      "type": "Primary",
      "imageName": "arca-plasmor.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "600.0 radiation",
      "flight": 60,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1a/CrpShotgun.png/revision/latest?cb=20170907190538",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Arca_Plasmor",
      "disposition": 1,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS, projectile munitions. Single pellet is wide with punchthrough and therefore can act as AOE and reliably proc status effects. Does not have a headshot multiplier. ",
      "dmg": "Crit/Status",
      "rank": 53.2,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Arca Scisco",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/SniperPistol/CrpScopeGun",
      "totalDamage": 60,
      "trigger": "Semi",
      "description": "This scoped pistol analyzes strikes, learning how to damage its targets most effectively. Achieve maximum damage output after five successive hits.",
      "accuracy": 32,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1,
      "type": "Secondary",
      "imageName": "arca-scisco.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "60.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0f/CrpScopePistol.png/revision/latest?cb=20170907190537",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Arca_Scisco",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  hitscan munitions. Each shot landed grants Target Analysis buff. Target Analysis stacks up to 5 times, lasting 2 seconds each. Critical Chance and Status Chance increases by 4% per stack. ",
      "dmg": "Crit/Status",
      "rank": 62.5,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Arca Titron",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Hammer/CorpusHammerWeapon",
      "totalDamage": 180,
      "trigger": "Melee",
      "description": "Each successive kill from this massive electron hammer builds an electron charge that is unleashed on slam attacks.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "arca-titron.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "180.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8d/CrpHammer.png/revision/latest?cb=20170907190535",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Arca_Titron",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Critical",
      "rank": 44.87,
      "tierRank": 2,
      "weaponNotes": "Very high damage per hit, monstrous DPS, very low attack speed. Kills grant up to 10 Capacitor (+100% electricity damage) charges that is used on next slam attack. Slams also proc electricity and overrides hammer ragdoll. ",
      "stance": "Shattering Storm",
      "stanceNotes": "Third hit of Smashing Fury procs slam bonus from passive but doesn't expend charges. ",
      "combo": "Smashing Fury (3 hits only)",
      "component": false
    },
    {
      "name": "Argonak",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/LaserAimRifle/LaserAimRifle",
      "totalDamage": 57,
      "trigger": "Semi",
      "description": "Pick off targets by highlighting distant enemies using this Grineer rifle's advanced laser sighting system. Deadly in both single fire and automatic modes.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.2,
      "type": "Primary",
      "imageName": "argonak.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "57.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 4.33,
        "crit_chance": 27,
        "crit_mult": 2.3,
        "status_chance": 0.2,
        "shot_type": "Hit-Scan",
        "impact": 24.5,
        "slash": 26.2,
        "puncture": 6.3
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/LaserAimRifle.png/revision/latest?cb=20171015014021",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Argonak",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS, hitscan munitions. Scoping highlights enemies for easier targetting. Alternate between semi-auto (higher DPS) and full-auto (higher fire rate) to deal with different enemies. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 78.1,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Artax",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/Gremlin",
      "totalDamage": 5,
      "trigger": "Held",
      "description": "Freeze targets in their tracks with this sentinel mounted ice-beam.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "type": "Sentinel Weapon",
      "imageName": "artax.png",
      "tradable": false,
      "damage": "5.0 cold",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/06/SentinelArtax.png/revision/latest?cb=20170209235027",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Artax",
      "disposition": 3,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ninja/Ninja",
      "name": "Ash",
      "description": "Ash is great for players looking for a stealthier approach to combat. Lethal abilities are complemented by powers of distraction.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Bleed effects inflicted on enemies do |DAMAGE|% increased damage and last |DURATION|% longer.",
      "type": "Warframe",
      "imageName": "ash.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 7170143,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/17/AshNewLook.png/revision/latest?cb=20141124022921",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ash",
      "acquisition": "Manics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ninja/AshPrime",
      "name": "Ash Prime",
      "description": "Distraction and subterfuge become lethal weapons with Ash Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "Bleed effects inflicted on enemies do |DAMAGE|% increased damage and last |DURATION|% longer.",
      "type": "Warframe",
      "imageName": "ash-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 4143928,
      "introduced": "16.11",
      "sex": "Male",
      "sprint": 1.2,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/62/AshPrimeNewLook.png/revision/latest?cb=20150707222051",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ash_Prime",
      "releaseDate": "2015 07 07",
      "vaultDate": "2017 05 30",
      "estimatedVaultDate": "2017 05 30",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Astilla",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnGlassShotgun/TnGlassShotgunGun",
      "totalDamage": 190,
      "trigger": "Auto",
      "description": "Blast enemies with glass slugs that devastate on impact. In Gara's hands, this signature weapon has a larger Ammo Pool.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.1,
      "type": "Primary",
      "imageName": "astilla.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "70.0",
      "flight": 75,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5d/GlassShotgun.png/revision/latest?cb=20171018134541",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Astilla",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps, projectile munitions. Deals 30% of damage upon impact and 70% on explosion. ✪",
      "dmg": "Crit/Status",
      "rank": 43.3,
      "tierRank": 3,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Brawler/Brawler",
      "name": "Atlas",
      "description": "Titan of stone, lord of the earthly elementals.",
      "masteryReq": 0,
      "sprintSpeed": 0.89999998,
      "passiveDescription": "Becomes immune to Knockdown effects while on the ground.",
      "type": "Warframe",
      "imageName": "atlas.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4009772,
      "introduced": "17.5",
      "sex": "Male",
      "sprint": 0.9,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7f/AtlasNewLook.png/revision/latest?cb=20151002032553",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Atlas",
      "acquisition": "Jordas Golem (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Atomos",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/HeatGun/GrnHeatGun",
      "totalDamage": 29,
      "trigger": "Held",
      "description": "This particle cannon generates a condensed beam of super-heated plasma designed to melt rock to ore, and enemies to molten slag.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 0.80000001,
      "type": "Secondary",
      "imageName": "atomos.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "29.0 heat",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/77/GrnHeatGun.png/revision/latest?cb=20150512233115",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Atomos",
      "disposition": 2,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot, insane dps,  beam munitions. Chains 7m away, even when shooting at dead bodies. ",
      "dmg": "Crit/Status",
      "rank": 49.1,
      "tierRank": 3,
      "component": true
    },
    {
      "name": "Atterax",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerWhip/GrineerWhip",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "A multi-bladed whip that is adept at flaying skin from bone. In extreme cases, disobedient Grineer are sentenced to death by Atterax.",
      "accuracy": 100,
      "wallAttack": 180,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "atterax.png",
      "category": "Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4e/GrineerWhip.png/revision/latest?cb=20140918035809",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Atterax",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Slide",
      "rank": 26.12,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, low attack speed. ",
      "stance": "Burning Wasp",
      "stanceNotes": "",
      "combo": "Slide",
      "component": false
    },
    {
      "name": "Attica",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnoPrmryXbow/TnoPrmryXbowWeapon",
      "totalDamage": 80,
      "trigger": "Auto",
      "description": "Quickly fire off a volley of deadly bolts with the Attica repeating crossbow.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.415,
      "type": "Primary",
      "imageName": "attica.png",
      "category": "Crossbow",
      "tradable": false,
      "damage": "80.0",
      "flight": 90,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/df/TnoPrmryXbow.png/revision/latest?cb=20140410055409",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Attica",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot, moderate DPS, projectile munitions. ",
      "dmg": "Crit/Status",
      "rank": 68,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Azima",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/SundialGun/SundialPistol",
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "This intricate automatic pistol is able to fire its clip which then spins in the air for a short time, firing lasers at nearby enemies.",
      "accuracy": 22.222221,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.25,
      "type": "Secondary",
      "imageName": "azima.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "20.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Launch Turret",
        "crit_chance": 16,
        "status_chance": 0.2,
        "blast": 75,
        "damage": "75.0 blast"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4b/SundialPistol.png/revision/latest?cb=20171031145315",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Azima",
      "disposition": 4,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot, monstrous DPS,  hitscan munitions. Alt fire launches the remaining clip that will act as a 4-point dumb turret. ✪",
      "dmg": "Crit/Status",
      "rank": 62.6,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Bad Baby",
      "uniqueName": "/Lotus/Types/Vehicles/Hoverboard/HoverboardParts/PartComponents/HoverboardSolarisA/HoverboardSolarisADeck",
      "type": "Vehicle",
      "imageName": "bad-baby.png",
      "category": "K-Drive",
      "tradable": false,
      "acquisition": "Roky (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Bad_Baby"
    },
    {
      "name": "Balla Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipOne",
      "type": "Melee",
      "imageName": "balla.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Balla_Strike"
    },
    {
      "name": "Ballistica",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/AutomaticHandCrossbow/AutoCrossBow",
      "totalDamage": 100,
      "trigger": "Charge",
      "description": "The Ballistica crossbow features a unique dual firing mechanism. Choose between a four bolt volley or a deadly accurate charged shot.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.05,
      "type": "Secondary",
      "imageName": "ballistica.png",
      "category": "Crossbow",
      "tradable": false,
      "damage": 100,
      "projectile": "Projectile",
      "secondary": {
        "name": "Burst Shot",
        "speed": 11.43,
        "crit_chance": 3.75,
        "crit_mult": 1.5,
        "status_chance": 0,
        "shot_type": "Projectile",
        "shot_speed": 100,
        "impact": 2.5,
        "slash": 2.5,
        "puncture": 20
      },
      "statusChance": 10,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/92/DEBallistica.png/revision/latest?cb=20140101053337",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ballistica",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ballistica Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeBallistica/PrimeBallistica",
      "totalDamage": 304,
      "trigger": "Charge",
      "description": "The beauty of this luxuriously gilded crossbow cannot obscure its lethal purpose.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 1.05,
      "type": "Secondary",
      "imageName": "ballistica-prime.png",
      "category": "Crossbow",
      "tradable": true,
      "damage": "152.0",
      "flight": 100,
      "projectile": "Projectile",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/db/PrimeBallistica.png/revision/latest?cb=20170829215439",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ballistica_Prime",
      "disposition": 3,
      "releaseDate": "2017 08 29",
      "vaultDate": "2019 07 07",
      "estimatedVaultDate": "2019 07 07",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS,  projectile munitions. Charged shot kills turns the target into a ghostly specter for 7 seconds. ",
      "dmg": "Crit/Status",
      "rank": 90.7,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Banshee/Banshee",
      "name": "Banshee",
      "description": "Using sonic attacks and acoustic target detection, Banshee is well suited for stealth gameplay and is capable of filling both attack and support roles.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Weapon noises are hushed so that enemies cannot hear them.",
      "type": "Warframe",
      "imageName": "banshee.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4476499,
      "introduced": "7",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9d/BansheeNewLook.png/revision/latest?cb=20141124023002",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Banshee",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Banshee/BansheePrime",
      "name": "Banshee Prime",
      "description": "Banshee Prime assails her foes by manipulating sonic forces to deadly effect. Featuring altered mod polarities for greater customization.",
      "masteryReq": 8,
      "sprintSpeed": 1.15,
      "passiveDescription": "Weapon noises are hushed so that enemies cannot hear them.",
      "type": "Warframe",
      "imageName": "banshee-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 3947064,
      "introduced": "19.11.5",
      "sex": "Female",
      "sprint": 1.15,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8e/BansheePrimeIcon.png/revision/latest?cb=20170308023206",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Banshee_Prime",
      "releaseDate": "2017 02 28",
      "vaultDate": "2018 12 12",
      "estimatedVaultDate": "2018 12 12",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Pacifist/Pacifist",
      "name": "Baruuk",
      "description": "Beware the fury of the truly patient. Pushed beyond restraint, a reluctant master unleashes the storm within.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "Each projectile dodged, each enemy lulled or disarmed, erodes Baruuk's restraint and fuels the storm within. As Baruuk's restraint is diminished he becomes up to |PERCENT|% more resistant to damage.",
      "type": "Warframe",
      "imageName": "baruuk.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 4407354,
      "introduced": "24.2",
      "sex": "Male",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b5/BaruukIcon272.png/revision/latest?cb=20181219151057",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Baruuk",
      "acquisition": "Little Duck (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Battacor",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpSentExperimentRifle/CrpSentExperimentRifle",
      "totalDamage": 66,
      "trigger": "Auto Burst",
      "description": "A weapon that builds charge the more it kills. Hit capacity then release for an obliterating discharge of power.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "battacor.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "42.0 magnetic",
      "flight": 115,
      "projectile": "Projectile",
      "secondary": {
        "speed": 1,
        "crit_chance": 34,
        "crit_mult": 3,
        "status_chance": 0.1,
        "charge_time": 0.4,
        "shot_type": "Hit-Scan",
        "radiation": 208,
        "damage": "208.0 radiation"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d8/Battacor.png/revision/latest?cb=20181110201051",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Battacor",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "High damage per shot, insane dps, projectile munitions. Primary fire has two-round burst which is potentially wasteful. Every kill gives one secondary fire charge. Up to three charges can be stored for greater damage and crit chance. Recommend to expend secondary fire as soon as possible as it is a free shot and would increase overall DPS. ",
      "dmg": "Crit/Status",
      "rank": 44,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Baza",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnSMG/TnSMGWeapon",
      "totalDamage": 16,
      "trigger": "Auto",
      "description": "Make easy prey of enemies with this quiet, agile, and pinpoint accurate Tenno submachine gun.",
      "accuracy": 80,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "baza.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "16.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fa/Baza.png/revision/latest?cb=20171124054156",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Baza",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot, moderate DPS, hitscan munitions. Completely silent but has damage falloff similar to shotguns. ",
      "dmg": "Crit/Status",
      "rank": 57.4,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Bo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/Staff",
      "totalDamage": 50,
      "trigger": "Melee",
      "description": "A two-handed, reinforced staff that can send multiple enemies airborne.",
      "accuracy": 100,
      "wallAttack": 83,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.29,
      "type": "Melee",
      "imageName": "bo.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "50.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/74/BoStaff.png/revision/latest?cb=20170210002058",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bo",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Bo Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/PrimeBo/PrimeBoWeapon",
      "totalDamage": 75,
      "trigger": "Melee",
      "description": "A classic Orokin weapon, Bo Prime creates elegant fury on the battlefield.",
      "accuracy": 100,
      "wallAttack": 125,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.29,
      "type": "Melee",
      "imageName": "bo-prime.png",
      "category": "Staff",
      "tradable": true,
      "channeling": 1.5,
      "damage": "75.0",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1b/PrimeBo.png/revision/latest?cb=20140612000225",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bo_Prime",
      "disposition": 4,
      "releaseDate": "2014 06 11",
      "vaultDate": "2016 05 17",
      "estimatedVaultDate": "2016 05 17",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 47.24,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, high attack speed. ✪",
      "stance": "Clashing Forest",
      "stanceNotes": "",
      "combo": "Resolute Flurry",
      "component": false
    },
    {
      "name": "Boar",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/FullAutoShotgun",
      "totalDamage": 176,
      "trigger": "Auto",
      "description": "A shotgun with low accuracy and strong recoil, but able to deliver its payload in full-auto. The Boar is best used at close range.",
      "accuracy": 5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.34,
      "type": "Primary",
      "imageName": "boar.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "176.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6f/Boar.png/revision/latest?cb=20130426074012",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boar",
      "disposition": 5,
      "acquisition": "Drekar Troopers",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Boar Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/PrimeBoar",
      "totalDamage": 320,
      "trigger": "Auto",
      "description": "One of the finest examples of Tenno craftsmanship, the Boar Prime offers a higher Fire Rate, Magazine Capacity and a much higher per-shot damage.",
      "accuracy": 5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.34,
      "type": "Primary",
      "imageName": "boar-prime.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "320.0",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e7/FixedPrimeBoar.png/revision/latest?cb=20130914101658",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boar_Prime",
      "disposition": 5,
      "releaseDate": "2013 09 13",
      "vaultDate": "2015 07 07",
      "estimatedVaultDate": "2015 07 07",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS, hitscan munitions. Required to mod for 100% status chance. ✪",
      "dmg": "100% Status",
      "rank": 46.4,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Boltace",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Tonfa/Boltonfa/Boltonfa",
      "totalDamage": 85,
      "trigger": "Melee",
      "description": "An intimidating Tonfa set designed to match the briary design of the Boltor.",
      "accuracy": 100,
      "wallAttack": 340,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "boltace.png",
      "category": "Tonfa",
      "tradable": false,
      "channeling": 1.5,
      "damage": "85.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/61/Boltonfa.png/revision/latest?cb=20150512232947",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boltace",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Bolto",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/CrossBow",
      "totalDamage": 40,
      "trigger": "Semi",
      "description": "The Bolto fires slow, heavy bolts that are capable of impaling enemies to walls.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.51,
      "itemCount": 1,
      "parents": [
        "Hystrix"
      ],
      "type": "Secondary",
      "imageName": "bolto.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "40.0",
      "flight": 75,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/Bolto.png/revision/latest?cb=20130426074708",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bolto",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Boltor",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/BoltoRifle",
      "totalDamage": 25,
      "trigger": "Auto",
      "description": "The Boltor fires slow, heavy bolts that are capable of impaling enemies to walls.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.05,
      "type": "Primary",
      "imageName": "boltor.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "25.0",
      "flight": 85,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b5/Boltor.png/revision/latest?cb=20130213060423",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boltor",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Boltor Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeBoltor/PrimeBoltor",
      "totalDamage": 45.999996,
      "trigger": "Auto",
      "description": "Fires Orokin designed bolts that are faster and sharper.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "omegaAttenuation": 1.05,
      "type": "Primary",
      "imageName": "boltor-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "46.0",
      "flight": 100,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/59/DEPrimeBoltor.png/revision/latest?cb=20140306030523",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boltor_Prime",
      "disposition": 3,
      "releaseDate": "2014 03 06",
      "vaultDate": "2016 02 16",
      "estimatedVaultDate": "2016 02 16",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot, moderate DPS, projectile munitions. ",
      "dmg": "Status",
      "rank": 66.9,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Brakk",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerHandShotgun/GrineerHandCannon",
      "totalDamage": 200,
      "trigger": "Semi",
      "description": "Simple but powerful. The semi-automatic Brakk hand cannon delivers a lot of punch in a small package.",
      "accuracy": 7.6923075,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.2,
      "type": "Secondary",
      "imageName": "brakk.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "200.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b5/DEGrineerHandShotgun.png/revision/latest?cb=20140116153506",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Brakk",
      "disposition": 4,
      "acquisition": "The Grustrag Three",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS,  hitscan munitions. RIP Raids. ",
      "dmg": "Critical",
      "rank": 85.8,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Braton",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/Rifle",
      "totalDamage": 24,
      "trigger": "Auto",
      "description": "The Braton's high rate of fire and accuracy make it a favorite among the Tenno.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.2,
      "type": "Primary",
      "imageName": "braton.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "24.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/19/Braton.png/revision/latest?cb=20170210002053",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Braton",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Braton Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/BratonPrime",
      "totalDamage": 35,
      "trigger": "Auto",
      "description": "A classic Orokin weapon, Braton Prime features modified damage levels and a larger magazine over the standard model.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.2,
      "type": "Primary",
      "imageName": "braton-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "35.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/02/PrimeBraton.png/revision/latest?cb=20161125231435",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Braton_Prime",
      "disposition": 4,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS, hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 81.1,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Braton Vandal",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/VIPRifle",
      "totalDamage": 35,
      "trigger": "Auto",
      "description": "A special version of the standard Braton rifle with a slower Fire Rate but offering higher accuracy and damage values. The Braton Vandal has been customized by the Tenno with a blue-green metallic finish and Lotus branding on the grips.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.2,
      "type": "Primary",
      "imageName": "braton-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "35.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/30/BratonVandal.png/revision/latest?cb=20180428090650",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Braton_Vandal",
      "disposition": 4,
      "acquisition": "Sanctuary Onslaught",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Broken Scepter",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnQueenSceptre/GrnQueenSceptreWeapon",
      "totalDamage": 60,
      "trigger": "Melee",
      "description": "A shattered talisman of the Grineer Elder Queen. It pulls health orbs from deceased enemies and energy orbs from destroyed robots.",
      "accuracy": 100,
      "wallAttack": 100,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.1900001,
      "type": "Melee",
      "imageName": "broken-scepter.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "60.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/18/GrnQueenSceptre.png/revision/latest?cb=20161112092829",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Broken_Scepter",
      "disposition": 4,
      "acquisition": "The War Within (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 48.46,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, very high attack speed. Suffers from relatively poor consistency. Can Drain enemies to spawn health/energy orb. ",
      "stance": "Clashing Forest",
      "stanceNotes": "",
      "combo": "Resolute Flurry",
      "component": false
    },
    {
      "name": "Broken War",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/StalkerTwo/StalkerTwoSmallSword",
      "totalDamage": 90,
      "trigger": "Melee",
      "description": "A fragment of Stalker's War sword, a symbol of his defeat.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.79000002,
      "type": "Melee",
      "imageName": "broken-war.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "90.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b2/StalkerTwoSword.png/revision/latest?cb=20151204013307",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Broken_War",
      "disposition": 2,
      "acquisition": "The Second Dream (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 48.35,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, moderate DPS, high attack speed. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "",
      "combo": "Diving Kestrel",
      "component": true
    },
    {
      "name": "Bronco",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/HandShotGun",
      "totalDamage": 280,
      "trigger": "Semi",
      "description": "The Bronco is a small-scale shotgun that can be wielded with one hand. Only effective at close range, it has a limited Magazine Capacity.",
      "accuracy": 3.7037036,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "bronco.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "280.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8e/Bronco.png/revision/latest?cb=20130426074714",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bronco",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Bronco Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/BroncoPrime",
      "totalDamage": 350,
      "trigger": "Semi",
      "description": "Infused with rare Orokin alloys, the Bronco Prime is a highly efficient weapon, trading an increased Magazine Capacity and damage for a lower rate of fire.",
      "accuracy": 3.7037036,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "bronco-prime.png",
      "category": "Shotgun Sidearm",
      "tradable": true,
      "damage": "350.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c8/PrimeBronco.png/revision/latest?cb=20130713204336",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bronco_Prime",
      "disposition": 5,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS,  hitscan munitions. ",
      "dmg": "100% Status",
      "rank": 90.1,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Burst Laser",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/BurstLaserPistol",
      "totalDamage": 7,
      "trigger": "Burst",
      "description": "Fires a small burst of lasers.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1.45,
      "type": "Sentinel Weapon",
      "imageName": "burst-laser.png",
      "tradable": false,
      "damage": "7.0",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d4/DESentinelBurstLaser.png/revision/latest?cb=20140122154227",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Burst_Laser",
      "disposition": 5,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Burston",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/BurstRifle",
      "totalDamage": 30,
      "trigger": "Burst",
      "description": "The Burston fires 3-round bursts, which provides a balance between the lethality of automatic rifles and the accuracy of semi-automatic rifles.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "burston.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a8/Burston.png/revision/latest?cb=20160820040926",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Burston",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Burston Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeBurston/PrimeBurston",
      "totalDamage": 36,
      "trigger": "Burst",
      "description": "Once thought lost to the ages, attempts to reengineer the Burston Prime never fully replicated this weapon's power and agility.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "burston-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "36.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/83/PrimeBurston.png/revision/latest?cb=20161126000536",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Burston_Prime",
      "disposition": 4,
      "releaseDate": "2013 12 19",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS, hitscan munitions. Gilded Truth (Arbiters of Hexis) increases fire rate and provide Truth effect (Gas, health, parkour). ",
      "dmg": "Crit/Status",
      "rank": 102.8,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Buzlok",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnGorgSniperRifle/GrnGorgSniperRifle",
      "totalDamage": 60,
      "trigger": "Semi",
      "description": "Mark your targets and unleash a barrage of bullets, the Buzlok's homing rounds always find the enemy. Marked targets are more likely to take critical hits.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.45,
      "type": "Primary",
      "imageName": "buzlok.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "60.0",
      "flight": 40,
      "projectile": "Projectile",
      "secondary": {
        "name": "Beacon",
        "speed": 1.67,
        "crit_chance": 0,
        "crit_mult": 1,
        "status_chance": 0,
        "shot_type": "Projectile",
        "shot_speed": null,
        "puncture": 3
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9e/GrnGorgSniperRifle.png/revision/latest?cb=20140918035810",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Buzlok",
      "disposition": 5,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot, moderate DPS, projectile munitions. Alt fire launches tracer beacon which gives additive 50% Crit Chance (20 seconds) that remain active even the target is dead. Has insane DPS potential but difficult to attain due to difficulty in handling beacon and relatively poor handling. Suffers from relatively poor consistency. ✪",
      "dmg": "Crit/Status",
      "rank": 61.1,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Cantic Prism",
      "uniqueName": "/Lotus/Weapons/Corpus/OperatorAmplifiers/Set1/Barrel/CorpAmpSet1BarrelPartA",
      "type": "Amp",
      "imageName": "cantic-prism.png",
      "tradable": false,
      "acquisition": "Little Duck (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Cantic_Prism"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/CarrierPowerSuit",
      "name": "Carrier",
      "description": "With 'Assault Mode' and 'Ammo Case' as default Precepts, Carrier is a seeker Sentinel. Carrier also comes with a shotgun weapon.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "carrier.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Carrier"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/PrimeCarrierPowerSuit",
      "name": "Carrier Prime",
      "description": "This ornate sentinel is an excellent example of late Orokin craftsmanship and styling.",
      "type": "Sentinel",
      "imageName": "carrier-prime.png",
      "tradable": true,
      "releaseDate": "2015 07 07",
      "vaultDate": "2017 05 30",
      "estimatedVaultDate": "2017 05 30",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "vaulted": true,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Carrier_Prime"
    },
    {
      "name": "Cassowar",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/TnHalberdPolearm/TnHalberdPolearmWeapon",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "Light and nimble, the twin blades of this polearm will swoop and slice through throngs of hardened foes.",
      "accuracy": 100,
      "wallAttack": 117,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "cassowar.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "70.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b3/Cassowar.png/revision/latest?cb=20171124054158",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cassowar",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 55.31,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, high attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Vaulting Apex",
      "component": false
    },
    {
      "name": "Castanas",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/StickyBomb/StickyBombs",
      "totalDamage": 160,
      "trigger": "Active",
      "description": "The remotely triggered Castanas quietly deliver a lethal dose of electricity to unsuspecting enemies.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "castanas.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "160.0 electricity",
      "flight": 30,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/17/TaserStar.png/revision/latest?cb=20140226214533",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Castanas",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Catchmoon",
      "uniqueName": "/Lotus/Weapons/SolarisUnited/Secondary/SUModularSecondarySet1/Barrel/SUModularSecondaryBarrelAPart",
      "type": "Secondary",
      "imageName": "catchmoon.png",
      "category": "Kitgun",
      "tradable": false,
      "acquisition": "Rude Zuud (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Catchmoon"
    },
    {
      "name": "Caustacyst",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/InfEmbolistScythe/InfestedScythe",
      "totalDamage": 75,
      "trigger": "Melee",
      "description": "Charge attacks from this scythe unleash a wave of acid that mutilates enemies and leaves a trail of corrosive sludge.",
      "accuracy": 100,
      "wallAttack": 150,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.3,
      "type": "Melee",
      "imageName": "caustacyst.png",
      "category": "Scythe",
      "tradable": false,
      "channeling": 1.5,
      "damage": "75.0 corrosive",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e1/EmbolistScythe.png/revision/latest?cb=20161021004947",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Caustacyst",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 58.59,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. Suffers from relatively poor consistency. Charge attack throws wave of Corrosive damage, staggers enemies and causes guaranteed slash proc on direct contact. ",
      "stance": "Stalking Fan",
      "stanceNotes": "",
      "combo": "Charge Attack (finisher proc) or Dying Light",
      "component": false
    },
    {
      "name": "Centaur",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/Archswordandshield/ArchSwordShield",
      "totalDamage": 280,
      "trigger": "Melee",
      "description": "Part sword, part shield, the Centaur excels at charging headlong into enemy fire.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "imageName": "centaur.png",
      "tradable": false,
      "damage": "280.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2f/Archswordandshield.png/revision/latest?cb=20141024143732",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Centaur",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ceramic Dagger",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Dagger/CeramicDagger",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "This short blade weapon was built using ceramic. It has limited range but comes out fast.",
      "accuracy": 100,
      "wallAttack": 105,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.4299999,
      "type": "Melee",
      "imageName": "ceramic-dagger.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ceramic_Dagger",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Speed",
      "rank": 47.67,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, low attack speed. ✪",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Cerata",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Glaives/PunctureGlaive/PunctureGlaiveWeapon",
      "totalDamage": 44,
      "trigger": "Melee",
      "description": "Twisted and tortured from exposure to the Infestation, this glaive becomes an absolute predator in the hands of the right Tenno.",
      "accuracy": 100,
      "wallAttack": 132,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.36,
      "type": "Melee",
      "imageName": "cerata.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "44.0 toxin",
      "projectile": "Thrown",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/ca/PunctureGlaive.png/revision/latest?cb=20151028155311",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cerata",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 62.58,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "name": "Cernos",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/AntlerBow/AntlerBow",
      "totalDamage": 220,
      "trigger": "Charge",
      "description": "Evoking the design of ancient bows, the high impact Cernos is perfect for hunting down highly shielded enemies.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.15,
      "type": "Primary",
      "imageName": "cernos.png",
      "category": "Bow",
      "tradable": false,
      "damage": "110.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 18,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ac/DECernos.png/revision/latest?cb=20180503202033",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cernos",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Cernos Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/PrimeCernos/PrimeCernos",
      "totalDamage": 360,
      "trigger": "Charge",
      "description": "A noble bow to hunt hellish beasts.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.15,
      "type": "Primary",
      "imageName": "cernos-prime.png",
      "category": "Bow",
      "tradable": true,
      "damage": "180.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 30,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/06/CernosPrime.png/revision/latest?cb=20161123020233",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cernos_Prime",
      "disposition": 4,
      "releaseDate": "2016 11 22",
      "vaultDate": "2018 09 25",
      "estimatedVaultDate": "2018 09 25",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, projectile munitions. Alt fire toggles firing pattern between horizontal and vertical (+50% headshot damage). ",
      "dmg": "Crit/Status",
      "rank": 63.5,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Cestra",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CorpusMinigun/CorpusMinigun",
      "totalDamage": 26.000002,
      "trigger": "Auto",
      "description": "Compact and deadly, the Cestra discharges bolts of energy at an increasingly rapid rate.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.52,
      "itemCount": 1,
      "parents": [
        "Dual Cestra"
      ],
      "type": "Secondary",
      "imageName": "cestra.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "26.0",
      "flight": 100,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/16/CorpusMinigun.png/revision/latest?cb=20140221191931",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cestra",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/RetrieverKubrowPetPowerSuit",
      "name": "Chesa Kubrow",
      "description": "This Kubrow will disarm adversaries and retrieve the spoils of battle.",
      "type": "Companion",
      "imageName": "chesa-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Chesa_Kubrow"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Dragon/Dragon",
      "name": "Chroma",
      "description": "A master of the deadly elements, Chroma can alter his damage output by changing his Emissive Color.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Chosen Emissive Color dictates the type of Elemental Damage dealt by Abilities.",
      "type": "Warframe",
      "imageName": "chroma.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4142643,
      "introduced": "16",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2d/ChromaNewLook.png/revision/latest?cb=20150324023405",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Chroma",
      "acquisition": "The New Strange (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Dragon/ChromaPrime",
      "name": "Chroma Prime",
      "description": "Bind the elements and unleash untold destruction with Chroma Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 6,
      "sprintSpeed": 1,
      "passiveDescription": "Chosen Emissive Color dictates the type of Elemental Damage dealt by Abilities.",
      "type": "Warframe",
      "imageName": "chroma-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 2235678,
      "introduced": "23.9",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f2/ChromaPrime.png/revision/latest?cb=20180925193634",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Chroma_Prime",
      "releaseDate": "2018 09 25",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 07 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Cobra & Crane",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/SwordsAndBoards/PacifistShieldAndSword/PacifistShieldSword",
      "totalDamage": 100,
      "trigger": "Melee",
      "description": "Baruuk's signature weapons: a sword for retribution, a shield for restraint. In Baruuk's hands, and his hands only, Cobra's first strike in a combo renders his foe unconscious.",
      "accuracy": 100,
      "wallAttack": 400,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "cobra-&-crane.png",
      "category": "Sword and Shield",
      "tradable": false,
      "channeling": 1.5,
      "damage": "100.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b1/Cobra_%26_Crane.png/revision/latest?cb=20181219165427",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cobra_%26_Crane",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 47.92,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, moderate DPS, low attack speed. ",
      "stance": "Final Harbinger",
      "stanceNotes": "",
      "combo": "Systemic Shred",
      "component": false
    },
    {
      "name": "Convectrix",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpSplitLaser/CrpSplitLaser",
      "totalDamage": 24,
      "trigger": "Held",
      "description": "When its twin-lasers converge on a target a circuit is created, frying the subject.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.46,
      "type": "Primary",
      "imageName": "convectrix.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "24.0",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9f/CrpSplitRifle.png/revision/latest?cb=20151002090144",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Convectrix",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot, monstrous DPS, beam munitions. Primary fire brings the beam from wide to narrow while alt fire sweeps the beam. Alt fire sweeps the beam from narrow to wide instead and is useful for applying status effects to large crowds. [Efficient Beams] makes 100% status modding easy while consuming no ammo while not dealing damage. This makes it possible to keep the beam narrow for maximum concentrated damage without hurting ammo economy. ✪",
      "dmg": "Crit/Status",
      "rank": 54,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Corinth",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnHeavyShotgun/TnHeavyShotgunGun",
      "totalDamage": 540,
      "trigger": "Semi",
      "description": "Deliver a massive punch with each blast of this shotgun, or launch a round that explodes mid-air knocking down nearby enemies.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.94999999,
      "type": "Primary",
      "imageName": "corinth.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "540.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Air Burst Projectile",
        "crit_chance": 4,
        "crit_mult": 1.6,
        "status_chance": 0.3,
        "shot_type": "Projectile",
        "shot_speed": null,
        "impact": 100
      },
      "secondaryArea": {
        "name": "Air Burst Explosion",
        "status_chance": 28,
        "radius": 800,
        "blast": 404,
        "damage": "404.0 blast"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/32/TnHeavyShotgun.png/revision/latest?cb=20171221214433",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Corinth",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, hitscan munitions. Alt fire is useful when the reload button is harder to reach than the secondary fire button. Reload should be done when clip is empty as there is a delay between reloading and firing, but the gains should be minimal. ",
      "dmg": "Critical",
      "rank": 55.5,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Corvas",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/LaunchGrenade/ArchCannon",
      "totalDamage": 840,
      "trigger": "Charge",
      "description": "When fully charged, this flak-cannon delivers a devastating shot. Perfect for taking down fast-moving interceptors.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 1.05,
      "type": "Archwing Gun",
      "imageName": "corvas.png",
      "tradable": false,
      "damage": "420.0",
      "projectile": "Hitscan",
      "statusChance": 10,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/21/ArchLaunchGrenade.png/revision/latest?cb=20141024143734",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Corvas",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Cronus",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/CronusSword/CronusLongSword",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "A strong blade forged using ceramic.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.48,
      "type": "Melee",
      "imageName": "cronus.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/Cronus.png/revision/latest?cb=20130426080615",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cronus",
      "disposition": 5,
      "acquisition": "Captain Vor (Boss)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 83.74,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "Crimson Dervish's Coiling Impale: +DPS -proc",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Cryotra",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetComponents/CryoxionWeapon",
      "totalDamage": 10,
      "trigger": "Held",
      "description": "Emits a ray of sub-zero energy.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "type": "Sentinel Weapon",
      "imageName": "cryotra.png",
      "tradable": false,
      "damage": "10.0 cold",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fa/Cryotra.png/revision/latest?cb=20181110220600",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cryotra",
      "disposition": 3,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Cyanex",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpSentAmalgPistol/CrpSentAmalgPistol",
      "totalDamage": 91,
      "trigger": "Auto",
      "description": "Sentient tech merges with Corpus design to deliver this lethal sidearm. Fully automatic, it fires ricocheting, homing projectiles that release small clouds of Gas on impact. Alt-fire to release the entire clip without homing as a single burst.",
      "accuracy": 1.8181819,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1,
      "type": "Secondary",
      "imageName": "cyanex.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "41.0 gas",
      "projectile": "Projectile",
      "secondary": {
        "name": "Burst Mode",
        "speed": 10.05,
        "crit_chance": 8,
        "crit_mult": 1.4,
        "status_chance": 0.3,
        "shot_type": "Projectile",
        "impact": 2.9,
        "slash": 38.9,
        "puncture": 30.2
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/36/Cyanex.png/revision/latest?cb=20190523234907",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cyanex",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  projectile munitions. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 54.3,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Cyath Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipFour",
      "type": "Melee",
      "imageName": "cyath.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Cyath_Strike"
    },
    {
      "name": "Cycron",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpChargeGun/CrpChargeGun",
      "totalDamage": 23,
      "trigger": "Held",
      "description": "Forgo ammunition with the regenerating energy disc in this plasma throwing pistol.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.15,
      "type": "Secondary",
      "imageName": "cycron.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "10.0 radiation",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/66/Cycron.png/revision/latest?cb=20170426223716",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cycron",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot, moderate DPS,  beam munitions. Does not have an ammo reserve. Ammo in clip regenerates over time when not firing. ",
      "dmg": "Status",
      "rank": 75.9,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Cyngas",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/ArchBurstGun/ArchBurstGun",
      "totalDamage": 200,
      "trigger": "Burst",
      "description": "Unload deadly accurate bursts of mayhem.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.3,
      "imageName": "cyngas.png",
      "tradable": false,
      "damage": "200.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2f/ArchBurstGun.png/revision/latest?cb=20160710175146",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cyngas",
      "disposition": 4,
      "type": "Archwing Gun",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Daikyu",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/AsymetricalBow/AsymetricalBow",
      "totalDamage": 460,
      "trigger": "Charge",
      "description": "Daikyu takes great strength to draw back, but provides added power and range to every shot.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "daikyu.png",
      "category": "Bow",
      "tradable": false,
      "damage": 460,
      "projectile": "Projectile",
      "statusChance": 50,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/AsymmetricBow.png/revision/latest?cb=20150512232727",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Daikyu",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS, projectile munitions. ",
      "dmg": "Crit/Status",
      "rank": 84.3,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dakra Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/CronusSword/PrimeCronusLongSword",
      "totalDamage": 60,
      "trigger": "Melee",
      "description": "The Dakra Prime is a Tenno forged weapon, crafted during the time of the Orokin. It is renowned for speed, power and the ability to hit multiple targets.",
      "accuracy": 100,
      "wallAttack": 240,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.15,
      "type": "Melee",
      "imageName": "dakra-prime.png",
      "category": "Sword",
      "tradable": true,
      "channeling": 1.5,
      "damage": "60.0",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/86/SwordPrime.png/revision/latest?cb=20130914111405",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dakra_Prime",
      "disposition": 4,
      "releaseDate": "2013 09 13",
      "vaultDate": "2015 07 07",
      "estimatedVaultDate": "2015 07 07",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 60.7,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Dark Dagger",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Dagger/DarkDagger",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "This short blade weapon forged using dark metals has limited range but comes out fast.",
      "accuracy": 100,
      "wallAttack": 105,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 0.51999998,
      "type": "Melee",
      "imageName": "dark-dagger.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0 radiation",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0b/DarkDagger.png/revision/latest?cb=20161106060712",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dark_Dagger",
      "disposition": 1,
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dark Split-Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/DarkSword/DarkSwordDaggerHybridWeapon",
      "totalDamage": 10,
      "trigger": "",
      "description": "Use as a devastating heavy sword or apply a Dual Melee stance and split the weapon into two ferocious blades.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.21,
      "type": "Melee",
      "imageName": "dark-split-sword.png",
      "category": "Melee",
      "tradable": false,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 38.69,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, very high attack speed. Heavy blade mode is severely underpowered. ✪",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Dark_Split-Sword"
    },
    {
      "name": "Dark Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/DarkSword/DarkLongSword",
      "totalDamage": 37,
      "trigger": "Melee",
      "description": "A blade forged using dark metals, capable of delivering innate <DT_RADIATION>Radiation Damage with attacks.",
      "accuracy": 100,
      "wallAttack": 148,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.48,
      "type": "Melee",
      "imageName": "dark-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "37.0 radiation",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c6/DarkSword.png/revision/latest?cb=20161106060928",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dark_Sword",
      "disposition": 5,
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 86.99,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, very low attack speed. Suffers from relatively poor consistency. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "Crimson Dervish's Coiling Impale: +DPS -proc",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Deconstructor",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/SentGlaiveWeapon",
      "totalDamage": 50,
      "trigger": "",
      "description": "Causes the Helios Sentinel to attack enemy targets using pieces of itself.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1.25,
      "type": "Sentinel Weapon",
      "imageName": "deconstructor.png",
      "tradable": false,
      "damage": "50.0",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a1/SentinelGlaiveWeapon.png/revision/latest?cb=20140422001413",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Deconstructor",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Deconstructor Prime",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/DeconstructorPrime/PrimeHeliosGlaiveWeapon",
      "totalDamage": 75,
      "trigger": "",
      "description": "Allows the Helios Prime to violently disassemble and turn itself into a deadly projectile.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 8,
      "omegaAttenuation": 1.25,
      "type": "Sentinel Weapon",
      "imageName": "deconstructor-prime.png",
      "tradable": true,
      "damage": "75.0",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9f/DeconstructorPrime.png/revision/latest?cb=20170222214714",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Deconstructor_Prime",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dehtat Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipFive",
      "type": "Melee",
      "imageName": "dehtat.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Dehtat_Strike"
    },
    {
      "name": "Dera",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/EnergyRifle",
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "The DERA is a repeater that fires super-heated plasma.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "dera.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "30.0",
      "flight": 100,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a3/CorpusEnergyRifle.png/revision/latest?cb=20161125234457",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dera",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dera Vandal",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/DeraVandal",
      "totalDamage": 32,
      "trigger": "Auto",
      "description": "A customized version of the Dera, featuring a metallic finish and Lotus decal.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "dera-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "32.0",
      "flight": 100,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/27/DeraVandal.png/revision/latest?cb=20161126000242",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dera_Vandal",
      "disposition": 4,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS, projectile munitions. ",
      "dmg": "Status",
      "rank": 87.2,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Despair",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/StalkerKunai",
      "totalDamage": 58,
      "trigger": "Auto",
      "description": "Used by The Stalker, Despair throwing blades have a mono-filament edge, sharp enough to penetrate a Warframe.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.3,
      "type": "Secondary",
      "imageName": "despair.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "58.0",
      "flight": 70,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/25/Despair.png/revision/latest?cb=20170304062240",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Despair",
      "disposition": 4,
      "acquisition": "Stalker",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS,  projectile munitions. ",
      "dmg": "Crit/Status",
      "rank": 120.3,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Destreza",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/TnoRapier/TnoRapier",
      "totalDamage": 75,
      "trigger": "Melee",
      "description": "Elevate martial combat into an art form with this Tenno rapier.",
      "accuracy": 100,
      "wallAttack": 300,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.14,
      "type": "Melee",
      "imageName": "destreza.png",
      "category": "Rapier",
      "tradable": false,
      "channeling": 1.5,
      "damage": "75.1",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5c/TnoRapier.png/revision/latest?cb=20160120124035",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Destreza",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Destreza Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PRapier/DestrezaPrime",
      "totalDamage": 76,
      "trigger": "Melee",
      "description": "Take mastery to the next level with this primed rapier.",
      "accuracy": 100,
      "wallAttack": 304,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.14,
      "type": "Melee",
      "imageName": "destreza-prime.png",
      "category": "Rapier",
      "tradable": true,
      "channeling": 1.5,
      "damage": "76.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1f/DestrezaPrime.png/revision/latest?cb=20180619191549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Destreza_Prime",
      "disposition": 4,
      "releaseDate": "2018 06 19",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 04 17",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Critical",
      "rank": 38.23,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, low attack speed. ✪",
      "stance": "Vulpine Mask",
      "stanceNotes": "Alt combo= Duel Secrets: -DPS +execution",
      "combo": "Hidden Flourish",
      "component": false
    },
    {
      "name": "Deth Machine Rifle",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/DethMachineRifle",
      "totalDamage": 5,
      "trigger": "Auto",
      "description": "Standard issue weaponry signature to Dethcube.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1.455,
      "type": "Sentinel Weapon",
      "imageName": "deth-machine-rifle.png",
      "tradable": false,
      "damage": "5.1",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f2/DESentinelDethMachineRifle.png/revision/latest?cb=20140122154228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Deth_Machine_Rifle",
      "disposition": 5,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/DethCubePowerSuit",
      "name": "Dethcube",
      "description": "With 'Assault Mode' and 'Vaporize' as default precepts, Dethcube acts exactly as advertised, as a badass cube of 'deth'. Comes loaded with Deth Machine Rifle weapon.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "dethcube.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Dethcube"
    },
    {
      "name": "Detron",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CorpusHandShotgun/CorpusHandCannon",
      "totalDamage": 280,
      "trigger": "Semi",
      "description": "The sleek lines of the Detron conceal its ferocious nature. The hand cannon's semi-automatic action takes down enemies with speed and efficiency.",
      "accuracy": 7.1428571,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1,
      "type": "Secondary",
      "imageName": "detron.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "280.0 radiation",
      "flight": 150,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fd/DECorpusHandCannon.png/revision/latest?cb=20140116153506",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Detron",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dex Dakra",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/DexTheSecond/DexTheSecond",
      "totalDamage": 65,
      "trigger": "Melee",
      "description": "A gift from the Lotus to commemorate the anniversary of the first Tenno waking from Cryo stasis.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.15,
      "type": "Melee",
      "imageName": "dex-dakra.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "65.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e9/DexDakra.png/revision/latest?cb=20150423184455",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dex_Dakra",
      "disposition": 4,
      "acquisition": "Anniversary",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 42.97,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, low attack speed. ",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Dex Furis",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/DexFuris/DexFuris",
      "totalDamage": 16,
      "trigger": "Auto",
      "description": "A gift from the Lotus to commemorate the anniversary of the first Tenno waking from Cryo stasis.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.39,
      "type": "Secondary",
      "imageName": "dex-furis.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "16.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/33/DexFuris.png/revision/latest?cb=20170606011218",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dex_Furis",
      "disposition": 5,
      "acquisition": "Anniversary",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot, moderate DPS,  hitscan munitions. Despite being called the Furis, it uses the Afuris riven. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 77.7,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Dex Sybaris",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/DexTheThird/DexTheThird",
      "totalDamage": 75,
      "trigger": "Burst",
      "description": "A gift from the Lotus to commemorate the third anniversary of the first Tenno waking from Cryo stasis.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.05,
      "type": "Primary",
      "imageName": "dex-sybaris.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "75.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/12/DexSybaris.png/revision/latest?cb=20160307022859",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dex_Sybaris",
      "disposition": 3,
      "acquisition": "Anniversary",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/ArcDronePowerSuit",
      "name": "Diriga",
      "description": "Diriga shocks nearby enemies, and picks off distant threats, utilizing the Vulklok sniper rifle and the 'Calculated Shot', 'Arc Coil' and 'Electro Pulse' precepts.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "diriga.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Diriga"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/GubberPowerSuit",
      "name": "Djinn",
      "description": "With 'Thumper' and 'Fatal Attraction' as default Precepts, Djinn is a combat Sentinel. Djinn also comes with a poison dart weapon.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "djinn.png",
      "tradable": false,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Djinn"
    },
    {
      "name": "Dokrahm Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee02/Tip/TipEleven",
      "type": "Melee",
      "imageName": "dokrahm.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Dokrahm_Strike"
    },
    {
      "name": "Dragon Nikana",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/KatanaAndWakizashi/LowKatana",
      "totalDamage": 85,
      "trigger": "Melee",
      "description": "The Dragon Nikana is forged from ancient Tenno steel. This is a master's weapon, only the most worthy of Tenno may wield it.",
      "accuracy": 100,
      "wallAttack": 182,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.35,
      "type": "Melee",
      "imageName": "dragon-nikana.png",
      "category": "Nikana",
      "tradable": false,
      "channeling": 1.5,
      "damage": "85.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/39/DragonKatana.png/revision/latest?cb=20140415221134",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dragon_Nikana",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 54.28,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, moderate DPS, high attack speed. ",
      "stance": "Decisive Judgement",
      "stanceNotes": "",
      "combo": "Silent Acumen",
      "component": false
    },
    {
      "name": "Drakgoon",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerFlakCannon/FlakCannon",
      "totalDamage": 700,
      "trigger": "Charge",
      "description": "The Drakgoon flak cannon sends volleys of intensely hot shrapnel ricocheting around the room. Can be fired in wide or concentrated bursts.",
      "accuracy": 1.4285715,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.48,
      "itemCount": 1,
      "parents": [
        "Zarr"
      ],
      "type": "Primary",
      "imageName": "drakgoon.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "400.0",
      "flight": 100,
      "projectile": "Projectile",
      "statusChance": 23,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/GrineerFlakCannon.png/revision/latest?cb=20161117023032",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Drakgoon",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS, projectile munitions. ",
      "dmg": "Raw",
      "rank": 103.8,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Dread",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/StalkerBow",
      "totalDamage": 200,
      "trigger": "Charge",
      "description": "Dread is the calling card of The Stalker. It fires arrows that can decapitate.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.2,
      "type": "Primary",
      "imageName": "dread.png",
      "category": "Bow",
      "tradable": false,
      "damage": "130.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 20,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/20/Dread2.png/revision/latest?cb=20180418151352",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dread",
      "disposition": 4,
      "acquisition": "Stalker",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot, moderate DPS, projectile munitions. ",
      "dmg": "Critical",
      "rank": 71,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Dual Cestra",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CorpusMinigun/DualCorpusMinigun",
      "totalDamage": 26.000002,
      "trigger": "Auto",
      "description": "Wield two Cestras to unleash a dual torrent of high energy bolts.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.3,
      "type": "Secondary",
      "imageName": "dual-cestra.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "26.0",
      "flight": 100,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4e/DualCorpusMinigun.png/revision/latest?cb=20140206061958",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Cestra",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dual Cleavers",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerMachetteAndCleaver/DualCleaverWeapon",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "Butcher your foes with brutal blades in each hand.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "dual-cleavers.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/43/Dual_Cleavers.png/revision/latest?cb=20130803121949",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Cleavers",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Dual Decurion",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/ArchwingHeavyPistols/ArchHeavyPistols",
      "totalDamage": 60,
      "trigger": "Auto",
      "description": "Delivering twin streams of highly accurate, rapid-fire ordnance, the Decurion are specifically designed for combat in the vacuum of space.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 1.25,
      "imageName": "dual-decurion.png",
      "tradable": false,
      "damage": "60.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5f/ArchHeavyPistols.png/revision/latest?cb=20141127181924",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Decurion",
      "disposition": 4,
      "type": "Archwing Gun",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dual Ether",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualShortSword/DualEtherSword",
      "totalDamage": 40,
      "trigger": "Melee",
      "description": "Fast and precise. The Dual Ether cuts so cleanly that it was considered by the Tenno to be a more humane weapon for ‘cleansing’ infested allies. Capable of hitting multiple targets.",
      "accuracy": 100,
      "wallAttack": 160,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.45,
      "type": "Melee",
      "imageName": "dual-ether.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "40.0",
      "vaulted": false,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Ether",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 59.02,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. ",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Dual Heat Swords",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualShortSword/DualHeatSwords",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "With a Heat Sword in each hand, enemies reach their fiery demise twice as fast. Can connect with multiple targets at once.",
      "accuracy": 100,
      "wallAttack": 180,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.4400001,
      "type": "Melee",
      "imageName": "dual-heat-swords.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/39/DualHeat.png/revision/latest?cb=20130213060428",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Heat_Swords",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 57.43,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, low attack speed. Suffers from relatively poor consistency. Slam attacks procs Heat in an AOE. ",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Dual Ichor",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Axe/DualInfestedAxesWeapon",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "The fast and brutal Dual Ichor axes will quickly tear through enemies with a high probability of inflicting Critical Damage.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.16,
      "type": "Melee",
      "imageName": "dual-ichor.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0 toxin",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/51/DualInfestedAxes.png/revision/latest?cb=20130914111400",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Ichor",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 31.97,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, high attack speed. Ties with Nami Skyla Prime. ✪",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Dual Kamas",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualKamas/DualKamas",
      "totalDamage": 42,
      "trigger": "Melee",
      "description": "Wielding a Kama in each hand brings a savage amount of <DT_SLASH>Slash Damage to bear against your enemies.",
      "accuracy": 100,
      "wallAttack": 168,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 0.81,
      "itemCount": 1,
      "parents": [
        "Dual Raza"
      ],
      "type": "Melee",
      "imageName": "dual-kamas.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "42.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f9/DEDualKamas.png/revision/latest?cb=20140124181157",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Kamas",
      "disposition": 2,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Dual Kamas Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeDualKamas/PrimeDualKamas",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "The sensual lines of these golden Kamas have long been celebrated as a masterwork of Tenno weapon smithing.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 0.81,
      "type": "Melee",
      "imageName": "dual-kamas-prime.png",
      "category": "Dual Swords",
      "tradable": true,
      "channeling": 1.5,
      "damage": "70.0",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5b/DualKamasPrime.png/revision/latest?cb=20151015150932",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Kamas_Prime",
      "disposition": 2,
      "releaseDate": "2015 10 06",
      "vaultDate": "2017 08 29",
      "estimatedVaultDate": "2017 08 29",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 37,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, very high attack speed. ",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Dual Keres",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/QuillSword/QuillDualSwords",
      "totalDamage": 44,
      "trigger": "Melee",
      "description": "Tear through any target with these vicious, claw-like blades. The signature swords of Khora.",
      "accuracy": 100,
      "wallAttack": 176,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.48,
      "type": "Melee",
      "imageName": "dual-keres.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "44.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0e/DualKeres.png/revision/latest?cb=20180417184307",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Keres",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Critical",
      "rank": 31.47,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, very high attack speed. Good balance of speed and crit. ✪",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Dual Raza",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Soma/SomaDualKamas",
      "totalDamage": 48,
      "trigger": "Melee",
      "description": "Razor sharp battle-hatchets, designed to compliment the Soma.",
      "accuracy": 100,
      "wallAttack": 192,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.4,
      "type": "Melee",
      "imageName": "dual-raza.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "48.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4d/SomaDualKamas.png/revision/latest?cb=20150408223721",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Raza",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Critical",
      "rank": 41.57,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, low attack speed. ✪",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Dual Skana",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualShortSword/DualShortSword",
      "totalDamage": 32,
      "trigger": "Melee",
      "description": "A shorter Skana in each hand. Can hit multiple targets.",
      "accuracy": 100,
      "wallAttack": 128,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.48,
      "itemCount": 1,
      "parents": [
        "Akjagara",
        "Dark Split-Sword",
        "Redeemer"
      ],
      "type": "Melee",
      "imageName": "dual-skana.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "32.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f8/DualSkana.png/revision/latest?cb=20160221143832",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Skana",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 65,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, very low attack speed. ",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": true
    },
    {
      "name": "Dual Toxocyst",
      "uniqueName": "/Lotus/Weapons/Infested/Pistols/InfVomitGun/InfVomitGunWep",
      "totalDamage": 75,
      "trigger": "Semi",
      "description": "Brain-strikes excite this bioweapon, causing it to rapidly release toxic munitions.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.3,
      "type": "Secondary",
      "imageName": "dual-toxocyst.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "75.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/09/InfVomitGun.png/revision/latest?cb=20160304215549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Toxocyst",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS,  hitscan munitions. Headshot grants Frenzy buff. Frenzy lasts 3 seconds and can be refreshed. Frenzy grants 100% increase in Toxin damage (on base damage), 15% increase in fire rate, recoil reduction, and doesn't consume ammo while firing. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Speed",
      "rank": 85.6,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dual Zoren",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Axe/DualAxeWeapon",
      "totalDamage": 30,
      "trigger": "Melee",
      "description": "Short axes held in each hand. High attack speed and can hit multiple targets. Delivers a high percentage of critical strikes.",
      "accuracy": 100,
      "wallAttack": 120,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.4400001,
      "type": "Melee",
      "imageName": "dual-zoren.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "30.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/44/DualZoren.png/revision/latest?cb=20130811190125",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Zoren",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Critical",
      "rank": 35.35,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, very high attack speed. Zorencoptering, anyone? ✪",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": true
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/DemolitionJetPack/DemolitionJetPack",
      "name": "Elytron",
      "description": "This heavy duty Archwing was designed for one purpose, destruction.",
      "masteryReq": 0,
      "sprintSpeed": 0.89999998,
      "type": "Vehicle",
      "imageName": "elytron.png",
      "category": "Archwing",
      "tradable": false,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Elytron"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ember/Ember",
      "name": "Ember",
      "description": "Ember is a nightmare for light-armored targets. Ember can super-heat the air which opens up surprising crowd-control possibilities.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Regenerates |REGEN| Energy/s and increases Ability Strength by |STRENGTH|% while on Fire.",
      "type": "Warframe",
      "imageName": "ember.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4670010,
      "introduced": "Vanilla",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a7/EmberNewLook.png/revision/latest?cb=20141124023013",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ember",
      "acquisition": "General Sargas Ruk (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ember/EmberPrime",
      "name": "Ember Prime",
      "description": "Ember Prime offers the same potential for wanton destruction as Ember but provides unique mod polarities, allowing for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Regenerates |REGEN| Energy/s and increases Ability Strength by |STRENGTH|% while on Fire.",
      "type": "Warframe",
      "imageName": "ember-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 2959129,
      "introduced": "11",
      "sex": "Female",
      "sprint": 1.1,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/39/EmberPrimeNewLook.png/revision/latest?cb=20141124023024",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ember_Prime",
      "releaseDate": "2013 11 20",
      "vaultDate": "2015 10 06",
      "estimatedVaultDate": "2015 10 06",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Embolist",
      "uniqueName": "/Lotus/Weapons/Infested/Pistols/InfestedPistol",
      "totalDamage": 35,
      "trigger": "Held",
      "description": "A living weapon, the infested Embolist pistol kills its victims with an acidic venomous gas.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1.4,
      "type": "Secondary",
      "imageName": "embolist.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "35.0 toxin",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/InfestedPistol.png/revision/latest?cb=20140314172859",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Embolist",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot, monstrous DPS,  beam munitions. ✪",
      "dmg": "Status",
      "rank": 58.7,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Endura",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/ThreeLeaf/ThreeLeaf",
      "totalDamage": 95,
      "trigger": "Melee",
      "description": "The delicate form of this Tenno rapier conceals its ferocious and resilient force.",
      "accuracy": 100,
      "wallAttack": 380,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "endura.png",
      "category": "Rapier",
      "tradable": false,
      "channeling": 1.5,
      "damage": "95.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/Endura.png/revision/latest?cb=20170524214221",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Endura",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 39.9,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, low attack speed. ",
      "stance": "Vulpine Mask",
      "stanceNotes": "Alt combo= Duel Secrets: -DPS +execution",
      "combo": "Hidden Flourish",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/YinYang/YinYang",
      "name": "Equinox",
      "description": "Split between day and night, Equinox manifests aggressive and defensive forms at will.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "|PERCENT|% of Health Orbs are converted into Energy, and |PERCENT|% of Energy Orbs are converted into Health.",
      "type": "Warframe",
      "imageName": "equinox.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 0,
      "introduced": "17",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Equinox",
      "acquisition": "Tyl Regor (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/YinYang/EquinoxPrime",
      "name": "Equinox Prime",
      "description": "Night and Day in final balance; the graceful perfection of the one that walks the borders.",
      "masteryReq": 5,
      "sprintSpeed": 1.15,
      "passiveDescription": "|PERCENT|% of Health Orbs are converted into Energy, and |PERCENT|% of Energy Orbs are converted into Health.",
      "type": "Warframe",
      "imageName": "equinox-prime.png",
      "tradable": true,
      "aura": "naramon",
      "color": 0,
      "introduced": "24.5.8",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Equinox_Prime",
      "releaseDate": "2019 03 27",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 01 27",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ether Daggers",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualDagger/DualEtherDagger",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "A shorter version of the Ether blade that allows for a more focused attack on a single target.",
      "accuracy": 100,
      "wallAttack": 180,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.49,
      "type": "Melee",
      "imageName": "ether-daggers.png",
      "category": "Dual Daggers",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.1",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/08/EtherDaggers2.png/revision/latest?cb=20130412155450",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ether_Daggers",
      "disposition": 5,
      "acquisition": "Operation Plague Star (Cetus)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Speed",
      "rank": 46.1,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, very low attack speed. ✪",
      "stance": "Spinning Needle",
      "stanceNotes": "Alt combo= Fey Intervention (forward moveset); +DPS, -ragdoll",
      "combo": "Accursed Whispers",
      "component": false
    },
    {
      "name": "Ether Reaper",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Scythe/EtherScytheWeapon",
      "totalDamage": 65,
      "trigger": "Melee",
      "description": "With a blade forged from the same material as the Ether Sword, the Ether Reaper delivers quick death to its victims.",
      "accuracy": 100,
      "wallAttack": 130,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.45,
      "type": "Melee",
      "imageName": "ether-reaper.png",
      "category": "Scythe",
      "tradable": false,
      "channeling": 1.5,
      "damage": "65.1",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/48/EtherScythe.png/revision/latest?cb=20130914111401",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ether_Reaper",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 53.81,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, high attack speed. ",
      "stance": "Stalking Fan",
      "stanceNotes": "",
      "combo": "Dying Light",
      "component": false
    },
    {
      "name": "Ether Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/LongSword/EtherSword",
      "totalDamage": 37,
      "trigger": "Melee",
      "description": "A single blade for more precision. The Ether Sword cuts so cleanly that it was considered by the Tenno to be a more humane weapon for ‘cleansing’ infested allies.",
      "accuracy": 100,
      "wallAttack": 148,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.4400001,
      "type": "Melee",
      "imageName": "ether-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "37.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5a/Ether-Sword.png/revision/latest?cb=20160221144220",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ether_Sword",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 73.58,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. Slam attacks procs Radiation in an AOE. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "Crimson Dervish's Coiling Impale: +DPS -proc",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Euphona Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/AllNew1hSG/AllNew1hSG",
      "totalDamage": 325,
      "trigger": "Semi",
      "description": "Banshee Prime’s signature shotgun is an instrument of devastation that fires both focused and broad shots.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 0.69999999,
      "type": "Secondary",
      "imageName": "euphona-prime.png",
      "category": "Shotgun Sidearm",
      "tradable": true,
      "damage": "325.0",
      "flight": 180,
      "projectile": "Projectile",
      "secondary": {
        "crit_chance": 2,
        "crit_mult": 2,
        "status_chance": 0.3,
        "impact": 44,
        "slash": 660,
        "puncture": 176
      },
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/EuphoraPrime.png/revision/latest?cb=20170301080132",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Euphona_Prime",
      "disposition": 1,
      "releaseDate": "2017 02 28",
      "vaultDate": "2018 12 12",
      "estimatedVaultDate": "2018 12 12",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS,  projectile munitions. Alt-fire switches to multi-pellet mode that can achieve 100% status chance when modded properly. However, slug mode firing has superior DPS and hybrid modding will gimp both builds. ",
      "dmg": "Critical",
      "rank": 56,
      "tierRank": 2,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Excalibur/Excalibur",
      "name": "Excalibur",
      "description": "A perfect balance of mobility and offense, Excalibur is the ideal Warframe for new players.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Excalibur deals |DAMAGE|% increased damage and attacks |SPEED|% faster when wielding swords.",
      "type": "Warframe",
      "imageName": "excalibur.png",
      "tradable": false,
      "conclave": true,
      "color": 7564394,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/40/ExcaliburNewLook.png/revision/latest?cb=20141124023040",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Excalibur",
      "acquisition": "Lieutenant Lech Kril (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Excalibur/ExcaliburPrime",
      "name": "Excalibur Prime",
      "description": "Excalibur Prime is the epitome of mobility and offense, and features the same abilities as Excalibur, but has unique mod polarities installed allowing for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Excalibur Prime deals |DAMAGE|% increased damage and attacks |SPEED|% faster when wielding swords.",
      "type": "Warframe",
      "imageName": "excalibur-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 12169376,
      "introduced": "5",
      "sex": "Male",
      "sprint": 1,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/ExcaliburPrimeNewLook.png/revision/latest?cb=20180628213418",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Excalibur_Prime",
      "acquisition": "Unobtainable (Founders)",
      "checked": false,
      "unobtainable": true,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Excalibur/ExcaliburUmbra",
      "name": "Excalibur Umbra",
      "description": "From the shadow of the long night emerges a new Excalibur.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Umbra exhibits sentience in combat without Transference control. Attacks |SPEED|% faster and deals |DAMAGE|% more damage while wielding swords.",
      "type": "Warframe",
      "imageName": "excalibur-umbra.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4013626,
      "introduced": "23",
      "sex": "Male",
      "sprint": 1,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5c/ExcaliburUmbra.png/revision/latest?cb=20180908125114",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Excalibur_Umbra",
      "acquisition": "The Sacrifice (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "specialNote": "Item are fully ranked when obtained."
    },
    {
      "name": "Exergis",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpShapeBlast/CrpShapeBlastShotgun",
      "totalDamage": 1620,
      "trigger": "Semi",
      "description": "Feel the kick of this Corpus shotgun as it shatters a high-yield crystal into anyone and anything standing in your way.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "exergis.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "420.0 radiation",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6c/Exergis.png/revision/latest?cb=20181218162843",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Exergis",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS, projectile munitions. ",
      "dmg": "100% Status",
      "rank": 48.5,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Falcor",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Glaive/CrpGlaive/CrpGlaive",
      "totalDamage": 78,
      "trigger": "Melee",
      "description": "Carve through enemies with surgical precision using this Corpus-tech glaive.",
      "accuracy": 100,
      "wallAttack": 234,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "falcor.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "28.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f4/CrpGlaive.png/revision/latest?cb=20181012140354",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Falcor",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 57.42,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, low attack speed. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "name": "Fang",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualDagger/DualDagger",
      "totalDamage": 30,
      "trigger": "Melee",
      "description": "These matching stilettos have increased attack speed and can unleash a flurry of multi-hit attacks.",
      "accuracy": 100,
      "wallAttack": 120,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.36,
      "type": "Melee",
      "imageName": "fang.png",
      "category": "Dual Daggers",
      "tradable": false,
      "channeling": 1.5,
      "damage": "30.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/DualDaggers.png/revision/latest?cb=20160221143944",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fang",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Fang Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualDagger/FangPrimeDagger",
      "totalDamage": 35.999996,
      "trigger": "Melee",
      "description": "A set of ceremonial daggers from the Orokin era, the Fang Prime's blades resonate violently as they strike. This allows them to pierce hardened materials like armor with ease.",
      "accuracy": 100,
      "wallAttack": 144,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.36,
      "type": "Melee",
      "imageName": "fang-prime.png",
      "category": "Dual Daggers",
      "tradable": true,
      "channeling": 1.5,
      "damage": "36.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2b/PrimeFang.png/revision/latest?cb=20130713205727",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fang_Prime",
      "disposition": 5,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Speed",
      "rank": 61.55,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. ",
      "stance": "Spinning Needle",
      "stanceNotes": "Alt combo= Fey Intervention (forward moveset); +DPS, -ragdoll",
      "combo": "Accursed Whispers",
      "component": false
    },
    {
      "name": "Ferrox",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/Spears/Railgun/CorpusRailgun",
      "totalDamage": 350,
      "trigger": "Charge",
      "description": "Discharge a rail of ionized death or throw the Ferrox like a spear and create a localized field of attraction no enemy can escape from.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 1.15,
      "type": "Primary",
      "imageName": "ferrox.png",
      "category": "Speargun",
      "tradable": false,
      "damage": 350,
      "projectile": "Hitscan",
      "secondary": {
        "name": "Throw Spear",
        "speed": 1,
        "crit_chance": 4,
        "crit_mult": 2,
        "status_chance": 0.3,
        "charge_time": 0.5,
        "shot_type": "Projectile",
        "shot_speed": null,
        "impact": 455,
        "slash": 122.5,
        "puncture": 72.5
      },
      "statusChance": 10,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/56/Ferrox.png/revision/latest?cb=20170309230240",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ferrox",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS, hitscan munitions. Munition shot the moment it is fully charged. Alt fire should be used to reduce reliance on primary weapons. Suffers from relatively poor consistency. ✪",
      "dmg": "Critical",
      "rank": 47.3,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Flatbelly",
      "uniqueName": "/Lotus/Types/Vehicles/Hoverboard/HoverboardParts/PartComponents/HoverboardCorpusA/HoverboardCorpusADeck",
      "type": "Vehicle",
      "imageName": "flatbelly.png",
      "category": "K-Drive",
      "tradable": false,
      "acquisition": "Roky (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Flatbelly"
    },
    {
      "name": "Fluctus",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/RocketArtillery/ArchRocketCrossbow",
      "totalDamage": 200,
      "trigger": "Semi",
      "description": "An Archwing energy weapon that sends waves of deadly plasma crashing into enemies.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 0.89999998,
      "imageName": "fluctus.png",
      "tradable": false,
      "damage": "200.0",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/dc/ArchRocketCrossbow.png/revision/latest?cb=20141219182154",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fluctus",
      "disposition": 3,
      "type": "Archwing Gun",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Flux Rifle",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/CrpLaserRifle",
      "totalDamage": 22,
      "trigger": "Held",
      "description": "Laser Rifle with Corpus safe-guards removed.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.55,
      "type": "Primary",
      "imageName": "flux-rifle.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "22.0",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/62/CorpusLaserRifle.png/revision/latest?cb=20161126002354",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Flux_Rifle",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS, beam munitions. ",
      "dmg": "Status",
      "rank": 74.5,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Fragor",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Hammer/HammerWeapon",
      "totalDamage": 115,
      "trigger": "Melee",
      "description": "A large two-handed hammer, the Fragor requires great strength to wield, but impacts with enough force to send groups of enemies tumbling.",
      "accuracy": 100,
      "wallAttack": 230,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 0.95999998,
      "type": "Melee",
      "imageName": "fragor.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "115.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a9/DEFragor.png/revision/latest?cb=20140416121340",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fragor",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Fragor Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeFragor/PrimeFragor",
      "totalDamage": 130,
      "trigger": "Melee",
      "description": "A beautifully forged instrument of devastation.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 0.95999998,
      "type": "Melee",
      "imageName": "fragor-prime.png",
      "category": "Hammer",
      "tradable": true,
      "channeling": 1.75,
      "damage": "130.0",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d7/PrimeFragor.png/revision/latest?cb=20160520210719",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fragor_Prime",
      "disposition": 3,
      "releaseDate": "2016 05 17",
      "vaultDate": "2018 03 20",
      "estimatedVaultDate": "2018 03 20",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 130.48,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, poor DPS, low attack speed. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "Only use Raging Whirlwind to proc Impact or the slam will ragdoll",
      "combo": "Tidal Force & Raging Whirlwind",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Frost/Frost",
      "name": "Frost",
      "description": "By channeling moisture and vapor in the surrounding environment, Frost creates formidable defenses and lethal attacks from sub zero conditions.",
      "masteryReq": 0,
      "sprintSpeed": 0.94999999,
      "passiveDescription": "Striking Frost with a melee attack has a |CHANCE|% chance to freeze the attacker for |DURATION|s.",
      "type": "Warframe",
      "imageName": "frost.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 2897981,
      "introduced": "6",
      "sex": "Male",
      "sprint": 0.95,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5a/FrostNewLook.png/revision/latest?cb=20141124023059",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Frost",
      "acquisition": "Captain Vor and Lieutenant Lech Kril (Boss Duo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Frost/FrostPrime",
      "name": "Frost Prime",
      "description": "Frost Prime has the same chilling abilities as Frost but provides unique mod polarities, allowing for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 0.94999999,
      "passiveDescription": "Striking Frost with a melee attack has a |CHANCE|% chance to freeze the attacker for |DURATION|s.",
      "type": "Warframe",
      "imageName": "frost-prime.png",
      "tradable": true,
      "aura": "vazarin",
      "conclave": true,
      "color": 1776408,
      "introduced": "7.10",
      "sex": "Male",
      "sprint": 0.95,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d1/FrostPrimeNewLook.png/revision/latest?cb=20141124023106",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Frost_Prime",
      "releaseDate": "2013 05 03",
      "vaultDate": "2015 04 01",
      "estimatedVaultDate": "2015 04 01",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Fulmin",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnWispRifle/TnWispRifle",
      "totalDamage": 500,
      "trigger": "Semi",
      "description": "Strike with silent lightning or the pummeling drum of thunder. Alternate between stealthy short-range electrical discharge, and automatic lightning gun. Faster mode-switch when used by Wisp.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "fulmin.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "400.0 electricity",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Full Auto Mode",
        "speed": 9.33,
        "crit_chance": 28,
        "crit_mult": 2.4,
        "status_chance": 0.1,
        "shot_type": "Hit-Scan",
        "puncture": 8,
        "electricity": 25,
        "damage": "25.0 electricity"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/34/Fulmin.png/revision/latest?cb=20190523234908",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fulmin",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot, insane dps, projectile munitions. Primary fire has a small cone-like AoE. Secondary fire toggles automatic hitscan fire mode. Switching between the two is slow and clunky. ✪",
      "dmg": "Crit/Status",
      "rank": 38,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Furax",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Fist/Fist",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "These power gauntlets lack the range of most Melee Weapons, but Furax is far more devastating when you strike an enemy in close combat.",
      "accuracy": 100,
      "wallAttack": 105,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.38,
      "type": "Melee",
      "imageName": "furax.png",
      "category": "Fist",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/Furax.png/revision/latest?cb=20130426080553",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Furax",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Furax Wraith",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Fist/FuraxWraith",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "These Wraith gauntlets have been augmented for power.",
      "accuracy": 100,
      "wallAttack": 105,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.38,
      "type": "Melee",
      "imageName": "furax-wraith.png",
      "category": "Fist",
      "tradable": true,
      "channeling": 1.75,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b8/WraithFurax.png/revision/latest?cb=20160430000926",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Furax_Wraith",
      "disposition": 5,
      "acquisition": "Cetus Bounty (Levels 40 - 60)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 74.47,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. ",
      "stance": "Gaia's Tragedy",
      "stanceNotes": "",
      "combo": "Forest's Remorse",
      "component": false
    },
    {
      "name": "Furis",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/AutoPistol",
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "The Furis delivers a high damage output in a short time frame thanks to its high rate of fire.",
      "accuracy": 22.222221,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "furis.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "20.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3e/Furis.png/revision/latest?cb=20170606011114",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Furis",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Fusilai",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/GlassKunai/GlassKunaiWeapon",
      "totalDamage": 77,
      "trigger": "Auto",
      "description": "Silently lacerate enemies with Gara's signature glass throwing knives. Increased Projectile Speed when wielded by Gara.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.3,
      "type": "Secondary",
      "imageName": "fusilai.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "77.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 1.5,
        "crit_chance": 3,
        "crit_mult": 1.5,
        "status_chance": 0.4,
        "shot_type": "Projectile",
        "shot_speed": null,
        "pellet": {
          "name": "Shuriken",
          "count": 3
        },
        "slash": 138.6,
        "puncture": 92.4
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6d/GlassKunai.png/revision/latest?cb=20171017224243",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fusilai",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  projectile munitions. Alt-fire launches three throwing knives horizontally instead. ✪",
      "dmg": "Status",
      "rank": 59.9,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Galatine",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/GreatSword/TennoGreatSword",
      "totalDamage": 125,
      "trigger": "Melee",
      "description": "With massive charged power and the ability to hit up to five foes in a single swing, the Galatine sword is the heavy artillery of Melee Weapons.",
      "accuracy": 100,
      "wallAttack": 250,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "galatine.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "125.0",
      "vaulted": false,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Galatine",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Galatine Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PrimeGalatine/PrimeGalatine",
      "totalDamage": 165,
      "trigger": "Melee",
      "description": "Only Tenno were strong enough to wield this noble beast of a weapon.",
      "accuracy": 100,
      "wallAttack": 330,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "galatine-prime.png",
      "category": "Heavy Blade",
      "tradable": true,
      "channeling": 1.5,
      "damage": "165.0",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/PrimeGalatine342.png/revision/latest?cb=20160820032103",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Galatine_Prime",
      "disposition": 1,
      "releaseDate": "2016 08 23",
      "vaultDate": "2018 06 19",
      "estimatedVaultDate": "2018 06 19",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 32.97,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, insane dps, high attack speed. ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "name": "Galvacord",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Whips/CrpShockGrip/CrpShockGripWhipWeapon",
      "totalDamage": 80,
      "trigger": "Melee",
      "description": "Shock and maim with this heavyweight retractable whip.",
      "accuracy": 100,
      "wallAttack": 320,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "galvacord.png",
      "category": "Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "38.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/27/Galvacord.png/revision/latest?cb=20190725171640",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Galvacord",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Slide",
      "rank": 32.16,
      "tierRank": 3,
      "weaponNotes": "Low damage per hit, insane dps, low attack speed. Suffers from relatively poor consistency. ✪",
      "stance": "Burning Wasp",
      "stanceNotes": "",
      "combo": "Slide",
      "component": false
    },
    {
      "name": "Gammacor",
      "uniqueName": "/Lotus/Weapons/Syndicates/CephalonSuda/Pistols/CSDroidArray",
      "totalDamage": 16,
      "trigger": "Held",
      "description": "Designed to quickly vaporize minerals for content analysis, users discovered its powerful beam was equally efficient at dispatching hostiles.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 0.89999998,
      "type": "Secondary",
      "imageName": "gammacor.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "16.0 magnetic",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/24/Gammacor.png/revision/latest?cb=20141127182228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gammacor",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "uniqueName": "/Lotus/Powersuits/Glass/Glass",
      "name": "Gara",
      "description": "The battlefield trembles before Gara's crystalline power, her ringing touch transforming opponents to targets of brittle beauty.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "A chance to create a radial blind lasting |DURATION|s when exposed to bright light.",
      "type": "Warframe",
      "imageName": "gara.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 6379861,
      "introduced": "22",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2c/GaraNewLook.png/revision/latest?cb=20171026104236",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gara",
      "acquisition": "Saya's Vigil (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Garuda/Garuda",
      "name": "Garuda",
      "description": "Death's crimson maiden, the blood of Garuda's foes imbue her with strength and vitality.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "As Garuda nears death, her damage increases up to an additional |DAMAGE|%.Slashes with her talons if no melee weapon is equipped.",
      "type": "Warframe",
      "imageName": "garuda.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": false,
      "color": 12960440,
      "introduced": "24",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/Garuda.png/revision/latest?cb=20181225215327",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Garuda",
      "acquisition": "Vox Solaris (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Gazal Machete",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PersianMachete/DjinnMachete",
      "totalDamage": 52,
      "trigger": "Melee",
      "description": "Each kill with this swooping blade adds bonus damage to the Djinn Sentinel’s next Fatal Attraction ability. In turn, Fatal Attraction bestows the weapon with a period of <DT_CORROSIVE>Corrosive Damage.",
      "accuracy": 100,
      "wallAttack": 208,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.35,
      "type": "Melee",
      "imageName": "gazal-machete.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "52.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2b/DjinnMachete.png/revision/latest?cb=20180206084638",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gazal_Machete",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Status",
      "rank": 37.71,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, high attack speed. Can be paired with Djinn's Fatal Attraction for approximately 16.6% uptime. ✪",
      "stance": "Cyclone Kraken",
      "stanceNotes": "",
      "combo": "Lightning Siren",
      "component": false
    },
    {
      "name": "Gaze",
      "uniqueName": "/Lotus/Weapons/SolarisUnited/Secondary/SUModularSecondarySet1/Barrel/SUModularSecondaryBarrelDPart",
      "type": "Secondary",
      "imageName": "gaze.png",
      "category": "Kitgun",
      "tradable": false,
      "acquisition": "Rude Zuud (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Gaze"
    },
    {
      "name": "Glaive",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Glaives/LightGlaive/LightGlaiveWeapon",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "Dating back to the time of the first Tenno, the Glaive is a uniquely deadly weapon. This multi-bladed disc is not only effective for melee combat; it can also be thrown like a boomerang to cut down enemies at a distance.",
      "accuracy": 100,
      "wallAttack": 135,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 1.22,
      "type": "Melee",
      "imageName": "glaive.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "projectile": "Thrown",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d4/DEGlaive.png/revision/latest?cb=20140407035856",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Glaive",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Glaive Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Glaives/PrimeGlaive/PrimeGlaiveWeapon",
      "totalDamage": 50,
      "trigger": "Melee",
      "description": "The Glaive Prime is a deadly and beautiful weapon from the Orokin era. The blades are as effective in close quarters as they are when thrown at distant enemies.",
      "accuracy": 100,
      "wallAttack": 150,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.22,
      "type": "Melee",
      "imageName": "glaive-prime.png",
      "category": "Glaive",
      "tradable": true,
      "channeling": 1.5,
      "damage": "50.0",
      "projectile": "Thrown",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/73/PrimeGlaive.png/revision/latest?cb=20140314174506",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Glaive_Prime",
      "disposition": 4,
      "releaseDate": "2013 11 20",
      "vaultDate": "2015 10 06",
      "estimatedVaultDate": "2015 10 06",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 43.97,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, very high attack speed. ✪",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "name": "Glaxion",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpFreezeRay/CrpFreezeRayRifle",
      "totalDamage": 26,
      "trigger": "Held",
      "description": "Fires a photon beam that halts molecular vibrations, causing instant and painful freezing.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "glaxion.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "26.0 cold",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/CrpFreezeRayRifle.png/revision/latest?cb=20140828170518",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Glaxion",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Glaxion Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpFreezeRay/Vandal/CrpFreezeRayVandalRifle",
      "totalDamage": 29,
      "trigger": "Held",
      "description": "A cutting-edge, halogen-cooled electron accelerator capable of snap-freezing a target in moments.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "glaxion-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "29.0 cold",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1a/GlaxionVandal.png/revision/latest?cb=20190523234909",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Glaxion_Vandal",
      "disposition": 4,
      "acquisition": "Operation: Hostile Mergers",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot, insane dps, beam munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 40.2,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Gorgon",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/HeavyRifle",
      "totalDamage": 25,
      "trigger": "Auto",
      "description": "The Gorgon sports a large clip that allows it to provide suppressing fire and sustain a high damage rate over a long time. Its high Fire Rate is only achieved following a short wind-up cycle.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "gorgon.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "25.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/Gorgon.png/revision/latest?cb=20161126005232",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gorgon",
      "disposition": 4,
      "acquisition": "Heavy Gunners",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Gorgon Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/WraithGorgon/WraithGorgon",
      "totalDamage": 27,
      "trigger": "Auto",
      "description": "The Gorgon Wraith is a powerful variant of its precursor that features unique styling.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "gorgon-wraith.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "27.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/60/WraithGorgon.png/revision/latest?cb=20140313231518",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gorgon_Wraith",
      "disposition": 4,
      "acquisition": "Razorback Armada",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Grakata",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerAssaultRifle/GrnAssaultRifle",
      "totalDamage": 11,
      "trigger": "Auto",
      "description": "Equipped with a huge Magazine and impressive Fire Rate, the Grakata is the preferred weapon of Grineer Lancers.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.2,
      "itemCount": 1,
      "parents": [
        "Twin Grakatas"
      ],
      "type": "Primary",
      "imageName": "grakata.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "11.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2e/GrineerAssaultRifle.png/revision/latest?cb=20161126003539",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Grakata",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Gram",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/GreatSword/GreatSword",
      "totalDamage": 100,
      "trigger": "Melee",
      "description": "The heavy two-handed sword known as Gram requires great strength to wield, but it is notorious for its splitting power. Can hit multiple targets with each strike.",
      "accuracy": 100,
      "wallAttack": 200,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.4400001,
      "type": "Melee",
      "imageName": "gram.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "100.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/55/DEGram.png/revision/latest?cb=20140101053337",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gram",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Gram Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PrimeGram/PrimeGram",
      "totalDamage": 180,
      "trigger": "Melee",
      "description": "Born anew, the father of swords returns.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 1.4400001,
      "type": "Melee",
      "imageName": "gram-prime.png",
      "category": "Heavy Blade",
      "tradable": true,
      "channeling": 1.5,
      "damage": "180.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/GramPrime.png/revision/latest?cb=20180925193624",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gram_Prime",
      "disposition": 5,
      "releaseDate": "2018 09 25",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 07 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 27.73,
      "tierRank": 3,
      "weaponNotes": "Very high damage per hit, insane dps, low attack speed. ✪",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "name": "Granmu Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/Set1/Barrel/SentAmpSet1BarrelPartC",
      "type": "Amp",
      "imageName": "granmu-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Granmu_Prism"
    },
    {
      "name": "Grattler",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/RepurposedGrineerAntiAircraftGun/ArchGRNAAGun",
      "totalDamage": 275,
      "trigger": "Auto",
      "description": "Shatter your targets with explosive shells from this devastating Archwing cannon.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 0.94999999,
      "imageName": "grattler.png",
      "tradable": false,
      "damage": "175.0",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/70/GrnAntiAirGun.png/revision/latest?cb=20150731174941",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Grattler",
      "disposition": 3,
      "type": "Archwing Gun",
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Grinlok",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerLeverActionRifle/GLARifle",
      "totalDamage": 187,
      "trigger": "Semi",
      "description": "With pinpoint accuracy, the Grinlok lever-action repeating rifle can easily find the soft spot on any target.",
      "accuracy": 44.444443,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.245,
      "type": "Primary",
      "imageName": "grinlok.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "187.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/DEGrinlok.png/revision/latest?cb=20140214215111",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Grinlok",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Guandao",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/TnGuandaoPolearm/TnGuandaoPolearmWeapon",
      "totalDamage": 90,
      "trigger": "Melee",
      "description": "Harvest the enemy with this towering polearm.",
      "accuracy": 100,
      "wallAttack": 150,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "guandao.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "90.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/05/Guandao.png/revision/latest?cb=20170720170251",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Guandao",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Slide",
      "rank": 60.3,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, poor DPS, low attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Slide",
      "component": false
    },
    {
      "name": "Gunsen",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Warfan/WarfanWeapon",
      "totalDamage": 50,
      "trigger": "Melee",
      "description": "Lacerate attackers with two razor sharp warfans.",
      "accuracy": 100,
      "wallAttack": 200,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "gunsen.png",
      "category": "Warfan",
      "tradable": false,
      "channeling": 1.5,
      "damage": "50.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/45/WarfanWeapon.png/revision/latest?cb=20171221214434",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gunsen",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 39.59,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, very high attack speed. ",
      "stance": "Slicing Feathers",
      "stanceNotes": "Alt combo= Razor Fin: -DPS +procs",
      "combo": "Scathing Plume",
      "component": false
    },
    {
      "name": "Halikar",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnBoomerang/GrnBoomerang",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "This jet powered Grineer throwing mace always comes back to its master and is even capable of disarming targets.",
      "accuracy": 100,
      "wallAttack": 135,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.4400001,
      "type": "Melee",
      "imageName": "halikar.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0",
      "projectile": "Thrown",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/01/GrnBoomerang.png/revision/latest?cb=20141024143413",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Halikar",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 56.89,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, high attack speed. Thrown attacks can disarm opponents. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "name": "Harpak",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnHarpoonGun/GrnHarpoonGun",
      "totalDamage": 50,
      "trigger": "Burst",
      "description": "Spike enemies to the wall or reel them in with this burst harpoon gun.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.55,
      "type": "Primary",
      "imageName": "harpak.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "50.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Harpoon",
        "speed": 1.5,
        "crit_chance": 25,
        "crit_mult": 2.3,
        "status_chance": 0.1,
        "shot_type": "Projectile",
        "shot_speed": null,
        "impact": 40,
        "slash": 10,
        "puncture": 50
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0d/GrnHarpoonGun.png/revision/latest?cb=20150731174941",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Harpak",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot, moderate DPS, projectile munitions. Three-round burst is wasteful at times. Alt fire launches a harpoon can be used to drag enemies closer and with Exposing Harpoon grants an additional 300% crit chance. ",
      "dmg": "Crit/Status",
      "rank": 69,
      "tierRank": 1,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Priest/Priest",
      "name": "Harrow",
      "description": "Always prepared to sacrifice. This monastic Warframe uses the Void to bolster allies' defenses and amplify their lethality.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Overshield cap doubled.",
      "type": "Warframe",
      "imageName": "harrow.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 3874852,
      "introduced": "21",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4d/Harrow.png/revision/latest?cb=20180121173742",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Harrow",
      "acquisition": "Chains of Harrow (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Hate",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Scythe/StalkerScytheWeapon",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "Hate is a scythe with a cruel blade, wielded by The Stalker.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.36,
      "type": "Melee",
      "imageName": "hate.png",
      "category": "Scythe",
      "tradable": false,
      "channeling": 1.5,
      "damage": "70.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/99/DEStalkerScythe.png/revision/latest?cb=20140116153508",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hate",
      "disposition": 5,
      "acquisition": "Stalker",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 54.07,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, moderate DPS, low attack speed. ",
      "stance": "Stalking Fan",
      "stanceNotes": "",
      "combo": "Dying Light",
      "component": false
    },
    {
      "name": "Heat Dagger",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Dagger/Dagger",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "This short blade weapon has limited range but comes out fast and can inflict fire damage.",
      "accuracy": 100,
      "wallAttack": 135,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.4400001,
      "type": "Melee",
      "imageName": "heat-dagger.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3c/HeatDagger.png/revision/latest?cb=20160221144237",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Heat_Dagger",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Speed",
      "rank": 54.59,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, very low attack speed. Slam attacks deal Heat damage and have high chance of proccing Heat. ",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Heat Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/HeatSword/HeatLongSword",
      "totalDamage": 44,
      "trigger": "Melee",
      "description": "A strong blade capable of inflicting <DT_SLASH>Slash Damage to its foes.",
      "accuracy": 100,
      "wallAttack": 176,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.48,
      "type": "Melee",
      "imageName": "heat-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "44.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c4/Heat.png/revision/latest?cb=20130426080625",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Heat_Sword",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 51.45,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, low attack speed. ✪",
      "stance": "Swooping Falcon",
      "stanceNotes": "Crimson Dervish's Coiling Impale: +DPS -proc",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Hek",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/QuadShotgun",
      "totalDamage": 525,
      "trigger": "Semi",
      "description": "The Hek is a powerful shotgun that fires its shots with a tight spread, making it efficient at medium range as long as its strong recoil is properly managed.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 0.94999999,
      "type": "Primary",
      "imageName": "hek.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "525.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a6/Hek.png/revision/latest?cb=20130426074025",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hek",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Heliocor",
      "uniqueName": "/Lotus/Weapons/Cephalon/Melee/Hammer/CephHammerWeapon",
      "totalDamage": 140,
      "trigger": "Melee",
      "description": "Obtain enlightenment with this massive hammer that performs a Codex scan on each fatal strike. Scans require an equipped Codex Scanner and an available charge.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 0.94,
      "type": "Melee",
      "imageName": "heliocor.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "140.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ae/CephHammer.png/revision/latest?cb=20160728154011",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Heliocor",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Critical",
      "rank": 139.86,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, poor DPS, low attack speed. Gives one codex scan upon kill. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "Only use Raging Whirlwind to proc Impact or the slam will ragdoll",
      "combo": "Tidal Force & Raging Whirlwind",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/MeleePetPowerSuit",
      "name": "Helios",
      "description": "With 'Investigator' as its unique Precept and 'Deconstructor' as its weapon, the versatile Helios Sentinel acts as both a lethal guardian and an automatic codex scanner. Scans require an equipped Codex Scanner and an available charge.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "helios.png",
      "tradable": false,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Helios"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/PrimeHeliosPowerSuit",
      "name": "Helios Prime",
      "description": "This knowledge hungry protector defends its master with Deconstructor Prime.",
      "type": "Sentinel",
      "imageName": "helios-prime.png",
      "tradable": true,
      "releaseDate": "2017 02 28",
      "vaultDate": "2018 12 12",
      "estimatedVaultDate": "2018 12 12",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "vaulted": true,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Helios_Prime"
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/ChargerKubrowPetPowerSuit",
      "name": "Helminth Charger",
      "description": "An Infested pet bred from the Helminth Cyst",
      "type": "Companion",
      "imageName": "helminth-charger.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Helminth_Charger"
    },
    {
      "name": "Hema",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/InfWFAccompanyingPri/InfestedBurstRifle",
      "totalDamage": 47,
      "trigger": "Burst",
      "description": "A bloodsucker. This symbiotic burst-rifle leeches health to forge its ammo and then restores health with each headshot.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "hema.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "47.0 viral",
      "flight": "???",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5f/InfestedBurstRifle.png/revision/latest?cb=20161222143411",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hema",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS, projectile munitions. Heals warframe on headshots. Three-round burst is wasteful at times. ✪",
      "dmg": "Crit/Status",
      "rank": 52.7,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Hikou",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/TennoStars",
      "totalDamage": 26,
      "trigger": "Auto",
      "description": "As an alternative to Kunai, these Tenno throwing stars do cause less Damage but they come with expanded Ammo Capacity and a higher Fire Rate.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.05,
      "type": "Secondary",
      "imageName": "hikou.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "26.0",
      "flight": 70,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d9/Hikou.png/revision/latest?cb=20171219142910",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hikou",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Hikou Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/PrimeThrowingStar/PrimeHikou",
      "totalDamage": 36,
      "trigger": "Auto",
      "description": "As deadly as any bullet without the associated noise or commotion.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.05,
      "type": "Secondary",
      "imageName": "hikou-prime.png",
      "category": "Thrown",
      "tradable": true,
      "damage": "36.0",
      "flight": 70,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b4/PrimeHikou.png/revision/latest?cb=20140923195818",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hikou_Prime",
      "disposition": 3,
      "releaseDate": "2014 09 23",
      "vaultDate": "2016 08 23",
      "estimatedVaultDate": "2016 08 23",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot, moderate DPS,  projectile munitions. ",
      "dmg": "Status",
      "rank": 74,
      "tierRank": 1,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/IronFrame/IronFrame",
      "name": "Hildryn",
      "description": "The best defense is a good offense. Hildryn draws from her Shields to fuel her Abilities, while Energy recharges her Shields.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Become invulnerable for a brief moment after shields are depleted. This ability is restored when shields fully recharge.",
      "type": "Warframe",
      "imageName": "hildryn.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 3160387,
      "introduced": "24.4",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/19/HildrynIcon272.png/revision/latest?cb=20190308054142",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hildryn",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Hind",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/BurstRifle/GrnBurstRifle",
      "totalDamage": 30,
      "trigger": "Burst",
      "description": "A powerful mid-range rifle used by Grineer shock troops, the Hind fires in five round bursts.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.42,
      "type": "Primary",
      "imageName": "hind.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 2.5,
        "crit_chance": 15,
        "crit_mult": 2,
        "status_chance": 0.1,
        "impact": 12,
        "slash": 36,
        "puncture": 12
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6d/Hind.png/revision/latest?cb=20130816203128",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hind",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS, hitscan munitions. Alt fire has better DPS on paper but due to low fire rate it still doesn't do enough. ",
      "dmg": "Crit/Status",
      "rank": 193.8,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Hirudo",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/InfWFAccompanyingSparring/InfestedKogake",
      "totalDamage": 54.999996,
      "trigger": "Melee",
      "description": "Rip into the enemy with fists of razor sharp cartilage. Steals health with each critical hit.",
      "accuracy": 100,
      "wallAttack": 165,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "hirudo.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "55.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/InfestedKogake.png/revision/latest?cb=20161222002135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hirudo",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 58.02,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. Upon crit, heal you for 5% of damage dealt, and gives up to 5 stacks of Invigorate (+5% max health, 15s). ",
      "stance": "Grim Fury",
      "stanceNotes": "",
      "combo": "Bright Blaze & Charged Attacks",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/FurtiveKubrowPetPowerSuit",
      "name": "Huras Kubrow",
      "description": "Prized for its ability to sneak up on unsuspecting prey, the Huras Kubrow were first used as hunting companions by the Orokin elite. Orokin Era Tenno soon adapted the strain for use in covert missions and assassinations.",
      "type": "Companion",
      "imageName": "huras-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Huras_Kubrow"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Pirate/Pirate",
      "name": "Hydroid",
      "description": "Rising from the ocean depths, Hydroid harnesses the power of water to a devastating effect.",
      "masteryReq": 0,
      "sprintSpeed": 1.05,
      "passiveDescription": "Slam Attacks have a |CHANCE|% chance to summon a tentacle for |DURATION|s.",
      "type": "Warframe",
      "imageName": "hydroid.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 3751229,
      "introduced": "13",
      "sex": "Male",
      "sprint": 1.05,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9f/HydroidNewLook.png/revision/latest?cb=20141124023113",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hydroid",
      "acquisition": "Councilor Vay Hek (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Pirate/HydroidPrime",
      "name": "Hydroid Prime",
      "description": "Command the ocean’s fury with this king of gold and silver. Featuring altered mod polarities for greater customization.",
      "masteryReq": 5,
      "sprintSpeed": 1.05,
      "passiveDescription": "Slam Attacks have a |CHANCE|% chance to summon a tentacle for |DURATION|s.",
      "type": "Warframe",
      "imageName": "hydroid-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 2565666,
      "introduced": "21.6",
      "sex": "Male",
      "sprint": 1.05,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6f/HydroidPrimeBust.png/revision/latest?cb=20170903163610",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hydroid_Prime",
      "releaseDate": "2017 08 29",
      "vaultDate": "2019 07 07",
      "estimatedVaultDate": "2019 07 07",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Hystrix",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/QuillDartgun/QuillDartGunWeapon",
      "totalDamage": 36.000004,
      "trigger": "Auto",
      "description": "Heat, cold, electricity, or toxin: choose an element and launch a flurry of deadly quills. This versatile sidearm is Khora’s signature weapon.",
      "accuracy": 14.285714,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.1,
      "type": "Secondary",
      "imageName": "hystrix.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "36.1",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Fire / Electric Quill",
        "crit_chance": 24,
        "crit_mult": 2.2,
        "status_chance": 0.1,
        "shot_type": "Projectile",
        "impact": 2.4,
        "slash": 3.2,
        "puncture": 34.4
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a7/Hystrix.png/revision/latest?cb=20180417184116",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hystrix",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  projectile munitions. Bolts munitions have pros and cons. Clip is small for fire rate and despite quick reload will end up being annoying. Alt-fire changes elemental damage to one of four basic types (Fire, Ice, Poison, Electricity) with guaranteed procs which scales more if corresponding elemental mod is installed. ",
      "dmg": "Crit/Status",
      "rank": 58.3,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Ignis",
      "uniqueName": "/Lotus/Weapons/ClanTech/Chemical/FlameThrower",
      "totalDamage": 0,
      "trigger": "Held",
      "description": "Ignis produces a stream of intense heat.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 0.55000001,
      "type": "Primary",
      "imageName": "ignis.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "33.0 heat",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/99/GrineerFlameThrower.png/revision/latest?cb=20151028181038",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ignis",
      "disposition": 1,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ignis Wraith",
      "uniqueName": "/Lotus/Weapons/ClanTech/Chemical/FlameThrowerWraith",
      "totalDamage": 0,
      "trigger": "Held",
      "description": "A blood-red variant of this destructive flamethrower.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 0.55000001,
      "type": "Primary",
      "imageName": "ignis-wraith.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "35.0 heat",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/IgnisWraith.png/revision/latest?cb=20170303123043",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ignis_Wraith",
      "disposition": 1,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS, beam munitions. AOE works like how you'd imagine an actual flamethrower would. ",
      "dmg": "Crit/Status",
      "rank": 45.6,
      "tierRank": 2,
      "component": false,
      "specialNote": "Item are limited."
    },
    {
      "name": "Imperator",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/FoldingMachineGun/ArchMachineGun",
      "totalDamage": 40,
      "trigger": "Auto",
      "description": "A long range rifle capable of firing in space, the Imperator's versatility makes it an ideal weapon for space combat.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 0.85000002,
      "imageName": "imperator.png",
      "tradable": false,
      "damage": "40.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4a/ArchwingMachinegun.png/revision/latest?cb=20141024143733",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Imperator",
      "disposition": 2,
      "type": "Archwing Gun",
      "acquisition": "The Archwing (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Imperator Vandal",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/FoldingMachineGun/ArchMachineGunVandal",
      "totalDamage": 40,
      "trigger": "Auto",
      "description": "The Imperator Vandal has been customized by the Tenno with a blue-green metallic finish and Lotus branding on the barrel.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 0.85000002,
      "imageName": "imperator-vandal.png",
      "tradable": true,
      "damage": "40.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ed/ImperatorVandal.png/revision/latest?cb=20141214174720",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Imperator_Vandal",
      "disposition": 2,
      "type": "Archwing Gun",
      "acquisition": "Fomorian Sabotage",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Sandman/Sandman",
      "name": "Inaros",
      "description": "Risen from the sands, Inaros commands the desert's fearsome power.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "While bleeding-out, Inaros becomes entombed in a protective Sarcophagus. He can revive himself by draining the life-force from nearby enemies and allies.",
      "type": "Warframe",
      "imageName": "inaros.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 2696224,
      "introduced": "18.5",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3a/InarosNewLook.png/revision/latest?cb=20160308025219",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Inaros",
      "acquisition": "Sands of Inaros (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/StealthJetPack/StealthJetPack",
      "name": "Itzal",
      "description": "Designed for quick clandestine attacks, the Itzal Archwing excels at striking from the darkness of space.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "type": "Vehicle",
      "imageName": "itzal.png",
      "category": "Archwing",
      "tradable": false,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Itzal"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ranger/Ranger",
      "name": "Ivara",
      "description": "With her quiver of tactical arrows, this huntress prowls unseen and strikes without warning.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Senses nearby enemies within |RADIUS|m.",
      "type": "Warframe",
      "imageName": "ivara.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 3812902,
      "introduced": "18",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/IvaraNewLook.png/revision/latest?cb=20151204065626",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ivara",
      "acquisition": "Spy Missions",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Jat Kittag",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerJetPoweredPolearm/GrineerJetPolearm",
      "totalDamage": 130,
      "trigger": "Melee",
      "description": "Deliver crushing blows with this Grineer built, jet powered mace.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 0.75,
      "type": "Melee",
      "imageName": "jat-kittag.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "130.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/01/GrnJetPwrPolearm.png/revision/latest?cb=20170406043411",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Jat_Kittag",
      "disposition": 1,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Slide",
      "rank": 63.51,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, poor DPS, high attack speed. Suffers from relatively poor consistency. Vulcan Blitz cause kills to explode dealing 300 (+60% of enemy health) Blast damage in 6m radius. Part of the Tenno Space Program. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "Only use Raging Whirlwind to proc Impact or the slam will ragdoll",
      "combo": "Slide",
      "component": false
    },
    {
      "name": "Jat Kusar",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnKusarigama/GrnKusarigamaWeapon",
      "totalDamage": 80,
      "trigger": "Melee",
      "description": "Overwhelm hostiles with this jet-powered sickle and razor-chain weapon. Charged strikes ignite an explosive blast at range.",
      "accuracy": 100,
      "wallAttack": 320,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.81,
      "type": "Melee",
      "imageName": "jat-kusar.png",
      "category": "Blade and Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "80.0 heat",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b2/JatKusar.png/revision/latest?cb=20170728205719",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Jat_Kusar",
      "disposition": 2,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Critical",
      "rank": 41.21,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, low attack speed. ",
      "stance": "Defiled Snapdragon",
      "stanceNotes": "Alt combo= Heart of the Naga; +DPS, -execution, -ragdolls",
      "combo": "Soul of the Leviathan",
      "component": false
    },
    {
      "name": "Javlok",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnFlameSpear/GrnFlameSpear",
      "totalDamage": 1,
      "trigger": "Charge",
      "description": "Launch super-heated slugs at individual foes, or hurl the entire weapon and ignite groups of enemies in a flash inferno.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.2,
      "type": "Primary",
      "imageName": "javlok.png",
      "category": "Speargun",
      "tradable": false,
      "damage": 230,
      "projectile": "Projectile",
      "secondary": {
        "name": "Throw Spear",
        "speed": 1,
        "crit_chance": 20,
        "crit_mult": 2,
        "status_chance": 0.3,
        "charge_time": 0.5,
        "shot_type": "Projectile",
        "shot_speed": null,
        "impact": 45,
        "slash": 30,
        "puncture": 75
      },
      "secondaryArea": {
        "name": "Spear Explosion",
        "status_chance": 25,
        "radius": 700,
        "heat": 300,
        "damage": "300.0 heat"
      },
      "statusChance": 25,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1d/GrnFlameSpear.png/revision/latest?cb=20161217014834",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Javlok",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot, moderate DPS, projectile munitions. Alt fire creats a localized explosion. ",
      "dmg": "Crit/Status",
      "rank": 69.9,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Jaw Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/JawSword/JawLongSword",
      "totalDamage": 44,
      "trigger": "Melee",
      "description": "A blade with a serrated edge that delivers strong quick attacks.",
      "accuracy": 100,
      "wallAttack": 176,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.47,
      "type": "Melee",
      "imageName": "jaw-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "44.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f3/Jaw.png/revision/latest?cb=20130426080629",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Jaw_Sword",
      "disposition": 5,
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 84.63,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. Suffers from relatively poor consistency. Blade of Truth increases damage by 100% and gives Truth (Gas, health, parkour) effects. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "Crimson Dervish's Coiling Impale: +DPS -proc",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Kama",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualKamas/SingleKama",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "The Kama is a Tenno style hatchet, capable of making short work of any foe.",
      "accuracy": 100,
      "wallAttack": 180,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 1.47,
      "type": "Melee",
      "imageName": "kama.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f0/Kama.png/revision/latest?cb=20130914111402",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kama",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 67.69,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. ",
      "stance": "Cyclone Kraken",
      "stanceNotes": "",
      "combo": "Lightning Siren",
      "component": true
    },
    {
      "name": "Karak",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerM16Homage/GrineerM16Rifle",
      "totalDamage": 29,
      "trigger": "Auto",
      "description": "Solid, dependable and deadly. The Karak is a standard issue rifle in many Grineer platoons.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 1.28,
      "type": "Primary",
      "imageName": "karak.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "29.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ea/GrineerM16Rifle.png/revision/latest?cb=20131231184734",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Karak",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Karak Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerM16Homage/KarakWraith",
      "totalDamage": 31,
      "trigger": "Auto",
      "description": "A different take on the Grineer assault rifle, the Karak Wraith features unique styling.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.28,
      "type": "Primary",
      "imageName": "karak-wraith.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "31.2",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c7/KarakWraith.png/revision/latest?cb=20150512233117",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Karak_Wraith",
      "disposition": 4,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS, hitscan munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 95.3,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Karyst",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/KrisDagger/KrisDagger",
      "totalDamage": 50,
      "trigger": "Melee",
      "description": "Once the blade weapon of choice for an exclusive order of Tenno assassins, the Karyst dagger grew to become a symbol of honor and duty for all Tenno.",
      "accuracy": 100,
      "wallAttack": 150,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.29,
      "type": "Melee",
      "imageName": "karyst.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "50.0 toxin",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/80/KarystDagger.png/revision/latest?cb=20140818235505",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Karyst",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Speed",
      "rank": 51.87,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, very low attack speed. ",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Kaszas",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/ArchScythe/ArchScythe",
      "totalDamage": 325,
      "trigger": "Melee",
      "description": "Become an angel of death, with this Archwing scythe.",
      "accuracy": 100,
      "wallAttack": 325,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "imageName": "kaszas.png",
      "tradable": false,
      "damage": "325.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/ArchScythe.png/revision/latest?cb=20151002090141",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kaszas",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Kesheg",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerHalberd/GrnHalberd",
      "totalDamage": 105,
      "trigger": "Melee",
      "description": "Slice through mobs of unruly enemies with this fierce halberd; the signature weapon of the Kuva Guardians.",
      "accuracy": 100,
      "wallAttack": 175,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.24,
      "type": "Melee",
      "imageName": "kesheg.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "105.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/64/GrnHalberd.png/revision/latest?cb=20161113000420",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kesheg",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Slide",
      "rank": 46.28,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, low attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Vaulting Apex",
      "component": false
    },
    {
      "name": "Kestrel",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Glaives/Boomerang/BoomerangWeapon",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "The Kestrel boomerang is a heavy throwing weapon that can knock down enemies at a distance.",
      "accuracy": 100,
      "wallAttack": 105,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.45,
      "type": "Melee",
      "imageName": "kestrel.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "projectile": "Thrown",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/70/Kestrel.png/revision/latest?cb=20130607215549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kestrel",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 92.98,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. Entropy Flight grants +140% flight speed and Entropy (Magnetic, Energy) effects. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Khora/Khora",
      "name": "Khora",
      "description": "Tenno and beast, red in whip and claw. Khora and her Kavat companion, Venari, embody lethal versatility. Two bodies, one will.",
      "masteryReq": 0,
      "sprintSpeed": 1.05,
      "passiveDescription": "The ferocious kavat, Venari, fights by Khora's side and provides her with a |SPEED|% speed boost while active. If killed, Venari will reappear after |RESPAWN|s.",
      "type": "Warframe",
      "imageName": "khora.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 2893609,
      "introduced": "22.18.0",
      "sex": "Female",
      "sprint": 1.05,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/08/Khora.png/revision/latest?cb=20180910140009",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Khora",
      "acquisition": "Sanctuary Onslaught",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Klamora Prism",
      "uniqueName": "/Lotus/Weapons/Corpus/OperatorAmplifiers/Set1/Barrel/CorpAmpSet1BarrelPartC",
      "type": "Amp",
      "imageName": "klamora-prism.png",
      "tradable": false,
      "acquisition": "Little Duck (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Klamora_Prism"
    },
    {
      "name": "Knell",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TnPriestPistolScope/TnPriestPistolWeapon",
      "totalDamage": 150,
      "trigger": "Auto",
      "description": "Ring the death knell. Headshots briefly turn this scoped pistol into a rapid-fire, Critical Damage fiend that uses no ammo. When used by Harrow, Knell has a 2-round mag.",
      "accuracy": 32,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.15,
      "type": "Secondary",
      "imageName": "knell.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "150.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8a/PriestPistol.png/revision/latest?cb=20170629034316",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Knell",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "High damage per shot, insane dps,  hitscan munitions. Headshot grants Death Knell buff. Death Knell can stack up to 3 times, lasting 3 seconds per stack. Stack-count regardless, 20% status chance and infinite ammo is granted. Critical Multiplier increases (x1.5, x2., x2.5) per stack. ✪",
      "dmg": "Crit/Speed",
      "rank": 29.3,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Knux",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/GrnArchHand/GrnArchHandWeapon",
      "totalDamage": 325,
      "trigger": "Melee",
      "description": "Gallium-alloy gauntlets for close-range Archwing combat. Designed by the infamous Tyl Regor.",
      "accuracy": 100,
      "wallAttack": 325,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "imageName": "knux.png",
      "tradable": false,
      "damage": "325.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/49/GrnArchHand.png/revision/latest?cb=20150820004111",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Knux",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Kogake",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/BrassKnuckles/BrassKnuckles",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "These coverings for the hands and feet allow devastating high flying hand-to-hand combat attacks without risking harm to the user.",
      "accuracy": 100,
      "wallAttack": 105,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.46,
      "type": "Melee",
      "imageName": "kogake.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/Kogake0.png/revision/latest?cb=20160221144254",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kogake",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Kogake Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeKogake/KogakePrimeKnuckles",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "Deliver a golden knockout with these prime Melee Weapons.",
      "accuracy": 100,
      "wallAttack": 210,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.46,
      "type": "Melee",
      "imageName": "kogake-prime.png",
      "category": "Sparring",
      "tradable": true,
      "channeling": 1.5,
      "damage": "70.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4c/MirageKogakePrime.png/revision/latest?cb=20171213095337",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kogake_Prime",
      "disposition": 5,
      "releaseDate": "2017 12 12",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2019 10 10",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 59.23,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. Increases movement speed by 5% when equipped. ",
      "stance": "Grim Fury",
      "stanceNotes": "",
      "combo": "Bright Blaze & Charged Attacks",
      "component": false
    },
    {
      "name": "Kohm",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnSpark/GrnSparkRifle",
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "For every shot fired in rapid succession the Kohm releases an additional bolt and grows more lethal.",
      "accuracy": 8,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.4,
      "type": "Primary",
      "imageName": "kohm.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b0/GrineerSparkGun.png/revision/latest?cb=20141211221301",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kohm",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot, insane dps, hitscan munitions. Spool up increases bullets shot and fire rate to the point where status effects are still reliably proc'd despite using shotgun calcs as well as having insane innate punchthrough. Riven disposition is relatively high for DPS potential and can help reach 100% status chance. Suffers from relatively poor consistency. ✪",
      "dmg": "100% Status",
      "rank": 42.7,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kohmak",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnKohmPistol/GrnKohmPistol",
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Like the larger Kohm, this hand-shotgun doubles its volley with each successive shot.",
      "accuracy": 8,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "kohmak.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/81/GrnWindUpPistol.png/revision/latest?cb=20150320022624",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kohmak",
      "disposition": 5,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Komorex",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpSentAmlgSniper/CrpSentAmlgSniper",
      "totalDamage": 87,
      "trigger": "Semi",
      "description": "Corpus ingenuity leveraging Tau-tech to create a high-capacity bi-modal sniper weapon of terrifying capability. Zoom in to reduce recoil and add punch through. Zoom again to fire a bursting viral round, but with a lower rate of fire. Komorex features built-in ammo conversion.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "komorex.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "87.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "3.5x Zoom Mode",
        "speed": 1.5,
        "impact": 17.4,
        "slash": 83.6,
        "puncture": 73
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/14/Komorex.png/revision/latest?cb=20190523234909",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Komorex",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps, projectile munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 41.9,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Korrudo",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnSparring/GrnSpiderSparring/GrnSpiderSparring",
      "totalDamage": 61,
      "trigger": "Melee",
      "description": "When they go high, go low. Powerful pneumatic grips and toecaps amplify every blow. Four ways to deal twice the pain.",
      "accuracy": 100,
      "wallAttack": 183,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "korrudo.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "61.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f6/Korrudo.png/revision/latest?cb=20190405175331",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Korrudo",
      "disposition": 3,
      "acquisition": "Tusk Thumper (Plains of Eidolon)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Critical",
      "rank": 67.73,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, poor DPS, low attack speed. ",
      "stance": "Brutal Tide",
      "stanceNotes": "",
      "combo": "Charge Attack",
      "component": false
    },
    {
      "name": "Kraken",
      "uniqueName": "/Lotus/Weapons/Grineer/GrineerPistol/GrnHeavyPistol",
      "totalDamage": 49,
      "trigger": "Burst",
      "description": "The Kraken is a heavy pistol of Grineer design that fires two quick shots with a single pull of the trigger. Skilled marksmen will appreciate the value in this deadly accurate weapon.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.53,
      "itemCount": 1,
      "parents": [
        "Kulstar"
      ],
      "type": "Secondary",
      "imageName": "kraken.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "49.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d3/Kraken.png/revision/latest?cb=20170406043414",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kraken",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS,  hitscan munitions. ",
      "dmg": "Status",
      "rank": 185.7,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Kreska",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/CrpVenusHatchet/CrpVenusHatchet",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "This unsophisticated Corpus survival tool does what it was designed for: hacking and splitting whatever it strikes.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "kreska.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "40.0 heat",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/ba/Kreska.png/revision/latest?cb=20181110200536",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kreska",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 42.24,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, low attack speed. ",
      "stance": "Cyclone Kraken",
      "stanceNotes": "",
      "combo": "Lightning Siren",
      "component": false
    },
    {
      "name": "Krohkur",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnEgyptSwd/GrnEgyptSwdWeapon",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "This hooked blade rewards critical hits to those skilled enough to strike with finesse.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.22,
      "type": "Melee",
      "imageName": "krohkur.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "70.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/09/GrnEgyptSword.png/revision/latest?cb=20171015014020",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Krohkur",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 48.24,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, low attack speed. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "",
      "combo": "Diving Kestrel",
      "component": true
    },
    {
      "name": "Kronen",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Tonfa/TonfaContestWinner/TennoTonfa",
      "totalDamage": 65,
      "trigger": "Melee",
      "description": "The Kronen resurrects a lethal fighting style once thought lost to the ages.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.4299999,
      "type": "Melee",
      "imageName": "kronen.png",
      "category": "Tonfa",
      "tradable": false,
      "channeling": 1.5,
      "damage": "65.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/da/TennoTonfa.png/revision/latest?cb=20140828170521",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kronen",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Kronen Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Tonfa/TonfaContestWinnerPrime/TonfaContestWinnerPrimeWeapon",
      "totalDamage": 66,
      "trigger": "Melee",
      "description": "Ancient blades, perfected for today’s combat.",
      "accuracy": 100,
      "wallAttack": 264,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.4299999,
      "type": "Melee",
      "imageName": "kronen-prime.png",
      "category": "Tonfa",
      "tradable": true,
      "channeling": 1.5,
      "damage": "66.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f6/KronenPrime.png/revision/latest?cb=20180313200756",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kronen_Prime",
      "disposition": 5,
      "releaseDate": "2018 03 20",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 01 13",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 44.48,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, very high attack speed. ✪",
      "stance": "Gemini Cross",
      "stanceNotes": "",
      "combo": "Baleful Sin",
      "component": false
    },
    {
      "name": "Kronsh Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipSix",
      "type": "Melee",
      "imageName": "kronsh.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Kronsh_Strike"
    },
    {
      "name": "Kulstar",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnTorpedoPistol/GrnTorpedoPistol",
      "totalDamage": 500,
      "trigger": "Active",
      "description": "Rain hell on the enemy with this handheld cluster-rocket launcher.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.25,
      "type": "Secondary",
      "imageName": "kulstar.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "200.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondaryArea": {
        "name": "Cluster Bombs",
        "status_chance": 19,
        "pellet": {
          "name": "Bomb",
          "count": 3
        },
        "blast": 225,
        "damage": "225.0 blast"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f0/GrnTorpedoPistol.png/revision/latest?cb=20150731174942",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kulstar",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS,  projectile munitions. Rocket impact will release 3 additional bomblets. Suffers from relatively poor consistency. ",
      "dmg": "Raw",
      "rank": 102.3,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Kunai",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/Kunai",
      "totalDamage": 45.999996,
      "trigger": "Auto",
      "description": "Kunai throwing daggers offer a silent alternative to the traditional side arm. Perfect for assassins.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.51,
      "type": "Secondary",
      "imageName": "kunai.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "46.0",
      "flight": 70,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/35/Kunai2.png/revision/latest?cb=20170210002129",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kunai",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS,  projectile munitions. Good luck landing a precise shot. ",
      "dmg": "Status",
      "rank": 178.6,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Lacera",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/StalkerMios/StalkerMios",
      "totalDamage": 80,
      "trigger": "Melee",
      "description": "In the practiced hands of a master, this blade and whip becomes exceedingly devastating.",
      "accuracy": 100,
      "wallAttack": 320,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.3099999,
      "type": "Melee",
      "imageName": "lacera.png",
      "category": "Blade and Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "80.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e8/StalkerMios.png/revision/latest?cb=20151204013306",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lacera",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 39.39,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, very low attack speed. ✪",
      "stance": "Defiled Snapdragon",
      "stanceNotes": "Alt combo= Heart of the Naga; +DPS, -execution, -ragdolls",
      "combo": "Soul of the Leviathan",
      "component": false
    },
    {
      "name": "Lambeo Moa",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetParts/MoaPetHeadLambeo",
      "type": "Sentinel",
      "imageName": "lambeo-moa.png",
      "tradable": false,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Lambeo_Moa"
    },
    {
      "name": "Lanka",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/Railgun",
      "totalDamage": 525,
      "trigger": "Charge",
      "description": "The Lanka fires a high velocity projectile through magnetic induction.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.80000001,
      "type": "Primary",
      "imageName": "lanka.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "200.0 electricity",
      "flight": 200,
      "projectile": "Projectile",
      "statusChance": 25,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1a/CorpusSniperRifle.png/revision/latest?cb=20180418123152",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lanka",
      "disposition": 2,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, projectile munitions. Sniper combo counter rampup is very good (min. 2), zooming in gives additive bonus to Crit Chance (20%/30%/50%). Innate Electric damage and high direct damage potential makes the Lanka the choice weapon for Eidolon hunting. ",
      "dmg": "Crit/Status",
      "rank": 67.8,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Larkspur",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/TnShieldframeArchGun/TnShieldFrameArchGun",
      "totalDamage": 90,
      "trigger": "Held",
      "description": "From death blooms the Larkspur. A unique and menacing Archgun with a wild initial attack that locks onto a target then chains other targets close to the first. It also sports an explosive projectile mode. In Hildryn's grip the Larkspur carries more reserve ammo.",
      "accuracy": 8.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.80000001,
      "imageName": "larkspur.png",
      "tradable": false,
      "damage": "80.0 radiation",
      "statusChance": 34,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c4/Larkspur.png/revision/latest?cb=20190309000707",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Larkspur",
      "disposition": 2,
      "type": "Archwing Gun",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Laser Rifle",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/LaserRifle",
      "totalDamage": 8,
      "trigger": "Auto",
      "description": "A laser rifle developed by reverse-engineering Corpus technology.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1.21,
      "type": "Sentinel Weapon",
      "imageName": "laser-rifle.png",
      "tradable": false,
      "damage": "8.0",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d4/DESentinelLaserRifle.png/revision/latest?cb=20140122154228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Laser_Rifle",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Lato",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/Pistol",
      "totalDamage": 30,
      "trigger": "Semi",
      "description": "The Lato is a highly accurate pistol used by the Tenno everywhere.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "lato.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/Lato.png/revision/latest?cb=20170210002056",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lato",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Lato Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/LatoPrime",
      "totalDamage": 48,
      "trigger": "Semi",
      "description": "The Lato is a highly accurate pistol used by the Tenno everywhere. Prime model offers slightly increased damage.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "lato-prime.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "48.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/LatoPrime.png/revision/latest?cb=20161029030340",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lato_Prime",
      "disposition": 5,
      "acquisition": "Unobtainable (Founders)",
      "checked": false,
      "unobtainable": true,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Lato Vandal",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/LatoVandal",
      "totalDamage": 46,
      "trigger": "Semi",
      "description": "A special version of the standard Lato pistol with a slower Fire Rate but offering higher Accuracy and Damage values. The Lato Vandal has been customized by the Tenno with a blue-green metallic finish and Lotus branding on the grips.",
      "accuracy": 22.988506,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "lato-vandal.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "46.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/59/DELatoVandal.png/revision/latest?cb=20180422234655",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lato_Vandal",
      "disposition": 5,
      "acquisition": "Sanctuary Onslaught",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot, moderate DPS,  hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 75,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Latron",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/SemiAutoRifle",
      "totalDamage": 55,
      "trigger": "Semi",
      "description": "The Latron is a highly efficient rifle that performs well at medium and at long range, its accuracy making it a deadly weapon in the hands of skilled marksmen.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "latron.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "55.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6e/Latron.png/revision/latest?cb=20130426073836",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Latron",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Latron Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/LatronPrime",
      "totalDamage": 90,
      "trigger": "Semi",
      "description": "The ornamental Latron Prime exploits ancient Orokin technology to get a slight damage increase over the standard Latron.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "latron-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "90.0",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c1/DELatronPrime.png/revision/latest?cb=20140124171644",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Latron_Prime",
      "disposition": 4,
      "releaseDate": "2013 05 03",
      "vaultDate": "2015 04 01",
      "estimatedVaultDate": "2015 04 01",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot, moderate DPS, hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 70.2,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Latron Wraith",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/WraithLatron/WraithLatron",
      "totalDamage": 60,
      "trigger": "Semi",
      "description": "The Latron Wraith is a powerful variation of the standard, semi-automatic rifle that features unique styling.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "latron-wraith.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "60.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/09/WraithLatron.png/revision/latest?cb=20140828170521",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Latron_Wraith",
      "disposition": 4,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS, hitscan munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 89.2,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Lecta",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Whip/CorpusWhipWeapon",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "Half taser, half whip. The Corpus Lecta delivers a deadly shock to anything it touches.",
      "accuracy": 100,
      "wallAttack": 180,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "lecta.png",
      "category": "Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ab/Lecta.png/revision/latest?cb=20171113155403",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lecta",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Lega Prism",
      "uniqueName": "/Lotus/Weapons/Corpus/OperatorAmplifiers/Set1/Barrel/CorpAmpSet1BarrelPartB",
      "type": "Amp",
      "imageName": "lega-prism.png",
      "tradable": false,
      "acquisition": "Little Duck (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Lega_Prism"
    },
    {
      "name": "Lenz",
      "uniqueName": "/Lotus/Weapons/Corpus/Bow/Longbow/CrpBow",
      "totalDamage": 60,
      "trigger": "Charge",
      "description": "Bolts from this Corpus bow deliver a one-two punch of an icy pulse, followed by a conventional explosion. Excess ammo picked up for other weapons will be converted into charges for the Lenz. Warning: Safety-protocols do not exist on this prototype.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.89999998,
      "type": "Primary",
      "imageName": "lenz.png",
      "category": "Bow",
      "tradable": false,
      "damage": 50,
      "projectile": "Projectile",
      "secondaryArea": {
        "name": "Bubble Collapse",
        "radius": 600,
        "blast": 660,
        "damage": "660.0 blast"
      },
      "statusChance": 5,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/89/Lenz.png/revision/latest?cb=20170803215404",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lenz",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS, projectile munitions. Each arrow procs procs Impact on direct hit, Cold AOE immediately afterwards, and finally Blast AOE explosion. ",
      "dmg": "Crit/Status",
      "rank": 45,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Lesion",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/TipedoStaff/InfTipedoStaff",
      "totalDamage": 100,
      "trigger": "Melee",
      "description": "An instrument of unrelenting harm.",
      "accuracy": 100,
      "wallAttack": 167,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "lesion.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "100.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/10/InfTipedo.png/revision/latest?cb=20160304215549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lesion",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 42.57,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, low attack speed. Causing status proc buffs the weapon to give it 15% more innate attack speed and toxin damage. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Vaulting Apex",
      "component": false
    },
    {
      "name": "Lex",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/HeavyPistol",
      "totalDamage": 130,
      "trigger": "Semi",
      "description": "The Lex is a powerful, accurate pistol that has a low Fire Rate and Magazine Capacity. Very efficient at long range.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 0.89999998,
      "type": "Secondary",
      "imageName": "lex.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "130.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6f/Lex.png/revision/latest?cb=20130426074737",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lex",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Lex Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeLex/PrimeLex",
      "totalDamage": 150,
      "trigger": "Semi",
      "description": "The Lex Prime is a powerful, accurate pistol that has a low Fire Rate and Magazine Capacity. Very efficient at long range.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.89999998,
      "type": "Secondary",
      "imageName": "lex-prime.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "150.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9e/PrimeLex.png/revision/latest?cb=20140410055707",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lex_Prime",
      "disposition": 3,
      "releaseDate": "2014 06 09",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS,  hitscan munitions. Massive recoil hurts overall DPS. ",
      "dmg": "Crit/Status",
      "rank": 93.9,
      "tierRank": 0,
      "component": true
    },
    {
      "uniqueName": "/Lotus/Powersuits/Magician/Magician",
      "name": "Limbo",
      "description": "Limbo manipulates the very planes of existence to divide his enemies and conquer them in the rift.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Dodge to enter and exit the Rift. Entering leaves behind a small Rift portal lasting |DURATION|s. Energy slowly recharges in the Rift, and each enemy killed in there also gives |ENERGY| Energy.",
      "type": "Warframe",
      "imageName": "limbo.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 2370346,
      "introduced": "15",
      "sex": "Male",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/14/LimboNewLook.png/revision/latest?cb=20141124023126",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Limbo",
      "acquisition": "The Limbo Theorem (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Magician/LimboPrime",
      "name": "Limbo Prime",
      "description": "Dance between realms with this golden rift walker. Featuring altered mod polarities for greater customization.",
      "masteryReq": 4,
      "sprintSpeed": 1.15,
      "passiveDescription": "Dodge to enter and exit the Rift. Entering leaves behind a small Rift portal lasting |DURATION|s. Energy slowly recharges in the Rift, and each enemy killed in there also gives |ENERGY| Energy.",
      "type": "Warframe",
      "imageName": "limbo-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 3618353,
      "introduced": "23.0.3",
      "sex": "Male",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a8/Limbo_PrimeIcon272.png/revision/latest?cb=20180703112244",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Limbo_Prime",
      "releaseDate": "2018 06 19",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 04 17",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Loki/Loki",
      "name": "Loki",
      "description": "Desired by advanced players, Loki offers a variety of specialized reconfiguring abilities. The creativity of Loki's powers allows players to master the battlefield through manipulation.",
      "masteryReq": 0,
      "sprintSpeed": 1.25,
      "passiveDescription": "Able to hang from walls |MULT|x longer than normal.",
      "type": "Warframe",
      "imageName": "loki.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 3555649,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 1.25,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1c/LokiNewLook.png/revision/latest?cb=20141124023132",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Loki",
      "acquisition": "Hyena Pack (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Loki/LokiPrime",
      "name": "Loki Prime",
      "description": "Confuse, deceive and destroy with Loki Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.25,
      "passiveDescription": "Able to hang from walls |MULT|x longer than normal.",
      "type": "Warframe",
      "imageName": "loki-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 3486764,
      "introduced": "13.7",
      "sex": "Male",
      "sprint": 1.25,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/LokiPrimeNewLook.png/revision/latest?cb=20141124023139",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Loki_Prime",
      "releaseDate": "2014 06 11",
      "vaultDate": "2016 05 17",
      "estimatedVaultDate": "2016 05 17",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Machete",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerMachetteAndCleaver/Machete",
      "totalDamage": 25,
      "trigger": "Melee",
      "description": "A ferocious Melee Weapon crafted by the Grineer and carried by their elite melee forces.",
      "accuracy": 100,
      "wallAttack": 100,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 1.45,
      "type": "Melee",
      "imageName": "machete.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "25.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/Machete.png/revision/latest?cb=20180903180540",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Machete",
      "disposition": 5,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Machete Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerMachetteAndCleaver/WraithMacheteWeapon",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "A different take on a familiar combat knife, the Machete Wraith features unique styling.",
      "accuracy": 100,
      "wallAttack": 180,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 1.45,
      "type": "Melee",
      "imageName": "machete-wraith.png",
      "category": "Machete",
      "tradable": true,
      "channeling": 1.5,
      "damage": "45.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ef/DEWraithMachete.png/revision/latest?cb=20170127211343",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Machete_Wraith",
      "disposition": 5,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 45.92,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, high attack speed. ✪",
      "stance": "Cyclone Kraken",
      "stanceNotes": "",
      "combo": "Lightning Siren",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Mag/Mag",
      "name": "Mag",
      "description": "With full command of surrounding magnetic energy, Mag is an expert at enemy manipulation.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Bullet jumping pulls-in nearby items for easy collection.",
      "type": "Warframe",
      "imageName": "mag.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 3096394,
      "introduced": "Vanilla",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bf/MagNewLook.png/revision/latest?cb=20141124023147",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mag",
      "acquisition": "The Sergeant (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Mag/MagPrime",
      "name": "Mag Prime",
      "description": "The exquisite Mag Prime offers the same abilities as Mag but with unique mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Bullet jumping pulls-in nearby items for easy collection.",
      "type": "Warframe",
      "imageName": "mag-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 7761756,
      "introduced": "10",
      "sex": "Female",
      "sprint": 1,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/MagPrimeNewLook.png/revision/latest?cb=20141124023154",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mag_Prime",
      "releaseDate": "2013 09 13",
      "vaultDate": "2015 07 07",
      "estimatedVaultDate": "2015 07 07",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Magistar",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Maces/PaladinMace/PaladinMaceWeapon",
      "totalDamage": 80,
      "trigger": "Melee",
      "description": "The Magistar mace wields justice and truth in the form of bone-crushing blows.",
      "accuracy": 100,
      "wallAttack": 160,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 1.09,
      "type": "Melee",
      "imageName": "magistar.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "80.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3e/PaladinMace.png/revision/latest?cb=20140124180233",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Magistar",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Magnus",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/Magnum/Magnum",
      "totalDamage": 76,
      "trigger": "Semi",
      "description": "The versatile Magnus revolver is a lethal sidearm for any Tenno.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.53,
      "type": "Secondary",
      "imageName": "magnus.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "76.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/TennoMagnum.png/revision/latest?cb=20140123005414",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Magnus",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Mara Detron",
      "uniqueName": "/Lotus/Weapons/VoidTrader/VTDetron",
      "totalDamage": 280,
      "trigger": "Semi",
      "description": "For Orokin-era smugglers, this fearsome handheld shotgun was a favored tool for 'dispute resolution'.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1,
      "type": "Secondary",
      "imageName": "mara-detron.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "280.0 radiation",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c5/MaraDetron.png/revision/latest?cb=20141212183103",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mara_Detron",
      "disposition": 3,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS,  projectile munitions. ",
      "dmg": "100% Status",
      "rank": 54.1,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Marelok",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerLeverActionPistol/GLAPistol",
      "totalDamage": 160,
      "trigger": "Semi",
      "description": "The Marelok combines the stopping power of a rifle with the portability of a pistol.",
      "accuracy": 10,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 0.89999998,
      "type": "Secondary",
      "imageName": "marelok.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "160.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7e/GrineerLeverActionPistol.png/revision/latest?cb=20140227055729",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Marelok",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Cowgirl/Cowgirl",
      "name": "Mesa",
      "description": "With a steady hand and quick reflexes, Mesa is a true gunfighter.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Shoot dual-wielded sidearms |SPEED|% faster and reload single-handed sidearms |RELOAD|% more rapidly. Gain |HEALTH| Bonus Health when not using Melee Weapons.",
      "type": "Warframe",
      "imageName": "mesa.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 13219451,
      "introduced": "15.5",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a6/MesaLarge.png/revision/latest?cb=20141211171927",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mesa",
      "acquisition": "Mutalist Alad V (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Cowgirl/MesaPrime",
      "name": "Mesa Prime",
      "description": "Cast a long shadow with this lethal enforcer. Featuring altered mod polarities for greater customization.",
      "masteryReq": 2,
      "sprintSpeed": 1.1,
      "passiveDescription": "Shoot dual-wielded sidearms |SPEED|% faster and reload single-handed sidearms |RELOAD|% more rapidly. Gain |HEALTH| Bonus Health when not using Melee Weapons.",
      "type": "Warframe",
      "imageName": "mesa-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": false,
      "color": 3353891,
      "introduced": "24.2.2",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/81/MesaPrime.png/revision/latest?cb=20181218224145",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mesa_Prime",
      "releaseDate": "2018 12 12",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 10 24",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mewan Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipThree",
      "type": "Melee",
      "imageName": "mewan.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Mewan_Strike"
    },
    {
      "name": "Mios",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Swords/Mios/Mios",
      "totalDamage": 80,
      "trigger": "Melee",
      "description": "This bone-forged sword includes a tendon-whip to distract and maim the enemy.",
      "accuracy": 100,
      "wallAttack": 320,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.94999999,
      "type": "Melee",
      "imageName": "mios.png",
      "category": "Blade and Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "80.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6e/DEMios.png/revision/latest?cb=20151113025556",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mios",
      "disposition": 3,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 35.47,
      "tierRank": 3,
      "weaponNotes": "Low damage per hit, insane dps, high attack speed. ",
      "stance": "Defiled Snapdragon",
      "stanceNotes": "Alt combo= Heart of the Naga; +DPS, -execution, -ragdolls",
      "combo": "Soul of the Leviathan",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Harlequin/Harlequin",
      "name": "Mirage",
      "description": "A master of illusion, Mirage confounds the enemy in a spectacle of style and power.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "Sliding lasts |DURATION|% longer and acrobatic maneuvers are |SPEED|% faster.",
      "type": "Warframe",
      "imageName": "mirage.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 7429982,
      "introduced": "14",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/MirageNewLook.png/revision/latest?cb=20141124023203",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mirage",
      "acquisition": "Hidden Messages (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Harlequin/MiragePrime",
      "name": "Mirage Prime",
      "description": "Dazzle the opposition with this golden master of illusion and mayhem. Featuring altered mod polarities allow for greater customization.",
      "masteryReq": 8,
      "sprintSpeed": 1.2,
      "passiveDescription": "Sliding lasts |DURATION|% longer and acrobatic maneuvers are |SPEED|% faster.",
      "type": "Warframe",
      "imageName": "mirage-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 4209205,
      "introduced": "22.7",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/ff/MiragePrime.png/revision/latest?cb=20171220211538",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mirage_Prime",
      "releaseDate": "2017 12 12",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2019 10 10",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mire",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Swords/Mire/MireSword",
      "totalDamage": 38.5,
      "trigger": "Melee",
      "description": "A relic from the Great Plague, the Mire Infested Sword is a brutal weapon. It not only cuts into the enemy, it infects the wounds of its victim with a toxic nerve poison. Deals <DT_POISON>Toxin Damage on Ground Slam attacks.",
      "accuracy": 100,
      "wallAttack": 154,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.4299999,
      "type": "Melee",
      "imageName": "mire.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/MireInfestedSword.png/revision/latest?cb=20130430050417",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mire",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 65.05,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. Innate +10% toxin damage boost. Toxic Blight increases toxin damage by 100% and causes Entropy (Magnetic, Energy) effects. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "Crimson Dervish's Coiling Impale: +DPS -proc",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Miter",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerSawbladeGun/SawBladeGun",
      "totalDamage": 250,
      "trigger": "Charge",
      "description": "The MITER launches high velocity saw blades, tearing apart anyone unfortunate enough to be in their path.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.55,
      "itemCount": 1,
      "parents": [
        "Panthera"
      ],
      "type": "Primary",
      "imageName": "miter.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "100.0",
      "flight": 60,
      "projectile": "Projectile",
      "statusChance": 50,
      "vaulted": false,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Miter",
      "disposition": 5,
      "acquisition": "Captain Vor and Lieutenant Lech Kril (Boss Duo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS, projectile munitions. Neutralizing Justice can instantly destroy nullifier bubbles and has Justice (Blast, Health, Armor) effects. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 96,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Mk1-Bo",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Bo",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "The MK1-Bo is the standard issue staff weapon for all Tenno.",
      "accuracy": 100,
      "wallAttack": 75,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.29,
      "type": "Melee",
      "imageName": "mk1-bo.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/74/BoStaff.png/revision/latest?cb=20170210002058",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Bo",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Braton",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/StartingRifle",
      "totalDamage": 18,
      "trigger": "Auto",
      "description": "The MK1-Braton is the standard issue rifle for all Tenno. A versatile weapon that can be customized to support a wide variety of play styles.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.2,
      "type": "Primary",
      "imageName": "mk1-braton.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "18.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/19/Braton.png/revision/latest?cb=20170210002053",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Braton",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Furax",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Furax",
      "totalDamage": 30,
      "trigger": "Melee",
      "description": "The MK1-Furax is the standard issue fist weapon for all Tenno.",
      "accuracy": 100,
      "wallAttack": 90,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.38,
      "type": "Melee",
      "imageName": "mk1-furax.png",
      "category": "Fist",
      "tradable": false,
      "channeling": 1.5,
      "damage": "30.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/Furax.png/revision/latest?cb=20130426080553",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Furax",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Furis",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Furis",
      "totalDamage": 12.999999,
      "trigger": "Auto",
      "description": "The MK1-Furis are the standard issue automatic pistol for all Tenno.",
      "accuracy": 22.222221,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "mk1-furis.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "13.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3e/Furis.png/revision/latest?cb=20170606011114",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Furis",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Kunai",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Kunai",
      "totalDamage": 40,
      "trigger": "Auto",
      "description": "The MK1-Kunai is the standard issue throwing knives for all Tenno.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.51,
      "type": "Secondary",
      "imageName": "mk1-kunai.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "40.0",
      "flight": 70,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/35/Kunai2.png/revision/latest?cb=20170210002129",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Kunai",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Paris",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Paris",
      "totalDamage": 120,
      "trigger": "Charge",
      "description": "The MK1-Paris is the standard issue bow for all Tenno.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "mk1-paris.png",
      "category": "Bow",
      "tradable": false,
      "damage": "100.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 15,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7d/Paris.png/revision/latest?cb=20170210002054",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Paris",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Strun",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Strun",
      "totalDamage": 180,
      "trigger": "Semi",
      "description": "The Strun is a standard shotgun. Reliable, versatile and deadly.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.35,
      "type": "Primary",
      "imageName": "mk1-strun.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "180.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/Strun.png/revision/latest?cb=20161125225500",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Strun",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mote Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/SentTrainingAmplifier/SentAmpTrainingBarrel",
      "type": "Amp",
      "imageName": "mote-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Mote_Prism"
    },
    {
      "name": "Multron",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetComponents/HextraWeapon",
      "totalDamage": 5,
      "trigger": "Auto",
      "description": "Fires a burst of armor-piercing rounds.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 3,
      "omegaAttenuation": 1,
      "type": "Sentinel Weapon",
      "imageName": "multron.png",
      "tradable": false,
      "damage": "5.1",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/97/Multron.png/revision/latest?cb=20181110220523",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Multron",
      "disposition": 3,
      "acquisition": "Comes with Companion (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mutalist Cernos",
      "uniqueName": "/Lotus/Weapons/Infested/Bow/InfCernosBow/InfCernos",
      "totalDamage": 280,
      "trigger": "Charge",
      "description": "Overcome with Infestation, this bow's arrows now spread poisonous contagion to any surface they hit.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.35,
      "type": "Primary",
      "imageName": "mutalist-cernos.png",
      "category": "Bow",
      "tradable": false,
      "damage": "120.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 49,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/82/InfCernos.png/revision/latest?cb=20160304215549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mutalist_Cernos",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS, projectile munitions. Fully charged arrows leave a gas trail that continues to proc status effects. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 100.3,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mutalist Quanta",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/InfCrpShockSwarm/InfCrpShockSwarmRifle",
      "totalDamage": 25,
      "trigger": "Auto",
      "description": "A bizarre union of Corpus technology and Infested biology, this automatic rifle can also deploy an irradiated airborne infested mass. Further field testing is required to fully understand the potential of this weapon.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.55,
      "type": "Primary",
      "imageName": "mutalist-quanta.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "25.0",
      "flight": 100,
      "projectile": "Projectile",
      "secondary": {
        "name": "Orb Explosion",
        "speed": 10,
        "crit_chance": 5,
        "crit_mult": 1.5,
        "status_chance": 0,
        "toxin": 100,
        "damage": "100.0 toxin"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/InfCrpShockSwarm.png/revision/latest?cb=20140620010138",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mutalist_Quanta",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS, projectile munitions. Alt fire creats a bubble that can be combined up to three times. Firing through the bubble increase damage and critical chance. ",
      "dmg": "Status",
      "rank": 77.1,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Nagantaka",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/GarudaCrossbow/GarudaCrossbow",
      "totalDamage": 158.99998,
      "trigger": "Semi",
      "description": "Slash targets with a single precise bolt from Garuda's signature crossbow. Alt-fire to let loose a barrage of bolts. All bolts have a chance to cause Bleeding and Headshots have a chance to increase Reload Speed. When wielded by Garuda Nagantaka gains a slight Punch Through.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1.1,
      "type": "Primary",
      "imageName": "nagantaka.png",
      "category": "Crossbow",
      "tradable": false,
      "damage": "159.0",
      "projectile": "Projectile",
      "secondary": {
        "name": "Burst Shot",
        "speed": 5.81,
        "crit_chance": 15,
        "crit_mult": 2.3,
        "status_chance": 0.4,
        "shot_type": "Projectile",
        "shot_speed": 100,
        "impact": 1.6,
        "slash": 143.1,
        "puncture": 14.3
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d8/Nagantaka.png/revision/latest?cb=20181110000514",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nagantaka",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot, moderate DPS, projectile munitions. Headshots have a chance to increase reload speed. Secondary fire empties clip with little additional recoil and is highly recommended. ",
      "dmg": "Crit/Status",
      "rank": 55.7,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Nami Skyla",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/CutlassAndPoignard/CutlassPoignardSwords",
      "totalDamage": 50,
      "trigger": "Melee",
      "description": "Like the surge and crash of storm waves, a master of the Nami cutlass and Skyla dagger turns these two separate weapons into one fluid attack.",
      "accuracy": 100,
      "wallAttack": 200,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.175,
      "type": "Melee",
      "imageName": "nami-skyla.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "50.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/TnoCutlassAndPoignard.png/revision/latest?cb=20140410055707",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nami_Skyla",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Nami Skyla Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PrimeNamiSkyla/PrimeNamiSkyla",
      "totalDamage": 60,
      "trigger": "Melee",
      "description": "Forged by a forgotten master, these exquisite blades are bounty from a golden-age long gone.",
      "accuracy": 100,
      "wallAttack": 240,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.175,
      "type": "Melee",
      "imageName": "nami-skyla-prime.png",
      "category": "Dual Swords",
      "tradable": true,
      "channeling": 1.5,
      "damage": "60.0",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/68/PrimeNamiSkyla.png/revision/latest?cb=20170829215440",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nami_Skyla_Prime",
      "disposition": 4,
      "releaseDate": "2017 08 29",
      "vaultDate": "2019 07 07",
      "estimatedVaultDate": "2019 07 07",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 31.97,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, very high attack speed. Ties with Dual Ichor. ✪",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Nami Solo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/CutlassAndPoignard/TennoCutlass",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "Evoking the oceans of earth, this exquisite cutlass is a deadly work of art.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.4299999,
      "type": "Melee",
      "imageName": "nami-solo.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/dd/DENamiSolo.png/revision/latest?cb=20140529190718",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nami_Solo",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 37.7,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, high attack speed. ✪",
      "stance": "Cyclone Kraken",
      "stanceNotes": "",
      "combo": "Lightning Siren",
      "component": false
    },
    {
      "name": "Needlenose",
      "uniqueName": "/Lotus/Types/Vehicles/Hoverboard/HoverboardParts/PartComponents/HoverboardCorpusB/HoverboardCorpusBDeck",
      "type": "Vehicle",
      "imageName": "needlenose.png",
      "category": "K-Drive",
      "tradable": false,
      "acquisition": "Roky (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Needlenose"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Necro/Necro",
      "name": "Nekros",
      "description": "Nekros uses his dark powers to manipulate his enemies, both living and dead.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Restore |HEALTH| Health with every enemy death within |RADIUS|m.",
      "type": "Warframe",
      "imageName": "nekros.png",
      "tradable": false,
      "conclave": true,
      "color": 3685444,
      "introduced": "10",
      "sex": "Male",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/cc/NekrosNewLook.png/revision/latest?cb=20141124023210",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nekros",
      "acquisition": "Lephantis (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Necro/NekrosPrime",
      "name": "Nekros Prime",
      "description": "Death's new master. Featuring altered mod polarities allow for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Restore |HEALTH| Health with every enemy death within |RADIUS|m.",
      "type": "Warframe",
      "imageName": "nekros-prime.png",
      "tradable": true,
      "conclave": true,
      "color": 1973018,
      "introduced": "The Silver Grove 3",
      "sex": "Male",
      "sprint": 1.1,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/86/NekrosPrimeNewLook.png/revision/latest?cb=20180419201132",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nekros_Prime",
      "releaseDate": "2016 08 23",
      "vaultDate": "2018 06 19",
      "estimatedVaultDate": "2018 06 19",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Nezha/Nezha",
      "name": "Nezha",
      "description": "A petite and playful facade conceals this frame's immense power.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Slide |SPEED|% faster and go |RANGE|% farther.",
      "type": "Warframe",
      "imageName": "nezha.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 13341821,
      "introduced": "18.1",
      "sex": "Male",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/45/NezhaNewLook.png/revision/latest?cb=20151217010251",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nezha",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Infestation/Infestation",
      "name": "Nidus",
      "description": "Command the Infestation to mutate and grow ever more destructive.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "If Nidus is killed with at least |STACKS| stacks of Mutation, those |STACKS| stacks are consumed; this grants |DURATION|s of invulnerability and restores Health to |HEAL|%.",
      "type": "Warframe",
      "imageName": "nidus.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4141618,
      "introduced": "19.5",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4c/NidusNewLook.png/revision/latest?cb=20161223053121",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nidus",
      "acquisition": "The Glast Gambit (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Nikana",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/KatanaAndWakizashi/Katana",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "The Nikana reintroduces a lost Tenno blade and with it another fragment of the old ways.",
      "accuracy": 100,
      "wallAttack": 96,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 0.5,
      "itemCount": 1,
      "parents": [
        "Dragon Nikana"
      ],
      "type": "Melee",
      "imageName": "nikana.png",
      "category": "Nikana",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e9/Katana.png/revision/latest?cb=20140410055706",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nikana",
      "disposition": 1,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Nikana Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PrimeKatana/PrimeNikana",
      "totalDamage": 95,
      "trigger": "Melee",
      "description": "An ancient blade predating the fall of the Orokin Empire. Forged using techniques lost over the centuries, the edge remains sharper than that of any modern Nikana.",
      "accuracy": 100,
      "wallAttack": 204,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "nikana-prime.png",
      "category": "Nikana",
      "tradable": true,
      "channeling": 1.5,
      "damage": "95.0",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/PrimeNikana.png/revision/latest?cb=20160205233131",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nikana_Prime",
      "disposition": 1,
      "releaseDate": "2016 02 16",
      "vaultDate": "2017 12 12",
      "estimatedVaultDate": "2017 12 12",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 42.64,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, high attack speed. ",
      "stance": "Decisive Judgement",
      "stanceNotes": "",
      "combo": "Silent Acumen",
      "component": false
    },
    {
      "name": "Ninkondi",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Nunchaku/Nunchaku/Nunchaku",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "With its lightning-fast strikes, the Ninkondi pays respect to the old ways.",
      "accuracy": 100,
      "wallAttack": 180,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.41,
      "itemCount": 1,
      "parents": [
        "Shaku"
      ],
      "type": "Melee",
      "imageName": "ninkondi.png",
      "category": "Nunchaku",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7d/Nunchaku.png/revision/latest?cb=20150911162035",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ninkondi",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Ninkondi Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeNinkondi/PrimeNikondi",
      "totalDamage": 54,
      "trigger": "Melee",
      "description": "An ancient weapon imbued with a new truth.",
      "accuracy": 100,
      "wallAttack": 216,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.41,
      "type": "Melee",
      "imageName": "ninkondi-prime.png",
      "category": "Nunchaku",
      "tradable": true,
      "channeling": 1.5,
      "damage": "24.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d6/NinkondiPrime.png/revision/latest?cb=20190707115632",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ninkondi_Prime",
      "disposition": 5,
      "releaseDate": "2019 07 07",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 05 02",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Status",
      "rank": 35.12,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, high attack speed. ✪",
      "stance": "Atlantis Vulcan",
      "stanceNotes": "",
      "combo": "Molten Whirlpool",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/AntiMatter/Anti",
      "name": "Nova",
      "description": "Nova uses electromagnetic energy to contain and control highly volatile antimatter that fuels her abilities.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "When knocked-over, emit a |RADIUS|m defensive burst that topples attacking enemies and deals |DAMAGE| Damage.",
      "type": "Warframe",
      "imageName": "nova.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 5132112,
      "introduced": "9",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/52/NovaNewLook.png/revision/latest?cb=20141124023217",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nova",
      "acquisition": "The Raptors (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/AntiMatter/NovaPrime",
      "name": "Nova Prime",
      "description": "Nova Prime wreaks devastation on her enemies using volatile antimatter. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "When knocked-over, emit a |RADIUS|m defensive burst that topples attacking enemies and deals |DAMAGE| Damage.",
      "type": "Warframe",
      "imageName": "nova-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 1974051,
      "introduced": "15.7",
      "sex": "Female",
      "sprint": 1.2,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/38/NovaPrimeNewLook.png/revision/latest?cb=20150204035825",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nova_Prime",
      "releaseDate": "2014 12 16",
      "vaultDate": "2016 11 22",
      "estimatedVaultDate": "2016 11 22",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Nukor",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerMicrowavegun/GrnMicrowavePistol",
      "totalDamage": 22,
      "trigger": "Held",
      "description": "Creates and focuses a high-frequency field of microwaves, literally cooking the target from within.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.45,
      "type": "Secondary",
      "imageName": "nukor.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "22.0 radiation",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d3/GrineerMicrowaveGun.png/revision/latest?cb=20140828170520",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nukor",
      "disposition": 5,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot, moderate DPS,  beam munitions. Hitting a specific part multiple times increases damage dealt to that part by 5%. Unusually, Nukor has very high Critical Multiplier but poor Critical Chance, hence it's DPS increase from flat Crit Chance modifiers is relatively higher than other weapons. ",
      "dmg": "Status",
      "rank": 78.7,
      "tierRank": 1,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Jade/Jade",
      "name": "Nyx",
      "description": "Mind control and psychic attacks make Nyx a very dangerous foe. Her ability to reach into enemy consciousness and manipulate their behavior can turn the tide of battle.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Enemies are |PERCENT|% less accurate when targeting Nyx.",
      "type": "Warframe",
      "imageName": "nyx.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 4014654,
      "introduced": "6",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/cb/NyxNewLook.png/revision/latest?cb=20141124023223",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nyx",
      "acquisition": "Phorid (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Jade/NyxPrime",
      "name": "Nyx Prime",
      "description": "Infiltrate the minds of your enemies with Nyx Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.125,
      "passiveDescription": "Enemies are |PERCENT|% less accurate when targeting Nyx Prime.",
      "type": "Warframe",
      "imageName": "nyx-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 10854532,
      "introduced": "14.8",
      "sex": "Female",
      "sprint": 1.125,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/aa/NyxPrimeNewLook.png/revision/latest?cb=20141124023232",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nyx_Prime",
      "releaseDate": "2014 09 23",
      "vaultDate": "2016 08 23",
      "estimatedVaultDate": "2016 08 23",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Paladin/Paladin",
      "name": "Oberon",
      "description": "Equally adept at healing friends or striking down the enemy. Oberon embodies the balance Tenno are sworn to uphold.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Allied pets receive |HEALTH|% Health, Armor and Shield buffs. In addition, your pet receives an instant revive per mission.",
      "type": "Warframe",
      "imageName": "oberon.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 2895659,
      "introduced": "11.5",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/OberonNewLook.png/revision/latest?cb=20150223022507",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Oberon",
      "acquisition": "Eximus Enemies",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Paladin/PaladinPrime",
      "name": "Oberon Prime",
      "description": "Protect the balance with this regal forest guardian. Featuring altered mod polarities for greater customization.",
      "masteryReq": 8,
      "sprintSpeed": 1,
      "passiveDescription": "Allied pets receive |HEALTH|% Health, Armor and Shield buffs. In addition, your pet receives an instant revive per mission.",
      "type": "Warframe",
      "imageName": "oberon-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 4671301,
      "introduced": "20.6.2",
      "sex": "Male",
      "sprint": 1,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/08/OberonPrimeBust.png/revision/latest?cb=20170518034142",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Oberon_Prime",
      "releaseDate": "2017 05 30",
      "vaultDate": "2019 03 27",
      "estimatedVaultDate": "2019 03 27",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Obex",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/KickAndPunch/KickPunchWeapon",
      "totalDamage": 25,
      "trigger": "Melee",
      "description": "The Obex system multiplies the kinetic energy of a Tenno's kicks and punches, delivering devastating blows to any target.",
      "accuracy": 100,
      "wallAttack": 75,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.1,
      "type": "Melee",
      "imageName": "obex.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "25.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f5/CorpusKickNPunch.png/revision/latest?cb=20140314173617",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Obex",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Bard/Bard",
      "name": "Octavia",
      "description": "Compose her song and then conduct the mighty Mandachord, turning bass, beat and melody into an anthem of devastation.",
      "masteryReq": 0,
      "sprintSpeed": 1.05,
      "passiveDescription": "Replenish |ENERGY| energy over |DURATION|s for Octavia and allies within |RANGE|m when abilities are activated.",
      "type": "Warframe",
      "imageName": "octavia.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 2171179,
      "introduced": "20",
      "sex": "Female",
      "sprint": 1.05,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a9/Octavia.png/revision/latest?cb=20190722173303",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Octavia",
      "acquisition": "Octavia's Anthem (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ocucor",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpSentExperimentPistol/CrpSentExperimentPistol",
      "totalDamage": 22,
      "trigger": "Held",
      "description": "A weapon that reaches for its next victim even as it kills. With each takedown, this pistol spawns an energy tendril that reaches for a nearby target.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.1,
      "type": "Secondary",
      "imageName": "ocucor.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "20.0 radiation",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/83/Ocucor.png/revision/latest?cb=20181110201040",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ocucor",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot, monstrous DPS,  beam munitions. Each enemy killed will create an additional tendril that damages other targettable enemies in sight. Tendrils reset upon reloading. ✪",
      "dmg": "Crit/Status",
      "rank": 54.5,
      "tierRank": 2,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/StandardJetPack/StandardJetPack",
      "name": "Odonata",
      "description": "The systems built into this Archwing balance offensive capabilities with defensive countermeasures.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "type": "Vehicle",
      "imageName": "odonata.png",
      "category": "Archwing",
      "tradable": false,
      "acquisition": "The Archwing (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Odonata"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/PrimeJetPack/PrimeJetPack",
      "name": "Odonata Prime",
      "description": "This enhanced version of the first Archwing prototype takes the design to its theoretical limits.",
      "masteryReq": 0,
      "sprintSpeed": 1.05,
      "type": "Vehicle",
      "imageName": "odonata-prime.png",
      "category": "Archwing",
      "tradable": true,
      "releaseDate": "2015 03 24",
      "vaultDate": "2017 02 28",
      "estimatedVaultDate": "2017 02 28",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "vaulted": true,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Odonata_Prime"
    },
    {
      "name": "Ogris",
      "uniqueName": "/Lotus/Weapons/ClanTech/Chemical/RocketLauncher",
      "totalDamage": 0,
      "trigger": "Charge",
      "description": "Ogris fires detonite-infused casings.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "ogris.png",
      "category": "Launcher",
      "tradable": false,
      "damage": 100,
      "projectile": "Projectile",
      "statusChance": 35,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/24/OgrisNew.png/revision/latest?cb=20150324200739",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ogris",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS, projectile munitions. Nightwatch Napalm turns the Ogris into an area denial weapon. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 103.5,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ohma",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/CrpTonfa/CrpTonfa",
      "totalDamage": 100,
      "trigger": "Melee",
      "description": "Bring the enemy to its knees with these twin electrified tonfas.",
      "accuracy": 100,
      "wallAttack": 400,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "ohma.png",
      "category": "Tonfa",
      "tradable": false,
      "channeling": 1.5,
      "damage": "100.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bc/CorpusTonfa.png/revision/latest?cb=20170119002703",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ohma",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 43.12,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, low attack speed. Slams have guaranteed Electricity proc in 8.5m radius. ",
      "stance": "Sovereign Outcast",
      "stanceNotes": "",
      "combo": "Rogue Edict",
      "component": false
    },
    {
      "name": "Okina",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/TennoSai/TennoSais",
      "totalDamage": 40,
      "trigger": "Melee",
      "description": "Perforate enemies with these two needle-sharp sai.",
      "accuracy": 100,
      "wallAttack": 160,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.3099999,
      "type": "Melee",
      "imageName": "okina.png",
      "category": "Dual Daggers",
      "tradable": false,
      "channeling": 1.5,
      "damage": "40.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/49/TennoSais.png/revision/latest?cb=20160710174242",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Okina",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Speed",
      "rank": 45.81,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, high attack speed. ✪",
      "stance": "Spinning Needle",
      "stanceNotes": "Alt combo= Fey Intervention (forward moveset); +DPS, -ragdoll",
      "combo": "Accursed Whispers",
      "component": false
    },
    {
      "name": "Oloro Moa",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetParts/MoaPetHeadOloro",
      "type": "Sentinel",
      "imageName": "oloro-moa.png",
      "tradable": false,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Oloro_Moa"
    },
    {
      "name": "Onorix",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/Archaxe/ArchAxeWeapon",
      "totalDamage": 290,
      "trigger": "Melee",
      "description": "This laser bladed battle-axe easily hacks through a ship's defenses and the forces protecting it.",
      "accuracy": 100,
      "wallAttack": 290,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "imageName": "onorix.png",
      "tradable": false,
      "damage": "290.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/22/Archaxe.png/revision/latest?cb=20141028221205",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Onorix",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ooltha Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipTwo",
      "type": "Melee",
      "imageName": "ooltha.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Ooltha_Strike"
    },
    {
      "name": "Opticor",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpBFG/CrpBFG",
      "totalDamage": 0,
      "trigger": "Charge",
      "description": "Once charged this Corpus laser cannon dispatches a devastating blast of light energy.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 1.05,
      "type": "Primary",
      "imageName": "opticor.png",
      "category": "Rifle",
      "tradable": false,
      "damage": 1000,
      "projectile": "Hitscan",
      "statusChance": 20,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a7/CrpBFG.png/revision/latest?cb=20141024143412",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Opticor",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS, hitscan munitions. Do not stare directly into beam. Suffers from relatively poor consistency. ",
      "dmg": "Critical",
      "rank": 74.1,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Opticor Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpBFG/Vandal/VandalCrpBFG",
      "totalDamage": 0,
      "trigger": "Charge",
      "description": "With a precision crafted lens, this customized Opticor achieves a level of performance previously thought impossible.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 1.05,
      "type": "Primary",
      "imageName": "opticor-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": 400,
      "projectile": "Hitscan",
      "statusChance": 30,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7e/OpticorVandal.png/revision/latest?cb=20190308163219",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Opticor_Vandal",
      "disposition": 3,
      "acquisition": "Buried Debts (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS, ",
      "dmg": "Crit/Status",
      "rank": 47,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Orthos",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/PolearmWeapon",
      "totalDamage": 50,
      "trigger": "Melee",
      "description": "The Tenno forged Orthos is a rare double bladed polearm. Those who take the time to master it speak of its impressive striking distance and ability to hit multiple targets.",
      "accuracy": 100,
      "wallAttack": 83,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "orthos.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "50.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/74/DEOrthos.png/revision/latest?cb=20140407041822",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Orthos",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Orthos Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/PrimePolearmWeapon",
      "totalDamage": 65,
      "trigger": "Melee",
      "description": "Orthos Prime is an ancient Orokin martial weapon, forged from the purest rubidium making it extremely light-weight.",
      "accuracy": 100,
      "wallAttack": 108,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "orthos-prime.png",
      "category": "Polearm",
      "tradable": true,
      "channeling": 1.5,
      "damage": "65.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/PrimePolearm.png/revision/latest?cb=20130713203618",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Orthos_Prime",
      "disposition": 1,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Slide",
      "rank": 47.26,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Slide",
      "component": false
    },
    {
      "name": "Orvius",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Glaives/TeshinGlaive/TnTeshinGlaiveWep",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "Turn foes into puppets with Teshin’s versatile throwing disc.",
      "accuracy": 100,
      "wallAttack": 210,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.15,
      "type": "Melee",
      "imageName": "orvius.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "70.0",
      "projectile": "Thrown",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6b/TeshinGlaive.png/revision/latest?cb=20180314033633",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Orvius",
      "disposition": 4,
      "acquisition": "The War Within (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 70.3,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, very low attack speed. Channeled throw suspends enemies in midair. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/RadarPowerSuit",
      "name": "Oxylus",
      "description": "With 'Scan Aquatic Lifeforms' and 'Scan Matter' as default Precepts, Oxylus was designed to assist in Search-and-Rescue operations through the harsh landscape around The Orb Vallis. Oxylus also comes with a Multron rifle.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "oxylus.png",
      "tradable": false,
      "acquisition": "The Business (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Oxylus"
    },
    {
      "name": "Pandero",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TnBardPistol/TnBardPistolGun",
      "totalDamage": 72,
      "trigger": "Semi",
      "description": "Octavia's pistol hammers foes with single shots or a rapid volley of bullets. When wielded by Octavia, alt-fire Headshot Kills increase Reload Speed.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1,
      "type": "Secondary",
      "imageName": "pandero.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "72.0",
      "projectile": "Hitscan",
      "secondary": {
        "speed": 7.69,
        "impact": 18,
        "slash": 36,
        "puncture": 18
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/cb/TnBardPistol.png/revision/latest?cb=20170324230208",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pandero",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot, monstrous DPS,  hitscan munitions. Alt-fire empties clip onto enemy with some worrying recoil. ",
      "dmg": "Crit/Status",
      "rank": 59.8,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Pangolin Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PangolinSword/PangolinLongSword",
      "totalDamage": 37,
      "trigger": "Melee",
      "description": "A unique blade used by an old Tenno clan.",
      "accuracy": 100,
      "wallAttack": 148,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.47,
      "type": "Melee",
      "imageName": "pangolin-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "37.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/28/Pangolin.png/revision/latest?cb=20130426080637",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pangolin_Sword",
      "disposition": 5,
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 66.11,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. Jump attacks always proc Electricity. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "Crimson Dervish's Coiling Impale: +DPS -proc",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Panthera",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/Miter/TnoMiter",
      "totalDamage": 100,
      "trigger": "Auto",
      "description": "Firing high-velocity blades, this weapon can also be used as a battle-saw, shredding anything unfortunate enough to get within range.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.4,
      "type": "Primary",
      "imageName": "panthera.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "100.0",
      "flight": 40,
      "projectile": "Projectile",
      "secondary": {
        "speed": 2,
        "crit_chance": 25,
        "crit_mult": 2,
        "status_chance": 0.3,
        "shot_type": "Continuous",
        "impact": 10,
        "slash": 80,
        "puncture": 10
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6f/TennoMiter.png/revision/latest?cb=20150115004023",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Panthera",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot, moderate DPS, projectile munitions. Alt-fire puts a spinning blade a few meters in from of the weapon that constantly spin and deal damage. ",
      "dmg": "Crit/Status",
      "rank": 65.6,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Para Moa",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetParts/MoaPetHeadPara",
      "type": "Sentinel",
      "imageName": "para-moa.png",
      "tradable": false,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Para_Moa"
    },
    {
      "name": "Paracesis",
      "uniqueName": "/Lotus/Weapons/Orokin/BallasSword/BallasSwordWeapon",
      "totalDamage": 144,
      "trigger": "Melee",
      "description": "The Sentient slayer. An offering from Ballas.",
      "accuracy": 100,
      "wallAttack": 288,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "paracesis.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "144.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b7/BallasSword.png/revision/latest?cb=20181012151715",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Paracesis",
      "disposition": 3,
      "acquisition": "Chimera Prologue (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 36.7,
      "tierRank": 3,
      "weaponNotes": "Very high damage per hit, insane dps, low attack speed. Has max modslot of 90 including stance. Using forma on this weapon will increase damage to Tau faction (up to 60% after 5 forma). ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "name": "Paracyst",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/QuantaFullyInfested/InfQuantaRifle",
      "totalDamage": 33,
      "trigger": "Burst",
      "description": "Completely overwhelmed by Infested biology, this former Quanta now fires organic ordnance and a harpoon like appendage.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.3150001,
      "type": "Primary",
      "imageName": "paracyst.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "33.0 toxin",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Infested Harpoon",
        "speed": 11.11,
        "crit_chance": 10,
        "crit_mult": 2,
        "status_chance": 0.3,
        "shot_type": "Projectile",
        "shot_speed": null,
        "toxin": 33,
        "damage": "33.0 toxin"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/ca/InfQuantaRifle.png/revision/latest?cb=20141127182550",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Paracyst",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS, projectile munitions. Three-round burst is wasteful at times. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 93.8,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Paris",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/HuntingBow",
      "totalDamage": 180,
      "trigger": "Charge",
      "description": "Based on one of the world's oldest weapon designs, this Tenno-crafted weapon can be used both in stealth and in open combat. The Paris uses a chargeable magnetic field to launch arrows capable of impaling enemies to walls.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "paris.png",
      "category": "Bow",
      "tradable": false,
      "damage": "120.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 10,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7d/Paris.png/revision/latest?cb=20170210002054",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Paris",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Paris Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/PrimeHuntingBow",
      "totalDamage": 260,
      "trigger": "Charge",
      "description": "Discovered deep inside an ancient Orokin derelict, the Paris Prime increases the kinetic energy of any bolt it fires, dealing more damage than its more common counterpart.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "paris-prime.png",
      "category": "Bow",
      "tradable": true,
      "damage": "130.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 20,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/PrimeBowM.png/revision/latest?cb=20130713213733",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Paris_Prime",
      "disposition": 4,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS, projectile munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 83.6,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Penta",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/GrenadeLauncher/GrenadeLauncher",
      "totalDamage": 0,
      "trigger": "Active",
      "description": "The Penta Launcher fires up to five grenades that can be remotely triggered at just the right moment.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "penta.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "350.0 blast",
      "flight": 20,
      "projectile": "Projectile",
      "secondary": {
        "name": "Grenade Detonation",
        "blast": 350,
        "damage": "350.0 blast"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/DEPenta.png/revision/latest?cb=20160215091348",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Penta",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Phaedra",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/ArchLongRifle/ArchLongRifle",
      "totalDamage": 45,
      "trigger": "Auto",
      "description": "Devastate free-space enemies with Phaedra, the Soma's big-sister.",
      "accuracy": 10.526316,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.15,
      "imageName": "phaedra.png",
      "tradable": false,
      "damage": "45.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/35/ArchLongRifle.png/revision/latest?cb=20151002090140",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Phaedra",
      "disposition": 4,
      "type": "Archwing Gun",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Phage",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/Tentacluster/InfestedShotgun",
      "totalDamage": 35,
      "trigger": "Held",
      "description": "Fires seven beams of continuous biochemical energy which depletes the life of any surface they contact.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.46,
      "type": "Primary",
      "imageName": "phage.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "35.0 viral",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9e/InfestedLongGunTwo.png/revision/latest?cb=20140206061957",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Phage",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot, monstrous DPS, beam munitions. Scoping narrows down the beam to a single point. ✪",
      "dmg": "100% Status",
      "rank": 49.7,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Phantasma",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/RevenantShotgun/RevenantShotgun",
      "totalDamage": 75,
      "trigger": "Held",
      "description": "Irradiate enemies with a continuous stream of deadly plasma. Charging secondary fire releases a glob of plasma that erupts with homing bomblets on impact. Increased Magazine Capacity when wielded by Revenant.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "phantasma.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "50.0 radiation",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d6/RevenantShotgun.png/revision/latest?cb=20180825053839",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Phantasma",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps, beam munitions. Primary fire has usable AOE. Alt fire charges the weapon to fire an exploding glob that also releases seeking projectiles. Longer charge imparts more damage. ✪",
      "dmg": "100% Status",
      "rank": 36.7,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Plague Keewar Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMeleeInfested/Tips/InfestedTipTwo",
      "type": "Melee",
      "imageName": "plague-keewar.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Operation Plague Star (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Plague_Keewar_Strike"
    },
    {
      "name": "Plague Kripath Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMeleeInfested/Tips/InfestedTipOne",
      "type": "Melee",
      "imageName": "plague-kripath.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Operation Plague Star (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Plague_Kripath_Strike"
    },
    {
      "name": "Plasma Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PlasmaSword/PlasmaLongSword",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "An advanced blade that delivers high-damage attacks. Delivers a high percentage of critical strikes.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.48,
      "type": "Melee",
      "imageName": "plasma-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/90/Plasma.png/revision/latest?cb=20130426080642",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Plasma_Sword",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 86.12,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, very low attack speed. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Plinx",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpSonificBlastor/CrpBlastorWeapon",
      "totalDamage": 46,
      "trigger": "Semi",
      "description": "Cultivate a meaningful relationship with this deceptively simple battery-powered pistol. The Plinx rewards attention and investment from the wise.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.1,
      "type": "Secondary",
      "imageName": "plinx.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "20.0 heat",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e5/Plinx.png/revision/latest?cb=20181218162842",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Plinx",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot, monstrous DPS,  hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 62.6,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Pox",
      "uniqueName": "/Lotus/Weapons/Infested/Pistols/InfProximityStars/InfProximityStars",
      "totalDamage": 170,
      "trigger": "Auto",
      "description": "These festering sacs of pus and gas burst violently on impact.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1.05,
      "type": "Secondary",
      "imageName": "pox.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "50.0 toxin",
      "flight": "???",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bc/InfProximityStars.png/revision/latest?cb=20160819234428",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pox",
      "disposition": 3,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  projectile munitions. Firing launches gas darts that will fill a moderate AOE with gas. Modding 100% status is highly recommended. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 57,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Prime Laser Rifle",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/PrimeLaserRifle",
      "totalDamage": 11.999999,
      "trigger": "Auto",
      "description": "A Prime Laser Rifle.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1.21,
      "type": "Sentinel Weapon",
      "imageName": "prime-laser-rifle.png",
      "tradable": true,
      "damage": "12.0",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/93/SentinelBurstLaserPrime.png/revision/latest?cb=20140718041009",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prime_Laser_Rifle",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prisma Angstrum",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpHandRL/PrismaAngstrum",
      "totalDamage": 1350,
      "trigger": "Charge",
      "description": "Imbued with the finest Prisma crystal, this refined Angstrum features boosted charge and reload speeds.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.3,
      "type": "Secondary",
      "imageName": "prisma-angstrum.png",
      "category": "Pistol",
      "tradable": false,
      "damage": 200,
      "projectile": "Projectile",
      "secondary": {
        "name": "3-Rocket Barrage Explosion",
        "pellet": {
          "name": "Rocket",
          "count": 3
        },
        "blast": 750,
        "damage": "750.0 blast"
      },
      "secondaryArea": {
        "name": "3-Rocket Barrage Impact",
        "status_chance": 59.5,
        "pellet": {
          "name": "Rocket",
          "count": 3
        },
        "blast": 600,
        "damage": "600.0 blast"
      },
      "statusChance": 26,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5f/PrismaAngstrum.png/revision/latest?cb=20170908141430",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Angstrum",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS,  projectile munitions. Multishot causes the rocket to spread out further. Can be charged to launch more rockets at once. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 97.2,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prisma Burst Laser",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/PrismaBurstLaserPistol",
      "totalDamage": 10,
      "trigger": "Burst",
      "description": "Fires a small burst of lasers.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1.45,
      "type": "Sentinel Weapon",
      "imageName": "prisma-burst-laser.png",
      "tradable": false,
      "damage": "10.0",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/PrismaSentinelBurstLaser.png/revision/latest?cb=20160216223831",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Burst_Laser",
      "disposition": 5,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prisma Dual Cleavers",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerMachetteAndCleaver/PrismaDualCleavers",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "Blades of energized prisma crystal make these ornamental cleavers cut as sharply as they look.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "prisma-dual-cleavers.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/57/PrismaDualCleavers.png/revision/latest?cb=20150710171818",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Dual_Cleavers",
      "disposition": 3,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Critical",
      "rank": 35.22,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, high attack speed. Augment adds Justice (Blast, Health, Armor) effects and +100% to base damage. ✪",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Prisma Gorgon",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/VoidTraderGorgon/VTGorgon",
      "totalDamage": 23.000002,
      "trigger": "Auto",
      "description": "Adorned with void hardened prisma crystal, this Gorgon variant is prized for its beauty and enhanced mechanics.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "prisma-gorgon.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "23.1",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/54/PrismaGorgon.png/revision/latest?cb=20150612204850",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Gorgon",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps, hitscan munitions. Roll for recoil reduction in riven. ✪",
      "dmg": "Crit/Status",
      "rank": 43.4,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Prisma Grakata",
      "uniqueName": "/Lotus/Weapons/VoidTrader/PrismaGrakata",
      "totalDamage": 15,
      "trigger": "Auto",
      "description": "Encased in plates refined from pure prisma crystals, this rare element gives this assault rifle a radiant luster.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.2,
      "type": "Primary",
      "imageName": "prisma-grakata.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "15.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/80/PrismaGrakata.png/revision/latest?cb=20150612204849",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Grakata",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot, monstrous DPS, hitscan munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 48.6,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Prisma Grinlok",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerLeverActionRifle/PrismaGrinlokWeapon",
      "totalDamage": 187,
      "trigger": "Semi",
      "description": "Prisma-crystal enhancement creates here a prestige instrument; a weapon capable of taking life at astonishing range with but a single pull of its exquisitely-tooled trigger.",
      "accuracy": 32,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.245,
      "type": "Primary",
      "imageName": "prisma-grinlok.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "187.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/47/PrismaGrinlok.png/revision/latest?cb=20190309000413",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Grinlok",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, hitscan munitions. Augment adds 200% CC and Sequence (Radiation, Shields, Max Shields) ",
      "dmg": "Crit/Status",
      "rank": 57.9,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Prisma Obex",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/KickAndPunch/PrismaObex",
      "totalDamage": 25,
      "trigger": "Melee",
      "description": "Dazzle, distract and destroy with these sparring weapons of impossibly hard prisma crystal.",
      "accuracy": 100,
      "wallAttack": 75,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.1,
      "type": "Melee",
      "imageName": "prisma-obex.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "25.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/PrismaObex.png/revision/latest?cb=20170506061038",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Obex",
      "disposition": 3,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 67.27,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, very high attack speed. Suffers from relatively poor consistency. Entropy Detonation cause ground finisher kills to explode for 1,000 (+20% enemy max health) Blast damage and Entropy (Magnetic, Energy) effects. ",
      "stance": "Grim Fury",
      "stanceNotes": "",
      "combo": "Bright Blaze & Charged Attacks",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/PrismaShadePowerSuit",
      "name": "Prisma Shade",
      "description": "A rare jewel of the void. How could anything so beautiful be crafted for stealth?",
      "type": "Sentinel",
      "imageName": "prisma-shade.png",
      "tradable": false,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Prisma_Shade"
    },
    {
      "name": "Prisma Skana",
      "uniqueName": "/Lotus/Weapons/VoidTrader/PrismaSkana",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "Forged from raw prisma crystals and infused with Void energy, this blade's pristine edge is honed razor-sharp to eviscerate even the most deadly of foes.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.22,
      "type": "Melee",
      "imageName": "prisma-skana.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f0/PrismaSkana.png/revision/latest?cb=20150612204850",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Skana",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 63.47,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. Suffers from relatively poor consistency. Bright Purity adds 100% melee damage and Purity (Corrosive, health) effects. ",
      "stance": "Swooping Falcon",
      "stanceNotes": "",
      "combo": "Diving Kestrel",
      "component": false
    },
    {
      "name": "Prisma Tetra",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CorpusUMP/PrismaCorpusUMP",
      "totalDamage": 38,
      "trigger": "Auto",
      "description": "When bathed in Void energy and prisma crystal, the simple Tetra becomes a beacon of style and intimidation.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.45,
      "type": "Primary",
      "imageName": "prisma-tetra.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "38.0",
      "flight": 100,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/PrismaTetra.png/revision/latest?cb=20150808232059",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Tetra",
      "disposition": 5,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS, projectile munitions. ",
      "dmg": "Status",
      "rank": 100.7,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prisma Twin Gremlins",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerBulbousSMG/Prisma/PrismaTwinGremlinsWeapon",
      "totalDamage": 27,
      "trigger": "Auto",
      "description": "Fused with prisma crystals, these pristine Grineer sidearms are sure to intimidate any foe.",
      "accuracy": 36.363636,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.2,
      "type": "Secondary",
      "imageName": "prisma-twin-gremlins.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "27.0",
      "flight": 65,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3a/PrismaTwinGremlins.png/revision/latest?cb=20180825235519",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Twin_Gremlins",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot, insane dps,  projectile munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 47.5,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Prisma Veritux",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/VoidTraderArchsword/VTArchSwordWeapon",
      "totalDamage": 300,
      "trigger": "Melee",
      "description": "A rare object of beauty, this Archwing sword has been sheathed in prisma crystal and baptized in the Void’s energy.",
      "accuracy": 100,
      "wallAttack": 300,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "imageName": "prisma-veritux.png",
      "tradable": false,
      "damage": "300.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ed/PrismaVerituxFix.png/revision/latest?cb=20150123055945",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Veritux",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prova",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/ElectroProd",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "The Prova is a Melee Weapon that delivers a high-intensity shock to its target.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.29,
      "type": "Melee",
      "imageName": "prova.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/92/Prova8point2.png/revision/latest?cb=20131006131115",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prova",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prova Vandal",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/VandalElectroProd",
      "totalDamage": 48,
      "trigger": "Melee",
      "description": "A customized version of the vicious Prova, with metallic finish and Lotus decal.",
      "accuracy": 100,
      "wallAttack": 192,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.29,
      "type": "Melee",
      "imageName": "prova-vandal.png",
      "category": "Machete",
      "tradable": true,
      "channeling": 1.5,
      "damage": "48.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/61/VandalElectroProd.png/revision/latest?cb=20140619213520",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prova_Vandal",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 57.3,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, low attack speed. Suffers from relatively poor consistency. Slam attacks always proc Electricity. Static Discharge deals 80% of weapon damage as Electricity damage to nearby enemies. ",
      "stance": "Cyclone Kraken",
      "stanceNotes": "",
      "combo": "Lightning Siren",
      "component": false
    },
    {
      "name": "Pupacyst",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Staff/InfStaff/InfStaff",
      "totalDamage": 90,
      "trigger": "Melee",
      "description": "A two-pronged attack; the bone-grafted cocoon at the tip of this staff rends flesh, while the viral mass living within spreads itself into the wounds of each new victim.",
      "accuracy": 100,
      "wallAttack": 150,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "pupacyst.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "43.0 viral",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1f/InfStaff.png/revision/latest?cb=20181013134554",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pupacyst",
      "disposition": 3,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 59.34,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, poor DPS, low attack speed. Suffers from relatively poor consistency. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Vaulting Apex or Slide",
      "component": false
    },
    {
      "name": "Pyrana",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/SawnOffShotgun/TennoHandShotgun",
      "totalDamage": 264,
      "trigger": "Auto",
      "description": "Chew through the enemy with this vicious automatic hand shotgun.",
      "accuracy": 5,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 0.69999999,
      "type": "Secondary",
      "imageName": "pyrana.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "264.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/SawnOffShotgun.png/revision/latest?cb=20140604224124",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pyrana",
      "disposition": 1,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Pyrana Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimePyrana/PrimePyranaPistol",
      "totalDamage": 240,
      "trigger": "Auto",
      "description": "Three kills in rapid succession to summon a second ethereal Pyrana for twice the deadly punch.",
      "accuracy": 6.060606,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "omegaAttenuation": 0.69999999,
      "type": "Secondary",
      "imageName": "pyrana-prime.png",
      "category": "Shotgun Sidearm",
      "tradable": true,
      "damage": "240.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e3/PyranaPrime.png/revision/latest?cb=20180619191908",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pyrana_Prime",
      "disposition": 1,
      "releaseDate": "2018 06 19",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 04 17",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot, insane dps,  hitscan munitions. Killing 3 enemies within 3 seconds summons another Pyrana Prime for 5 seconds, which doubles your fire rate and current ammo (of which up to 12 remains after it is gone). ",
      "dmg": "Critical",
      "rank": 43.7,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Quanta",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpShockRifle/CrpShockRifle",
      "totalDamage": 20,
      "trigger": "Held",
      "description": "This weapon was designed to assist with the excavation of mineral deposits from large asteroids, but has been adapted for military purposes.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "quanta.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "20.0 electricity",
      "projectile": "Discharge",
      "secondaryArea": {
        "name": "Cube (Shot by player)",
        "status_chance": 26,
        "speed": 4,
        "blast": 600,
        "damage": "600.0 blast"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/CrpShockRifle.png/revision/latest?cb=20140731223522",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Quanta",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Quanta Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpShockRifle/QuantaVandal",
      "totalDamage": 26,
      "trigger": "Held",
      "description": "A customized version of the Quanta, with metallic finish and Lotus decal.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "quanta-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "26.0 electricity",
      "projectile": "Discharge",
      "secondaryArea": {
        "name": "Cube (Shot by player)",
        "status_chance": 26,
        "speed": 4,
        "blast": 600,
        "damage": "600.0 blast"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/91/QuantaVandal.png/revision/latest?cb=20150519212443",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Quanta_Vandal",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS, beam munitions. Could do with punchthrough but build is tight as it is. Alt fire useful to learn Euclidean geometry. ✪",
      "dmg": "Crit/Status",
      "rank": 49.1,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Quartakk",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnFourBarrelRifle/GrnFourBarrelRifleWeapon",
      "totalDamage": 49,
      "trigger": "Burst",
      "description": "Annihilate targets with four simultaneous shots from this high-caliber Grineer rifle.",
      "accuracy": 90.909088,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "quartakk.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "49.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8d/GrnFourBarrelRifleWeapon.png/revision/latest?cb=20171221214432",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Quartakk",
      "disposition": 4,
      "acquisition": "Cetus Bounty (Ghoul)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot, moderate DPS, hitscan munitions. Four-shot burst is wasteful at times. ",
      "dmg": "Crit/Status",
      "rank": 67.6,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Quatz",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnAmphisPistol/GrnAmphisPistol",
      "totalDamage": 29,
      "trigger": "Auto",
      "description": "A compact four-barreled design packing a self-charging capacitor that discharges upon every reload from empty. Features auto hip-fire and aimed fire is semi-auto, four-shot instant burst.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1,
      "type": "Secondary",
      "imageName": "quatz.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "11.0 electricity",
      "secondary": {
        "name": "Burst",
        "speed": 10,
        "crit_chance": 27,
        "crit_mult": 2.5,
        "status_chance": 0.2,
        "impact": 9,
        "slash": 7,
        "puncture": 2,
        "electricity": 11,
        "damage": "11.0 electricity"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/14/Quatz.png/revision/latest?cb=20190718204836",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Quatz",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps,  hitscan munitions. Reloading when the clip is emptied causes an Electric damage proc (with 100% status chance) around you. ",
      "dmg": "Critical",
      "rank": 51.1,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Rabvee Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee02/Tip/TipTen",
      "type": "Melee",
      "imageName": "rabvee.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Rabvee_Strike"
    },
    {
      "name": "Rahn Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/Set2/Barrel/SentAmpSet2BarrelPartA",
      "type": "Amp",
      "imageName": "rahn-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Rahn_Prism"
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/GuardKubrowPetPowerSuit",
      "name": "Raksa Kubrow",
      "description": "Designed by the Orokin to be the perfect companion, a Kubrow was never far from its master's side. Loyal and obedient, these creatures made ideal bodyguards. Equipped with shield generators for added protection, their fierce growl could paralyze any attacker with fear.",
      "type": "Companion",
      "imageName": "raksa-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Raksa_Kubrow"
    },
    {
      "name": "Rakta Ballistica",
      "uniqueName": "/Lotus/Weapons/Syndicates/RedVeil/Pistols/RVBallistica",
      "totalDamage": 300,
      "trigger": "Charge",
      "description": "This modified ballistica is the weapon of choice used by Red Veil Assassins to take out high-priority marks.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.05,
      "type": "Secondary",
      "imageName": "rakta-ballistica.png",
      "category": "Crossbow",
      "tradable": true,
      "damage": 300,
      "projectile": "Projectile",
      "secondary": {
        "name": "Burst Shot",
        "speed": 11.43,
        "crit_chance": 5,
        "crit_mult": 1.5,
        "status_chance": 0,
        "shot_type": "Projectile",
        "shot_speed": 100,
        "impact": 3.75,
        "slash": 3.75,
        "puncture": 67.5
      },
      "statusChance": 10,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/RVBallistica.png/revision/latest?cb=20141127183101",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rakta_Ballistica",
      "disposition": 3,
      "acquisition": "Red Veil (Exalted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS,  projectile munitions. Blight (Viral, energy, movement speed) is useful at times. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 135.7,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Rakta Cernos",
      "uniqueName": "/Lotus/Weapons/Syndicates/RedVeil/Bows/RVCernos",
      "totalDamage": 250,
      "trigger": "Charge",
      "description": "A finely tuned instrument of assassination.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.15,
      "type": "Primary",
      "imageName": "rakta-cernos.png",
      "category": "Bow",
      "tradable": true,
      "damage": "150.0",
      "flight": 100,
      "projectile": "Projectile",
      "statusChance": 15,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9c/SyndicateRVCernos.png/revision/latest?cb=20150902215135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rakta_Cernos",
      "disposition": 4,
      "acquisition": "Red Veil (Exalted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, projectile munitions. Good syndicate proc (Viral + energy restore) but doesn't do much for DPS since effective fire-rate for bows are low. ",
      "dmg": "Crit/Status",
      "rank": 66,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Rakta Dark Dagger",
      "uniqueName": "/Lotus/Weapons/Syndicates/RedVeil/Melee/RVDarkDagger",
      "totalDamage": 50,
      "trigger": "Melee",
      "description": "Infiltrate undetected; reduced visibility when held. Then strike with confidence; hits to irradiated targets restores shields and creates overshields.",
      "accuracy": 100,
      "wallAttack": 150,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.51999998,
      "type": "Melee",
      "imageName": "rakta-dark-dagger.png",
      "category": "Dagger",
      "tradable": true,
      "channeling": 1.5,
      "damage": "50.0 radiation",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/46/RVDarkDagger.png/revision/latest?cb=20160916030245",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rakta_Dark_Dagger",
      "disposition": 1,
      "acquisition": "Red Veil (Exalted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Speed",
      "rank": 54.53,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, low attack speed. Can use the Gleaming Blight augment. Blight (Viral, energy, movement speed) effects. While wielded, enemies have reduced detection radius. Radiation procs restore shields and may grant overshields. ",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Raplak Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/Set1/Barrel/SentAmpSet1BarrelPartA",
      "type": "Amp",
      "imageName": "raplak-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Raplak_Prism"
    },
    {
      "name": "Rathbone",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/ArchHammer/ArchHammer",
      "totalDamage": 280,
      "trigger": "Melee",
      "description": "Using Archwing’s jets for thrust, this massive hammer crushes anything in its path.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "imageName": "rathbone.png",
      "tradable": false,
      "damage": "280.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8a/ArchHammer.png/revision/latest?cb=20141024143734",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rathbone",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Rattleguts",
      "uniqueName": "/Lotus/Weapons/SolarisUnited/Secondary/SUModularSecondarySet1/Barrel/SUModularSecondaryBarrelCPart",
      "type": "Secondary",
      "imageName": "rattleguts.png",
      "category": "Kitgun",
      "tradable": false,
      "acquisition": "Rude Zuud (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Rattleguts"
    },
    {
      "name": "Reaper Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Scythe/ReaperWeapon",
      "totalDamage": 75,
      "trigger": "Melee",
      "description": "Reaper Prime is an ornamental scythe, with a blade forged from tempered rubidium.",
      "accuracy": 100,
      "wallAttack": 150,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.29,
      "type": "Melee",
      "imageName": "reaper-prime.png",
      "category": "Scythe",
      "tradable": true,
      "channeling": 1.5,
      "damage": "75.1",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/67/ReaperPrime.png/revision/latest?cb=20140314071744",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Reaper_Prime",
      "disposition": 4,
      "releaseDate": "2013 05 03",
      "vaultDate": "2015 04 01",
      "estimatedVaultDate": "2015 04 01",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 62.13,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, poor DPS, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Stalking Fan",
      "stanceNotes": "",
      "combo": "Dying Light",
      "component": false
    },
    {
      "name": "Redeemer",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gunblade/TnoGunblade",
      "totalDamage": 60,
      "trigger": "Melee",
      "description": "Striking with massive twin blades, the Redeemer fires the killing blow with its built-in shotgun.",
      "accuracy": 100,
      "wallAttack": 240,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.17,
      "type": "Melee",
      "imageName": "redeemer.png",
      "category": "Gunblade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "60.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d6/TnoGunblade.png/revision/latest?cb=20141127183103",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Redeemer",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Redeemer Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gunblade/RedeemerPrime/RedeemerPrimeWep",
      "totalDamage": 80,
      "trigger": "Melee",
      "description": "Deal double-bladed, double-barreled death with this primed gunblade.",
      "accuracy": 100,
      "wallAttack": 320,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.17,
      "type": "Melee",
      "imageName": "redeemer-prime.png",
      "category": "Gunblade",
      "tradable": true,
      "channeling": 1.5,
      "damage": "80.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b9/RedeemerPrime.png/revision/latest?cb=20181218224304",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Redeemer_Prime",
      "disposition": 4,
      "releaseDate": "2018 12 12",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 10 24",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 36.99,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, low attack speed. ✪",
      "stance": "Bullet Dance",
      "stanceNotes": "",
      "combo": "Lead Tango or Automatic Rhumba",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Revenant/Revenant",
      "name": "Revenant",
      "description": "Rise from the broken remains of the Eidolon to seduce an army of zealous thralls.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Shield depletion smashes enemies within |RADIUS|m with a |DAMAGE| Damage knockdown shockwave.",
      "type": "Warframe",
      "imageName": "revenant.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 3228743,
      "introduced": "23.5",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/07/Revenant.png/revision/latest?cb=20180827015802",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Revenant",
      "acquisition": "Mask of the Lost One (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Rhino/Rhino",
      "name": "Rhino",
      "description": "Rhino is the heaviest Warframe, combining offensive and defensive capabilities.",
      "masteryReq": 0,
      "sprintSpeed": 0.94999999,
      "passiveDescription": "Emit a shockwave dealing |DAMAGE| damage after landing from a great height.",
      "type": "Warframe",
      "imageName": "rhino.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 3417636,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 0.95,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/40/RhinoNewLook.png/revision/latest?cb=20141124023302",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rhino",
      "acquisition": "Jackal (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Rhino/RhinoPrime",
      "name": "Rhino Prime",
      "description": "Takes Rhino's ground-shaking abilities to the next level with altered mod polarities that offer greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Emit a shockwave dealing |DAMAGE| damage after landing from a great height.",
      "type": "Warframe",
      "imageName": "rhino-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 2039064,
      "introduced": "12.4",
      "sex": "Male",
      "sprint": 1,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/54/RhinoPrimeNewLook.png/revision/latest?cb=20141124023312",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rhino_Prime",
      "releaseDate": "2014 03 06",
      "vaultDate": "2016 02 16",
      "estimatedVaultDate": "2016 02 16",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ripkas",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerClaws/GrnClaws",
      "totalDamage": 55,
      "trigger": "Melee",
      "description": "Motorized saw claw weapon.",
      "accuracy": 100,
      "wallAttack": 165,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.38,
      "type": "Melee",
      "imageName": "ripkas.png",
      "category": "Claws",
      "tradable": false,
      "channeling": 1.5,
      "damage": "55.1",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/38/GrnClaws.png/revision/latest?cb=20150320022623",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ripkas",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Speed",
      "rank": 60.66,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. Hunter's Bonesaw increases damage by 90% and status chance by 60% on grounded enemies. ",
      "stance": "Malicious Raptor",
      "stanceNotes": "",
      "combo": "Venging Thrash",
      "component": false
    },
    {
      "name": "Rubico",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/FiveShotSniper/FiveShotSniper",
      "totalDamage": 179.99998,
      "trigger": "Semi",
      "description": "Scope out the enemy with this long-range revolver style rifle.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 0.69999999,
      "type": "Primary",
      "imageName": "rubico.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "180.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/FiveShotSniper.png/revision/latest?cb=20151204013135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rubico",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Rubico Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/RubicoPrime/RubicoPrimeWeapon",
      "totalDamage": 187,
      "trigger": "Semi",
      "description": "For the hunter, the apex of the sniper's art. For the hunted, a gateway to the next life.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 0.69999999,
      "type": "Primary",
      "imageName": "rubico-prime.png",
      "category": "Sniper Rifle",
      "tradable": true,
      "damage": "187.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e6/RubicoPrime.png/revision/latest?cb=20180929023357",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rubico_Prime",
      "disposition": 1,
      "releaseDate": "2018 09 25",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 07 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot, insane dps, hitscan munitions. Sniper combo counter rampup is amazing (min. 1), zooming in gives additive bonus to Crit Multiplier (35%/50%). High direct damage potential and smooth handling makes Rubico Prime a popular choice for Eidolon Hunting. ",
      "dmg": "Crit/Status",
      "rank": 43,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Runway",
      "uniqueName": "/Lotus/Types/Vehicles/Hoverboard/HoverboardParts/PartComponents/HoverboardCorpusC/HoverboardCorpusCDeck",
      "type": "Vehicle",
      "imageName": "runway.png",
      "category": "K-Drive",
      "tradable": false,
      "acquisition": "Roky (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Runway"
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/AdventurerKubrowPetPowerSuit",
      "name": "Sahasa Kubrow",
      "description": "Enterprising Orokin genetic designers recognized that the Kubrow's affinity for games of fetch could be used for more serious endeavors. They soon developed a strain adept at reconnaissance and contraband recovery. Tenno often used the creatures to help resupply while in the field.",
      "type": "Companion",
      "imageName": "sahasa-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Sahasa_Kubrow"
    },
    {
      "name": "Sancti Castanas",
      "uniqueName": "/Lotus/Weapons/Syndicates/NewLoka/Pistols/NLCastanas",
      "totalDamage": 300,
      "trigger": "Active",
      "description": "This remotely detonated electrical trap is used by devotees of New Loka to protect their temples and shrines.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "sancti-castanas.png",
      "category": "Thrown",
      "tradable": true,
      "damage": "300.0 electricity",
      "flight": 30,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/ca/NLCastanas.png/revision/latest?cb=20141127182955",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sancti_Castanas",
      "disposition": 5,
      "acquisition": "New Loka (Flawless)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS,  projectile munitions. Purity (Corrosive, health) can be useful at times. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 82.5,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Sancti Magistar",
      "uniqueName": "/Lotus/Weapons/Syndicates/NewLoka/Melee/NLMagistar",
      "totalDamage": 119.99999,
      "trigger": "Melee",
      "description": "Each charged attack turns the enemy’s pain into a healing pulse that washes over allies. Also, creates resistance to Status Effects when held.",
      "accuracy": 100,
      "wallAttack": 240,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.09,
      "type": "Melee",
      "imageName": "sancti-magistar.png",
      "category": "Hammer",
      "tradable": true,
      "channeling": 1.5,
      "damage": "120.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/15/NLMagistar.png/revision/latest?cb=20160916030244",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sancti_Magistar",
      "disposition": 3,
      "acquisition": "New Loka (Flawless)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 123.29,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, poor DPS, high attack speed. Suffers from relatively poor consistency. Innate 10% Blast effect proc. Reduces damage from status effects by 75%. Charge attacks heals nearby allies based on damage dealt. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "Only use Raging Whirlwind to proc Impact or the slam will ragdoll",
      "combo": "Tidal Force & Raging Whirlwind",
      "component": false
    },
    {
      "name": "Sancti Tigris",
      "uniqueName": "/Lotus/Weapons/Syndicates/NewLoka/LongGuns/NLTigris",
      "totalDamage": 1260,
      "trigger": "Duplex",
      "description": "Echo nature's violent beauty with this special Tigris.",
      "accuracy": 6.4516129,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 0.55000001,
      "type": "Primary",
      "imageName": "sancti-tigris.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "1260.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/94/SyndicateNLTigris.png/revision/latest?cb=20150902215134",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sancti_Tigris",
      "disposition": 1,
      "acquisition": "New Loka (Flawless)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS, hitscan munitions. Duplex trigger might take a while to get used to. Purity (Corrosive, health) effect can be useful. Suffers from relatively poor consistency. ",
      "dmg": "Critical",
      "rank": 73.2,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sarpa",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gunblade/GunbladeAutomatic/TnoGunbladeAutomatic",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "Makes sweeping cuts punctuated by bursts of heavy gunfire.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.24,
      "type": "Melee",
      "imageName": "sarpa.png",
      "category": "Gunblade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "70.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c2/TnoGunbladeAuto.png/revision/latest?cb=20160819234433",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sarpa",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 44.37,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, low attack speed. ✪",
      "stance": "Bullet Dance",
      "stanceNotes": "",
      "combo": "Charge Attack",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Saryn/Saryn",
      "name": "Saryn",
      "description": "Saryn's venomous attacks are horrifyingly effective against organic and synthetic enemies, and her ability to 'shed' her skin makes her very elusive.",
      "masteryReq": 0,
      "sprintSpeed": 0.94999999,
      "passiveDescription": "Status Effects inflicted upon enemies last |DURATION|% longer.",
      "type": "Warframe",
      "imageName": "saryn.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 3947584,
      "introduced": "7",
      "sex": "Female",
      "sprint": 0.95,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d9/SarynNewLook.png/revision/latest?cb=20141124023331",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Saryn",
      "acquisition": "Kela De Thaym (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Saryn/SarynPrime",
      "name": "Saryn Prime",
      "description": "A golden blossom conceals deadly nectar. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Status Effects inflicted upon enemies last |DURATION|% longer.",
      "type": "Warframe",
      "imageName": "saryn-prime.png",
      "tradable": true,
      "aura": "vazarin",
      "conclave": true,
      "color": 3223605,
      "introduced": "18.4.12",
      "sex": "Female",
      "sprint": 1,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/08/SarynPrimeLarge.png/revision/latest?cb=20160217235603",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Saryn_Prime",
      "releaseDate": "2016 02 16",
      "vaultDate": "2017 12 12",
      "estimatedVaultDate": "2017 12 12",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Scindo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Axe/AxeWeapon",
      "totalDamage": 100,
      "trigger": "Melee",
      "description": "The Scindo is a heavy war axe crafted by the Tenno. Reduced speed and agility is balanced by heavy, devastating strikes capable of connecting with multiple targets at once.",
      "accuracy": 100,
      "wallAttack": 200,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "scindo.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "100.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b6/DEScindo.png/revision/latest?cb=20140416121340",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Scindo",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Scindo Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Axe/PrimeScindo/PrimeScindoWeapon",
      "totalDamage": 130,
      "trigger": "Melee",
      "description": "An ancient executioners weapon, the honor of decapitation by the Scindo Prime was reserved for the Orokin's most respected enemies.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "scindo-prime.png",
      "category": "Heavy Blade",
      "tradable": true,
      "channeling": 1.5,
      "damage": "130.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/38/PrimeScindo.png/revision/latest?cb=20140923195818",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Scindo_Prime",
      "disposition": 3,
      "releaseDate": "2014 09 23",
      "vaultDate": "2016 08 23",
      "estimatedVaultDate": "2016 08 23",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 41.81,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, monstrous DPS, high attack speed. ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "name": "Scoliac",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Whip/InfestedWhip/InfestedWhipWeapon",
      "totalDamage": 55,
      "trigger": "Melee",
      "description": "The Scoliac Whip is a nasty parasitic growth of sinew and bone that can inflict heart stopping <DT_POISON>Toxin Damage with attacks.",
      "accuracy": 100,
      "wallAttack": 220,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.3,
      "type": "Melee",
      "imageName": "scoliac.png",
      "category": "Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "55.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/34/DEScoliac2.png/revision/latest?cb=20140407035857",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Scoliac",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Slide",
      "rank": 35.81,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, high attack speed. Suffers from relatively poor consistency. ✪",
      "stance": "Burning Wasp",
      "stanceNotes": "",
      "combo": "Slide",
      "component": false
    },
    {
      "name": "Scourge",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnPriestSpear/TnPriestSpearGun",
      "totalDamage": 34,
      "trigger": "Auto",
      "description": "Blast targets with corrosive plasma projectiles, or toss the scepter to inflict an energy field upon nearby enemies that amplifies their brain waves to attract bullets.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.15,
      "type": "Primary",
      "imageName": "scourge.png",
      "category": "Speargun",
      "tradable": false,
      "damage": "70.0 corrosive",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Throw Spear",
        "speed": 1,
        "crit_chance": 4,
        "crit_mult": 2,
        "status_chance": 0.3,
        "charge_time": 0.5,
        "impact": 455,
        "slash": 122.5,
        "puncture": 72.5,
        "corrosive": 50,
        "damage": "50.0 corrosive"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c8/PriestSpearGun.png/revision/latest?cb=20170629034316",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Scourge",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps, projectile munitions. Alt fire creates a localized bullet attractor field on nearby enemies' head. ✪",
      "dmg": "Status",
      "rank": 38.7,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Secura Dual Cestra",
      "uniqueName": "/Lotus/Weapons/Syndicates/PerrinSequence/Pistols/PSDualCestra",
      "totalDamage": 28,
      "trigger": "Auto",
      "description": "The favored side-arms of Perrin Sequence executives, these pistols have been modified to improve efficiency and killing potential.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.3,
      "type": "Secondary",
      "imageName": "secura-dual-cestra.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "28.0",
      "flight": 100,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8f/PSDualCestra.png/revision/latest?cb=20141127182956",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Secura_Dual_Cestra",
      "disposition": 4,
      "acquisition": "The Perrin Sequence (Partner)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot, monstrous DPS,  projectile munitions. Sequence (Radiation, shields) can be useful at times. ✪",
      "dmg": "Crit/Status",
      "rank": 57.4,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Secura Lecta",
      "uniqueName": "/Lotus/Weapons/Syndicates/PerrinSequence/Melee/PSLecta",
      "totalDamage": 75,
      "trigger": "Melee",
      "description": "Whip the enemy out of their ill-gotten gains; double credit drops on kills.",
      "accuracy": 100,
      "wallAttack": 300,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "secura-lecta.png",
      "category": "Whip",
      "tradable": true,
      "channeling": 1.5,
      "damage": "75.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/PSLecta.png/revision/latest?cb=20160916030244",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Secura_Lecta",
      "disposition": 1,
      "acquisition": "The Perrin Sequence (Partner)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Slide",
      "rank": 36.1,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, high attack speed. Killing an enemy with this weapon equipped gives bonus credits.",
      "stance": "Burning Wasp",
      "stanceNotes": "",
      "combo": "Slide",
      "component": false
    },
    {
      "name": "Secura Penta",
      "uniqueName": "/Lotus/Weapons/Syndicates/PerrinSequence/LongGuns/PSPenta",
      "totalDamage": 48,
      "trigger": "Active",
      "description": "Ruthless and efficient, just like the free-market.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "secura-penta.png",
      "category": "Launcher",
      "tradable": true,
      "damage": "300.0 blast",
      "flight": 25,
      "projectile": "Projectile",
      "secondary": {
        "name": "Grenade Detonation",
        "crit_chance": 26,
        "crit_mult": 2,
        "status_chance": 0.3,
        "blast": 300,
        "damage": "300.0 blast"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/69/SyndicatePSPenta.png/revision/latest?cb=20150902215135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Secura_Penta",
      "disposition": 4,
      "acquisition": "The Perrin Sequence (Partner)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, projectile munitions. Napalm Grenades adds 30% Status Chance (not affected by mods) and causes instant explosions while leaving a burning patch on the ground. Suffers from relatively poor consistency. ✪",
      "dmg": "Crit/Status",
      "rank": 55.6,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Seer",
      "uniqueName": "/Lotus/Weapons/Grineer/GrineerPistol/GrnScopedPistolPlayer",
      "totalDamage": 101,
      "trigger": "Semi",
      "description": "Captain Vor's prized Orokin-Grineer hybrid pistol has an average rate of fire, but it has high damage and superior zoom capabilities.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.5,
      "type": "Secondary",
      "imageName": "seer.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "101.01",
      "flight": 200,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/CaptainVorPistol.png/revision/latest?cb=20130713203008",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Seer",
      "disposition": 5,
      "acquisition": "Captain Vor (Boss)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS,  projectile munitions. ",
      "dmg": "Status",
      "rank": 223.1,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sepfahn Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee02/Tip/TipNine",
      "type": "Melee",
      "imageName": "sepfahn.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Sepfahn_Strike"
    },
    {
      "name": "Serro",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Polearm/CorpusPolearm01/CorpusPolearmWeapon",
      "totalDamage": 75,
      "trigger": "Melee",
      "description": "Developed as an energy saw to scrap obsolete ships, this tool was quickly banned when rebels in the Sedna region discovered it also made an excellent weapon.",
      "accuracy": 100,
      "wallAttack": 125,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.38,
      "type": "Melee",
      "imageName": "serro.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "75.0 electricity",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9f/Corpuspolearm.png/revision/latest?cb=20140526165634",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Serro",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 64.33,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Vaulting Apex",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/ShadePowerSuit",
      "name": "Shade",
      "description": "With 'Revenge' and 'Ghost' as default Precepts, Shade is well suited for stealth gameplay. Shade also comes with a burst laser pistol.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "shade.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Shade"
    },
    {
      "name": "Shaku",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Nunchaku/TnoNunchaku/TnoNunchaku",
      "totalDamage": 55,
      "trigger": "Melee",
      "description": "With these blazing fast nunchaku, the enemy will never know what hit them.",
      "accuracy": 100,
      "wallAttack": 220,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.35,
      "type": "Melee",
      "imageName": "shaku.png",
      "category": "Nunchaku",
      "tradable": false,
      "channeling": 1.5,
      "damage": "55.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b6/TnoNunchaku.png/revision/latest?cb=20151210032859",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Shaku",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 66.73,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Atlantis Vulcan",
      "stanceNotes": "",
      "combo": "Molten Whirlpool",
      "component": false
    },
    {
      "name": "Sheev",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerCombatKnife/GrineerCombatKnife",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "Built for close combat, the Sheev's plasma blade slices through flesh and armor with equal ease.",
      "accuracy": 100,
      "wallAttack": 135,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.25,
      "type": "Melee",
      "imageName": "sheev.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ed/GrineerCombatKnife.png/revision/latest?cb=20140918035807",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sheev",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Speed",
      "rank": 57.58,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, very low attack speed. Slam attacks guarantees heat proc. ",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Shwaak Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/Set1/Barrel/SentAmpSet1BarrelPartB",
      "type": "Amp",
      "imageName": "shwaak-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Shwaak_Prism"
    },
    {
      "name": "Sibear",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Hammer/IceHammer/IceHammer",
      "totalDamage": 130,
      "trigger": "Melee",
      "description": "Ice in motion can crush mountains, this frozen hammer is no different.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.35,
      "type": "Melee",
      "imageName": "sibear.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "130.0 cold",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/IceHammer.png/revision/latest?cb=20160407005429",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sibear",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 99.1,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, poor DPS, high attack speed. Charge attacks gives +50% status chance for 4s. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "Only use Raging Whirlwind to proc Impact or the slam will ragdoll",
      "combo": "Tidal Force & Raging Whirlwind",
      "component": false
    },
    {
      "name": "Sicarus",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/BurstPistol",
      "totalDamage": 30,
      "trigger": "Burst",
      "description": "The Sicarus fires 3-round bursts, which provides a balance between the lethality of auto-pistols and the accuracy of semi-automatic pistols.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.1,
      "type": "Secondary",
      "imageName": "sicarus.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/59/Sicarus.png/revision/latest?cb=20130426074741",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sicarus",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sicarus Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeSicarus/PrimeSicarusPistol",
      "totalDamage": 50,
      "trigger": "Burst",
      "description": "The Sicarus Prime is an ornamental firearm that fires rounds in rapid bursts, providing a balance between the lethality of auto-pistols and the accuracy of semi-automatic pistols.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 1.1,
      "type": "Secondary",
      "imageName": "sicarus-prime.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "50.0",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d7/DESicarus_Prime.png/revision/latest?cb=20140124172933",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sicarus_Prime",
      "disposition": 3,
      "releaseDate": "2013 11 20",
      "vaultDate": "2015 10 06",
      "estimatedVaultDate": "2015 10 06",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  hitscan munitions. Three-round burst is wasteful at times. ",
      "dmg": "Crit/Status",
      "rank": 56.7,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Sigma & Octantis",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/SwordsAndBoards/SundialSwordBoard/SundialBoardSword",
      "totalDamage": 60,
      "trigger": "Melee",
      "description": "Deadly slashes from the Sigma sword are matched only by the force of the Octantis shield when thrown from the air.",
      "accuracy": 100,
      "wallAttack": 240,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "sigma-&-octantis.png",
      "category": "Sword and Shield",
      "tradable": false,
      "channeling": 1.5,
      "damage": "60.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5a/SundialSwordAndBoard.png/revision/latest?cb=20171031145328",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sigma_%26_Octantis",
      "disposition": 3,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 53.67,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, moderate DPS, high attack speed. ",
      "stance": "Final Harbinger",
      "stanceNotes": "",
      "combo": "Systemic Shred",
      "component": false
    },
    {
      "name": "Silva & Aegis",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/SwordsAndBoards/MeleeContestWinnerOne/TennoSwordShield",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "This fiery sword and shield combination perfects the balance of Tenno offense and defense prowess. In the hands of a Master, even a defensive tool like a shield can be used as a weapon.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "silva-&-aegis.png",
      "category": "Sword and Shield",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0 heat",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/10/TennoSwordShield.png/revision/latest?cb=20140718094659",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Silva_%26_Aegis",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Silva & Aegis Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeSilvaAegis/PrimeSilvaAegis",
      "totalDamage": 120,
      "trigger": "Melee",
      "description": "A perfectly crafted pairing, this mace and shield combination is sculpted for exhibition but balanced for the battlefield.",
      "accuracy": 100,
      "wallAttack": 480,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "silva-&-aegis-prime.png",
      "category": "Sword and Shield",
      "tradable": true,
      "channeling": 1.5,
      "damage": "120.0 heat",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f7/SilvaAegisPrime.png/revision/latest?cb=20170530191856",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Silva_%26_Aegis_Prime",
      "disposition": 3,
      "releaseDate": "2017 05 30",
      "vaultDate": "2019 03 27",
      "estimatedVaultDate": "2019 03 27",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 40.67,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, very low attack speed. Blocking adds up to 4 charges that increases critical and status chance by 15% additively. Avenging Truth absorbs 50% of incoming damage and releases it on the next charge attack and Truth (Gas, health, parkour) effects. ",
      "stance": "Final Harbinger",
      "stanceNotes": "",
      "combo": "Systemic Shred",
      "component": false
    },
    {
      "name": "Simulor",
      "uniqueName": "/Lotus/Weapons/Cephalon/Primary/CephPrimary/CephPrimary",
      "totalDamage": 75,
      "trigger": "Active",
      "description": "Creates miniature gravitational singularities that can be used for scientific study or self-defense.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "simulor.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "50.0 magnetic",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Orb Explosion",
        "crit_chance": 12,
        "crit_mult": 2,
        "status_chance": 0.3,
        "electricity": 75,
        "damage": "75.0 electricity"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9a/CephPrimary.png/revision/latest?cb=20150625220225",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Simulor",
      "disposition": 3,
      "acquisition": "Cephalon Simaris (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Skana",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/LongSword/LongSword",
      "totalDamage": 35,
      "trigger": "Melee",
      "description": "Before all other weapons, Tenno master the Skana. This simple blade becomes immensely powerful in the hands of a master. For Tenno, it is the foundation of their fighting style and a pillar of their culture.",
      "accuracy": 100,
      "wallAttack": 140,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.22,
      "type": "Melee",
      "imageName": "skana.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "35.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/cf/DESkana.png/revision/latest?cb=20140407035855",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Skana",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Skana Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/LongSword/SkanaPrime",
      "totalDamage": 42,
      "trigger": "Melee",
      "description": "A basic blade known as a Skana. It is widely used by the Tenno. Prime model offers slightly increased damage.",
      "accuracy": 100,
      "wallAttack": 168,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.22,
      "type": "Melee",
      "imageName": "skana-prime.png",
      "category": "Sword",
      "tradable": true,
      "channeling": 1.5,
      "damage": "42.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/05/SkanaPrime.png/revision/latest?cb=20130426080650",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Skana_Prime",
      "disposition": 4,
      "acquisition": "Unobtainable (Founders)",
      "checked": false,
      "unobtainable": true,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Skiajati",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/UmbraKatana/UmbraKatana",
      "totalDamage": 77,
      "trigger": "Melee",
      "description": "Forged of steel grafted from Umbra's flesh, this elegant Nikana unites with its Warframe to form a single being of seething purpose.",
      "accuracy": 100,
      "wallAttack": 165,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "skiajati.png",
      "category": "Nikana",
      "tradable": false,
      "channeling": 1.5,
      "damage": "77.1",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ac/Skiajati.png/revision/latest?cb=20180615221604",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Skiajati",
      "disposition": 3,
      "acquisition": "The Sacrifice (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 44.57,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, very high attack speed. Grants invisibility upon finisher, which will expire when attacking, using an ability, or after 5s. ",
      "stance": "Decisive Judgement",
      "stanceNotes": "",
      "combo": "Silent Acumen",
      "component": false,
      "specialNote": "Item are fully ranked when obtained."
    },
    {
      "uniqueName": "/Lotus/Types/Game/CatbrowPet/CheshireCatbrowPetPowerSuit",
      "name": "Smeeta Kavat",
      "description": "This sly feline is playful yet devious.",
      "type": "Companion",
      "imageName": "smeeta-kavat.png",
      "category": "Kavat",
      "tradable": false,
      "acquisition": "Kavat Incubator Upgrade Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Smeeta_Kavat"
    },
    {
      "name": "Snipetron",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/SniperRifle",
      "totalDamage": 180,
      "trigger": "Semi",
      "description": "Manufactured by the Corpus, the Snipetron is a powerful and accurate rifle that sports optical zoom capabilities. Perfect for long range engagements.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "snipetron.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "180.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1a/CorpusSniperRifle.png/revision/latest?cb=20180418123152",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Snipetron",
      "disposition": 4,
      "acquisition": "Operation Plague Star (Cetus)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Snipetron Vandal",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/VandalSniperRifle",
      "totalDamage": 200,
      "trigger": "Semi",
      "description": "A customized version of the elusive Snipetron, with metallic finish and Lotus decal.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "snipetron-vandal.png",
      "category": "Sniper Rifle",
      "tradable": true,
      "damage": "200.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/76/DESnipertronVandal.png/revision/latest?cb=20180418123231",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Snipetron_Vandal",
      "disposition": 4,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot, monstrous DPS, hitscan munitions. Sniper combo counter rampup is average (min. 3), zooming in gives additive bonus to headshots (30%/50%). ",
      "dmg": "Crit/Status",
      "rank": 53.4,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Sobek",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/DoubleBarrelShotgun",
      "totalDamage": 350,
      "trigger": "Auto",
      "description": "Sobek is a rapid-firing Grineer shotgun that has reduced damage per shot but boasts extra large clip capacity.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.33,
      "type": "Primary",
      "imageName": "sobek.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "350.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f5/GrnDBSG.png/revision/latest?cb=20130713214005",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sobek",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, hitscan munitions. Shattering Justice (Blast, Health, Armor) can make it reach 100% status chance while Acid Shells can be used to provide some AOE damage. ",
      "dmg": "100% Status",
      "rank": 63.2,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Soma",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/TennoAR",
      "totalDamage": 12,
      "trigger": "Auto",
      "description": "Accuracy coupled with a massive clip makes the Soma assault rifle a formidable weapon.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 0.85000002,
      "type": "Primary",
      "imageName": "soma.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "12.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a5/U10DesignCouncilTennoAR.png/revision/latest?cb=20130914111405",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Soma",
      "disposition": 2,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Soma Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeSoma/PrimeSomaRifle",
      "totalDamage": 12,
      "trigger": "Auto",
      "description": "Known for taking down whole squads with its single massive clip, few weapons were as feared as the Prime Soma.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 0.85000002,
      "type": "Primary",
      "imageName": "soma-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "12.0",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a6/PrimeSoma.png/revision/latest?cb=20141217030947",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Soma_Prime",
      "disposition": 2,
      "releaseDate": "2014 12 16",
      "vaultDate": "2016 11 22",
      "estimatedVaultDate": "2016 11 22",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot, moderate DPS, hitscan munitions. Best paired with Frost Prime and Scindo Prime. ",
      "dmg": "Crit/Status",
      "rank": 57.5,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Sonicor",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpAirPistol/CrpAirPistolArray",
      "totalDamage": 50,
      "trigger": "Semi",
      "description": "Blasts targets with a massive wave of sonic energy. Results reported to be: 'Very Satisfying'.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 0.89999998,
      "type": "Secondary",
      "imageName": "sonicor.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "150.0",
      "flight": 80,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a8/CrpAirPistolArray.png/revision/latest?cb=20151002090143",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sonicor",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS,  projectile munitions. The tenno space program has been replaced by the tenno ragdoll simulator. Explosions may cause status effects. Suffers from relatively poor consistency. ",
      "dmg": "Raw/Status",
      "rank": 95.1,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Spectra",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/CrpLaserPistol",
      "totalDamage": 18,
      "trigger": "Held",
      "description": "While its intended design is for deep space construction, the concentrated laser beam of the Spectra is highly effective against organic and synthetic enemies.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.49,
      "type": "Secondary",
      "imageName": "spectra.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "18.0",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7a/Spectra.png/revision/latest?cb=20131006130117",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Spectra",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Spectra Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CorpusModularPistol/Vandal/CrpLaserPistolVandal",
      "totalDamage": 22,
      "trigger": "Held",
      "description": "A special-order Corpus cutting tool for master crafters only. Features distinctive azurite plating and a focusing crystal of precision clarity and cut.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.49,
      "type": "Secondary",
      "imageName": "spectra-vandal.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "22.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/82/SpectraVandal.png/revision/latest?cb=20190523234911",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Spectra_Vandal",
      "disposition": 5,
      "acquisition": "Operation: Hostile Mergers",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot, insane dps,  beam munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 45.1,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Spira",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/LiDagger/LiDagger",
      "totalDamage": 82,
      "trigger": "Auto",
      "description": "A flash of red ribbon is the last thing most victims of these throwing-daggers see.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.1,
      "type": "Secondary",
      "imageName": "spira.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "82.0",
      "flight": "???",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c5/LiDagger.png/revision/latest?cb=20150924014336",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Spira",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Spira Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/PrimeLiDagger/PrimeLiDagger",
      "totalDamage": 60,
      "trigger": "Auto",
      "description": "These rare, braided throwing daggers were a favorite tool of high ranking Orokin assassins.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.1,
      "type": "Secondary",
      "imageName": "spira-prime.png",
      "category": "Thrown",
      "tradable": true,
      "damage": "60.0",
      "flight": 70,
      "projectile": "Projectile",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/02/PrimeLiDagger.png/revision/latest?cb=20160207121252",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Spira_Prime",
      "disposition": 3,
      "releaseDate": "2016 02 16",
      "vaultDate": "2017 12 12",
      "estimatedVaultDate": "2017 12 12",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot, monstrous DPS,  projectile munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 53.4,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Staticor",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpElectroMag/CrpElectroMag",
      "totalDamage": 132,
      "trigger": "Charge",
      "description": "Send a massive charge of potential energy hurling toward unfortunate targets.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.52999997,
      "type": "Secondary",
      "imageName": "staticor.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "44.0 radiation",
      "flight": 50,
      "projectile": "Projectile",
      "secondaryArea": {
        "name": "Fully Charged Explosion",
        "radius": 800,
        "radiation": 352,
        "damage": "352.0 radiation"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/64/CrpElectroMag.png/revision/latest?cb=20160205013734",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Staticor",
      "disposition": 1,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps,  projectile munitions. Bolt and resulting explosion has independent chance to proc status effects, making it highly capable of stripping armor. ",
      "dmg": "Crit/Status",
      "rank": 38.5,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Stinger",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/SentBioWeapon",
      "totalDamage": 15,
      "trigger": "Semi",
      "description": "Standard issue weapon for Djinn Sentinel. Fires poisonous projectiles.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1.3150001,
      "type": "Sentinel Weapon",
      "imageName": "stinger.png",
      "tradable": false,
      "damage": "15.0 toxin",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/12/DESentinelStinger.png/revision/latest?cb=20140122154228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stinger",
      "disposition": 5,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Stradavar",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TennoTommyGun/TennoTommyGunRifle",
      "totalDamage": 28,
      "trigger": "Auto",
      "description": "A high-capacity, high-damage enforcer, this weapon can switch between the high crit semi-automatic and full automatic firing modes.",
      "accuracy": 14.285714,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "stradavar.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "28.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 5,
        "crit_chance": 28,
        "crit_mult": 2,
        "status_chance": 0.2,
        "shot_type": "Hit-Scan",
        "impact": 7.5,
        "slash": 12.5,
        "puncture": 30
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8e/TennoTommyGun.png/revision/latest?cb=20160512010246",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stradavar",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Stradavar Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeStradavar/PrimeStradavarGun",
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Between measured staccato and staggering crescendo, Stradavar Prime never fails to call down a devastating finale.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "stradavar-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "30.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 3.33,
        "crit_chance": 30,
        "crit_mult": 2.8,
        "status_chance": 0.2,
        "shot_type": "Hit-Scan",
        "impact": 8,
        "slash": 48,
        "puncture": 24
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d2/StradavarPrime.png/revision/latest?cb=20190403021436",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stradavar_Prime",
      "disposition": 3,
      "releaseDate": "2019 03 27",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 01 27",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS, hitscan munitions. Can alternate between semi-auto (better DPS) and full-auto (useful for breaking nullifier bubbles). Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 53.8,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Strun",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/Shotgun",
      "totalDamage": 300,
      "trigger": "Semi",
      "description": "The Strun is a standard shotgun. Reliable, versatile and deadly.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "omegaAttenuation": 1.35,
      "type": "Primary",
      "imageName": "strun.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "300.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/Strun.png/revision/latest?cb=20161125225500",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Strun",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Strun Wraith",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/ShotgunVandal",
      "totalDamage": 400,
      "trigger": "Semi",
      "description": "A different take on a familiar shotgun, the Strun Wraith features unique styling.",
      "accuracy": 6.6666665,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.35,
      "type": "Primary",
      "imageName": "strun-wraith.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "400.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3b/WraithStrun.png/revision/latest?cb=20161125225323",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Strun_Wraith",
      "disposition": 5,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, hitscan munitions. Required to mod for 100% status chance. ✪",
      "dmg": "100% Status / Crit",
      "rank": 56.1,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Stubba",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnUzi/GrnUziWeapon",
      "totalDamage": 33,
      "trigger": "Auto",
      "description": "Inflict rapid-fire bursts of pain with this Grineer submachine gun.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.3,
      "type": "Secondary",
      "imageName": "stubba.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "33.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/17/GrnUziWeapon.png/revision/latest?cb=20171221214433",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stubba",
      "disposition": 4,
      "acquisition": "Cetus Bounty (Ghoul)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  hitscan munitions. Suffers from relatively poor consistency. ✪",
      "dmg": "Crit/Status",
      "rank": 55.1,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Stug",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerCrossbow/GrineerGooGun",
      "totalDamage": 85,
      "trigger": "Auto",
      "description": "Firing a sticky, toxic, explosive compound, the Stug Gel Gun offers multiple ejection modes, delivering maximum damage in all situations.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.48,
      "type": "Secondary",
      "imageName": "stug.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "156.0 corrosive",
      "flight": 35,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fc/GrineerCrossbowGooGun.png/revision/latest?cb=20140124172529",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stug",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot, poor DPS,  projectile munitions. Each shot launches a blob. Up to six blobs can accumulate at a single site on the target. Alt-fire charges the weapon to launch a single, larger blob. While the shots itself does not cause status effects, the blobs do. ",
      "dmg": "Status",
      "rank": 199.7,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/HunterKubrowPetPowerSuit",
      "name": "Sunika Kubrow",
      "description": "Once the value of Orokin guard-pets had been realized, Orokin scientists began experimenting with strains designed for combat. These were no longer household pets but superior war animals bred for ferocity and aggression.",
      "type": "Companion",
      "imageName": "sunika-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Sunika_Kubrow"
    },
    {
      "name": "Supra",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/CrpHeavyRifle",
      "totalDamage": 40,
      "trigger": "Auto",
      "description": "The SUPRA is a heavy laser gun with a short wind up time.",
      "accuracy": 14.285714,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 0.80000001,
      "type": "Primary",
      "imageName": "supra.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "40.0",
      "flight": 80,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6d/CorpusMachineGun.png/revision/latest?cb=20170303062459",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Supra",
      "disposition": 2,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Supra Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/Machinegun/SupraVandal",
      "totalDamage": 40,
      "trigger": "Auto",
      "description": "A customized version of the powerful Supra, featuring a metallic finish and Lotus decal.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 0.80000001,
      "type": "Primary",
      "imageName": "supra-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "40.0",
      "flight": 80,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/15/SupraVandal.png/revision/latest?cb=20170504184740",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Supra_Vandal",
      "disposition": 2,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot, moderate DPS, projectile munitions. Entropy Burst (Magnetic, Energy) can greatly increase status chance. ",
      "dmg": "Crit/Status",
      "rank": 56.3,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Sweeper",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/SentShotgun",
      "totalDamage": 41.999996,
      "trigger": "Auto",
      "description": "Standard issue weapon for Carrier Sentinel. Fires shotgun rounds.",
      "accuracy": 3.3333333,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "type": "Sentinel Weapon",
      "imageName": "sweeper.png",
      "tradable": false,
      "damage": "42.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/25/DESentinelSweeper.png/revision/latest?cb=20140122154229",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sweeper",
      "disposition": 3,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sweeper Prime",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/PrimeSentShotgun",
      "totalDamage": 60,
      "trigger": "Auto",
      "description": "Standard issue weapon for Carrier Prime Sentinel. Fires shotgun rounds.",
      "accuracy": 3.3333333,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "type": "Sentinel Weapon",
      "imageName": "sweeper-prime.png",
      "tradable": true,
      "damage": "60.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/81/SentinelSweeperPrime.png/revision/latest?cb=20150707200907",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sweeper_Prime",
      "disposition": 3,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sybaris",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnoLeverAction/TnoLeverActionRifle",
      "totalDamage": 80,
      "trigger": "Burst",
      "description": "This Tenno crafted, lever action rifle, is equal parts elegance and executioner.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.05,
      "type": "Primary",
      "imageName": "sybaris.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "80.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/TnoLeverActionRifle.png/revision/latest?cb=20140515184212",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sybaris",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sybaris Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeSybaris/PrimeSybarisRifle",
      "totalDamage": 88,
      "trigger": "Burst",
      "description": "Sleek and slender, a golden symbol of Tenno perfection.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.05,
      "type": "Primary",
      "imageName": "sybaris-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "87.9",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sybaris_Prime",
      "disposition": 3,
      "releaseDate": "2017 05 30",
      "vaultDate": "2019 03 27",
      "estimatedVaultDate": "2019 03 27",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot, moderate DPS, hitscan munitions. Two-round burst is wasteful at times and the magazine is relatively small for how fast it fires. ",
      "dmg": "Crit/Status",
      "rank": 57.3,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Sydon",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnTrident/GrnTridentWeapon",
      "totalDamage": 75,
      "trigger": "Melee",
      "description": "Inflict maximum devastation with this massive Grineer trident.",
      "accuracy": 100,
      "wallAttack": 125,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 0.83999997,
      "type": "Melee",
      "imageName": "sydon.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "75.1",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bd/GrnTridentWeapon.png/revision/latest?cb=20160120124034",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sydon",
      "disposition": 2,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Synapse",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/InfestedRifle",
      "totalDamage": 20,
      "trigger": "Held",
      "description": "Powered by a bio-chemical reaction, the infested Synapse rifle fries its targets with a steady stream of <DT_CORROSIVE>Corrosive energy.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 1.3150001,
      "type": "Primary",
      "imageName": "synapse.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "20.0 corrosive",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c0/U10InfPrimary.png/revision/latest?cb=20130914111405",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Synapse",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot, insane dps, beam munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 39.3,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Synoid Gammacor",
      "uniqueName": "/Lotus/Weapons/Syndicates/CephalonSuda/Pistols/CSSynoidGammacor",
      "totalDamage": 21,
      "trigger": "Held",
      "description": "Deployed by the Cephalon Suda, once a data-analyzing instrument the Gammacor main focus is defense.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 0.89999998,
      "type": "Secondary",
      "imageName": "synoid-gammacor.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "20.0 magnetic",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3b/SynoidGammacor.png/revision/latest?cb=20141127183102",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Synoid_Gammacor",
      "disposition": 3,
      "acquisition": "Cephalon Suda (Genius)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot, insane dps,  beam munitions. Innate Entropy (Magnetic, Energy) is useful at times. ✪",
      "dmg": "Crit/Status",
      "rank": 41.4,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Synoid Heliocor",
      "uniqueName": "/Lotus/Weapons/Syndicates/CephalonSuda/Melee/CSHeliocor",
      "totalDamage": 119.99999,
      "trigger": "Melee",
      "description": "This intelligent hammer takes an enemy killed by a channelled attack and recomposes them as an ally. Any fatal strike with this weapon also performs a codex scan.",
      "accuracy": 100,
      "wallAttack": 240,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 0.94,
      "type": "Melee",
      "imageName": "synoid-heliocor.png",
      "category": "Hammer",
      "tradable": true,
      "channeling": 1.75,
      "damage": "120.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/13/CSHeliocor.png/revision/latest?cb=20160916030243",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Synoid_Heliocor",
      "disposition": 3,
      "acquisition": "Cephalon Suda (Genius)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 82.24,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, poor DPS, high attack speed. Scans kills into codex, and if the target's Codex entry is complete it will create a friendly Spectre of said target. Spectre lasts 30s. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "Only use Raging Whirlwind to proc Impact or the slam will ragdoll",
      "combo": "Tidal Force & Raging Whirlwind",
      "component": false
    },
    {
      "name": "Synoid Simulor",
      "uniqueName": "/Lotus/Weapons/Syndicates/CephalonSuda/LongGuns/CSSimulor",
      "totalDamage": 75,
      "trigger": "Active",
      "description": "Cephalon Suda’s custom issue Simulor was built to satisfy her curiosity.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1,
      "type": "Primary",
      "imageName": "synoid-simulor.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "20.0 magnetic",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Orb Explosion",
        "crit_chance": 14,
        "crit_mult": 2,
        "status_chance": 0.3,
        "electricity": 75,
        "damage": "75.0 electricity"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/09/SyndicateCSSimulor.png/revision/latest?cb=20150902215134",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Synoid_Simulor",
      "disposition": 3,
      "acquisition": "Cephalon Suda (Genius)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS, projectile munitions. ",
      "dmg": "Status",
      "rank": 137.7,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Talons",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/U18ThrowingKnives/U18throwingknives",
      "totalDamage": 120,
      "trigger": "Active",
      "description": "The claws of these tactical bombs dig into the target and detonate on command.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.4400001,
      "type": "Secondary",
      "imageName": "talons.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "120.0 blast",
      "flight": 50,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c2/U18throwingknives.png/revision/latest?cb=20151204013310",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Talons",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS,  projectile munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 93,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tatsu",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/TnTwoHandedKatana/TnTwoHandedKatana",
      "totalDamage": 96,
      "trigger": "Melee",
      "description": "Fearsome and noble, the elegant two-handed Nikana is the pride of any Arsenal. Kills build charges and seeking projectiles are unleashed with a Slide Attack to find and stun unwitting enemies. When Revenant wields this blade, Tatsu’s charge cap is increased.",
      "accuracy": 100,
      "wallAttack": 192,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "tatsu.png",
      "category": "Two-Handed Nikana",
      "tradable": false,
      "channeling": 1.5,
      "damage": "31.0 radiation",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/58/Tatsu.png/revision/latest?cb=20190308235812",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tatsu",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 41.34,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, monstrous DPS, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Wise Razor",
      "stanceNotes": "",
      "combo": "Slide",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/TnSentinelCrossPowerSuit",
      "name": "Taxon",
      "description": "With 'Assault Mode' and 'Molecular Conversion' as default Precepts, Taxon protects its owner with shield restoration. Equipped with the Artax ice-beam.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "taxon.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Taxon"
    },
    {
      "name": "Tazicor",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetComponents/TazronWeapon",
      "totalDamage": 6,
      "trigger": "Auto",
      "description": "Burst rifle that fires electrified rounds.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 3,
      "omegaAttenuation": 1,
      "type": "Sentinel Weapon",
      "imageName": "tazicor.png",
      "tradable": false,
      "damage": "6.0 electricity",
      "projectile": "Discharge",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/Taxicor.png/revision/latest?cb=20181110220614",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tazicor",
      "disposition": 3,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tekko",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gauntlet/BrawlerKnuckles/BrawlerKnuckles",
      "totalDamage": 45,
      "trigger": "Melee",
      "description": "These iron fists that rip through foes are Atlas' signature weapons. When wielded by Atlas they receive a Status Chance increase.",
      "accuracy": 100,
      "wallAttack": 135,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 1.4,
      "type": "Melee",
      "imageName": "tekko.png",
      "category": "Fist",
      "tradable": false,
      "channeling": 1.5,
      "damage": "45.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c1/BrawlerKnuckles.png/revision/latest?cb=20151002090142",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tekko",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 62.8,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, poor DPS, low attack speed. ",
      "stance": "Gaia's Tragedy",
      "stanceNotes": "",
      "combo": "Forest's Remorse",
      "component": false
    },
    {
      "name": "Telos Akbolto",
      "uniqueName": "/Lotus/Weapons/Syndicates/ArbitersOfHexis/Pistols/AHAkbolto",
      "totalDamage": 47,
      "trigger": "Semi",
      "description": "For the Arbiters of Hexis these pistols are more than simple weapons, they are symbols of truth and discipline.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "omegaAttenuation": 0.80000001,
      "type": "Secondary",
      "imageName": "telos-akbolto.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "47.0",
      "flight": 75,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ec/AHAkbolto.png/revision/latest?cb=20141127181924",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Telos_Akbolto",
      "disposition": 2,
      "acquisition": "Arbiters of Hexis (Maxim)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS,  projectile munitions. Truth (Gas, health, parkour) is useful at times. ",
      "dmg": "Status",
      "rank": 117.6,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Telos Boltace",
      "uniqueName": "/Lotus/Weapons/Syndicates/ArbitersOfHexis/Melee/AHBoltace",
      "totalDamage": 85,
      "trigger": "Melee",
      "description": "Spinning attacks unleash the Stormpath, a tempest of mayhem that hurls any foes in its way.",
      "accuracy": 100,
      "wallAttack": 340,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "telos-boltace.png",
      "category": "Tonfa",
      "tradable": true,
      "channeling": 1.5,
      "damage": "85.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3c/AHBoltace.png/revision/latest?cb=20160916030243",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Telos_Boltace",
      "disposition": 3,
      "acquisition": "Arbiters of Hexis (Maxim)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 55.35,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, moderate DPS, high attack speed. Suffers from relatively poor consistency. Slide attack triggers Stormpath, which vacuums enemies in a 14m radius. Retriggering Stormpath within 8s puts it into a 6s cooldown and ragdoll enemies. Also gives 20% boost to parkour. ",
      "stance": "Sovereign Outcast",
      "stanceNotes": "",
      "combo": "Rogue Edict",
      "component": false
    },
    {
      "name": "Telos Boltor",
      "uniqueName": "/Lotus/Weapons/Syndicates/ArbitersOfHexis/LongGuns/AHBoltor",
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Bring down judgement, with this boltor crafted by the Arbiters of Hexis.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 1.05,
      "type": "Primary",
      "imageName": "telos-boltor.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "30.0",
      "flight": 65,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7c/SyndicateAHBoltor.png/revision/latest?cb=20150902215134",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Telos_Boltor",
      "disposition": 3,
      "acquisition": "Arbiters of Hexis (Maxim)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS, projectile munitions. Truth (Gas, health, parkour) syndicate proc is helpful at times. ",
      "dmg": "Crit/Status",
      "rank": 52.9,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Tenora",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnBardRifle/TnBardRifle",
      "totalDamage": 24,
      "trigger": "Auto",
      "description": "Unload percussive machine gun fire, or strike a heavy chord with a single charge shot. When Octavia wields her signature rifle alt-fire Headshot Kills have a chance to instantly refill the magazine.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.05,
      "type": "Primary",
      "imageName": "tenora.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "24.0",
      "projectile": "Hitscan",
      "secondary": {
        "speed": 10,
        "crit_chance": 34,
        "crit_mult": 3,
        "status_chance": 0.1,
        "charge_time": 0.8,
        "shot_type": "Projectile",
        "shot_speed": null,
        "impact": 48,
        "slash": 48,
        "puncture": 144
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d6/TnBardRifle.png/revision/latest?cb=20170324230206",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tenora",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS, hitscan munitions. Has a decent alt-fire that can be used to take down medium units quickly. Light units and heavy units should still be dealt with using primary fire. ",
      "dmg": "Crit/Status",
      "rank": 52,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Tetra",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CorpusUMP/CorpusUMP",
      "totalDamage": 32,
      "trigger": "Auto",
      "description": "Drawing from its huge quad-chambered clip, the Tetra is capable of unleashing a sustained barrage of lethal energy bolts.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.45,
      "type": "Primary",
      "imageName": "tetra.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "32.0",
      "flight": 100,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f7/DETetra.png/revision/latest?cb=20140122223131",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tetra",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tiberon",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/DrakeRifle/DrakeRifle",
      "totalDamage": 44,
      "trigger": "Burst",
      "description": "Forged by a master gunsmith, this Tenno burst rifle will strike down targets with swift precision.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.94999999,
      "type": "Primary",
      "imageName": "tiberon.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "44.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/Tiberon.png/revision/latest?cb=20141001220957",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tiberon",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tiberon Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeTiberon/PrimeTiberonRifle",
      "totalDamage": 46,
      "trigger": "Burst",
      "description": "Art meets ingenuity with this beautifully deadly rifle.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 0.94999999,
      "type": "Primary",
      "imageName": "tiberon-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "46.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi",
        "speed": 6,
        "crit_chance": 30,
        "crit_mult": 3.4,
        "status_chance": 0.2,
        "shot_type": "Hit-Scan",
        "impact": 13.8,
        "slash": 13.8,
        "puncture": 18.4
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/25/TiberonPrime.png/revision/latest?cb=20180313200757",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tiberon_Prime",
      "disposition": 3,
      "releaseDate": "2018 03 20",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 01 13",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot, monstrous DPS, hitscan munitions. Alt-fire toggles between 3-round burst, semi-auto, and auto. Testing so far shows that burst fire has 5% edge on DPS compared to semi-auto at the expense of ammo economy. ",
      "dmg": "Crit/Status",
      "rank": 48.4,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Tigris",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/DoubleBarrelShotgun/TennoDoubleBarrelShotgun",
      "totalDamage": 1050,
      "trigger": "Duplex",
      "description": "The double-barreled Tigris shotgun fires two bursts in rapid succession, easily taking down the toughest prey.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 0.55000001,
      "type": "Primary",
      "imageName": "tigris.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "1050.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/43/DETigris.png/revision/latest?cb=20140101064243",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tigris",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tigris Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeTigris/PrimeTigris",
      "totalDamage": 1560,
      "trigger": "Duplex",
      "description": "An artifact of exquisite beauty. A weapon of deadly purpose.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "omegaAttenuation": 0.55000001,
      "type": "Primary",
      "imageName": "tigris-prime.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "1560.0",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/aa/PrimeTigris342.png/revision/latest?cb=20160820032128",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tigris_Prime",
      "disposition": 1,
      "releaseDate": "2016 08 23",
      "vaultDate": "2018 06 19",
      "estimatedVaultDate": "2018 06 19",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, hitscan munitions. Duplex trigger might take a while to get used to. Required to mod for 100% status chance. Suffers from relatively poor consistency. ",
      "dmg": "100% Status",
      "rank": 64,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Tipedo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/MonkSpade/TnoMonkStaff",
      "totalDamage": 50,
      "trigger": "Melee",
      "description": "With its crescent shaped blades flying in sweeping arcs and striking at tremendous speed, the Tipedo demands focus from those wishing to unlock its true power.",
      "accuracy": 100,
      "wallAttack": 83,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.3099999,
      "type": "Melee",
      "imageName": "tipedo.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "50.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e5/Tipedo.png/revision/latest?cb=20150109200607",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tipedo",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Tipedo Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/TipedoPrime/TipedoPrimeWeapon",
      "totalDamage": 76,
      "trigger": "Melee",
      "description": "With their final breath they look to the moon, and are gone.",
      "accuracy": 100,
      "wallAttack": 127,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.3099999,
      "type": "Melee",
      "imageName": "tipedo-prime.png",
      "category": "Staff",
      "tradable": true,
      "channeling": 1.5,
      "damage": "76.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/07/TipedoPrime.png/revision/latest?cb=20190403021436",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tipedo_Prime",
      "disposition": 5,
      "releaseDate": "2019 03 27",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 01 27",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 28.25,
      "tierRank": 3,
      "weaponNotes": "Low damage per hit, insane dps, very high attack speed. ✪",
      "stance": "Clashing Forest",
      "stanceNotes": "",
      "combo": "Resolute Flurry",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Fairy/Fairy",
      "name": "Titania",
      "description": "Take flight with this mischievous pixie.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Bullet Jump creates a trampoline lasting |DURATION|s that enhances Bullet Jump maneuvers by |JUMP|% when used by allies.",
      "type": "Warframe",
      "imageName": "titania.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 2637385,
      "introduced": "The Silver Grove",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/84/TitaniaNewLook.png/revision/latest?cb=20160822154359",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Titania",
      "acquisition": "The Silver Grove (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tombfinger",
      "uniqueName": "/Lotus/Weapons/SolarisUnited/Secondary/SUModularSecondarySet1/Barrel/SUModularSecondaryBarrelBPart",
      "type": "Secondary",
      "imageName": "tombfinger.png",
      "category": "Kitgun",
      "tradable": false,
      "acquisition": "Rude Zuud (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Tombfinger"
    },
    {
      "name": "Tonbo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/FlowerPowerPolearm/FlowerPowerPolearmWep",
      "totalDamage": 80,
      "trigger": "Melee",
      "description": "During the darkest days of the Old War many a Tenno relied solely on the Tonbo to keep them alive.",
      "accuracy": 100,
      "wallAttack": 133,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.38,
      "type": "Melee",
      "imageName": "tonbo.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "80.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7b/FlowerPowerPolearm.png/revision/latest?cb=20150218211409",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tonbo",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Slide",
      "rank": 35,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, low attack speed. ✪",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Slide",
      "component": false
    },
    {
      "name": "Tonkor",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnGrenadeLauncher/GrnGrenadeLauncher",
      "totalDamage": 14,
      "trigger": "Semi",
      "description": "Hurl mayhem and destruction with this Grineer grenade launcher.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.15,
      "type": "Primary",
      "imageName": "tonkor.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "75.0",
      "flight": 30,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8e/GrnGrenadeLauncher.png/revision/latest?cb=20150423210905",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tonkor",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS, projectile munitions. Grenades can cause self damage. Suffers from relatively poor consistency. ",
      "dmg": "Critical",
      "rank": 90.7,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Torid",
      "uniqueName": "/Lotus/Weapons/ClanTech/Bio/BioWeapon",
      "totalDamage": 0,
      "trigger": "Semi",
      "description": "Torid lobs a toxic payload.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.3,
      "type": "Primary",
      "imageName": "torid.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "100.0 toxin",
      "flight": 25,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/12/GrineerGrenadeLauncher.png/revision/latest?cb=20140326211459",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Torid",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot, poor DPS, projectile munitions. Thing fired stick on surfaces/targets and continue to emit gas that deals damage and causes status effects. ",
      "dmg": "Status",
      "rank": 107.5,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Trinity/Trinity",
      "name": "Trinity",
      "description": "Trinity is great for players who prefer a supportive role. Warframes with healing technology are rare making Trinity a great equalizer when the odds are stacked against the Tenno.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Revive fallen allies |SPEED|% faster and from |RANGE|% farther away.",
      "type": "Warframe",
      "imageName": "trinity.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 3089443,
      "introduced": "Vanilla",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/00/TrinityNewLook.png/revision/latest?cb=20141124023338",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Trinity",
      "acquisition": "Ambulas (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Trinity/TrinityPrime",
      "name": "Trinity Prime",
      "description": "Become the bastion that defends allies using powerful healing abilities with Trinity Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Revive fallen allies |SPEED|% faster and from |RANGE|% farther away.",
      "type": "Warframe",
      "imageName": "trinity-prime.png",
      "tradable": true,
      "aura": "vazarin",
      "conclave": true,
      "color": 2105630,
      "introduced": "17.6",
      "sex": "Female",
      "sprint": 1.1,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/TrinityPrimeMain.png/revision/latest?cb=20151024080439",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Trinity_Prime",
      "releaseDate": "2015 10 06",
      "vaultDate": "2017 08 29",
      "estimatedVaultDate": "2017 08 29",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Twin Basolk",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnDualFireAxe/GrnDualFireAxe",
      "totalDamage": 65,
      "trigger": "Melee",
      "description": "These nasty, little hatchets slice through steel as if it were flesh.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.1799999,
      "type": "Melee",
      "imageName": "twin-basolk.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "65.0 heat",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/45/GrnDualFireAxe.png/revision/latest?cb=20151022005953",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Basolk",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 42.26,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, low attack speed. Suffers from relatively poor consistency. Rift Strike teleports user to a target within 25m on charge attack. ✪",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Twin Grakatas",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerAssaultRifle/TwinGrakatas",
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "When one Grakata isn't enough, bring another for extra firepower.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1.05,
      "type": "Secondary",
      "imageName": "twin-grakatas.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "20.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f8/Akgrakata.png/revision/latest?cb=20150731174941",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Grakatas",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 60.3,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Twin Gremlins",
      "uniqueName": "/Lotus/Weapons/Grineer/GrineerPistol/GrineerAkimboPistol",
      "totalDamage": 37,
      "trigger": "Auto",
      "description": "Designed as a pair, these Grineer sidearms fire projectiles at a slower rate but with greater force and accuracy.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.2,
      "type": "Secondary",
      "imageName": "twin-gremlins.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "36.99",
      "flight": 65,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/db/Gremlin.png/revision/latest?cb=20140314173236",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Gremlins",
      "disposition": 4,
      "acquisition": "Captain Vor and Lieutenant Lech Kril (Boss Duo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Twin Kohmak",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnDWUniques/GrnTwinKohmaks",
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Doubling their volley on each successive shot, the Twin Kohmaks decimate foes in seconds.",
      "accuracy": 5.7142859,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.25,
      "type": "Secondary",
      "imageName": "twin-kohmak.png",
      "category": "Dual Shotguns",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/de/DualKohmak.png/revision/latest?cb=20160502123410",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Kohmak",
      "disposition": 4,
      "acquisition": "Kela De Thaym (Boss)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot, monstrous DPS,  hitscan munitions. Spool up increases pellets shot and fire rate to the point where status effects are still reliably proc'd despite using shotgun calcs. Suffers from relatively poor consistency. ✪",
      "dmg": "Raw/Status",
      "rank": 54.2,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Twin Krohkur",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnEgyptSwd/DualGrnEgyptSwdWeapon",
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "Battlefield butchery becomes all too easy with a Krohkur blade in each hand.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.48,
      "type": "Melee",
      "imageName": "twin-krohkur.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "70.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/37/DualGrnEgyptSwords.png/revision/latest?cb=20171023080140",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Krohkur",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit/Status",
      "rank": 32.47,
      "tierRank": 3,
      "weaponNotes": "Very low damage per hit, insane dps, low attack speed. Lower crit and speed hamper scaling in extreme situations. ✪",
      "stance": "Carving Mantis",
      "stanceNotes": "Alt combo= Biting Mandibles; -DPS, +execution",
      "combo": "Dire Courtship",
      "component": false
    },
    {
      "name": "Twin Rogga",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnQueenGuardDualPistol/GrnQueenGuardDualPistols",
      "totalDamage": 705,
      "trigger": "Semi",
      "description": "These twin barrels of destruction are the signature pistols of the Kuva Guardians.",
      "accuracy": 8,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1.25,
      "type": "Secondary",
      "imageName": "twin-rogga.png",
      "category": "Dual Shotguns",
      "tradable": false,
      "damage": "705.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b0/GrnQueenGuardDualPistols.png/revision/latest?cb=20161113000420",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Rogga",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS,  hitscan munitions. ✪",
      "dmg": "Status",
      "rank": 55,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Twin Vipers",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboViperPistols",
      "totalDamage": 17,
      "trigger": "Auto",
      "description": "A Viper equipped in each hand.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "omegaAttenuation": 1.41,
      "type": "Secondary",
      "imageName": "twin-vipers.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "17.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ed/Viper%2C_dual.png/revision/latest?cb=20130426075530",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Vipers",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Twin Vipers Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/WraithTwinVipers/WraithTwinVipers",
      "totalDamage": 18,
      "trigger": "Auto",
      "description": "The uniquely styled Twin Vipers Wraith are a powerful variation on the standard akimbo machine-pistols.",
      "accuracy": 11.111111,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.41,
      "type": "Secondary",
      "imageName": "twin-vipers-wraith.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "18.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/DEWraithTwinVipers.png/revision/latest?cb=20140124174609",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Vipers_Wraith",
      "disposition": 5,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS,  hitscan munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 110.9,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tysis",
      "uniqueName": "/Lotus/Weapons/Infested/Pistols/InfestedDartPistol/InfestedDartPistol",
      "totalDamage": 130,
      "trigger": "Semi",
      "description": "The Tysis pistol spits out caustic darts that corrode their victims from within.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "omegaAttenuation": 1.51,
      "type": "Secondary",
      "imageName": "tysis.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "81.0 corrosive",
      "flight": 75,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/aa/DETysis.png/revision/latest?cb=20140116153508",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tysis",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot, monstrous DPS,  projectile munitions. Suffers from relatively poor consistency. ✪",
      "dmg": "Status",
      "rank": 63.2,
      "tierRank": 2,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Berserker/Berserker",
      "name": "Valkyr",
      "description": "Forged in the labs of the Zanuka project, the original Valkyr was subject to cruel experiments, leaving her scarred, angry and frighteningly adept at killing.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Recover |PERCENT|% faster from being knocked down.",
      "type": "Warframe",
      "imageName": "valkyr.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 3025188,
      "introduced": "11",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0e/ValkyrNewLook.png/revision/latest?cb=20141124023346",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Valkyr",
      "acquisition": "Alad V (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Berserker/ValkyrPrime",
      "name": "Valkyr Prime",
      "description": "A proud fighter emerges unscarred by time or malice. Featuring altered mod polarities allow for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Recover |PERCENT|% faster from being knocked down.",
      "type": "Warframe",
      "imageName": "valkyr-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 4603443,
      "introduced": "19.0.7",
      "sex": "Female",
      "sprint": 1.1,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/14/ValkyrPrimeProfilePicture.png/revision/latest?cb=20180316165322",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Valkyr_Prime",
      "releaseDate": "2016 11 22",
      "vaultDate": "2018 09 25",
      "estimatedVaultDate": "2018 09 25",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vasto",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/RevolverPistol",
      "totalDamage": 58,
      "trigger": "Semi",
      "description": "Steady and reliable, the Vasto revolver combines speed and power for a classic gunslinger feel.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "vasto.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "58.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6b/Vasto.png/revision/latest?cb=20130803104340",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vasto",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Vasto Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeVasto/PrimeVastoPistol",
      "totalDamage": 66,
      "trigger": "Semi",
      "description": "This elegant rapid-fire revolver is the embodiment of superior Orokin craftsmanship.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "vasto-prime.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "66.0",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f6/PrimeVasto.png/revision/latest?cb=20141217030947",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vasto_Prime",
      "disposition": 5,
      "releaseDate": "2014 12 16",
      "vaultDate": "2016 11 22",
      "estimatedVaultDate": "2016 11 22",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot, moderate DPS,  hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 77.7,
      "tierRank": 1,
      "component": true
    },
    {
      "uniqueName": "/Lotus/Powersuits/Trapper/Trapper",
      "name": "Vauban",
      "description": "The highly tactical Vauban uses his powers to create deadly traps that can zap, imprison and dimensionally crush enemies.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Deal |DAMAGE|% Extra Damage to incapacitated enemies.",
      "type": "Warframe",
      "imageName": "vauban.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 3946550,
      "introduced": "7.11",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/VaubanNewLook.png/revision/latest?cb=20141124023352",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vauban",
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Trapper/TrapperPrime",
      "name": "Vauban Prime",
      "description": "Transform the battlefield into a weapon with this gilded tactician. Features unique mod polarities for extended customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Deal |DAMAGE|% Extra Damage to incapacitated enemies.",
      "type": "Warframe",
      "imageName": "vauban-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 1583150,
      "introduced": "18.12",
      "sex": "Male",
      "sprint": 1,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/69/VaubanPrimeNewLook.png/revision/latest?cb=20160528082318",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vauban_Prime",
      "releaseDate": "2016 05 17",
      "vaultDate": "2018 03 20",
      "estimatedVaultDate": "2018 03 20",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vaykor Hek",
      "uniqueName": "/Lotus/Weapons/Syndicates/SteelMeridian/LongGuns/SMHek",
      "totalDamage": 525,
      "trigger": "Semi",
      "description": "Forged in the fires of rebel struggle, this shotgun is a force for liberation.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "omegaAttenuation": 0.94999999,
      "type": "Primary",
      "imageName": "vaykor-hek.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "525.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/df/SyndicateSMHek.png/revision/latest?cb=20150902215135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vaykor_Hek",
      "disposition": 3,
      "acquisition": "Steel Meridian (General)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot, monstrous DPS, hitscan munitions. Justice (Blast, Health, Armor) effects can be useful. ",
      "dmg": "Critical",
      "rank": 53.8,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Vaykor Marelok",
      "uniqueName": "/Lotus/Weapons/Syndicates/SteelMeridian/Pistols/SMMarelok",
      "totalDamage": 160,
      "trigger": "Semi",
      "description": "Taken from defeated Grineer commanders and rebuilt to improve combat efficiency and reliability.",
      "accuracy": 10,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.89999998,
      "type": "Secondary",
      "imageName": "vaykor-marelok.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "160.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a1/SMMarelok.png/revision/latest?cb=20141127183101",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vaykor_Marelok",
      "disposition": 3,
      "acquisition": "Steel Meridian (General)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS,  hitscan munitions. Justice (Blast, health, armor) can be helpful at times. ",
      "dmg": "Crit/Status",
      "rank": 86.5,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vaykor Sydon",
      "uniqueName": "/Lotus/Weapons/Syndicates/SteelMeridian/Melee/SMSydon",
      "totalDamage": 85,
      "trigger": "Melee",
      "description": "Justice blinds. Block hits to charge a Radial Blind, when fully charged toggle channeling to unleash it.",
      "accuracy": 100,
      "wallAttack": 142,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.83999997,
      "type": "Melee",
      "imageName": "vaykor-sydon.png",
      "category": "Polearm",
      "tradable": true,
      "channeling": 1.5,
      "damage": "85.1",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7a/SMSydon.png/revision/latest?cb=20160916030245",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vaykor_Sydon",
      "disposition": 2,
      "acquisition": "Steel Meridian (General)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 49.72,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, moderate DPS, high attack speed. Suffers from relatively poor consistency. Blocking adds up to 15 stacks, which will emit Radial Blind in a 15m radius for 5s upon reaching the 15th stack. Also adds 50% resistance to knockdown/knockback. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Vaulting Apex",
      "component": false
    },
    {
      "name": "Vectis",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/TennoSniperRifle",
      "totalDamage": 225,
      "trigger": "Semi",
      "description": "A classic Tenno sniper rifle, the Vectis is ideal for ranged takedowns.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "omegaAttenuation": 0.80000001,
      "type": "Primary",
      "imageName": "vectis.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "225.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/80/DEVectis.png/revision/latest?cb=20161125231122",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vectis",
      "disposition": 2,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vectis Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeVectis/PrimeVectisRifle",
      "totalDamage": 350,
      "trigger": "Semi",
      "description": "Once thought destroyed, the newly uncovered Vectis Prime revives Tenno martial traditions.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 0.80000001,
      "type": "Primary",
      "imageName": "vectis-prime.png",
      "category": "Sniper Rifle",
      "tradable": true,
      "damage": "350.0",
      "projectile": "Hitscan",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/68/VectisPrime.png/revision/latest?cb=20161125231239",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vectis_Prime",
      "disposition": 2,
      "releaseDate": "2015 07 07",
      "vaultDate": "2017 05 30",
      "estimatedVaultDate": "2017 05 30",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot, insane dps, hitscan munitions. Sniper combo counter rampup is slow (min. 5), zooming in gives additive bonus to headshots (35%/55%). ",
      "dmg": "Crit/Status",
      "rank": 41.7,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Veldt",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnRevolverRifle/TnRevolverRifleGun",
      "totalDamage": 90,
      "trigger": "Semi",
      "description": "Precise calibration, rapid trigger-pull and a steady hand all combine to bring down the hardiest prey on two legs or four.",
      "accuracy": 32,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "veldt.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "90.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b5/Veldt.png/revision/latest?cb=20180417192137",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Veldt",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS, hitscan munitions. Alt-fire toggles higher magnification on zoom. ",
      "dmg": "Crit/Status",
      "rank": 74.3,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Velocitus",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/Railgun/ArchRailgun",
      "totalDamage": 1800,
      "trigger": "Charge",
      "description": "When fully charged, the magnetized barrel of the Velocitus accelerates a metal slug to tremendous speeds, piercing hulls and obliterating armor.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.05,
      "imageName": "velocitus.png",
      "tradable": false,
      "damage": "200.0 magnetic",
      "projectile": "Projectile",
      "statusChance": 25,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e5/ArchRailgun.png/revision/latest?cb=20141113011105",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Velocitus",
      "disposition": 3,
      "type": "Archwing Gun",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Venka",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Claws/TennoClaws",
      "totalDamage": 37,
      "trigger": "Melee",
      "description": "Utilizing a new fighting stance, this Tenno weapon turns fists into claws and enemies into messy piles of meat and scrap metal.",
      "accuracy": 100,
      "wallAttack": 111,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "venka.png",
      "category": "Claws",
      "tradable": false,
      "channeling": 1.5,
      "damage": "37.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e5/TennoClaws.png/revision/latest?cb=20140626182008",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Venka",
      "disposition": 1,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Venka Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeVenKa/PrimeVenkaClaws",
      "totalDamage": 55,
      "trigger": "Melee",
      "description": "Gleaming blades of white draw blood of the deepest red.",
      "accuracy": 100,
      "wallAttack": 165,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "venka-prime.png",
      "category": "Claws",
      "tradable": true,
      "channeling": 1.5,
      "damage": "55.0",
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/12/VenkaPrime.png/revision/latest?cb=20161112234903",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Venka_Prime",
      "disposition": 1,
      "releaseDate": "2016 11 22",
      "vaultDate": "2018 09 25",
      "estimatedVaultDate": "2018 09 25",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit/Status",
      "rank": 45.85,
      "tierRank": 2,
      "weaponNotes": "Very low damage per hit, monstrous DPS, high attack speed. Has 50% more melee combo multiplier; excellent for Blood Rush and Weeping Wounds. Stance has unusual 2x multiplier on slide. ",
      "stance": "Malicious Raptor",
      "stanceNotes": "",
      "combo": "Venging Thrash",
      "component": false
    },
    {
      "name": "Veritux",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/Archsword/ArchSwordWeapon",
      "totalDamage": 300,
      "trigger": "Melee",
      "description": "Weightless space turns this impossibly massive sword into an agile instrument of destruction.",
      "accuracy": 100,
      "wallAttack": 300,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "omegaAttenuation": 1,
      "imageName": "veritux.png",
      "tradable": false,
      "damage": "300.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/dc/ArchSword.png/revision/latest?cb=20141024143613",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Veritux",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "The Archwing (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Viper",
      "uniqueName": "/Lotus/Weapons/Grineer/GrineerPistol/GrineerLightPistol",
      "totalDamage": 17,
      "trigger": "Auto",
      "description": "A full-auto pistol known as the most compact and lightweight weapon of the Grineer arsenal. Though it has a small Magazine Capacity, the Viper has a very high Fire Rate and ultra-fast reload times thanks to a simplified magazine design.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.35,
      "itemCount": 1,
      "parents": [
        "Hystrix",
        "Twin Vipers"
      ],
      "type": "Secondary",
      "imageName": "viper.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "17.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/99/Viper.png/revision/latest?cb=20130426074750",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Viper",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Viper Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/WraithSingleViper/WraithSingleViper",
      "totalDamage": 18,
      "trigger": "Auto",
      "description": "The uniquely styled Viper Wraith is a powerful variation on the standard machine-pistol.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.35,
      "type": "Secondary",
      "imageName": "viper-wraith.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "18.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/72/ViperWraith.png/revision/latest?cb=20180121144809",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Viper_Wraith",
      "disposition": 5,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS,  hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 110.1,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Volnus",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Hammer/GlassHammer/GlassHammer",
      "totalDamage": 100,
      "trigger": "Melee",
      "description": "Tear and maim with this agile, lightweight glass hammer. When Gara's wields her signature melee weapon, it gains additional Slam Radial Damage.",
      "accuracy": 100,
      "wallAttack": 200,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "omegaAttenuation": 1.2,
      "type": "Melee",
      "imageName": "volnus.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "100.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e8/GlassHammer.png/revision/latest?cb=20171017224241",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Volnus",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 52.01,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, moderate DPS, very high attack speed. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "Only use Raging Whirlwind to proc Impact or the slam will ragdoll",
      "combo": "Tidal Force & Raging Whirlwind",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Volt/Volt",
      "name": "Volt",
      "description": "Volt can create and harness electrical elements. This is a high-damage Warframe perfect for players who want a potent alternative to gun-play.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Grounded movement generates an electrical charge building up |DAMAGE| Damage per meter that is unleashed with the next attack.",
      "type": "Warframe",
      "imageName": "volt.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 3354664,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4d/VoltNewLook.png/revision/latest?cb=20141124023359",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Volt",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Volt/VoltPrime",
      "name": "Volt Prime",
      "description": "A glorious warrior from the past, Volt Prime features the same abilities as Volt but with unique mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Grounded movement generates an electrical charge building up |DAMAGE| Damage per meter that is unleashed with the next attack.",
      "type": "Warframe",
      "imageName": "volt-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 14004844,
      "introduced": "16.1",
      "sex": "Male",
      "sprint": 1,
      "vaulted": true,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bd/VoltPrimeLarge.png/revision/latest?cb=20150324224840",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Volt_Prime",
      "releaseDate": "2015 03 24",
      "vaultDate": "2017 02 28",
      "estimatedVaultDate": "2017 02 28",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vulcax",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetComponents/ThermocorMoaWeapon",
      "totalDamage": 0,
      "trigger": "Charge",
      "description": "Charges up a powerful blast of ultra-heated plasma.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 14,
      "omegaAttenuation": 1,
      "type": "Sentinel Weapon",
      "imageName": "vulcax.png",
      "tradable": false,
      "damage": 35,
      "projectile": "Discharge",
      "statusChance": 10,
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7f/Vulcax.png/revision/latest?cb=20181110220625",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vulcax",
      "disposition": 3,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vulkar",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerSniperRifle/GrnSniperRifle",
      "totalDamage": 224.99998,
      "trigger": "Semi",
      "description": "Built by the Grineer for their elite troopers, the Vulkar is a devastating distance weapon. In the right hands it is capable of taking down targets long before they get into attack range.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "omegaAttenuation": 1.4,
      "type": "Primary",
      "imageName": "vulkar.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "225.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/Vulkar.png/revision/latest?cb=20171110221622",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vulkar",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vulkar Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerSniperRifle/VulkarWraith",
      "totalDamage": 273,
      "trigger": "Semi",
      "description": "A blood-red variant of this devastating sniper rifle.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.4,
      "type": "Primary",
      "imageName": "vulkar-wraith.png",
      "category": "Sniper Rifle",
      "tradable": true,
      "damage": "273.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b3/VulkarWraith.png/revision/latest?cb=20160209150222",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vulkar_Wraith",
      "disposition": 5,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot, moderate DPS, hitscan munitions. Sniper combo counter rampup is very good (min. 2), zooming in gives additive bonus to headshots (35%/55%/70%). ",
      "dmg": "Critical",
      "rank": 62.2,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Vulklok",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/SentElecRailgun",
      "totalDamage": 85,
      "trigger": "Auto",
      "description": "Standard issue sniper rifle for Diriga.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "omegaAttenuation": 1.245,
      "type": "Sentinel Weapon",
      "imageName": "vulklok.png",
      "tradable": false,
      "damage": "85.0 electricity",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/34/SentinelElectricRailgun.png/revision/latest?cb=20150902215133",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vulklok",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "War",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/StalkerTwo/StalkerTwoGreatSword",
      "totalDamage": 140,
      "trigger": "Melee",
      "description": "The Stalker's sword as bestowed on him by the Sentient Hunhow.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "war.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "140.0",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fd/StalkerTwoGreatSword.png/revision/latest?cb=20151204013307",
      "wikiaUrl": "http://warframe.fandom.com/wiki/War",
      "disposition": 1,
      "acquisition": "The Second Dream (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit/Status",
      "rank": 53.76,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, moderate DPS, low attack speed. What is it good for? ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Wisp/Wisp",
      "name": "Wisp",
      "description": "Elemental and elusive, Wisp is both guardian and gateway. ",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "Flowing between dimensions Wisp becomes invisible to enemies while in the air. ",
      "type": "Warframe",
      "imageName": "wisp.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 3947074,
      "introduced": "25.0",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a3/WispIcon272.png/revision/latest?cb=20190518000814",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Wisp",
      "acquisition": "Ropalolyst",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Wolf Sledge",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Hammer/ThrowingHammer",
      "totalDamage": 130,
      "trigger": "Melee",
      "description": "The signature weapon of the only lunatic fearsome enough to bust out of the Saturn Six Max-Pen. Once loosed this formidable throwing hammer always finds its way home.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 0.95999998,
      "type": "Melee",
      "imageName": "wolf-sledge.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "130.0",
      "vaulted": false,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Wolf_Sledge",
      "disposition": 3,
      "acquisition": "Wolf of Saturn Six",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit/Status",
      "rank": 64.86,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, poor DPS, high attack speed. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "Only use Raging Whirlwind to proc Impact or the slam will ragdoll",
      "combo": "Tidal Force & Raging Whirlwind",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/MonkeyKing/MonkeyKing",
      "name": "Wukong",
      "description": "A primal warrior with the heart of a trickster.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "After taking fatal damage Wukong automatically uses one of his mastered survival techniques. These techniques can only be invoked three times per mission.",
      "type": "Warframe",
      "imageName": "wukong.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 3817802,
      "introduced": "17.12",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/91/WukongNewIcon.png/revision/latest?cb=20151125205508",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Wukong",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/MonkeyKing/WukongPrime",
      "name": "Wukong Prime",
      "description": "The trickster-warrior ascends to his ultimate incarnation. ",
      "masteryReq": 5,
      "sprintSpeed": 1.05,
      "passiveDescription": "After taking fatal damage Wukong automatically uses one of his mastered survival techniques. These techniques can only be invoked three times per mission.",
      "type": "Warframe",
      "imageName": "wukong-prime.png",
      "tradable": true,
      "aura": "madurai",
      "color": 0,
      "introduced": "25.3.0",
      "sex": "Male",
      "sprint": 1.05,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Wukong_Prime",
      "releaseDate": "2019 07 07",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 05 02",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/WyrmPowerSuit",
      "name": "Wyrm",
      "description": "With 'Assault Mode' and 'Crowd Dispersion' as default Precepts, Wyrm is a highly offensive Sentinel. Wyrm also comes with a laser rifle.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "wyrm.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Wyrm"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/PrimeWyrmPowerSuit",
      "name": "Wyrm Prime",
      "description": "Both bodyguard and status symbol, the Wyrm Prime Sentinel was the last line of defense for high ranking Tenno in the Orokin Era.",
      "type": "Sentinel",
      "imageName": "wyrm-prime.png",
      "tradable": true,
      "releaseDate": "2014 06 11",
      "vaultDate": "2016 05 17",
      "estimatedVaultDate": "2016 05 17",
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "vaulted": true,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Wyrm_Prime"
    },
    {
      "name": "Zakti",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TnGuandoPistol/TnGuandoPistolGun",
      "totalDamage": 110,
      "trigger": "Semi",
      "description": "Fires razor-sharp darts that anchor themselves in their target before erupting in a plume of toxic gas.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.2,
      "type": "Secondary",
      "imageName": "zakti.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "30.0",
      "flight": 66,
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a7/Zakti.png/revision/latest?cb=20170720170336",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zakti",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot, poor DPS,  projectile munitions. Pellets explode after landing, causing Impact status and Gas damage and status. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 84.8,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Zarr",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnCannon/GrnCannonWeapon",
      "totalDamage": 0,
      "trigger": "Semi",
      "description": "Unload a barrage of explosives or a huge shot of flak from this cannon’s enormous barrel.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "omegaAttenuation": 1.15,
      "type": "Primary",
      "imageName": "zarr.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "25.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Barrage Mode",
        "speed": 3,
        "crit_chance": 17,
        "status_chance": 0.3,
        "impact": 240,
        "slash": 160,
        "puncture": 400
      },
      "secondaryArea": {
        "name": "Cannon Mode Cluster Bombs",
        "status_chance": 29,
        "pellet": {
          "name": "Bomb",
          "count": 6
        },
        "blast": 300,
        "damage": "300.0 blast"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4b/GrineerCannon.png/revision/latest?cb=20161117022350",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zarr",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot, moderate DPS, projectile munitions. First explosion from primary fire can damage self but subsequent cluster bomblets won't. Each bomblet can cause status effect on it's own. Alt fire switches to shotgun mode. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 62.2,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Zenistar",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/SunDialAxe/SundialAxeWeapon",
      "totalDamage": 130,
      "trigger": "Melee",
      "description": "Scorch enemies with blistering blows, or set them ablaze with the flying fire disc.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 0.5,
      "type": "Melee",
      "imageName": "zenistar.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "130.0 heat",
      "secondary": {
        "name": "Attacks while disc deployed",
        "speed": 0.967,
        "impact": 13,
        "slash": 104,
        "puncture": 13
      },
      "secondaryArea": {
        "name": "Disc Aura",
        "status_chance": 50,
        "duration": 4500,
        "radius": 400,
        "speed": 1.2,
        "heat": 50,
        "damage": "50.0 heat"
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/90/SundialAxe.png/revision/latest?cb=20171031145300",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zenistar",
      "disposition": 1,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 56.5,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, moderate DPS, very low attack speed. Suffers from relatively poor consistency. Charge attack deploys flying disc that deals AOE damage and allow the rest of the weapon to deal physical damage. ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "Launch the disc first",
      "combo": "Charge attack then Broken Bull",
      "component": false
    },
    {
      "name": "Zenith",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/LoginPrimary/SundialRifle",
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Deploy the radar disc to reveal hidden enemies and then strike with precisions shots that punch through all obstacles in the way.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.1,
      "type": "Primary",
      "imageName": "zenith.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 3,
        "crit_chance": 35,
        "crit_mult": 2.5,
        "status_chance": 0.1,
        "impact": 15,
        "slash": 15,
        "puncture": 120
      },
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/10/SundialRifle.png/revision/latest?cb=20171031145242",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zenith",
      "disposition": 3,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot, insane dps, hitscan munitions. Secondary fire launches a disc that scans enemies and switches the weapon to semi-auto until the magazine is depleted. Semi-auto mode has more DPS and infinite punchthrough. ✪",
      "dmg": "Crit/Status",
      "rank": 38.5,
      "tierRank": 3,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Tengu/Tengu",
      "name": "Zephyr",
      "description": "Specializing in air attacks and mobility, Zephyr dominates from above.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Move faster while Airborne and fall |PERCENT|% slower.",
      "type": "Warframe",
      "imageName": "zephyr.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 14471877,
      "introduced": "12",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fc/ZephyrNewLook.png/revision/latest?cb=20141124023407",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zephyr",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Tengu/ZephyrPrime",
      "name": "Zephyr Prime",
      "description": "Take to the skies with this golden bird of destruction.",
      "masteryReq": 6,
      "sprintSpeed": 1.2,
      "passiveDescription": "Move faster while Airborne and fall |PERCENT|% slower.",
      "type": "Warframe",
      "imageName": "zephyr-prime.png",
      "tradable": true,
      "aura": "vazarin",
      "conclave": true,
      "color": 2565413,
      "introduced": "22.16.4",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/68/ZephyrPrimeIcon.png/revision/latest?cb=20180320221426",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zephyr_Prime",
      "releaseDate": "2018 03 20",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 01 13",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Zhuge",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/RepeatingCrossbow/RepeatingCrossbow",
      "totalDamage": 100,
      "trigger": "Auto",
      "description": "This devastating automatic crossbow is the perfect marriage of ancient Earth weaponry and Tenno technology.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 10,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "zhuge.png",
      "category": "Crossbow",
      "tradable": false,
      "damage": "100.0",
      "flight": "???",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/41/RepeatingCrossbow.png/revision/latest?cb=20160317010054",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zhuge",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Zhuge Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeZhuge/PrimeZhugeCrossbow",
      "totalDamage": 50,
      "trigger": "Auto",
      "description": "Tenno artistry. Ancient craft. A weapon of surgical precision and devastating effect. Each bolt fired by Zhuge Prime explodes shortly after embedding.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 14,
      "omegaAttenuation": 1.25,
      "type": "Primary",
      "imageName": "zhuge-prime.png",
      "category": "Crossbow",
      "tradable": true,
      "damage": "90.0",
      "flight": "???",
      "projectile": "Projectile",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fa/ZhugePrime.png/revision/latest?cb=20190707115545",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zhuge_Prime",
      "disposition": 4,
      "releaseDate": "2019 07 07",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 05 02",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot, monstrous DPS, projectile munitions. Bolts will explode a short duration after hitting a wall, potentially causing self damage. ✪",
      "dmg": "Crit/Status",
      "rank": 46.2,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Zylok",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/ConclaveLeverPistol/ConclaveLeverPistol",
      "totalDamage": 140,
      "trigger": "Duplex",
      "description": "Hammer the enemy with this light-bodied heavy hitter. Featuring a double-action trigger that fires hard and fast. ",
      "accuracy": 23.529411,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "omegaAttenuation": 1.25,
      "type": "Secondary",
      "imageName": "zylok.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "140.0",
      "projectile": "Hitscan",
      "vaulted": false,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/67/Zylok.png/revision/latest?cb=20180831004228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zylok",
      "disposition": 4,
      "acquisition": "The Pyrys Project (Quest)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot, poor DPS,  hitscan munitions. ",
      "dmg": "Status",
      "rank": 95.3,
      "tierRank": 0,
      "component": false
    }
  ],
  "fetched": "2019.08.09 01:15:50 CET+02:00",
  "version": {
    "pc": "25.6.1",
    "ps4": "Tenno Reinforcements:  Update 25.4.0",
    "xbox": "Tenno Reinforcements:  Update 25.4.0",
    "switch": "Tenno Reinforcements:  Update 25.4.0",
    "tier": "Warframe Patch 25.4 - Quatz ranked. "
  }
}

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_vendor_foundation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/vendor/foundation.js */ "./src/js/vendor/foundation.js");
/* harmony import */ var _js_vendor_foundation_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_js_vendor_foundation_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _js_warframe_data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/warframe-data.js */ "./src/js/warframe-data.js");
/* harmony import */ var _js_warframe_data_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_js_warframe_data_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _js_app_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/app.js */ "./src/js/app.js");
/* harmony import */ var _js_app_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_js_app_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _js_clock_eidolon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/clock-eidolon.js */ "./src/js/clock-eidolon.js");
/* harmony import */ var _js_clock_eidolon_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_clock_eidolon_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _js_clock_orbvallis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/clock-orbvallis */ "./src/js/clock-orbvallis.js");
/* harmony import */ var _js_clock_orbvallis__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_js_clock_orbvallis__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _views_beginner_guide_hbs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./views/beginner-guide.hbs */ "./src/views/beginner-guide.hbs");
/* harmony import */ var _views_beginner_guide_hbs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_views_beginner_guide_hbs__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _views_all_items_hbs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./views/all-items.hbs */ "./src/views/all-items.hbs");
/* harmony import */ var _views_all_items_hbs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_views_all_items_hbs__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _views_filter_hbs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./views/filter.hbs */ "./src/views/filter.hbs");
/* harmony import */ var _views_filter_hbs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_views_filter_hbs__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _views_item_hbs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./views/item.hbs */ "./src/views/item.hbs");
/* harmony import */ var _views_item_hbs__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_views_item_hbs__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _views_item_modal_hbs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./views/item-modal.hbs */ "./src/views/item-modal.hbs");
/* harmony import */ var _views_item_modal_hbs__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_views_item_modal_hbs__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _views_search_hbs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./views/search.hbs */ "./src/views/search.hbs");
/* harmony import */ var _views_search_hbs__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_views_search_hbs__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _views_search_indicator_hbs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./views/search-indicator.hbs */ "./src/views/search-indicator.hbs");
/* harmony import */ var _views_search_indicator_hbs__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_views_search_indicator_hbs__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _views_status_hbs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./views/status.hbs */ "./src/views/status.hbs");
/* harmony import */ var _views_status_hbs__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_views_status_hbs__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _views_pages_help_hbs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./views/pages/help.hbs */ "./src/views/pages/help.hbs");
/* harmony import */ var _views_pages_help_hbs__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_views_pages_help_hbs__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _views_pages_stats_hbs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./views/pages/stats.hbs */ "./src/views/pages/stats.hbs");
/* harmony import */ var _views_pages_stats_hbs__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_views_pages_stats_hbs__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _views_pages_user_hbs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./views/pages/user.hbs */ "./src/views/pages/user.hbs");
/* harmony import */ var _views_pages_user_hbs__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_views_pages_user_hbs__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _font_fontello_eot__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./font/fontello.eot */ "./src/font/fontello.eot");
/* harmony import */ var _font_fontello_eot__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_eot__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _font_fontello_svg__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./font/fontello.svg */ "./src/font/fontello.svg");
/* harmony import */ var _font_fontello_svg__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_svg__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _font_fontello_ttf__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./font/fontello.ttf */ "./src/font/fontello.ttf");
/* harmony import */ var _font_fontello_ttf__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_ttf__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _font_fontello_woff__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./font/fontello.woff */ "./src/font/fontello.woff");
/* harmony import */ var _font_fontello_woff__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_woff__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _font_fontello_woff2__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./font/fontello.woff2 */ "./src/font/fontello.woff2");
/* harmony import */ var _font_fontello_woff2__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_woff2__WEBPACK_IMPORTED_MODULE_20__);
const path = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");

if (true) {
  console.log('We are in development mode');
}


























/***/ }),

/***/ "./src/scss/stylesheet.scss":
/*!**********************************!*\
  !*** ./src/scss/stylesheet.scss ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/views/all-items.hbs":
/*!*********************************!*\
  !*** ./src/views/all-items.hbs ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = container.invokePartial(__webpack_require__(/*! ./item.hbs */ "./src/views/item.hbs"),depth0,{"name":"item","data":data,"indent":"        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "<ul id=\"all-items\">\n"
    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</ul>\n";
},"usePartial":true,"useData":true});

/***/ }),

/***/ "./src/views/beginner-guide.hbs":
/*!**************************************!*\
  !*** ./src/views/beginner-guide.hbs ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<h1>Beginners guide to Warframe</h1>\n<h2>What should I do?</h2>\n<ul>\n<li>Unlock planets by completing junctions until you reach Pluto. Complete Pluto to recieve a mission called &quot;The War Within&quot;.</li>\n<li>Level frames, acquire weapons and strengthen mods with Endo.</li>\n<li>Play all available quest.</li>\n</ul>\n<h2>How do I do that?</h2>\n<ul>\n<li>Clear a path to each planets Junction, then check the requirement for that Junction. Complete the list. Move on to the next planet.</li>\n<li>Your first goal is Fossa on Venus. Repeat Fossa until you have required all parts for Rhinos. Build all the parts needed, then buy the blueprint for Rhino in Market to build the complete frame. Rhino is a tank and very durable, you will need Rhino to progress. </li>\n<li>Your second goal should be unlocking Seimeni on Ceres. Seimeni is a great credit-farm, and you will need credits. </li>\n<li>Next goal is Helene on Saturn. Helene is a great affinity-farm (XP) and will help in leveling weapons and frames.</li>\n<li>Acquire more frames and weapons by farming Assasination missions on each planet.</li>\n<li>Unlock Sedna Junction on Pluto. This will reward you with a mission called &quot;The War Within&quot;. Complete this mission to unlock the final part of Warframe, where the fun really begins :)</li>\n</ul>\n<h2>What do I need to know before i proceed?</h2>\n<ul>\n<li>Do not spend platinum on anything else than slots for frames and weapons.</li>\n<li>You will gain affinity (XP) from your team-members kills. No need to chop up all those enemies yourself.</li>\n<li>You will lose affinity if you die. Wait for a team-member to revive you.</li>\n<li>Your gain mastery ranking by leveling items to level 30.</li>\n<li>You can sell items to clear out slots: Menu &gt; Equipment &gt; Inventory</li>\n<li>Most weapons you can acquire early on are trash. Check <a href=\"https://www.cephalonwannab.com/\">cephalonwannab.com/</a> for info on what weapons to keep.</li>\n<li>The game will not provide much help, so you need to use Google to learn about the game, or check the <a href=\"https://warframe.fandom.com/wiki\">Warframe Wikia</a>.</li>\n<li>Certain resources are hard to find. Do not spend your <em>Neurodes</em>, <em>Orokins Cells</em> or <em>Neural Sensors</em> on weapons until you know where to acquire these resources.</li>\n</ul>\n<h2>How should I spend my platinum?</h2>\n<ul>\n<li>Do not spend platinum on anything else than slots for frames and weapons. Seriously.</li>\n</ul>\n<h2>Where do I find resources?</h2>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/clock-modal.hbs":
/*!***********************************!*\
  !*** ./src/views/clock-modal.hbs ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div id=\"eidolon-clock\">\n    <div class=\"clock-title\">PLANES OF EIDOLON</div>\n    <div class=\"time time-box\">\n        <div class=\"time-indicator\"></div>\n        <div class=\"big-hour hour\"></div>\n        <div class=\"big-hour-divider\">:</div>\n        <div class=\"big-minute minute\"></div>\n        <div class=\"big-hour-divider\">:</div>\n        <div class=\"big-second second\"></div>\n    </div>\n    <div class=\"time-info\">\n        until <span class=\"day\"></span>\n    </div>\n    <div id=\"warning-container\"></div>\n</div>\n\n<div id=\"orbvallis-clock\" class=\"\">\n    <div class=\"clock-title\">ORB VALLIS</div>\n    <div class=\"weather time-box\">\n        <div class=\"time-indicator\"></div>\n        <div class=\"big-minute minute\"></div>\n    </div>\n    <div class=\"time-info\">\n        until <span class=\"next-period\"></span>\n    </div>\n</div>\n\n<a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/filter.hbs":
/*!******************************!*\
  !*** ./src/views/filter.hbs ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div id=\"filter\">\n        <span id=\"filter-clear\" onclick=\"app.search.clear();\">Clear <i class=\"icon-cancel\"></i></span>\n    <label for=\"filter-all\">\n        <input type=\"radio\" name=\"filter-status\" class=\"filter-status\" value=\"all\" id=\"filter-all\" checked=\"checked\" onclick=\"app.filter.activate('all');\">\n        <span>All</span>\n    </label>\n    <label for=\"filter-ranked\" onclick=\"app.filter.activate('ranked');\">\n        <input type=\"radio\" name=\"filter-status\" class=\"filter-status\" value=\"ranked\" id=\"filter-ranked\">\n        <span>Ranked</span>\n    </label>\n    <label for=\"filter-unranked\" onclick=\"app.filter.activate('ranked');\">\n        <input type=\"radio\" name=\"filter-status\" class=\"filter-status\" value=\"unranked\" id=\"filter-unranked\">\n        <span>Unranked</span>\n    </label>\n</div>\n\n<div id=\"search-indicator\">\n    <i class=\"icon-search\"></i><span id=\"search-indicator-string\"></span>Showing <span id=\"search-indicator-value\">443</span>\n</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/item-modal.hbs":
/*!**********************************!*\
  !*** ./src/views/item-modal.hbs ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    return "        <i class=\"icon-check\"></i>\n";
},"3":function(container,depth0,helpers,partials,data) {
    var helper;

  return "<div class=\"thumbnail-wrapper\"><img class=\"thumbnail\"  src=\"https://cdn.warframestat.us/img/"
    + container.escapeExpression(((helper = (helper = helpers.imageName || (depth0 != null ? depth0.imageName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"imageName","hash":{},"data":data}) : helper)))
    + "\"></div>\n";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing;

  return "        <tr>\n            <td class=\"table-left\">Category:</td>\n            <td class=\"table-right\"> <a onclick=\"app.search.searchFor('"
    + container.escapeExpression((helpers.escape || (depth0 && depth0.escape) || alias2).call(alias1,(depth0 != null ? depth0.type : depth0),{"name":"escape","hash":{},"data":data}))
    + "');\">"
    + ((stack1 = ((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"type","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</a></td>\n        </tr>\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing;

  return "        <tr>\n            <td class=\"table-left\">Type:</td>\n            <td class=\"table-right\"> <a onclick=\"app.search.searchFor('"
    + container.escapeExpression((helpers.escape || (depth0 && depth0.escape) || alias2).call(alias1,(depth0 != null ? depth0.category : depth0),{"name":"escape","hash":{},"data":data}))
    + "');\">"
    + ((stack1 = ((helper = (helper = helpers.category || (depth0 != null ? depth0.category : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"category","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</a></td>\n        </tr>\n";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing;

  return "        <tr>\n            <td class=\"table-left\">Acquisition:</td>\n            <td class=\"table-right\"> <a onclick=\"app.search.searchFor('"
    + container.escapeExpression((helpers.escape || (depth0 && depth0.escape) || alias2).call(alias1,(depth0 != null ? depth0.acquisition : depth0),{"name":"escape","hash":{},"data":data}))
    + "');\">"
    + ((stack1 = ((helper = (helper = helpers.acquisition || (depth0 != null ? depth0.acquisition : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"acquisition","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</a>"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.vaulted : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.unobtainable : depth0),{"name":"if","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond || (depth0 && depth0.ifCond) || alias2).call(alias1,(depth0 != null ? depth0.masteryReq : depth0),">=",1,{"name":"ifCond","hash":{},"fn":container.program(14, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</td>\n        </tr>\n";
},"10":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-lock\"></i>";
},"12":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-attention\"></i>";
},"14":function(container,depth0,helpers,partials,data) {
    var helper;

  return " | MR-"
    + container.escapeExpression(((helper = (helper = helpers.masteryReq || (depth0 != null ? depth0.masteryReq : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"masteryReq","hash":{},"data":data}) : helper)));
},"16":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "        <tr>\n            <td class=\"table-left\">Wikia:</td>\n            <td class=\"table-right\"><a href=\""
    + alias4(((helper = (helper = helpers.wikiaUrl || (depth0 != null ? depth0.wikiaUrl : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"wikiaUrl","hash":{},"data":data}) : helper)))
    + "\" target=\"_blank\">"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
    + " <i class=\"icon-link-ext\"></i></a></td>\n        </tr>\n";
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <tr>\n            <td class=\"table-left\">Description:</td>\n            <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"description","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n        </tr>\n";
},"20":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing;

  return "        <tr>\n            <td class=\"table-left\">Tier:</td>\n            <td class=\"table-right\">\n"
    + ((stack1 = (helpers.ifCond || (depth0 && depth0.ifCond) || alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","3",{"name":"ifCond","hash":{},"fn":container.program(21, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond || (depth0 && depth0.ifCond) || alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","2",{"name":"ifCond","hash":{},"fn":container.program(23, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond || (depth0 && depth0.ifCond) || alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","1",{"name":"ifCond","hash":{},"fn":container.program(25, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "                 ("
    + container.escapeExpression(((helper = (helper = helpers.tier || (depth0 != null ? depth0.tier : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"tier","hash":{},"data":data}) : helper)))
    + ")</td>\n        </tr>\n";
},"21":function(container,depth0,helpers,partials,data) {
    return "                <span class=\"tier-rank tier-rank-3\">\n                    <i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i>\n                </span>\n";
},"23":function(container,depth0,helpers,partials,data) {
    return "                <span class=\"tier-rank tier-rank-2\">\n                    <i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i>\n                </span>\n";
},"25":function(container,depth0,helpers,partials,data) {
    return "                <span class=\"tier-rank tier-rank-1\">\n                    <i class=\"icon-star-empty\"></i>\n                </span>\n";
},"27":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <tr>\n            <td class=\"table-left\">Rank:</td>\n            <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.rank || (depth0 != null ? depth0.rank : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"rank","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n        </tr>\n";
},"29":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <tr>\n            <td class=\"table-left\">Release date:</td>\n            <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.releaseDate || (depth0 != null ? depth0.releaseDate : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"releaseDate","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n        </tr>\n";
},"31":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Special:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.specialNote || (depth0 != null ? depth0.specialNote : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"specialNote","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"33":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Notes:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.notes || (depth0 != null ? depth0.notes : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"notes","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"35":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Weapon notes:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.weaponNotes || (depth0 != null ? depth0.weaponNotes : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"weaponNotes","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"37":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Damage:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.dmg || (depth0 != null ? depth0.dmg : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"dmg","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"39":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Abilities:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.abilities || (depth0 != null ? depth0.abilities : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"abilities","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"41":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Trigger:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.trigger || (depth0 != null ? depth0.trigger : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"trigger","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"43":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Projectile:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.projectile || (depth0 != null ? depth0.projectile : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"projectile","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"45":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Stance:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.stance || (depth0 != null ? depth0.stance : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"stance","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"47":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Stance notes:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.stanceNotes || (depth0 != null ? depth0.stanceNotes : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"stanceNotes","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"49":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Combo:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.combo || (depth0 != null ? depth0.combo : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"combo","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"51":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Use:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.use || (depth0 != null ? depth0.use : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"use","hash":{},"data":data}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"53":function(container,depth0,helpers,partials,data) {
    return "            <tr>\n                <td class=\"table-left\">Component:</td>\n                <td class=\"table-right\"><a href=\"http://warframe.wikia.com/wiki/Weapons_Required_as_Crafting_Ingredients#Combined_blueprints\" target=\"_blank\">Item are a component, read more about build-chains. <i class=\"icon-link-ext\"></i></a></td>\n            </tr>\n";
},"55":function(container,depth0,helpers,partials,data) {
    return "        <p class=\"text-is-grey margin-top-medium\">Data from <a href=\"https://www.cephalonwannab.com/\" target=\"_blank\">cephalonwannab.com <i class=\"icon-link-ext\"></i></a></p>\n";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {});

  return "<h2 id=\"modalTitle\" class=\"name\">\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.checked : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "    "
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
    + "\n</h2>\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.imageName : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "<div class=\"data\">\n    <table class=\"left-right-table\">\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.type : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.category : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.acquisition : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.wikiaUrl : depth0),{"name":"if","hash":{},"fn":container.program(16, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "        <tr>\n            <td colspan=\"2\"><hr></td>\n        </tr>\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.description : depth0),{"name":"if","hash":{},"fn":container.program(18, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.tier : depth0),{"name":"if","hash":{},"fn":container.program(20, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.rank : depth0),{"name":"if","hash":{},"fn":container.program(27, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.releaseDate : depth0),{"name":"if","hash":{},"fn":container.program(29, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.specialNote : depth0),{"name":"if","hash":{},"fn":container.program(31, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.notes : depth0),{"name":"if","hash":{},"fn":container.program(33, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.weaponNotes : depth0),{"name":"if","hash":{},"fn":container.program(35, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.dmg : depth0),{"name":"if","hash":{},"fn":container.program(37, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.abilities : depth0),{"name":"if","hash":{},"fn":container.program(39, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.trigger : depth0),{"name":"if","hash":{},"fn":container.program(41, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.projectile : depth0),{"name":"if","hash":{},"fn":container.program(43, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.stance : depth0),{"name":"if","hash":{},"fn":container.program(45, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.stanceNotes : depth0),{"name":"if","hash":{},"fn":container.program(47, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.combo : depth0),{"name":"if","hash":{},"fn":container.program(49, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.use : depth0),{"name":"if","hash":{},"fn":container.program(51, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.component : depth0),{"name":"if","hash":{},"fn":container.program(53, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "    </table>\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.tier : depth0),{"name":"if","hash":{},"fn":container.program(55, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "    <a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/item.hbs":
/*!****************************!*\
  !*** ./src/views/item.hbs ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    return "item-checked";
},"3":function(container,depth0,helpers,partials,data) {
    return "item-unchecked";
},"5":function(container,depth0,helpers,partials,data) {
    return " item-vaulted";
},"7":function(container,depth0,helpers,partials,data) {
    return " item-unobtainable";
},"9":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-lock\"></i>";
},"11":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-attention\"></i>";
},"13":function(container,depth0,helpers,partials,data) {
    var helper;

  return "        <span class=\"tier-rank tier-rank-3\" onclick=\"app.item.toggleInfo('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data}) : helper)))
    + "')\">\n            <i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i>\n        </span>\n";
},"15":function(container,depth0,helpers,partials,data) {
    var helper;

  return "        <span class=\"tier-rank tier-rank-2\" onclick=\"app.item.toggleInfo('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data}) : helper)))
    + "')\">\n            <i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i>\n        </span>\n";
},"17":function(container,depth0,helpers,partials,data) {
    var helper;

  return "        <span class=\"tier-rank tier-rank-1\" onclick=\"app.item.toggleInfo('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data}) : helper)))
    + "')\">\n            <i class=\"icon-star-empty\"></i>\n        </span>\n";
},"19":function(container,depth0,helpers,partials,data) {
    var helper;

  return "<span class=\"component\" onclick=\"app.item.toggleInfo('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data}) : helper)))
    + "')\"><i class=\"icon-puzzle-piece\"></i></span>";
},"21":function(container,depth0,helpers,partials,data) {
    var helper;

  return "            <i class=\"icon-check icon-2x\" onclick=\"app.item.check('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data}) : helper)))
    + "', false)\"></i>\n";
},"23":function(container,depth0,helpers,partials,data) {
    var helper;

  return "            <i class=\"icon-check-empty icon-2x\" onclick=\"app.item.check('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data}) : helper)))
    + "', true)\"></i>\n";
},"25":function(container,depth0,helpers,partials,data) {
    var helper;

  return ": "
    + container.escapeExpression(((helper = (helper = helpers.category || (depth0 != null ? depth0.category : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"category","hash":{},"data":data}) : helper)));
},"27":function(container,depth0,helpers,partials,data) {
    var helper;

  return "<span class=\"mastery-rank\"> | MR-"
    + container.escapeExpression(((helper = (helper = helpers.masteryReq || (depth0 != null ? depth0.masteryReq : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"masteryReq","hash":{},"data":data}) : helper)))
    + "</span>";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "<li class=\"item "
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.checked : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.vaulted : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.unobtainable : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "\" data-name=\""
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
    + "\">\n    <span class=\"name\" onclick=\"app.item.toggleInfo('"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
    + "')\">"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
    + "</span>\n    <span class=\"acquisition\" onclick=\"app.item.toggleInfo('"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
    + "')\">"
    + alias4(((helper = (helper = helpers.acquisition || (depth0 != null ? depth0.acquisition : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"acquisition","hash":{},"data":data}) : helper)))
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.vaulted : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.unobtainable : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</span>\n"
    + ((stack1 = (helpers.ifCond || (depth0 && depth0.ifCond) || alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","3",{"name":"ifCond","hash":{},"fn":container.program(13, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond || (depth0 && depth0.ifCond) || alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","2",{"name":"ifCond","hash":{},"fn":container.program(15, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond || (depth0 && depth0.ifCond) || alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","1",{"name":"ifCond","hash":{},"fn":container.program(17, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "    "
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.component : depth0),{"name":"if","hash":{},"fn":container.program(19, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "\n    <span class=\"check\">\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.checked : depth0),{"name":"if","hash":{},"fn":container.program(21, data, 0),"inverse":container.program(23, data, 0),"data":data})) != null ? stack1 : "")
    + "    </span>\n    <div class=\"specification\">\n        <span class=\"type\">"
    + alias4(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"type","hash":{},"data":data}) : helper)))
    + "</span><span class=\"category\">"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.category : depth0),{"name":"if","hash":{},"fn":container.program(25, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</span>\n        "
    + ((stack1 = (helpers.ifCond || (depth0 && depth0.ifCond) || alias2).call(alias1,(depth0 != null ? depth0.masteryReq : depth0),">=",1,{"name":"ifCond","hash":{},"fn":container.program(27, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "\n        <a href=\""
    + alias4(((helper = (helper = helpers.wikiaUrl || (depth0 != null ? depth0.wikiaUrl : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"wikiaUrl","hash":{},"data":data}) : helper)))
    + "\" target=\"_blank\" class=\"wikia-link\"><i class=\"icon-link-ext\"></i></a>\n    </div>\n</li>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/pages/help.hbs":
/*!**********************************!*\
  !*** ./src/views/pages/help.hbs ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=container.escapeExpression, alias2=container.lambda;

  return "<h2>Help</h2>\n\n<h3>Legend</h3>\n<p><i class=\"legend-icon icon-check-empty\"></i> Item are un-checked</p>\n<p><i class=\"legend-icon icon-check\"></i> Item are checked</p>\n<p><i class=\"legend-icon icon-star-empty\"></i> Item rating (1 to 3 stars)</p>\n<p><i class=\"legend-icon icon-lock\"></i> Item are currently vaulted</p>\n<p><i class=\"legend-icon icon-attention\"></i> Item are unobtainable</p>\n<p><i class=\"legend-icon icon-puzzle\"></i> Item are a component (save this item in your Inventory)</p>\n<p><i class=\"legend-icon icon-link-ext\"></i> External link, will open in a new tab</p>\n<p><span class=\"legend-color legend-unchecked\"></span> Item are unchecked</p>\n<p><span class=\"legend-color legend-checked\"></span> Item are checked</p>\n<p><span class=\"legend-color legend-vaulted\"></span> Item are vaulted</p>\n<p><span class=\"legend-color legend-unobtainable\"></span> Item are unobtainable</p>\n\n<h3>Useful links</h3>\n<ul>\n    <li><a href=\"https://drops.warframestat.us/\" target=\"_blank\"><b>Drop Data (easily searchable)</b></a></li>\n    <li><a href=\"https://n8k6e2y6.ssl.hwcdn.net/repos/hnfvc0o3jnfvc873njb03enrf56.html\" target=\"_blank\"><b>Official Drop Rates &amp; Locations</b></a></li>\n    <li><a href=\"https://www.cephalonwannab.com/\" target=\"_blank\"><b>i_wanna_b_the_guy's Tier List</b></a></li>\n    <li><a href=\"https://www.tenno.zone/planner/\" target=\"_blank\"><b>Tenno Zone's guide to find relics</b></a></li>\n    <li><a href=\"https://www.framemastery.com/\" target=\"_blank\"><b>FrameMastery.com - Guides for everything</b></a></li>\n    <li><a href=\"http://content.warframe.com/dynamic/worldState.php\" target=\"_blank\">Official World-state API</a></li>\n    <li><a href=\"https://hub.warframestat.us\" target=\"_blank\">Warframe Hub</a></li>\n    <li><a href=\"http://warframe-builder.com/\" target=\"_blank\">Warframe Builds</a></li>\n    <li><a href=\"https://semlar.com/fish\" target=\"_blank\">Guide to fishing</a></li>\n    <li><a href=\"https://warframeguide.com/resources-farming-in-warframe/\" target=\"_blank\">Guide to resource farming</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Mastery_Rank\" target=\"_blank\">All about mastery rank</a></li>\n</ul>\n\n<h3>Notes</h3>\n<p><b>Unobtainable items</b></p>\n<p>Three items are considered \"Unobtainable\" since they were only accessible from the <a href=\"https://warframe.fandom.com/wiki/Founders\" target=\"_blank\">Founder Packages</a>:</p>\n<ul>\n    <li><a href=\"https://warframe.fandom.com/wiki/Excalibur_Prime\" target=\"_blank\">Excalibur Prime</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Lato_Prime\" target=\"_blank\">Lato Prime</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Skana_Prime\" target=\"_blank\">Skana Prime</a></li>\n</ul>\n<p><b>Fully ranked items</b></p>\n<p>Two items comes fully ranked and will add to mastery once obtained:</p>\n<ul>\n    <li><a href=\"https://warframe.fandom.com/wiki/Excalibur_Umbra\" target=\"_blank\">Excalibur Umbra</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Skiajati\" target=\"_blank\">Skiajati</a></li>\n</ul>\n<p><b>Unique items</b></p>\n<p>One item can reach level 40 and grant an additional 1000 points, but are considered mastered at level 30:</p>\n<ul>\n    <li><a href=\"https://warframe.fandom.com/wiki/Paracesis\" target=\"_blank\">Paracesis</a></li>\n</ul>\n<p><a href=\"https://warframe.fandom.com/wiki/Khora\" target=\"_blank\">Khora's</a> companion Venari will grant 6000 points towards mastery rank.</p>\n\n<h3>About this app</h3>\n<p>GUI and frontend by <a href=\"https://andersbrandt.se/\">Anders Brandt</a></p>\n<p>Item data are supplied by <a href=\"https://github.com/WFCD/\" target=\"_blank\">Warframe Community Developers</a> repo <a href=\"https://github.com/WFCD/warframe-items/\" target=\"_blank\">warframe-items</a>, thank you guys!</p>\n<p>Tier-list are supplied by <a href=\"https://www.cephalonwannab.com/\" target=\"_blank\">i_wanna_b_the_guy's Tier List</a></p>\n<p>\n    <b>Data fetched:</b><br/>\n    "
    + alias1(((helper = (helper = helpers.fetched || (depth0 != null ? depth0.fetched : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"fetched","hash":{},"data":data}) : helper)))
    + "\n</p>\n<p>\n    <b>Data actual for versions:</b><br/>\n    PC: "
    + alias1(alias2(((stack1 = (depth0 != null ? depth0.version : depth0)) != null ? stack1.pc : stack1), depth0))
    + "<br/>\n    PS4: "
    + alias1(alias2(((stack1 = (depth0 != null ? depth0.version : depth0)) != null ? stack1.ps4 : stack1), depth0))
    + "<br/>\n    Xbox: "
    + alias1(alias2(((stack1 = (depth0 != null ? depth0.version : depth0)) != null ? stack1.xbox : stack1), depth0))
    + "<br/>\n    Switch: "
    + alias1(alias2(((stack1 = (depth0 != null ? depth0.version : depth0)) != null ? stack1["switch"] : stack1), depth0))
    + "<br/>\n</p>\n\n<h3>Functions</h3>\n<p>Check all items</p>\n<p><code>app.item.checkAll()</code></p>\n<p>Uncheck all items</p>\n<p><code>app.item.unCheckAll()</code></p>\n<p>Copy data for checked items to clipboard (Works for Chrome):</p>\n<p><code>copy(app.storage.list())</code></p>\n<p>Import data</p>\n<p><code>app.import.showModal()</code></p>\n<p>Export data</p>\n<p><code>app.export.showModal()</code></p>\n<p>Download CSV</p>\n<p><code>app.export.csv()</code></p>\n\n<h3>I'm MR-27, what do I do?</h3>\n<p>Check all items by typing this in browser console:</p>\n<p><code>app.item.checkAll()</code></p>\n<p>Search for 'Unobtainable' and remove all Founders items</p>\n<p>Search for 'Login reward' and check those items</p>\n<p>Open Stats and check all categories against in-game menu if the numbers don't add up</p>\n\n<h3>Privacy</h3>\n<p>We will not store any personal information. Login are delegated to Google using <a target=\"_blank\" href=\"https://developers.google.com/api-client-library/\">Google API Client</a></p>\n<p>The only data we store are your <a target=\"_blank\" href=\"https://www.google.com/search?q=what%27s+my+google+id\">public Google ID</a>, used publicly in a obfuscated format.</p>\n<p>Your firstname (displayed in user-menu) are stored in session only, and never stored in database or on disk.</p>\n<p>We will not send you emails or store your email-address.</p>\n\n<a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n\n<div class=\"text-right\">\n    <button type=\"button\" class=\"btn btn-default\" onclick=\"app.tools.closeModal();\">Close</button>\n</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/pages/stats.hbs":
/*!***********************************!*\
  !*** ./src/views/pages/stats.hbs ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression;

  return "        <tr>\n            <td class=\"name\">"
    + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0))
    + "</td>\n            <td class=\"unranked\">"
    + ((stack1 = helpers["if"].call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? depth0.unranked : depth0)) != null ? stack1.length : stack1),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.program(4, data, 0),"data":data})) != null ? stack1 : "")
    + "</td>\n            <td class=\"ranked\">"
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.ranked : depth0)) != null ? stack1.length : stack1), depth0))
    + "</td>\n            <td class=\"total\">"
    + alias2(alias1((depth0 != null ? depth0.total : depth0), depth0))
    + "</td>\n        </tr>\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1;

  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.unranked : depth0)) != null ? stack1.length : stack1), depth0));
},"4":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-ok color-green\"></i> ";
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {});

  return "<div class=\"stats-item\">\n    <div class=\"name\">\n        <b>"
    + container.escapeExpression(container.lambda((depth0 != null ? depth0.name : depth0), depth0))
    + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.unranked : depth0)) != null ? stack1.length : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.program(4, data, 0),"data":data})) != null ? stack1 : "")
    + " </b>\n    </div>\n    <div class=\"ranked\">\n"
    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.unranked : depth0),{"name":"each","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "    </div>\n</div>\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1;

  return " ("
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.unranked : depth0)) != null ? stack1.length : stack1), depth0))
    + ") ";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {});

  return "        <a href=\""
    + alias2(alias1((depth0 != null ? depth0.url : depth0), depth0))
    + "\" target=\"_blank\">"
    + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0))
    + ((stack1 = helpers["if"].call(alias3,(depth0 != null ? depth0.unobtainable : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</a>"
    + ((stack1 = helpers.unless.call(alias3,(data && data.last),{"name":"unless","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "\n";
},"10":function(container,depth0,helpers,partials,data) {
    return " (Unobtainable)";
},"12":function(container,depth0,helpers,partials,data) {
    return ", ";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.lambda, alias3=container.escapeExpression;

  return "<h2>Statistics</h2>\n\n<h3>Ranked items by type</h3>\n<p>\n    These categories match the in-game menu Profile > Equipment.<br>\n    Note: Unless you are a Founder, there are 3 unobtainable items. Read more in Help.\n</p>\n<table>\n    <thead>\n        <th>Type</th>\n        <th>Unranked</th>\n        <th>Ranked</th>\n        <th>Total items</th>\n    </thead>\n    <tbody>\n"
    + ((stack1 = helpers.each.call(alias1,depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "        <tr class=\"divider\">\n            <td>&nbsp;</td>\n            <td class=\"unranked\">"
    + alias3(alias2((depth0 != null ? depth0.totalItemsUnranked : depth0), depth0))
    + "</td>\n            <td class=\"ranked\">"
    + alias3(alias2((depth0 != null ? depth0.totalItemsRanked : depth0), depth0))
    + "</td>\n            <td class=\"total\">"
    + alias3(alias2((depth0 != null ? depth0.totalItems : depth0), depth0))
    + "</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3>Unranked items by type</h3>\n"
    + ((stack1 = helpers.each.call(alias1,depth0,{"name":"each","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "\n<a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n\n<div class=\"text-right\">\n    <button type=\"button\" class=\"btn btn-default\" onclick=\"app.tools.closeModal();\">Close</button>\n</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/pages/user.hbs":
/*!**********************************!*\
  !*** ./src/views/pages/user.hbs ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression;

  return "<div id=\"user-wrapper\">\n    <h2>User</h2>\n    <p>\n        <a onclick=\"app.import.showModal();\">Import data from array</a><br />\n        <a onclick=\"app.export.showModal();\">Export data as array</a><br />\n        <a onclick=\"app.export.csv();\">Download data as CSV</a>\n    </p>\n    <hr />\n    <p>\n        Signed in as <b>"
    + alias2(alias1((depth0 != null ? depth0.firstName : depth0), depth0))
    + "</b><br>\n    </p>\n    <!--\n    <p>\n        Application User Id: "
    + alias2(alias1((depth0 != null ? depth0.uid : depth0), depth0))
    + "\n    </p>\n    -->\n    <p><a class=\"button\" href=\"../user/logout.php\">Logout</a></p>\n</div>\n\n<a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/search-indicator.hbs":
/*!****************************************!*\
  !*** ./src/views/search-indicator.hbs ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div id=\"search-indicator\"><i class=\"icon-search\"></i> Showing <span id=\"search-indicator-value\"></span> items</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/search.hbs":
/*!******************************!*\
  !*** ./src/views/search.hbs ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<input type=\"text\" id=\"search\" name=\"search\" onkeyup=\"app.search.action()\" placeholder=\"Search name, type, category or acquisition\" autocomplete=\"off\" />\n<div id=\"search-clear\" onclick=\"app.search.clear();\"><i class=\"icon-cancel\"></i></div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/status.hbs":
/*!******************************!*\
  !*** ./src/views/status.hbs ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "<div class=\"row\">\n    <div class=\"column small-12 medium-12\">\n        <div id=\"ranked-indicator\" title=\"\">\n           <span>Ranked:</span> <b id=\"checked-items-value\">"
    + alias4(((helper = (helper = helpers.checkedItems || (depth0 != null ? depth0.checkedItems : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"checkedItems","hash":{},"data":data}) : helper)))
    + "</b> / <b>"
    + alias4(((helper = (helper = helpers.availableItems || (depth0 != null ? depth0.availableItems : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"availableItems","hash":{},"data":data}) : helper)))
    + "</b>\n        </div>\n    </div>\n</div>\n";
},"useData":true});

/***/ }),

/***/ 0:
/*!******************************************************!*\
  !*** multi ./src/main.js ./src/scss/stylesheet.scss ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./src/main.js */"./src/main.js");
module.exports = __webpack_require__(/*! ./src/scss/stylesheet.scss */"./src/scss/stylesheet.scss");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy5ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9kZWNvcmF0b3JzL2lubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2Jsb2NrLWhlbHBlci1taXNzaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9oZWxwZXItbWlzc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2xvZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy93aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvbG9nZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcy1leHBvc2VkIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9mb250L2ZvbnRlbGxvLmVvdCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udC9mb250ZWxsby5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnQvZm9udGVsbG8udHRmIiwid2VicGFjazovLy8uL3NyYy9mb250L2ZvbnRlbGxvLndvZmYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnQvZm9udGVsbG8ud29mZjIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xvY2stZWlkb2xvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xvY2stb3JidmFsbGlzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy92ZW5kb3IvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvd2FyZnJhbWUtZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9zdHlsZXNoZWV0LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2FsbC1pdGVtcy5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2JlZ2lubmVyLWd1aWRlLmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvY2xvY2stbW9kYWwuaGJzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWx0ZXIuaGJzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9pdGVtLW1vZGFsLmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvaXRlbS5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3BhZ2VzL2hlbHAuaGJzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9wYWdlcy9zdGF0cy5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3BhZ2VzL3VzZXIuaGJzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zZWFyY2gtaW5kaWNhdG9yLmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc2VhcmNoLmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHVzLmhicyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDJCQUEyQiwwQkFBMEIsRUFBRTtRQUN2RCxpQ0FBaUMsZUFBZTtRQUNoRDtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxzREFBc0QsK0RBQStEOztRQUVySDtRQUNBOzs7UUFHQTtRQUNBOzs7Ozs7Ozs7Ozs7O0FDbEZhOztBQUViO0FBQ0E7O0FBRUEsc0NBQXNDLHVDQUF1QyxrQkFBa0I7O0FBRS9GOztBQUVBLHVDQUF1Qyw2QkFBNkIsWUFBWSxFQUFFLE9BQU8saUJBQWlCLG1CQUFtQix1QkFBdUIsNEVBQTRFLEVBQUUsRUFBRSx5QkFBeUIsZUFBZSxFQUFFOztBQUU5USxzQkFBc0IsbUJBQU8sQ0FBQyxnRkFBbUI7O0FBRWpEOztBQUVBO0FBQ0E7O0FBRUEsNEJBQTRCLG1CQUFPLENBQUMsOEZBQTBCOztBQUU5RDs7QUFFQSwyQkFBMkIsbUJBQU8sQ0FBQywwRkFBd0I7O0FBRTNEOztBQUVBLHVCQUF1QixtQkFBTyxDQUFDLGtGQUFvQjs7QUFFbkQ7O0FBRUEseUJBQXlCLG1CQUFPLENBQUMsc0ZBQXNCOztBQUV2RDs7QUFFQSw0QkFBNEIsbUJBQU8sQ0FBQyw4RkFBMEI7O0FBRTlEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7Ozs7QUNqRTVDOztBQUViO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0MsdUNBQXVDLGtCQUFrQjs7QUFFL0YsYUFBYSxtQkFBTyxDQUFDLHVFQUFTOztBQUU5QixpQkFBaUIsbUJBQU8sQ0FBQywrRUFBYTs7QUFFdEM7O0FBRUEsZUFBZSxtQkFBTyxDQUFDLDJFQUFXOztBQUVsQyxrQkFBa0IsbUJBQU8sQ0FBQyxpRkFBYzs7QUFFeEMsY0FBYyxtQkFBTyxDQUFDLHlFQUFVOztBQUVoQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7O0FDdkc1Qzs7QUFFYjtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDLHVDQUF1QyxrQkFBa0I7O0FBRS9GLHdCQUF3QixtQkFBTyxDQUFDLCtGQUFxQjs7QUFFckQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7Ozs7QUNmNUM7O0FBRWI7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHdFQUFVOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7OztBQzVCNUM7O0FBRWI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG1CQUFtQix5QkFBeUI7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7OztBQ3JENUM7O0FBRWI7QUFDQTtBQUNBOztBQUVBLHNDQUFzQyx1Q0FBdUMsa0JBQWtCOztBQUUvRixpQ0FBaUMsbUJBQU8sQ0FBQyxxSEFBZ0M7O0FBRXpFOztBQUVBLG1CQUFtQixtQkFBTyxDQUFDLHFGQUFnQjs7QUFFM0M7O0FBRUEsNEJBQTRCLG1CQUFPLENBQUMseUdBQTBCOztBQUU5RDs7QUFFQSxpQkFBaUIsbUJBQU8sQ0FBQyxpRkFBYzs7QUFFdkM7O0FBRUEsa0JBQWtCLG1CQUFPLENBQUMsbUZBQWU7O0FBRXpDOztBQUVBLHFCQUFxQixtQkFBTyxDQUFDLHlGQUFrQjs7QUFFL0M7O0FBRUEsbUJBQW1CLG1CQUFPLENBQUMscUZBQWdCOztBQUUzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7OztBQzdDNUM7O0FBRWI7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHdFQUFVOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25COztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7OztBQ3RDNUM7O0FBRWI7QUFDQTs7QUFFQSxzQ0FBc0MsdUNBQXVDLGtCQUFrQjs7QUFFL0YsYUFBYSxtQkFBTyxDQUFDLHdFQUFVOztBQUUvQixpQkFBaUIsbUJBQU8sQ0FBQyxnRkFBYzs7QUFFdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0Esb0NBQW9DLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7OztBQzdGNUM7O0FBRWI7QUFDQTs7QUFFQSxzQ0FBc0MsdUNBQXVDLGtCQUFrQjs7QUFFL0YsaUJBQWlCLG1CQUFPLENBQUMsZ0ZBQWM7O0FBRXZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxLQUFLO0FBQ3JDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7O0FDeEI1Qzs7QUFFYjs7QUFFQSxhQUFhLG1CQUFPLENBQUMsd0VBQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLDJEQUEyRCwrREFBK0Q7QUFDMUgsR0FBRztBQUNIOztBQUVBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7Ozs7QUM1QjVDOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDBCQUEwQjtBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7OztBQ3pCNUM7O0FBRWI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7Ozs7QUNqQjVDOztBQUViOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyx3RUFBVTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7Ozs7QUNoQzVDOztBQUViOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyx1RUFBUzs7QUFFOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkZBQTJGLGFBQWE7QUFDeEc7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7OztBQzlDekQ7QUFDYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7Ozs7QUNuQjVDOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDLHVDQUF1QyxrQkFBa0I7O0FBRS9GOztBQUVBLHVDQUF1Qyw2QkFBNkIsWUFBWSxFQUFFLE9BQU8saUJBQWlCLG1CQUFtQix1QkFBdUIsNEVBQTRFLEVBQUUsRUFBRSx5QkFBeUIsZUFBZSxFQUFFOztBQUU5USxhQUFhLG1CQUFPLENBQUMsdUVBQVM7O0FBRTlCOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLCtFQUFhOztBQUV0Qzs7QUFFQSxZQUFZLG1CQUFPLENBQUMscUVBQVE7O0FBRTVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLE9BQU87QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkI7QUFDN0I7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSwrQkFBK0I7O0FBRS9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBFQUEwRTs7QUFFMUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBFQUEwRTs7QUFFMUU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFOztBQUU5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7OztBQ2xUekQ7QUFDYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7O0FDZDVDOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1osWUFBWTtBQUNaLGNBQWM7QUFDZCxjQUFjO0FBQ2QsY0FBYztBQUNkLGNBQWM7QUFDZDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUMsU0FBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7O0FDM0h6RDtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsK0ZBQStCOzs7Ozs7Ozs7Ozs7QUNGeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxNQUFNLEtBQTBCOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLFlBQVk7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRixvQkFBb0I7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxrQkFBa0Isa0NBQWtDO0FBQ3BELEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFNBQVM7QUFDbEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTLFlBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixJQUFJOztBQUVwQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0MsSUFBSTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLHlCQUF5QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRLDZCQUE2QjtBQUNoRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCLGFBQWEsdUJBQXVCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdDQUFnQyxNQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGVBQWU7O0FBRWYsU0FBUzs7QUFFVDtBQUNBLFFBQVEsaUNBQWlDO0FBQ3pDLFFBQVEsb0JBQW9CO0FBQzVCLFFBQVEsc0NBQXNDO0FBQzlDLFFBQVE7QUFDUixFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYSxFQUFFO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSw0REFBNEQ7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEOztBQUU3RDtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0VBQWdFOztBQUVoRTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7O0FBRTdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLFVBQVU7QUFDM0Usc0NBQXNDLDJCQUEyQjtBQUNqRTtBQUNBLGdDQUFnQyxNQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFVBQVU7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsVUFBVSxjQUFjO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBOztBQUVBO0FBQ0EsWUFBWSx1RUFBdUU7QUFDbkY7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLDJEQUEyRDs7QUFFM0Q7QUFDQTtBQUNBLG9GQUFvRjs7QUFFcEY7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxTQUFTO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLFNBQVM7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUgsUUFBUSxTQUFTO0FBQ2pCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxpREFBaUQ7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQsVUFBVSx3Q0FBd0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7QUFFQSxDQUFDOzs7O0FBSUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUEsUUFBUSxHQUFHO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7Ozs7QUFJQTs7QUFFQTs7QUFFQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUEsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxPQUFPO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLE9BQU87QUFDakIsMEJBQTBCLHdCQUF3Qjs7QUFFbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsMENBQTBDO0FBQzFDLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjs7QUFFbkI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVSxjQUFjO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsd0NBQXdDLHNDQUFzQztBQUM5RSxvQ0FBb0MsdUNBQXVDO0FBQzNFLG9DQUFvQyxzQ0FBc0M7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixPQUFPO0FBQ1A7QUFDQSxNQUFNO0FBQ04sS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTs7QUFFVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQztBQUNwQyxxQ0FBcUM7QUFDckMsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7Ozs7O0FBS0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVSxTQUFTO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsYUFBYTtBQUNwQyxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixTQUFTO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBOzs7QUFHQTs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSxnQkFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEOztBQUVBOztBQUVBOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxFQUFFO0FBQ0Y7O0FBRUEsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsT0FBTztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLE9BQU87QUFDZjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxnQkFBZ0I7QUFDbEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVc7O0FBRVg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEOztBQUVBO0FBQ0E7O0FBRUEsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsK0RBQStEO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxjQUFjOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHVDQUF1QztBQUNqRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsdURBQXVEO0FBQzlFOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLCtDQUErQztBQUNwRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUMsY0FBYztBQUNuRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQsY0FBYyxxQ0FBcUM7QUFDbkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLE9BQU87QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7O0FBRTlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsT0FBTztBQUNqQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLCtCQUErQjtBQUN2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsdUNBQXVDLE9BQU87QUFDOUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDLE9BQU87QUFDL0M7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLHFDQUFxQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBLFNBQVMsOEJBQThCO0FBQ3ZDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxZQUFZLE9BQU87QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFdBQVc7QUFDcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7O0FBSUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQyxjQUFjLFdBQVc7QUFDeEUsbUJBQW1CLFVBQVU7QUFDN0I7QUFDQSxzQkFBc0IsY0FBYyxzQkFBc0IsZ0JBQWdCO0FBQzFFLGdCQUFnQixXQUFXLFlBQVk7QUFDdkMsY0FBYztBQUNkOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGLENBQUM7OztBQUdEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrREFBK0Q7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxPQUFPOztBQUVmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBLFVBQVUsT0FBTztBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFdBQVcsU0FBUztBQUNwQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBLFFBQVEsT0FBTztBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnQkFBZ0I7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGlEQUFpRCwwQkFBMEI7QUFDM0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLGdCQUFnQjtBQUMxQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBOztBQUVBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUEsUUFBUSxnQkFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLGdCQUFnQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSxpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlEQUFpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0IsU0FBUztBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsU0FBUztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsa0JBQWtCO0FBQzVCLFdBQVcsa0JBQWtCO0FBQzdCLGNBQWM7QUFDZCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLFFBQVEsbUJBQW1CO0FBQzNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDO0FBQ0E7O0FBRUEsSUFBSTtBQUNKOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLFdBQVcsU0FBUztBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDs7O0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxLQUFLO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQ0FBcUM7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLEtBQUs7QUFDTDs7QUFFQSxXQUFXO0FBQ1gsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCLGdEQUFnRDtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBLHNCQUFzQjtBQUN0QiwyQkFBMkI7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLFdBQVcseUJBQXlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLGFBQWEsdUNBQXVDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDs7QUFFQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EscURBQXFEO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQjs7QUFFbkI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQSxjQUFjLHNEQUFzRDtBQUNwRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBLGNBQWMsbUNBQW1DO0FBQ2pELGVBQWUsNkRBQTZEO0FBQzVFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFO0FBQ0YsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLLElBQTBDO0FBQy9DLENBQUMsaUNBQWtCLEVBQUUsbUNBQUU7QUFDdkI7QUFDQSxFQUFFO0FBQUEsb0dBQUU7QUFDSjs7Ozs7QUFLQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7O0FDcjJVRCw2RUFBK0IsbUJBQU8sQ0FBQywyREFBZSxFOzs7Ozs7Ozs7Ozs7QUNBdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsTUFBTTtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQyw4QkFBOEI7QUFDbEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLG9CQUFvQjtBQUM5QjtBQUNBOztBQUVBO0FBQ0EsVUFBVSxVQUFVO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixZQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0Isc0JBQXNCO0FBQ3JEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkIsUUFBUTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUM3U0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVTs7Ozs7Ozs7Ozs7O0FDdkx0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUM7Ozs7Ozs7Ozs7OztBQ25CQSx3Qzs7Ozs7Ozs7Ozs7QUNBQSx3Qzs7Ozs7Ozs7Ozs7QUNBQSx3Qzs7Ozs7Ozs7Ozs7QUNBQSx5Qzs7Ozs7Ozs7Ozs7QUNBQSwwQzs7Ozs7Ozs7Ozs7O0FDQUEseUNBQWE7O0FBRWIsT0FBTyxNQUFNLEdBQUcsbUJBQU8sQ0FBQyxxQ0FBWTtBQUNwQyxxQkFBcUIsbUJBQU8sQ0FBQyxxREFBb0I7QUFDakQscUJBQXFCLG1CQUFPLENBQUMscURBQW9CO0FBQ2pELHVCQUF1QixtQkFBTyxDQUFDLHlEQUFzQjs7QUFFckQ7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0JBQW9CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE9BQU87QUFDNUI7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFPLENBQUMscURBQXVCO0FBQ3REO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQyxxREFBdUI7QUFDdEQ7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLDJEQUEwQjtBQUN6RDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLHFEQUF1QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLGlEQUFxQjtBQUNwRDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsdUJBQXVCLG1CQUFPLENBQUMsNkRBQTJCO0FBQzFEO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQywrREFBNEI7QUFDM0Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLDZEQUEyQjtBQUMxRDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsdUJBQXVCLG1CQUFPLENBQUMsK0RBQTRCO0FBQzNEO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQyxxRUFBK0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZUFBZTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsNkRBQTJCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaUJBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQ0FBbUM7QUFDMUQ7QUFDQTtBQUNBLHVCQUF1QixpQ0FBaUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUM1a0JBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUY7QUFDckY7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQ3JJQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ0pBLGVBQWUsbUJBQU8sQ0FBQyx1Q0FBYTtBQUNwQyxtQkFBbUIsbUJBQU8sQ0FBQyxnRUFBb0I7O0FBRS9DOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsOENBQThDLEVBQUU7QUFDaEQsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDbEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFOztBQUVoRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbURBQW1ELHFCQUFxQixZQUFZLEVBQUUsRUFBRTs7QUFFeEY7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLHFEQUFxRDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLDJDQUEyQyxJQUFJO0FBQy9DOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpR0FBaUcsSUFBSTtBQUNyRzs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtREFBbUQ7QUFDbkQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLGtEQUFrRCxlQUFlO0FBQ2pFO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsQ0FBQzs7QUFFRCxDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsNkNBQTZDLFVBQVUsR0FBRyx3Q0FBd0M7QUFDbEc7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGO0FBQ3hGO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLDhCQUE4Qjs7QUFFOUI7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLCtCQUErQjs7QUFFL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSx5Q0FBeUMsZ0NBQWdDO0FBQ3pFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrREFBK0Q7O0FBRS9EO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7O0FBRUE7QUFDQSx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLFdBQVc7QUFDWDs7QUFFQSx1Q0FBdUMsWUFBWTtBQUNuRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEMsd0NBQXdDO0FBQ3hDLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELENBQUM7QUFDRDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUwsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdDQUFnQztBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEMsT0FBTztBQUNQLGlCQUFpQixtQ0FBbUM7QUFDcEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBLENBQUM7O0FBRUQsQ0FBQztBQUNEOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0EsK0NBQStDLCtDQUErQzs7QUFFOUY7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsYUFBYTtBQUNoRTtBQUNBO0FBQ0Esa0RBQWtELGFBQWE7QUFDL0Q7QUFDQTtBQUNBLGlEQUFpRCxhQUFhO0FBQzlEOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsWUFBWTtBQUNuQyxvQ0FBb0MsY0FBYztBQUNsRCxTQUFTO0FBQ1QsdUJBQXVCLGFBQWE7QUFDcEMsb0NBQW9DLGVBQWU7QUFDbkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQiwyQ0FBMkM7QUFDdEUsMENBQTBDLHdDQUF3QztBQUNsRixhQUFhO0FBQ2IsMkJBQTJCLDRDQUE0QztBQUN2RSwwQ0FBMEMseUNBQXlDO0FBQ25GOztBQUVBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSx1QkFBdUIsMkNBQTJDO0FBQ2xFLHNDQUFzQyx3Q0FBd0M7QUFDOUUsU0FBUztBQUNULHVCQUF1Qiw0Q0FBNEM7QUFDbkUsc0NBQXNDLHlDQUF5QztBQUMvRTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0EsbURBQW1ELHNDQUFzQyxpQkFBaUI7QUFDMUcsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7Ozs7QUM5Z0VEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdLQUF3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0Y7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4SEFBOEg7QUFDOUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0Y7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsMkRBQTJEO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUhBQXFIO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQzs7Ozs7Ozs7Ozs7O0FDajdnQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUFhLG1CQUFPLENBQUMscURBQU07O0FBRTNCLElBQUksSUFBcUM7QUFDekM7QUFDQTs7QUFFbUM7QUFDSjtBQUNWO0FBQ1U7QUFDRDs7QUFFTTtBQUNMO0FBQ0g7QUFDRjtBQUNNO0FBQ0o7QUFDVTtBQUNWO0FBQ0k7QUFDQztBQUNEOztBQUVIO0FBQ0E7QUFDQTtBQUNDO0FBQ0M7Ozs7Ozs7Ozs7OztBQzVCL0IsdUM7Ozs7Ozs7Ozs7O0FDQUEsaUJBQWlCLG1CQUFPLENBQUMsc0ZBQTBDO0FBQ25FLHlCQUF5Qix1REFBdUQ7QUFDaEYsaUVBQWlFO0FBQ2pFOztBQUVBLDRDQUE0QyxtQkFBTyxDQUFDLHdDQUFZLFVBQVUsc0hBQXNIO0FBQ2hNLENBQUM7QUFDRDs7QUFFQTtBQUNBLHlGQUF5RixVQUFVLHVCQUF1Qix5RUFBeUU7QUFDbk07QUFDQSxDQUFDLGtDQUFrQyxFOzs7Ozs7Ozs7OztBQ1puQyxpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBMEM7QUFDbkUseUJBQXlCLHVEQUF1RDtBQUNoRixpRUFBaUU7QUFDakUsdU1BQXVNLG9CQUFvQixtK0JBQW0rQixvQkFBb0Isb2pCQUFvakIsZUFBZTtBQUNyeEQsQ0FBQyxnQkFBZ0IsRTs7Ozs7Ozs7Ozs7QUNKakIsaUJBQWlCLG1CQUFPLENBQUMsc0ZBQTBDO0FBQ25FLHlCQUF5Qix1REFBdUQ7QUFDaEYsaUVBQWlFO0FBQ2pFLHM4QkFBczhCO0FBQ3Q4QixDQUFDLGdCQUFnQixFOzs7Ozs7Ozs7OztBQ0pqQixpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBMEM7QUFDbkUseUJBQXlCLHVEQUF1RDtBQUNoRixpRUFBaUU7QUFDakUsZ0dBQWdHLHFQQUFxUCxzSEFBc0gsZ1BBQWdQO0FBQzNyQixDQUFDLGdCQUFnQixFOzs7Ozs7Ozs7OztBQ0pqQixpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBMEM7QUFDbkUseUJBQXlCLHVEQUF1RDtBQUNoRixpRUFBaUU7QUFDakU7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSxxUUFBcVEsR0FBRyw0QkFBNEIsYUFBYTtBQUNqVDtBQUNBLENBQUM7QUFDRCxxRkFBcUY7O0FBRXJGO0FBQ0EsOElBQThJLHlCQUF5QixhQUFhO0FBQ3BMLFVBQVU7QUFDViw4S0FBOEssdUJBQXVCLGFBQWE7QUFDbE47QUFDQSxDQUFDO0FBQ0QscUZBQXFGOztBQUVyRjtBQUNBLGtKQUFrSix5QkFBeUIsYUFBYTtBQUN4TCxVQUFVO0FBQ1Ysc0xBQXNMLDJCQUEyQixhQUFhO0FBQzlOO0FBQ0EsQ0FBQztBQUNELHFGQUFxRjs7QUFFckY7QUFDQSxxSkFBcUoseUJBQXlCLGFBQWE7QUFDM0wsVUFBVTtBQUNWLDRMQUE0TCw4QkFBOEIsYUFBYTtBQUN2TztBQUNBLHVGQUF1RixxQkFBcUIsMEVBQTBFO0FBQ3RMLDRGQUE0RixxQkFBcUIsMEVBQTBFO0FBQzNMLDJJQUEySSx5QkFBeUIsMEVBQTBFO0FBQzlPO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EsdVFBQXVRLEdBQUcsNkJBQTZCLGFBQWE7QUFDcFQsQ0FBQztBQUNELDZFQUE2RTs7QUFFN0U7QUFDQSw4S0FBOEssMkJBQTJCLGFBQWE7QUFDdE47QUFDQSxzS0FBc0ssdUJBQXVCLGFBQWE7QUFDMU07QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSx5UEFBeVAsR0FBRyw4QkFBOEIsYUFBYTtBQUN2UztBQUNBLENBQUM7QUFDRCxxRkFBcUY7O0FBRXJGO0FBQ0EsMklBQTJJLHlCQUF5QiwwRUFBMEU7QUFDOU8sMklBQTJJLHlCQUF5QiwwRUFBMEU7QUFDOU8sMklBQTJJLHlCQUF5QiwwRUFBMEU7QUFDOU87QUFDQSw4TEFBOEwsdUJBQXVCLGFBQWE7QUFDbE87QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSwyT0FBMk8sR0FBRyx1QkFBdUIsYUFBYTtBQUNsUjtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLHlQQUF5UCxHQUFHLDhCQUE4QixhQUFhO0FBQ3ZTO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EseVBBQXlQLEdBQUcsOEJBQThCLGFBQWE7QUFDdlM7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSw2T0FBNk8sR0FBRyx3QkFBd0IsYUFBYTtBQUNyUjtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLHlQQUF5UCxHQUFHLDhCQUE4QixhQUFhO0FBQ3ZTO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EseU9BQXlPLEdBQUcsc0JBQXNCLGFBQWE7QUFDL1E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSxxUEFBcVAsR0FBRyw0QkFBNEIsYUFBYTtBQUNqUztBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLGlQQUFpUCxHQUFHLDBCQUEwQixhQUFhO0FBQzNSO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EsdVBBQXVQLEdBQUcsNkJBQTZCLGFBQWE7QUFDcFM7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSwrT0FBK08sR0FBRyx5QkFBeUIsYUFBYTtBQUN4UjtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLHlQQUF5UCxHQUFHLDhCQUE4QixhQUFhO0FBQ3ZTO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EsNk9BQTZPLEdBQUcsd0JBQXdCLGFBQWE7QUFDclI7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSx5T0FBeU8sR0FBRyxzQkFBc0IsYUFBYTtBQUMvUTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRCxxRkFBcUY7O0FBRXJGO0FBQ0EsdUZBQXVGLHFCQUFxQix5RUFBeUU7QUFDckw7QUFDQSw2TUFBNk0sdUJBQXVCLGFBQWE7QUFDalA7QUFDQSx5RkFBeUYscUJBQXFCLHlFQUF5RTtBQUN2TDtBQUNBLG9GQUFvRixxQkFBcUIseUVBQXlFO0FBQ2xMLHdGQUF3RixxQkFBcUIseUVBQXlFO0FBQ3RMLDJGQUEyRixxQkFBcUIseUVBQXlFO0FBQ3pMLHdGQUF3RixxQkFBcUIsMEVBQTBFO0FBQ3ZMO0FBQ0EsMkZBQTJGLHFCQUFxQiwwRUFBMEU7QUFDMUwsb0ZBQW9GLHFCQUFxQiwwRUFBMEU7QUFDbkwsb0ZBQW9GLHFCQUFxQiwwRUFBMEU7QUFDbkwsMkZBQTJGLHFCQUFxQiwwRUFBMEU7QUFDMUwsMkZBQTJGLHFCQUFxQiwwRUFBMEU7QUFDMUwscUZBQXFGLHFCQUFxQiwwRUFBMEU7QUFDcEwsMkZBQTJGLHFCQUFxQiwwRUFBMEU7QUFDMUwsbUZBQW1GLHFCQUFxQiwwRUFBMEU7QUFDbEwseUZBQXlGLHFCQUFxQiwwRUFBMEU7QUFDeEwsdUZBQXVGLHFCQUFxQiwwRUFBMEU7QUFDdEwsMEZBQTBGLHFCQUFxQiwwRUFBMEU7QUFDekwsc0ZBQXNGLHFCQUFxQiwwRUFBMEU7QUFDckwsMkZBQTJGLHFCQUFxQiwwRUFBMEU7QUFDMUwscUZBQXFGLHFCQUFxQiwwRUFBMEU7QUFDcEwsbUZBQW1GLHFCQUFxQiwwRUFBMEU7QUFDbEwseUZBQXlGLHFCQUFxQiwwRUFBMEU7QUFDeEw7QUFDQSxvRkFBb0YscUJBQXFCLDBFQUEwRTtBQUNuTCxzRUFBc0U7QUFDdEUsQ0FBQyxnQkFBZ0IsRTs7Ozs7Ozs7Ozs7QUNqTWpCLGlCQUFpQixtQkFBTyxDQUFDLHNGQUEwQztBQUNuRSx5QkFBeUIsdURBQXVEO0FBQ2hGLGlFQUFpRTtBQUNqRTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLDJQQUEyUCxHQUFHLHVCQUF1QixhQUFhO0FBQ2xTO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EsMlBBQTJQLEdBQUcsdUJBQXVCLGFBQWE7QUFDbFM7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSwyUEFBMlAsR0FBRyx1QkFBdUIsYUFBYTtBQUNsUztBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLDJQQUEyUCxHQUFHLHVCQUF1QixhQUFhO0FBQ2xTO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EsMlBBQTJQLEdBQUcsdUJBQXVCLGFBQWE7QUFDbFM7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSwyUEFBMlAsR0FBRyx1QkFBdUIsYUFBYTtBQUNsUztBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLG1RQUFtUSxHQUFHLDJCQUEyQixhQUFhO0FBQzlTLENBQUM7QUFDRDs7QUFFQTtBQUNBLHVRQUF1USxHQUFHLDZCQUE2QixhQUFhO0FBQ3BUO0FBQ0EsQ0FBQztBQUNELHFGQUFxRjs7QUFFckY7QUFDQSx1RkFBdUYscUJBQXFCLHdGQUF3RjtBQUNwTSx1RkFBdUYscUJBQXFCLHlFQUF5RTtBQUNyTCw0RkFBNEYscUJBQXFCLHlFQUF5RTtBQUMxTDtBQUNBLHNLQUFzSyx1QkFBdUIsYUFBYTtBQUMxTTtBQUNBLHNLQUFzSyx1QkFBdUIsYUFBYTtBQUMxTTtBQUNBLHNLQUFzSyx1QkFBdUIsYUFBYTtBQUMxTTtBQUNBLHNLQUFzSyx1QkFBdUIsYUFBYTtBQUMxTTtBQUNBLG9MQUFvTCw4QkFBOEIsYUFBYTtBQUMvTix1RkFBdUYscUJBQXFCLHlFQUF5RTtBQUNyTCw0RkFBNEYscUJBQXFCLDBFQUEwRTtBQUMzTDtBQUNBLDJJQUEySSx5QkFBeUIsMEVBQTBFO0FBQzlPLDJJQUEySSx5QkFBeUIsMEVBQTBFO0FBQzlPLDJJQUEySSx5QkFBeUIsMEVBQTBFO0FBQzlPO0FBQ0EseUZBQXlGLHFCQUFxQiwwRUFBMEU7QUFDeEw7QUFDQSx1RkFBdUYscUJBQXFCLDBGQUEwRjtBQUN0TTtBQUNBLHNLQUFzSyx1QkFBdUIsYUFBYTtBQUMxTTtBQUNBLHdGQUF3RixxQkFBcUIsMEVBQTBFO0FBQ3ZMO0FBQ0EsMklBQTJJLHlCQUF5QiwwRUFBMEU7QUFDOU87QUFDQSw4S0FBOEssMkJBQTJCLGFBQWE7QUFDdE47QUFDQSxDQUFDLGdCQUFnQixFOzs7Ozs7Ozs7OztBQ2pHakIsaUJBQWlCLG1CQUFPLENBQUMseUZBQTZDO0FBQ3RFLHlCQUF5Qix1REFBdUQ7QUFDaEYsaUVBQWlFO0FBQ2pFOztBQUVBLGlzQ0FBaXNDO0FBQ2pzQyw2T0FBNk8sR0FBRywwQkFBMEIsYUFBYTtBQUN2UjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseTdDQUF5N0MsMkhBQTJIO0FBQ3BqRCxDQUFDLGdCQUFnQixFOzs7Ozs7Ozs7OztBQ2hCakIsaUJBQWlCLG1CQUFPLENBQUMseUZBQTZDO0FBQ3RFLHlCQUF5Qix1REFBdUQ7QUFDaEYsaUVBQWlFO0FBQ2pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRiw2RkFBNkYscUJBQXFCLHdGQUF3RjtBQUNwUztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNELDZFQUE2RTs7QUFFN0U7QUFDQTtBQUNBLHNJQUFzSSxxQkFBcUIsd0ZBQXdGO0FBQ25QO0FBQ0EsdUZBQXVGLHVCQUF1Qix5RUFBeUU7QUFDdkw7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHlJQUF5STs7QUFFekk7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RkFBNEYscUJBQXFCLDBFQUEwRTtBQUMzTDtBQUNBLGlFQUFpRSx5QkFBeUIsMEVBQTBFO0FBQ3BLO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNELDZFQUE2RTs7QUFFN0U7QUFDQSxrREFBa0QsdUJBQXVCLHlFQUF5RTtBQUNsSiw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHVCQUF1Qix5RUFBeUU7QUFDbEosb0VBQW9FLDJIQUEySDtBQUMvTCxDQUFDLGdCQUFnQixFOzs7Ozs7Ozs7OztBQ2hFakIsaUJBQWlCLG1CQUFPLENBQUMseUZBQTZDO0FBQ3RFLHlCQUF5Qix1REFBdUQ7QUFDaEYsaUVBQWlFO0FBQ2pFOztBQUVBLDZHQUE2RyxpRkFBaUYseUVBQXlFO0FBQ3ZRO0FBQ0E7QUFDQTtBQUNBLHdLQUF3SztBQUN4SyxDQUFDLGdCQUFnQixFOzs7Ozs7Ozs7OztBQ1ZqQixpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBMEM7QUFDbkUseUJBQXlCLHVEQUF1RDtBQUNoRixpRUFBaUU7QUFDakU7QUFDQSxDQUFDLGdCQUFnQixFOzs7Ozs7Ozs7OztBQ0pqQixpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBMEM7QUFDbkUseUJBQXlCLHVEQUF1RDtBQUNoRixpRUFBaUU7QUFDakUseU9BQXlPO0FBQ3pPLENBQUMsZ0JBQWdCLEU7Ozs7Ozs7Ozs7O0FDSmpCLGlCQUFpQixtQkFBTyxDQUFDLHNGQUEwQztBQUNuRSx5QkFBeUIsdURBQXVEO0FBQ2hGLGlFQUFpRTtBQUNqRSw2RUFBNkU7O0FBRTdFO0FBQ0Esc0xBQXNMLCtCQUErQixhQUFhO0FBQ2xPO0FBQ0EsMExBQTBMLGlDQUFpQyxhQUFhO0FBQ3hPO0FBQ0EsQ0FBQyxnQkFBZ0IsRSIsImZpbGUiOiJqcy9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG52YXIgX2hhbmRsZWJhcnNCYXNlID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL2Jhc2UnKTtcblxudmFyIGJhc2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGFuZGxlYmFyc0Jhc2UpO1xuXG4vLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXG4vLyAoVGhpcyBpcyBkb25lIHRvIGVhc2lseSBzaGFyZSBjb2RlIGJldHdlZW4gY29tbW9uanMgYW5kIGJyb3dzZSBlbnZzKVxuXG52YXIgX2hhbmRsZWJhcnNTYWZlU3RyaW5nID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nJyk7XG5cbnZhciBfaGFuZGxlYmFyc1NhZmVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc1NhZmVTdHJpbmcpO1xuXG52YXIgX2hhbmRsZWJhcnNFeGNlcHRpb24gPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMvZXhjZXB0aW9uJyk7XG5cbnZhciBfaGFuZGxlYmFyc0V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzRXhjZXB0aW9uKTtcblxudmFyIF9oYW5kbGViYXJzVXRpbHMgPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMvdXRpbHMnKTtcblxudmFyIFV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2hhbmRsZWJhcnNVdGlscyk7XG5cbnZhciBfaGFuZGxlYmFyc1J1bnRpbWUgPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMvcnVudGltZScpO1xuXG52YXIgcnVudGltZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oYW5kbGViYXJzUnVudGltZSk7XG5cbnZhciBfaGFuZGxlYmFyc05vQ29uZmxpY3QgPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnKTtcblxudmFyIF9oYW5kbGViYXJzTm9Db25mbGljdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzTm9Db25mbGljdCk7XG5cbi8vIEZvciBjb21wYXRpYmlsaXR5IGFuZCB1c2FnZSBvdXRzaWRlIG9mIG1vZHVsZSBzeXN0ZW1zLCBtYWtlIHRoZSBIYW5kbGViYXJzIG9iamVjdCBhIG5hbWVzcGFjZVxuZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgaGIgPSBuZXcgYmFzZS5IYW5kbGViYXJzRW52aXJvbm1lbnQoKTtcblxuICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuICBoYi5TYWZlU3RyaW5nID0gX2hhbmRsZWJhcnNTYWZlU3RyaW5nMlsnZGVmYXVsdCddO1xuICBoYi5FeGNlcHRpb24gPSBfaGFuZGxlYmFyc0V4Y2VwdGlvbjJbJ2RlZmF1bHQnXTtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChzcGVjKSB7XG4gICAgcmV0dXJuIHJ1bnRpbWUudGVtcGxhdGUoc3BlYywgaGIpO1xuICB9O1xuXG4gIHJldHVybiBoYjtcbn1cblxudmFyIGluc3QgPSBjcmVhdGUoKTtcbmluc3QuY3JlYXRlID0gY3JlYXRlO1xuXG5faGFuZGxlYmFyc05vQ29uZmxpY3QyWydkZWZhdWx0J10oaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluc3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMbkoxYm5ScGJXVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T0VKQlFYTkNMRzFDUVVGdFFqczdTVUZCTjBJc1NVRkJTVHM3T3pzN2IwTkJTVThzTUVKQlFUQkNPenM3TzIxRFFVTXpRaXgzUWtGQmQwSTdPenM3SzBKQlEzWkNMRzlDUVVGdlFqczdTVUZCTDBJc1MwRkJTenM3YVVOQlExRXNjMEpCUVhOQ096dEpRVUZ1UXl4UFFVRlBPenR2UTBGRlNTd3dRa0ZCTUVJN096czdPMEZCUjJwRUxGTkJRVk1zVFVGQlRTeEhRVUZITzBGQlEyaENMRTFCUVVrc1JVRkJSU3hIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03TzBGQlJURkRMRTlCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTNaQ0xFbEJRVVVzUTBGQlF5eFZRVUZWTEc5RFFVRmhMRU5CUVVNN1FVRkRNMElzU1VGQlJTeERRVUZETEZOQlFWTXNiVU5CUVZrc1EwRkJRenRCUVVONlFpeEpRVUZGTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVOcVFpeEpRVUZGTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRE96dEJRVVUzUXl4SlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlF6dEJRVU5vUWl4SlFVRkZMRU5CUVVNc1VVRkJVU3hIUVVGSExGVkJRVk1zU1VGQlNTeEZRVUZGTzBGQlF6TkNMRmRCUVU4c1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1IwRkRia01zUTBGQlF6czdRVUZGUml4VFFVRlBMRVZCUVVVc1EwRkJRenREUVVOWU96dEJRVVZFTEVsQlFVa3NTVUZCU1N4SFFVRkhMRTFCUVUwc1JVRkJSU3hEUVVGRE8wRkJRM0JDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE96dEJRVVZ5UWl4clEwRkJWeXhKUVVGSkxFTkJRVU1zUTBGQlF6czdRVUZGYWtJc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXpzN2NVSkJSVklzU1VGQlNTSXNJbVpwYkdVaU9pSm9ZVzVrYkdWaVlYSnpMbkoxYm5ScGJXVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnS2lCaGN5QmlZWE5sSUdaeWIyMGdKeTR2YUdGdVpHeGxZbUZ5Y3k5aVlYTmxKenRjYmx4dUx5OGdSV0ZqYUNCdlppQjBhR1Z6WlNCaGRXZHRaVzUwSUhSb1pTQklZVzVrYkdWaVlYSnpJRzlpYW1WamRDNGdUbThnYm1WbFpDQjBieUJ6WlhSMWNDQm9aWEpsTGx4dUx5OGdLRlJvYVhNZ2FYTWdaRzl1WlNCMGJ5QmxZWE5wYkhrZ2MyaGhjbVVnWTI5a1pTQmlaWFIzWldWdUlHTnZiVzF2Ym1weklHRnVaQ0JpY205M2MyVWdaVzUyY3lsY2JtbHRjRzl5ZENCVFlXWmxVM1J5YVc1bklHWnliMjBnSnk0dmFHRnVaR3hsWW1GeWN5OXpZV1psTFhOMGNtbHVaeWM3WEc1cGJYQnZjblFnUlhoalpYQjBhVzl1SUdaeWIyMGdKeTR2YUdGdVpHeGxZbUZ5Y3k5bGVHTmxjSFJwYjI0bk8xeHVhVzF3YjNKMElDb2dZWE1nVlhScGJITWdabkp2YlNBbkxpOW9ZVzVrYkdWaVlYSnpMM1YwYVd4ekp6dGNibWx0Y0c5eWRDQXFJR0Z6SUhKMWJuUnBiV1VnWm5KdmJTQW5MaTlvWVc1a2JHVmlZWEp6TDNKMWJuUnBiV1VuTzF4dVhHNXBiWEJ2Y25RZ2JtOURiMjVtYkdsamRDQm1jbTl0SUNjdUwyaGhibVJzWldKaGNuTXZibTh0WTI5dVpteHBZM1FuTzF4dVhHNHZMeUJHYjNJZ1kyOXRjR0YwYVdKcGJHbDBlU0JoYm1RZ2RYTmhaMlVnYjNWMGMybGtaU0J2WmlCdGIyUjFiR1VnYzNsemRHVnRjeXdnYldGclpTQjBhR1VnU0dGdVpHeGxZbUZ5Y3lCdlltcGxZM1FnWVNCdVlXMWxjM0JoWTJWY2JtWjFibU4wYVc5dUlHTnlaV0YwWlNncElIdGNiaUFnYkdWMElHaGlJRDBnYm1WM0lHSmhjMlV1U0dGdVpHeGxZbUZ5YzBWdWRtbHliMjV0Wlc1MEtDazdYRzVjYmlBZ1ZYUnBiSE11WlhoMFpXNWtLR2hpTENCaVlYTmxLVHRjYmlBZ2FHSXVVMkZtWlZOMGNtbHVaeUE5SUZOaFptVlRkSEpwYm1jN1hHNGdJR2hpTGtWNFkyVndkR2x2YmlBOUlFVjRZMlZ3ZEdsdmJqdGNiaUFnYUdJdVZYUnBiSE1nUFNCVmRHbHNjenRjYmlBZ2FHSXVaWE5qWVhCbFJYaHdjbVZ6YzJsdmJpQTlJRlYwYVd4ekxtVnpZMkZ3WlVWNGNISmxjM05wYjI0N1hHNWNiaUFnYUdJdVZrMGdQU0J5ZFc1MGFXMWxPMXh1SUNCb1lpNTBaVzF3YkdGMFpTQTlJR1oxYm1OMGFXOXVLSE53WldNcElIdGNiaUFnSUNCeVpYUjFjbTRnY25WdWRHbHRaUzUwWlcxd2JHRjBaU2h6Y0dWakxDQm9ZaWs3WEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUdoaU8xeHVmVnh1WEc1c1pYUWdhVzV6ZENBOUlHTnlaV0YwWlNncE8xeHVhVzV6ZEM1amNtVmhkR1VnUFNCamNtVmhkR1U3WEc1Y2JtNXZRMjl1Wm14cFkzUW9hVzV6ZENrN1hHNWNibWx1YzNSYkoyUmxabUYxYkhRblhTQTlJR2x1YzNRN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHbHVjM1E3WEc0aVhYMD1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuSGFuZGxlYmFyc0Vudmlyb25tZW50ID0gSGFuZGxlYmFyc0Vudmlyb25tZW50O1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgX2V4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG52YXIgX2RlY29yYXRvcnMgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMnKTtcblxudmFyIF9sb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlcicpO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG52YXIgVkVSU0lPTiA9ICc0LjEuMic7XG5leHBvcnRzLlZFUlNJT04gPSBWRVJTSU9OO1xudmFyIENPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0cy5DT01QSUxFUl9SRVZJU0lPTiA9IENPTVBJTEVSX1JFVklTSU9OO1xudmFyIFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAnXG59O1xuXG5leHBvcnRzLlJFVklTSU9OX0NIQU5HRVMgPSBSRVZJU0lPTl9DSEFOR0VTO1xudmFyIG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuZnVuY3Rpb24gSGFuZGxlYmFyc0Vudmlyb25tZW50KGhlbHBlcnMsIHBhcnRpYWxzLCBkZWNvcmF0b3JzKSB7XG4gIHRoaXMuaGVscGVycyA9IGhlbHBlcnMgfHwge307XG4gIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcbiAgdGhpcy5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycyB8fCB7fTtcblxuICBfaGVscGVycy5yZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpO1xuICBfZGVjb3JhdG9ycy5yZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKHRoaXMpO1xufVxuXG5IYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG4gIGxvZ2dlcjogX2xvZ2dlcjJbJ2RlZmF1bHQnXSxcbiAgbG9nOiBfbG9nZ2VyMlsnZGVmYXVsdCddLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24gcmVnaXN0ZXJIZWxwZXIobmFtZSwgZm4pIHtcbiAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzJyk7XG4gICAgICB9XG4gICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMuaGVscGVycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVscGVyc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckhlbHBlcjogZnVuY3Rpb24gdW5yZWdpc3RlckhlbHBlcihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uIHJlZ2lzdGVyUGFydGlhbChuYW1lLCBwYXJ0aWFsKSB7XG4gICAgaWYgKF91dGlscy50b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGEgcGFydGlhbCBjYWxsZWQgXCInICsgbmFtZSArICdcIiBhcyB1bmRlZmluZWQnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uIHVucmVnaXN0ZXJQYXJ0aWFsKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gcmVnaXN0ZXJEZWNvcmF0b3IobmFtZSwgZm4pIHtcbiAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBkZWNvcmF0b3JzJyk7XG4gICAgICB9XG4gICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMuZGVjb3JhdG9ycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gdW5yZWdpc3RlckRlY29yYXRvcihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfVxufTtcblxudmFyIGxvZyA9IF9sb2dnZXIyWydkZWZhdWx0J10ubG9nO1xuXG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuY3JlYXRlRnJhbWUgPSBfdXRpbHMuY3JlYXRlRnJhbWU7XG5leHBvcnRzLmxvZ2dlciA9IF9sb2dnZXIyWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwySmhjMlV1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3Y1VKQlFUUkRMRk5CUVZNN08zbENRVU12UWl4aFFVRmhPenM3TzNWQ1FVTkZMRmRCUVZjN096QkNRVU5TTEdOQlFXTTdPM05DUVVOdVF5eFZRVUZWT3pzN08wRkJSWFJDTEVsQlFVMHNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJRenM3UVVGRGVFSXNTVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eERRVUZETEVOQlFVTTdPenRCUVVVMVFpeEpRVUZOTEdkQ1FVRm5RaXhIUVVGSE8wRkJRemxDTEVkQlFVTXNSVUZCUlN4aFFVRmhPMEZCUTJoQ0xFZEJRVU1zUlVGQlJTeGxRVUZsTzBGQlEyeENMRWRCUVVNc1JVRkJSU3hsUVVGbE8wRkJRMnhDTEVkQlFVTXNSVUZCUlN4VlFVRlZPMEZCUTJJc1IwRkJReXhGUVVGRkxHdENRVUZyUWp0QlFVTnlRaXhIUVVGRExFVkJRVVVzYVVKQlFXbENPMEZCUTNCQ0xFZEJRVU1zUlVGQlJTeFZRVUZWTzBOQlEyUXNRMEZCUXpzN08wRkJSVVlzU1VGQlRTeFZRVUZWTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU03TzBGQlJUbENMRk5CUVZNc2NVSkJRWEZDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hWUVVGVkxFVkJRVVU3UVVGRGJrVXNUVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUExFbEJRVWtzUlVGQlJTeERRVUZETzBGQlF6ZENMRTFCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVTeEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTXZRaXhOUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEZWQlFWVXNTVUZCU1N4RlFVRkZMRU5CUVVNN08wRkJSVzVETEd0RFFVRjFRaXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU0zUWl4M1EwRkJNRUlzU1VGQlNTeERRVUZETEVOQlFVTTdRMEZEYWtNN08wRkJSVVFzY1VKQlFYRkNMRU5CUVVNc1UwRkJVeXhIUVVGSE8wRkJRMmhETEdGQlFWY3NSVUZCUlN4eFFrRkJjVUk3TzBGQlJXeERMRkZCUVUwc2NVSkJRVkU3UVVGRFpDeExRVUZITEVWQlFVVXNiMEpCUVU4c1IwRkJSenM3UVVGRlppeG5Ra0ZCWXl4RlFVRkZMSGRDUVVGVExFbEJRVWtzUlVGQlJTeEZRVUZGTEVWQlFVVTdRVUZEYWtNc1VVRkJTU3huUWtGQlV5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1ZVRkJWU3hGUVVGRk8wRkJRM1JETEZWQlFVa3NSVUZCUlN4RlFVRkZPMEZCUVVVc1kwRkJUU3d5UWtGQll5eDVRMEZCZVVNc1EwRkJReXhEUVVGRE8wOUJRVVU3UVVGRE0wVXNiMEpCUVU4c1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTTFRaXhOUVVGTk8wRkJRMHdzVlVGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03UzBGRGVrSTdSMEZEUmp0QlFVTkVMR3RDUVVGblFpeEZRVUZGTERCQ1FVRlRMRWxCUVVrc1JVRkJSVHRCUVVNdlFpeFhRVUZQTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRE0wSTdPMEZCUlVRc2FVSkJRV1VzUlVGQlJTeDVRa0ZCVXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRM1pETEZGQlFVa3NaMEpCUVZNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEZWQlFWVXNSVUZCUlR0QlFVTjBReXh2UWtGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRemRDTEUxQlFVMDdRVUZEVEN4VlFVRkpMRTlCUVU4c1QwRkJUeXhMUVVGTExGZEJRVmNzUlVGQlJUdEJRVU5zUXl4alFVRk5MSGxGUVVFd1JDeEpRVUZKTEc5Q1FVRnBRaXhEUVVGRE8wOUJRM1pHTzBGQlEwUXNWVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTTdTMEZETDBJN1IwRkRSanRCUVVORUxHMUNRVUZwUWl4RlFVRkZMREpDUVVGVExFbEJRVWtzUlVGQlJUdEJRVU5vUXl4WFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdSMEZETlVJN08wRkJSVVFzYlVKQlFXbENMRVZCUVVVc01rSkJRVk1zU1VGQlNTeEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVTndReXhSUVVGSkxHZENRVUZUTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhWUVVGVkxFVkJRVVU3UVVGRGRFTXNWVUZCU1N4RlFVRkZMRVZCUVVVN1FVRkJSU3hqUVVGTkxESkNRVUZqTERSRFFVRTBReXhEUVVGRExFTkJRVU03VDBGQlJUdEJRVU01UlN4dlFrRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXk5Q0xFMUJRVTA3UVVGRFRDeFZRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dExRVU0xUWp0SFFVTkdPMEZCUTBRc2NVSkJRVzFDTEVWQlFVVXNOa0pCUVZNc1NVRkJTU3hGUVVGRk8wRkJRMnhETEZkQlFVOHNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEhRVU01UWp0RFFVTkdMRU5CUVVNN08wRkJSVXNzU1VGQlNTeEhRVUZITEVkQlFVY3NiMEpCUVU4c1IwRkJSeXhEUVVGRE96czdVVUZGY0VJc1YwRkJWenRSUVVGRkxFMUJRVTBpTENKbWFXeGxJam9pWW1GelpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3WTNKbFlYUmxSbkpoYldVc0lHVjRkR1Z1WkN3Z2RHOVRkSEpwYm1kOUlHWnliMjBnSnk0dmRYUnBiSE1uTzF4dWFXMXdiM0owSUVWNFkyVndkR2x2YmlCbWNtOXRJQ2N1TDJWNFkyVndkR2x2YmljN1hHNXBiWEJ2Y25RZ2UzSmxaMmx6ZEdWeVJHVm1ZWFZzZEVobGJIQmxjbk45SUdaeWIyMGdKeTR2YUdWc2NHVnljeWM3WEc1cGJYQnZjblFnZTNKbFoybHpkR1Z5UkdWbVlYVnNkRVJsWTI5eVlYUnZjbk45SUdaeWIyMGdKeTR2WkdWamIzSmhkRzl5Y3ljN1hHNXBiWEJ2Y25RZ2JHOW5aMlZ5SUdaeWIyMGdKeTR2Ykc5bloyVnlKenRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRlpGVWxOSlQwNGdQU0FuTkM0eExqSW5PMXh1Wlhod2IzSjBJR052Ym5OMElFTlBUVkJKVEVWU1gxSkZWa2xUU1U5T0lEMGdOenRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRkpGVmtsVFNVOU9YME5JUVU1SFJWTWdQU0I3WEc0Z0lERTZJQ2M4UFNBeExqQXVjbU11TWljc0lDOHZJREV1TUM1eVl5NHlJR2x6SUdGamRIVmhiR3g1SUhKbGRqSWdZblYwSUdSdlpYTnVKM1FnY21Wd2IzSjBJR2wwWEc0Z0lESTZJQ2M5UFNBeExqQXVNQzF5WXk0ekp5eGNiaUFnTXpvZ0p6MDlJREV1TUM0d0xYSmpMalFuTEZ4dUlDQTBPaUFuUFQwZ01TNTRMbmduTEZ4dUlDQTFPaUFuUFQwZ01pNHdMakF0WVd4d2FHRXVlQ2NzWEc0Z0lEWTZJQ2MrUFNBeUxqQXVNQzFpWlhSaExqRW5MRnh1SUNBM09pQW5QajBnTkM0d0xqQW5YRzU5TzF4dVhHNWpiMjV6ZENCdlltcGxZM1JVZVhCbElEMGdKMXR2WW1wbFkzUWdUMkpxWldOMFhTYzdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJJWVc1a2JHVmlZWEp6Ulc1MmFYSnZibTFsYm5Rb2FHVnNjR1Z5Y3l3Z2NHRnlkR2xoYkhNc0lHUmxZMjl5WVhSdmNuTXBJSHRjYmlBZ2RHaHBjeTVvWld4d1pYSnpJRDBnYUdWc2NHVnljeUI4ZkNCN2ZUdGNiaUFnZEdocGN5NXdZWEowYVdGc2N5QTlJSEJoY25ScFlXeHpJSHg4SUh0OU8xeHVJQ0IwYUdsekxtUmxZMjl5WVhSdmNuTWdQU0JrWldOdmNtRjBiM0p6SUh4OElIdDlPMXh1WEc0Z0lISmxaMmx6ZEdWeVJHVm1ZWFZzZEVobGJIQmxjbk1vZEdocGN5azdYRzRnSUhKbFoybHpkR1Z5UkdWbVlYVnNkRVJsWTI5eVlYUnZjbk1vZEdocGN5azdYRzU5WEc1Y2JraGhibVJzWldKaGNuTkZiblpwY205dWJXVnVkQzV3Y205MGIzUjVjR1VnUFNCN1hHNGdJR052Ym5OMGNuVmpkRzl5T2lCSVlXNWtiR1ZpWVhKelJXNTJhWEp2Ym0xbGJuUXNYRzVjYmlBZ2JHOW5aMlZ5T2lCc2IyZG5aWElzWEc0Z0lHeHZaem9nYkc5bloyVnlMbXh2Wnl4Y2JseHVJQ0J5WldkcGMzUmxja2hsYkhCbGNqb2dablZ1WTNScGIyNG9ibUZ0WlN3Z1ptNHBJSHRjYmlBZ0lDQnBaaUFvZEc5VGRISnBibWN1WTJGc2JDaHVZVzFsS1NBOVBUMGdiMkpxWldOMFZIbHdaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHWnVLU0I3SUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b0owRnlaeUJ1YjNRZ2MzVndjRzl5ZEdWa0lIZHBkR2dnYlhWc2RHbHdiR1VnYUdWc2NHVnljeWNwT3lCOVhHNGdJQ0FnSUNCbGVIUmxibVFvZEdocGN5NW9aV3h3WlhKekxDQnVZVzFsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2hwY3k1b1pXeHdaWEp6VzI1aGJXVmRJRDBnWm00N1hHNGdJQ0FnZlZ4dUlDQjlMRnh1SUNCMWJuSmxaMmx6ZEdWeVNHVnNjR1Z5T2lCbWRXNWpkR2x2YmlodVlXMWxLU0I3WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11YUdWc2NHVnljMXR1WVcxbFhUdGNiaUFnZlN4Y2JseHVJQ0J5WldkcGMzUmxjbEJoY25ScFlXdzZJR1oxYm1OMGFXOXVLRzVoYldVc0lIQmhjblJwWVd3cElIdGNiaUFnSUNCcFppQW9kRzlUZEhKcGJtY3VZMkZzYkNodVlXMWxLU0E5UFQwZ2IySnFaV04wVkhsd1pTa2dlMXh1SUNBZ0lDQWdaWGgwWlc1a0tIUm9hWE11Y0dGeWRHbGhiSE1zSUc1aGJXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIQmhjblJwWVd3Z1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9ZRUYwZEdWdGNIUnBibWNnZEc4Z2NtVm5hWE4wWlhJZ1lTQndZWEowYVdGc0lHTmhiR3hsWkNCY0lpUjdibUZ0WlgxY0lpQmhjeUIxYm1SbFptbHVaV1JnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSb2FYTXVjR0Z5ZEdsaGJITmJibUZ0WlYwZ1BTQndZWEowYVdGc08xeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ2RXNXlaV2RwYzNSbGNsQmhjblJwWVd3NklHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0JrWld4bGRHVWdkR2hwY3k1d1lYSjBhV0ZzYzF0dVlXMWxYVHRjYmlBZ2ZTeGNibHh1SUNCeVpXZHBjM1JsY2tSbFkyOXlZWFJ2Y2pvZ1puVnVZM1JwYjI0b2JtRnRaU3dnWm00cElIdGNiaUFnSUNCcFppQW9kRzlUZEhKcGJtY3VZMkZzYkNodVlXMWxLU0E5UFQwZ2IySnFaV04wVkhsd1pTa2dlMXh1SUNBZ0lDQWdhV1lnS0dadUtTQjdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjBGeVp5QnViM1FnYzNWd2NHOXlkR1ZrSUhkcGRHZ2diWFZzZEdsd2JHVWdaR1ZqYjNKaGRHOXljeWNwT3lCOVhHNGdJQ0FnSUNCbGVIUmxibVFvZEdocGN5NWtaV052Y21GMGIzSnpMQ0J1WVcxbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NWtaV052Y21GMGIzSnpXMjVoYldWZElEMGdabTQ3WEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0IxYm5KbFoybHpkR1Z5UkdWamIzSmhkRzl5T2lCbWRXNWpkR2x2YmlodVlXMWxLU0I3WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11WkdWamIzSmhkRzl5YzF0dVlXMWxYVHRjYmlBZ2ZWeHVmVHRjYmx4dVpYaHdiM0owSUd4bGRDQnNiMmNnUFNCc2IyZG5aWEl1Ykc5bk8xeHVYRzVsZUhCdmNuUWdlMk55WldGMFpVWnlZVzFsTENCc2IyZG5aWEo5TzF4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMucmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyA9IHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnM7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfZGVjb3JhdG9yc0lubGluZSA9IHJlcXVpcmUoJy4vZGVjb3JhdG9ycy9pbmxpbmUnKTtcblxudmFyIF9kZWNvcmF0b3JzSW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlY29yYXRvcnNJbmxpbmUpO1xuXG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKGluc3RhbmNlKSB7XG4gIF9kZWNvcmF0b3JzSW5saW5lMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJSbFkyOXlZWFJ2Y25NdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN1owTkJRVEpDTEhGQ1FVRnhRanM3T3p0QlFVVjZReXhUUVVGVExIbENRVUY1UWl4RFFVRkRMRkZCUVZFc1JVRkJSVHRCUVVOc1JDeG5RMEZCWlN4UlFVRlJMRU5CUVVNc1EwRkJRenREUVVNeFFpSXNJbVpwYkdVaU9pSmtaV052Y21GMGIzSnpMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhKbFoybHpkR1Z5U1c1c2FXNWxJR1p5YjIwZ0p5NHZaR1ZqYjNKaGRHOXljeTlwYm14cGJtVW5PMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY21WbmFYTjBaWEpFWldaaGRXeDBSR1ZqYjNKaGRHOXljeWhwYm5OMFlXNWpaU2tnZTF4dUlDQnlaV2RwYzNSbGNrbHViR2x1WlNocGJuTjBZVzVqWlNrN1hHNTlYRzVjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckRlY29yYXRvcignaW5saW5lJywgZnVuY3Rpb24gKGZuLCBwcm9wcywgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgdmFyIHJldCA9IGZuO1xuICAgIGlmICghcHJvcHMucGFydGlhbHMpIHtcbiAgICAgIHByb3BzLnBhcnRpYWxzID0ge307XG4gICAgICByZXQgPSBmdW5jdGlvbiAoY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFydGlhbHMgc3RhY2sgZnJhbWUgcHJpb3IgdG8gZXhlYy5cbiAgICAgICAgdmFyIG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBfdXRpbHMuZXh0ZW5kKHt9LCBvcmlnaW5hbCwgcHJvcHMucGFydGlhbHMpO1xuICAgICAgICB2YXIgcmV0ID0gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9yaWdpbmFsO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBwcm9wcy5wYXJ0aWFsc1tvcHRpb25zLmFyZ3NbMF1dID0gb3B0aW9ucy5mbjtcblxuICAgIHJldHVybiByZXQ7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMlJsWTI5eVlYUnZjbk12YVc1c2FXNWxMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN2NVSkJRWEZDTEZWQlFWVTdPM0ZDUVVWb1FpeFZRVUZUTEZGQlFWRXNSVUZCUlR0QlFVTm9ReXhWUVVGUkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hGUVVGRkxGVkJRVk1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4VFFVRlRMRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRek5GTEZGQlFVa3NSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOaUxGRkJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTI1Q0xGZEJRVXNzUTBGQlF5eFJRVUZSTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNCQ0xGTkJRVWNzUjBGQlJ5eFZRVUZUTEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVN08wRkJSUzlDTEZsQlFVa3NVVUZCVVN4SFFVRkhMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU03UVVGRGJFTXNhVUpCUVZNc1EwRkJReXhSUVVGUkxFZEJRVWNzWTBGQlR5eEZRVUZGTEVWQlFVVXNVVUZCVVN4RlFVRkZMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU14UkN4WlFVRkpMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUXk5Q0xHbENRVUZUTEVOQlFVTXNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJRenRCUVVNNVFpeGxRVUZQTEVkQlFVY3NRMEZCUXp0UFFVTmFMRU5CUVVNN1MwRkRTRHM3UVVGRlJDeFRRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRE96dEJRVVUzUXl4WFFVRlBMRWRCUVVjc1EwRkJRenRIUVVOYUxFTkJRVU1zUTBGQlF6dERRVU5LSWl3aVptbHNaU0k2SW1sdWJHbHVaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN1pYaDBaVzVrZlNCbWNtOXRJQ2N1TGk5MWRHbHNjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1S0dsdWMzUmhibU5sS1NCN1hHNGdJR2x1YzNSaGJtTmxMbkpsWjJsemRHVnlSR1ZqYjNKaGRHOXlLQ2RwYm14cGJtVW5MQ0JtZFc1amRHbHZiaWhtYml3Z2NISnZjSE1zSUdOdmJuUmhhVzVsY2l3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUd4bGRDQnlaWFFnUFNCbWJqdGNiaUFnSUNCcFppQW9JWEJ5YjNCekxuQmhjblJwWVd4ektTQjdYRzRnSUNBZ0lDQndjbTl3Y3k1d1lYSjBhV0ZzY3lBOUlIdDlPMXh1SUNBZ0lDQWdjbVYwSUQwZ1puVnVZM1JwYjI0b1kyOXVkR1Y0ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJEY21WaGRHVWdZU0J1WlhjZ2NHRnlkR2xoYkhNZ2MzUmhZMnNnWm5KaGJXVWdjSEpwYjNJZ2RHOGdaWGhsWXk1Y2JpQWdJQ0FnSUNBZ2JHVjBJRzl5YVdkcGJtRnNJRDBnWTI5dWRHRnBibVZ5TG5CaGNuUnBZV3h6TzF4dUlDQWdJQ0FnSUNCamIyNTBZV2x1WlhJdWNHRnlkR2xoYkhNZ1BTQmxlSFJsYm1Rb2UzMHNJRzl5YVdkcGJtRnNMQ0J3Y205d2N5NXdZWEowYVdGc2N5azdYRzRnSUNBZ0lDQWdJR3hsZENCeVpYUWdQU0JtYmloamIyNTBaWGgwTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeUxuQmhjblJwWVd4eklEMGdiM0pwWjJsdVlXdzdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWFE3WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEJ5YjNCekxuQmhjblJwWVd4elcyOXdkR2x2Ym5NdVlYSm5jMXN3WFYwZ1BTQnZjSFJwYjI1ekxtWnVPMXh1WEc0Z0lDQWdjbVYwZFhKdUlISmxkRHRjYmlBZ2ZTazdYRzU5WEc0aVhYMD1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnbWVzc2FnZScsICduYW1lJywgJ251bWJlcicsICdzdGFjayddO1xuXG5mdW5jdGlvbiBFeGNlcHRpb24obWVzc2FnZSwgbm9kZSkge1xuICB2YXIgbG9jID0gbm9kZSAmJiBub2RlLmxvYyxcbiAgICAgIGxpbmUgPSB1bmRlZmluZWQsXG4gICAgICBjb2x1bW4gPSB1bmRlZmluZWQ7XG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgY29sdW1uID0gbG9jLnN0YXJ0LmNvbHVtbjtcblxuICAgIG1lc3NhZ2UgKz0gJyAtICcgKyBsaW5lICsgJzonICsgY29sdW1uO1xuICB9XG5cbiAgdmFyIHRtcCA9IEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gIC8vIFVuZm9ydHVuYXRlbHkgZXJyb3JzIGFyZSBub3QgZW51bWVyYWJsZSBpbiBDaHJvbWUgKGF0IGxlYXN0KSwgc28gYGZvciBwcm9wIGluIHRtcGAgZG9lc24ndCB3b3JrLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBlcnJvclByb3BzLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzW2Vycm9yUHJvcHNbaWR4XV0gPSB0bXBbZXJyb3JQcm9wc1tpZHhdXTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEV4Y2VwdGlvbik7XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChsb2MpIHtcbiAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmU7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBFeGNlcHRpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJWNFkyVndkR2x2Ymk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPMEZCUTBFc1NVRkJUU3hWUVVGVkxFZEJRVWNzUTBGQlF5eGhRVUZoTEVWQlFVVXNWVUZCVlN4RlFVRkZMRmxCUVZrc1JVRkJSU3hUUVVGVExFVkJRVVVzVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenM3UVVGRmJrY3NVMEZCVXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUlVGQlJUdEJRVU5vUXl4TlFVRkpMRWRCUVVjc1IwRkJSeXhKUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZETEVkQlFVYzdUVUZEZEVJc1NVRkJTU3haUVVGQk8wMUJRMG9zVFVGQlRTeFpRVUZCTEVOQlFVTTdRVUZEV0N4TlFVRkpMRWRCUVVjc1JVRkJSVHRCUVVOUUxGRkJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVOMFFpeFZRVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU03TzBGQlJURkNMRmRCUVU4c1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeEhRVUZITEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNN1IwRkRlRU03TzBGQlJVUXNUVUZCU1N4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6czdPMEZCUnpGRUxFOUJRVXNzU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXl4RlFVRkZMRWRCUVVjc1IwRkJSeXhWUVVGVkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NSVUZCUlN4RlFVRkZPMEZCUTJoRUxGRkJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1IwRkRPVU03T3p0QlFVZEVMRTFCUVVrc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RlFVRkZPMEZCUXpOQ0xGTkJRVXNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdSMEZETVVNN08wRkJSVVFzVFVGQlNUdEJRVU5HTEZGQlFVa3NSMEZCUnl4RlFVRkZPMEZCUTFBc1ZVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdPenM3UVVGSmRrSXNWVUZCU1N4TlFVRk5MRU5CUVVNc1kwRkJZeXhGUVVGRk8wRkJRM3BDTEdOQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJUdEJRVU53UXl4bFFVRkxMRVZCUVVVc1RVRkJUVHRCUVVOaUxHOUNRVUZWTEVWQlFVVXNTVUZCU1R0VFFVTnFRaXhEUVVGRExFTkJRVU03VDBGRFNpeE5RVUZOTzBGQlEwd3NXVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03VDBGRGRFSTdTMEZEUmp0SFFVTkdMRU5CUVVNc1QwRkJUeXhIUVVGSExFVkJRVVU3TzBkQlJXSTdRMEZEUmpzN1FVRkZSQ3hUUVVGVExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NTMEZCU3l4RlFVRkZMRU5CUVVNN08zRkNRVVZ1UWl4VFFVRlRJaXdpWm1sc1pTSTZJbVY0WTJWd2RHbHZiaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklseHVZMjl1YzNRZ1pYSnliM0pRY205d2N5QTlJRnNuWkdWelkzSnBjSFJwYjI0bkxDQW5abWxzWlU1aGJXVW5MQ0FuYkdsdVpVNTFiV0psY2ljc0lDZHRaWE56WVdkbEp5d2dKMjVoYldVbkxDQW5iblZ0WW1WeUp5d2dKM04wWVdOckoxMDdYRzVjYm1aMWJtTjBhVzl1SUVWNFkyVndkR2x2YmlodFpYTnpZV2RsTENCdWIyUmxLU0I3WEc0Z0lHeGxkQ0JzYjJNZ1BTQnViMlJsSUNZbUlHNXZaR1V1Ykc5akxGeHVJQ0FnSUNBZ2JHbHVaU3hjYmlBZ0lDQWdJR052YkhWdGJqdGNiaUFnYVdZZ0tHeHZZeWtnZTF4dUlDQWdJR3hwYm1VZ1BTQnNiMk11YzNSaGNuUXViR2x1WlR0Y2JpQWdJQ0JqYjJ4MWJXNGdQU0JzYjJNdWMzUmhjblF1WTI5c2RXMXVPMXh1WEc0Z0lDQWdiV1Z6YzJGblpTQXJQU0FuSUMwZ0p5QXJJR3hwYm1VZ0t5QW5PaWNnS3lCamIyeDFiVzQ3WEc0Z0lIMWNibHh1SUNCc1pYUWdkRzF3SUQwZ1JYSnliM0l1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5d2diV1Z6YzJGblpTazdYRzVjYmlBZ0x5OGdWVzVtYjNKMGRXNWhkR1ZzZVNCbGNuSnZjbk1nWVhKbElHNXZkQ0JsYm5WdFpYSmhZbXhsSUdsdUlFTm9jbTl0WlNBb1lYUWdiR1ZoYzNRcExDQnpieUJnWm05eUlIQnliM0FnYVc0Z2RHMXdZQ0JrYjJWemJpZDBJSGR2Y21zdVhHNGdJR1p2Y2lBb2JHVjBJR2xrZUNBOUlEQTdJR2xrZUNBOElHVnljbTl5VUhKdmNITXViR1Z1WjNSb095QnBaSGdyS3lrZ2UxeHVJQ0FnSUhSb2FYTmJaWEp5YjNKUWNtOXdjMXRwWkhoZFhTQTlJSFJ0Y0Z0bGNuSnZjbEJ5YjNCelcybGtlRjFkTzF4dUlDQjlYRzVjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k5Y2JpQWdhV1lnS0VWeWNtOXlMbU5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxLU0I3WEc0Z0lDQWdSWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVb2RHaHBjeXdnUlhoalpYQjBhVzl1S1R0Y2JpQWdmVnh1WEc0Z0lIUnllU0I3WEc0Z0lDQWdhV1lnS0d4dll5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1c2FXNWxUblZ0WW1WeUlEMGdiR2x1WlR0Y2JseHVJQ0FnSUNBZ0x5OGdWMjl5YXlCaGNtOTFibVFnYVhOemRXVWdkVzVrWlhJZ2MyRm1ZWEpwSUhkb1pYSmxJSGRsSUdOaGJpZDBJR1JwY21WamRHeDVJSE5sZENCMGFHVWdZMjlzZFcxdUlIWmhiSFZsWEc0Z0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNBZ0lDQWdhV1lnS0U5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTa2dlMXh1SUNBZ0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeXdnSjJOdmJIVnRiaWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1kyOXNkVzF1TEZ4dUlDQWdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJIVnRiaUE5SUdOdmJIVnRianRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwZ1kyRjBZMmdnS0c1dmNDa2dlMXh1SUNBZ0lDOHFJRWxuYm05eVpTQnBaaUIwYUdVZ1luSnZkM05sY2lCcGN5QjJaWEo1SUhCaGNuUnBZM1ZzWVhJZ0tpOWNiaUFnZlZ4dWZWeHVYRzVGZUdObGNIUnBiMjR1Y0hKdmRHOTBlWEJsSUQwZ2JtVjNJRVZ5Y205eUtDazdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVY0WTJWd2RHbHZianRjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMucmVnaXN0ZXJEZWZhdWx0SGVscGVycyA9IHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnM7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfaGVscGVyc0Jsb2NrSGVscGVyTWlzc2luZyA9IHJlcXVpcmUoJy4vaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZycpO1xuXG52YXIgX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0Jsb2NrSGVscGVyTWlzc2luZyk7XG5cbnZhciBfaGVscGVyc0VhY2ggPSByZXF1aXJlKCcuL2hlbHBlcnMvZWFjaCcpO1xuXG52YXIgX2hlbHBlcnNFYWNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNFYWNoKTtcblxudmFyIF9oZWxwZXJzSGVscGVyTWlzc2luZyA9IHJlcXVpcmUoJy4vaGVscGVycy9oZWxwZXItbWlzc2luZycpO1xuXG52YXIgX2hlbHBlcnNIZWxwZXJNaXNzaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNIZWxwZXJNaXNzaW5nKTtcblxudmFyIF9oZWxwZXJzSWYgPSByZXF1aXJlKCcuL2hlbHBlcnMvaWYnKTtcblxudmFyIF9oZWxwZXJzSWYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0lmKTtcblxudmFyIF9oZWxwZXJzTG9nID0gcmVxdWlyZSgnLi9oZWxwZXJzL2xvZycpO1xuXG52YXIgX2hlbHBlcnNMb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0xvZyk7XG5cbnZhciBfaGVscGVyc0xvb2t1cCA9IHJlcXVpcmUoJy4vaGVscGVycy9sb29rdXAnKTtcblxudmFyIF9oZWxwZXJzTG9va3VwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNMb29rdXApO1xuXG52YXIgX2hlbHBlcnNXaXRoID0gcmVxdWlyZSgnLi9oZWxwZXJzL3dpdGgnKTtcblxudmFyIF9oZWxwZXJzV2l0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzV2l0aCk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuICBfaGVscGVyc0VhY2gyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuICBfaGVscGVyc0hlbHBlck1pc3NpbmcyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuICBfaGVscGVyc0lmMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNMb2cyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuICBfaGVscGVyc0xvb2t1cDJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG4gIF9oZWxwZXJzV2l0aDJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN2VVTkJRWFZETEdkRFFVRm5RenM3T3pzeVFrRkRPVU1zWjBKQlFXZENPenM3TzI5RFFVTlFMREJDUVVFd1FqczdPenQ1UWtGRGNrTXNZMEZCWXpzN096c3dRa0ZEWWl4bFFVRmxPenM3T3paQ1FVTmFMR3RDUVVGclFqczdPenN5UWtGRGNFSXNaMEpCUVdkQ096czdPMEZCUld4RExGTkJRVk1zYzBKQlFYTkNMRU5CUVVNc1VVRkJVU3hGUVVGRk8wRkJReTlETEhsRFFVRXlRaXhSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU55UXl3eVFrRkJZU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU4yUWl4dlEwRkJjMElzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEYUVNc2VVSkJRVmNzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEY2tJc01FSkJRVmtzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEZEVJc05rSkJRV1VzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEZWtJc01rSkJRV0VzVVVGQlVTeERRVUZETEVOQlFVTTdRMEZEZUVJaUxDSm1hV3hsSWpvaWFHVnNjR1Z5Y3k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQnlaV2RwYzNSbGNrSnNiMk5yU0dWc2NHVnlUV2x6YzJsdVp5Qm1jbTl0SUNjdUwyaGxiSEJsY25NdllteHZZMnN0YUdWc2NHVnlMVzFwYzNOcGJtY25PMXh1YVcxd2IzSjBJSEpsWjJsemRHVnlSV0ZqYUNCbWNtOXRJQ2N1TDJobGJIQmxjbk12WldGamFDYzdYRzVwYlhCdmNuUWdjbVZuYVhOMFpYSklaV3h3WlhKTmFYTnphVzVuSUdaeWIyMGdKeTR2YUdWc2NHVnljeTlvWld4d1pYSXRiV2x6YzJsdVp5YzdYRzVwYlhCdmNuUWdjbVZuYVhOMFpYSkpaaUJtY205dElDY3VMMmhsYkhCbGNuTXZhV1luTzF4dWFXMXdiM0owSUhKbFoybHpkR1Z5VEc5bklHWnliMjBnSnk0dmFHVnNjR1Z5Y3k5c2IyY25PMXh1YVcxd2IzSjBJSEpsWjJsemRHVnlURzl2YTNWd0lHWnliMjBnSnk0dmFHVnNjR1Z5Y3k5c2IyOXJkWEFuTzF4dWFXMXdiM0owSUhKbFoybHpkR1Z5VjJsMGFDQm1jbTl0SUNjdUwyaGxiSEJsY25NdmQybDBhQ2M3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCeVpXZHBjM1JsY2tSbFptRjFiSFJJWld4d1pYSnpLR2x1YzNSaGJtTmxLU0I3WEc0Z0lISmxaMmx6ZEdWeVFteHZZMnRJWld4d1pYSk5hWE56YVc1bktHbHVjM1JoYm1ObEtUdGNiaUFnY21WbmFYTjBaWEpGWVdOb0tHbHVjM1JoYm1ObEtUdGNiaUFnY21WbmFYTjBaWEpJWld4d1pYSk5hWE56YVc1bktHbHVjM1JoYm1ObEtUdGNiaUFnY21WbmFYTjBaWEpKWmlocGJuTjBZVzVqWlNrN1hHNGdJSEpsWjJsemRHVnlURzluS0dsdWMzUmhibU5sS1R0Y2JpQWdjbVZuYVhOMFpYSk1iMjlyZFhBb2FXNXpkR0Z1WTJVcE8xeHVJQ0J5WldkcGMzUmxjbGRwZEdnb2FXNXpkR0Z1WTJVcE8xeHVmVnh1SWwxOVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbiAoY29udGV4dCwgb3B0aW9ucykge1xuICAgIHZhciBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgICBmbiA9IG9wdGlvbnMuZm47XG5cbiAgICBpZiAoY29udGV4dCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGZuKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dCA9PT0gZmFsc2UgfHwgY29udGV4dCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2UgaWYgKF91dGlscy5pc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICBpZiAoY29udGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmlkcykge1xuICAgICAgICAgIG9wdGlvbnMuaWRzID0gW29wdGlvbnMubmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVycy5lYWNoKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBfdXRpbHMuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IF91dGlscy5hcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMubmFtZSk7XG4gICAgICAgIG9wdGlvbnMgPSB7IGRhdGE6IGRhdGEgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdllteHZZMnN0YUdWc2NHVnlMVzFwYzNOcGJtY3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3p0eFFrRkJjMFFzVlVGQlZUczdjVUpCUldwRUxGVkJRVk1zVVVGQlVTeEZRVUZGTzBGQlEyaERMRlZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc1ZVRkJVeXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlEzWkZMRkZCUVVrc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eFBRVUZQTzFGQlEzcENMRVZCUVVVc1IwRkJSeXhQUVVGUExFTkJRVU1zUlVGQlJTeERRVUZET3p0QlFVVndRaXhSUVVGSkxFOUJRVThzUzBGQlN5eEpRVUZKTEVWQlFVVTdRVUZEY0VJc1lVRkJUeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEYWtJc1RVRkJUU3hKUVVGSkxFOUJRVThzUzBGQlN5eExRVUZMTEVsQlFVa3NUMEZCVHl4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVNdlF5eGhRVUZQTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVOMFFpeE5RVUZOTEVsQlFVa3NaVUZCVVN4UFFVRlBMRU5CUVVNc1JVRkJSVHRCUVVNelFpeFZRVUZKTEU5QlFVOHNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRk8wRkJRM1JDTEZsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVObUxHbENRVUZQTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFOQlF6bENPenRCUVVWRUxHVkJRVThzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzA5QlEyaEVMRTFCUVUwN1FVRkRUQ3hsUVVGUExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UFFVTjBRanRMUVVOR0xFMUJRVTA3UVVGRFRDeFZRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRWxCUVVrc1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU12UWl4WlFVRkpMRWxCUVVrc1IwRkJSeXh0UWtGQldTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRja01zV1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4NVFrRkJhMElzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6ZEZMR1ZCUVU4c1IwRkJSeXhGUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVTXNRMEZCUXp0UFFVTjRRanM3UVVGRlJDeGhRVUZQTEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UzBGRE4wSTdSMEZEUml4RFFVRkRMRU5CUVVNN1EwRkRTaUlzSW1acGJHVWlPaUppYkc5amF5MW9aV3h3WlhJdGJXbHpjMmx1Wnk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdZWEJ3Wlc1a1EyOXVkR1Y0ZEZCaGRHZ3NJR055WldGMFpVWnlZVzFsTENCcGMwRnljbUY1ZlNCbWNtOXRJQ2N1TGk5MWRHbHNjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1S0dsdWMzUmhibU5sS1NCN1hHNGdJR2x1YzNSaGJtTmxMbkpsWjJsemRHVnlTR1ZzY0dWeUtDZGliRzlqYTBobGJIQmxjazFwYzNOcGJtY25MQ0JtZFc1amRHbHZiaWhqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdiR1YwSUdsdWRtVnljMlVnUFNCdmNIUnBiMjV6TG1sdWRtVnljMlVzWEc0Z0lDQWdJQ0FnSUdadUlEMGdiM0IwYVc5dWN5NW1ianRjYmx4dUlDQWdJR2xtSUNoamIyNTBaWGgwSUQwOVBTQjBjblZsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00b2RHaHBjeWs3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hqYjI1MFpYaDBJRDA5UFNCbVlXeHpaU0I4ZkNCamIyNTBaWGgwSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJwYm5abGNuTmxLSFJvYVhNcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTkJjbkpoZVNoamIyNTBaWGgwS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR052Ym5SbGVIUXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NXBaSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtbGtjeUE5SUZ0dmNIUnBiMjV6TG01aGJXVmRPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsdWMzUmhibU5sTG1obGJIQmxjbk11WldGamFDaGpiMjUwWlhoMExDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGJuWmxjbk5sS0hSb2FYTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NWtZWFJoSUNZbUlHOXdkR2x2Ym5NdWFXUnpLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmtZWFJoSUQwZ1kzSmxZWFJsUm5KaGJXVW9iM0IwYVc5dWN5NWtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ1pHRjBZUzVqYjI1MFpYaDBVR0YwYUNBOUlHRndjR1Z1WkVOdmJuUmxlSFJRWVhSb0tHOXdkR2x2Ym5NdVpHRjBZUzVqYjI1MFpYaDBVR0YwYUN3Z2IzQjBhVzl1Y3k1dVlXMWxLVHRjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUh0a1lYUmhPaUJrWVhSaGZUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNTlYRzRpWFgwPVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuLi9leGNlcHRpb24nKTtcblxudmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdlYWNoJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdNdXN0IHBhc3MgaXRlcmF0b3IgdG8gI2VhY2gnKTtcbiAgICB9XG5cbiAgICB2YXIgZm4gPSBvcHRpb25zLmZuLFxuICAgICAgICBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgcmV0ID0gJycsXG4gICAgICAgIGRhdGEgPSB1bmRlZmluZWQsXG4gICAgICAgIGNvbnRleHRQYXRoID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSkgKyAnLic7XG4gICAgfVxuXG4gICAgaWYgKF91dGlscy5pc0Z1bmN0aW9uKGNvbnRleHQpKSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBfdXRpbHMuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleGVjSXRlcmF0aW9uKGZpZWxkLCBpbmRleCwgbGFzdCkge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgZGF0YS5rZXkgPSBmaWVsZDtcbiAgICAgICAgZGF0YS5pbmRleCA9IGluZGV4O1xuICAgICAgICBkYXRhLmZpcnN0ID0gaW5kZXggPT09IDA7XG4gICAgICAgIGRhdGEubGFzdCA9ICEhbGFzdDtcblxuICAgICAgICBpZiAoY29udGV4dFBhdGgpIHtcbiAgICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gY29udGV4dFBhdGggKyBmaWVsZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXQgPSByZXQgKyBmbihjb250ZXh0W2ZpZWxkXSwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtczogX3V0aWxzLmJsb2NrUGFyYW1zKFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLCBbY29udGV4dFBhdGggKyBmaWVsZCwgbnVsbF0pXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChfdXRpbHMuaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKHZhciBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHJpb3JLZXkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcbiAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAgIC8vIGFuIGl0ZXJtZWRpYXRlIGtleXMgYXJyYXkuXG4gICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmlvcktleSA9IGtleTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJobGJIQmxjbk12WldGamFDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08zRkNRVUVyUlN4VlFVRlZPenQ1UWtGRGJrVXNZMEZCWXpzN096dHhRa0ZGY2tJc1ZVRkJVeXhSUVVGUkxFVkJRVVU3UVVGRGFFTXNWVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhOUVVGTkxFVkJRVVVzVlVGQlV5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTNwRUxGRkJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVTdRVUZEV2l4WlFVRk5MREpDUVVGakxEWkNRVUUyUWl4RFFVRkRMRU5CUVVNN1MwRkRjRVE3TzBGQlJVUXNVVUZCU1N4RlFVRkZMRWRCUVVjc1QwRkJUeXhEUVVGRExFVkJRVVU3VVVGRFppeFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTlCUVU4N1VVRkRla0lzUTBGQlF5eEhRVUZITEVOQlFVTTdVVUZEVEN4SFFVRkhMRWRCUVVjc1JVRkJSVHRSUVVOU0xFbEJRVWtzV1VGQlFUdFJRVU5LTEZkQlFWY3NXVUZCUVN4RFFVRkRPenRCUVVWb1FpeFJRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRWxCUVVrc1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU12UWl4cFFrRkJWeXhIUVVGSExIbENRVUZyUWl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzB0QlEycEdPenRCUVVWRUxGRkJRVWtzYTBKQlFWY3NUMEZCVHl4RFFVRkRMRVZCUVVVN1FVRkJSU3hoUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVGRk96dEJRVVV4UkN4UlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVU3UVVGRGFFSXNWVUZCU1N4SFFVRkhMRzFDUVVGWkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTnNRenM3UVVGRlJDeGhRVUZUTEdGQlFXRXNRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJUdEJRVU42UXl4VlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVOU0xGbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUTJwQ0xGbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUTI1Q0xGbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVONlFpeFpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU03TzBGQlJXNUNMRmxCUVVrc1YwRkJWeXhGUVVGRk8wRkJRMllzWTBGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4WFFVRlhMRWRCUVVjc1MwRkJTeXhEUVVGRE8xTkJRM2hETzA5QlEwWTdPMEZCUlVRc1UwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wRkJRemRDTEZsQlFVa3NSVUZCUlN4SlFVRkpPMEZCUTFZc2JVSkJRVmNzUlVGQlJTeHRRa0ZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRMRmRCUVZjc1IwRkJSeXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdUMEZETDBVc1EwRkJReXhEUVVGRE8wdEJRMG83TzBGQlJVUXNVVUZCU1N4UFFVRlBMRWxCUVVrc1QwRkJUeXhQUVVGUExFdEJRVXNzVVVGQlVTeEZRVUZGTzBGQlF6RkRMRlZCUVVrc1pVRkJVU3hQUVVGUExFTkJRVU1zUlVGQlJUdEJRVU53UWl4aFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU4yUXl4alFVRkpMRU5CUVVNc1NVRkJTU3hQUVVGUExFVkJRVVU3UVVGRGFFSXNlVUpCUVdFc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4UFFVRlBMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFkQlF5OURPMU5CUTBZN1QwRkRSaXhOUVVGTk8wRkJRMHdzV1VGQlNTeFJRVUZSTEZsQlFVRXNRMEZCUXpzN1FVRkZZaXhoUVVGTExFbEJRVWtzUjBGQlJ5eEpRVUZKTEU5QlFVOHNSVUZCUlR0QlFVTjJRaXhqUVVGSkxFOUJRVThzUTBGQlF5eGpRVUZqTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVN096czdRVUZKTDBJc1owSkJRVWtzVVVGQlVTeExRVUZMTEZOQlFWTXNSVUZCUlR0QlFVTXhRaXd5UWtGQllTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03WVVGRGFFTTdRVUZEUkN4dlFrRkJVU3hIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU5tTEdGQlFVTXNSVUZCUlN4RFFVRkRPMWRCUTB3N1UwRkRSanRCUVVORUxGbEJRVWtzVVVGQlVTeExRVUZMTEZOQlFWTXNSVUZCUlR0QlFVTXhRaXgxUWtGQllTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFOQlEzUkRPMDlCUTBZN1MwRkRSanM3UVVGRlJDeFJRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRXQ3hUUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNKQ096dEJRVVZFTEZkQlFVOHNSMEZCUnl4RFFVRkRPMGRCUTFvc1EwRkJReXhEUVVGRE8wTkJRMG9pTENKbWFXeGxJam9pWldGamFDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3WVhCd1pXNWtRMjl1ZEdWNGRGQmhkR2dzSUdKc2IyTnJVR0Z5WVcxekxDQmpjbVZoZEdWR2NtRnRaU3dnYVhOQmNuSmhlU3dnYVhOR2RXNWpkR2x2Ym4wZ1puSnZiU0FuTGk0dmRYUnBiSE1uTzF4dWFXMXdiM0owSUVWNFkyVndkR2x2YmlCbWNtOXRJQ2N1TGk5bGVHTmxjSFJwYjI0bk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpaHBibk4wWVc1alpTa2dlMXh1SUNCcGJuTjBZVzVqWlM1eVpXZHBjM1JsY2tobGJIQmxjaWduWldGamFDY3NJR1oxYm1OMGFXOXVLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvSVc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b0owMTFjM1FnY0dGemN5QnBkR1Z5WVhSdmNpQjBieUFqWldGamFDY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0JtYmlBOUlHOXdkR2x2Ym5NdVptNHNYRzRnSUNBZ0lDQWdJR2x1ZG1WeWMyVWdQU0J2Y0hScGIyNXpMbWx1ZG1WeWMyVXNYRzRnSUNBZ0lDQWdJR2tnUFNBd0xGeHVJQ0FnSUNBZ0lDQnlaWFFnUFNBbkp5eGNiaUFnSUNBZ0lDQWdaR0YwWVN4Y2JpQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEZCaGRHZzdYRzVjYmlBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWVhSaElDWW1JRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnSUNCamIyNTBaWGgwVUdGMGFDQTlJR0Z3Y0dWdVpFTnZiblJsZUhSUVlYUm9LRzl3ZEdsdmJuTXVaR0YwWVM1amIyNTBaWGgwVUdGMGFDd2diM0IwYVc5dWN5NXBaSE5iTUYwcElDc2dKeTRuTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNocGMwWjFibU4wYVc5dUtHTnZiblJsZUhRcEtTQjdJR052Ym5SbGVIUWdQU0JqYjI1MFpYaDBMbU5oYkd3b2RHaHBjeWs3SUgxY2JseHVJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtUmhkR0VwSUh0Y2JpQWdJQ0FnSUdSaGRHRWdQU0JqY21WaGRHVkdjbUZ0WlNodmNIUnBiMjV6TG1SaGRHRXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHWjFibU4wYVc5dUlHVjRaV05KZEdWeVlYUnBiMjRvWm1sbGJHUXNJR2x1WkdWNExDQnNZWE4wS1NCN1hHNGdJQ0FnSUNCcFppQW9aR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQmtZWFJoTG10bGVTQTlJR1pwWld4a08xeHVJQ0FnSUNBZ0lDQmtZWFJoTG1sdVpHVjRJRDBnYVc1a1pYZzdYRzRnSUNBZ0lDQWdJR1JoZEdFdVptbHljM1FnUFNCcGJtUmxlQ0E5UFQwZ01EdGNiaUFnSUNBZ0lDQWdaR0YwWVM1c1lYTjBJRDBnSVNGc1lYTjBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjUwWlhoMFVHRjBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHUmhkR0V1WTI5dWRHVjRkRkJoZEdnZ1BTQmpiMjUwWlhoMFVHRjBhQ0FySUdacFpXeGtPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRDQTlJSEpsZENBcklHWnVLR052Ym5SbGVIUmJabWxsYkdSZExDQjdYRzRnSUNBZ0lDQWdJR1JoZEdFNklHUmhkR0VzWEc0Z0lDQWdJQ0FnSUdKc2IyTnJVR0Z5WVcxek9pQmliRzlqYTFCaGNtRnRjeWhiWTI5dWRHVjRkRnRtYVdWc1pGMHNJR1pwWld4a1hTd2dXMk52Ym5SbGVIUlFZWFJvSUNzZ1ptbGxiR1FzSUc1MWJHeGRLVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dOdmJuUmxlSFFnSmlZZ2RIbHdaVzltSUdOdmJuUmxlSFFnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQnBaaUFvYVhOQmNuSmhlU2hqYjI1MFpYaDBLU2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcUlEMGdZMjl1ZEdWNGRDNXNaVzVuZEdnN0lHa2dQQ0JxT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hU0JwYmlCamIyNTBaWGgwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZUdWalNYUmxjbUYwYVc5dUtHa3NJR2tzSUdrZ1BUMDlJR052Ym5SbGVIUXViR1Z1WjNSb0lDMGdNU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY0hKcGIzSkxaWGs3WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2EyVjVJR2x1SUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5dWRHVjRkQzVvWVhOUGQyNVFjbTl3WlhKMGVTaHJaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWFpTZHlaU0J5ZFc1dWFXNW5JSFJvWlNCcGRHVnlZWFJwYjI1eklHOXVaU0J6ZEdWd0lHOTFkQ0J2WmlCemVXNWpJSE52SUhkbElHTmhiaUJrWlhSbFkzUmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIUm9aU0JzWVhOMElHbDBaWEpoZEdsdmJpQjNhWFJvYjNWMElHaGhkbVVnZEc4Z2MyTmhiaUIwYUdVZ2IySnFaV04wSUhSM2FXTmxJR0Z1WkNCamNtVmhkR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0Z1SUdsMFpYSnRaV1JwWVhSbElHdGxlWE1nWVhKeVlYa3VYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jSEpwYjNKTFpYa2dJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGVHVmpTWFJsY21GMGFXOXVLSEJ5YVc5eVMyVjVMQ0JwSUMwZ01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y21sdmNrdGxlU0E5SUd0bGVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdrckt6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5YVc5eVMyVjVJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0JsZUdWalNYUmxjbUYwYVc5dUtIQnlhVzl5UzJWNUxDQnBJQzBnTVN3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVjBJRDBnYVc1MlpYSnpaU2gwYUdsektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnY21WME8xeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2V4Y2VwdGlvbiA9IHJlcXVpcmUoJy4uL2V4Y2VwdGlvbicpO1xuXG52YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbiAoKSAvKiBbYXJncywgXW9wdGlvbnMgKi97XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTWlzc2luZyBoZWxwZXI6IFwiJyArIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0ubmFtZSArICdcIicpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmFHVnNjR1Z5TFcxcGMzTnBibWN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenQ1UWtGQmMwSXNZMEZCWXpzN096dHhRa0ZGY2tJc1ZVRkJVeXhSUVVGUkxFVkJRVVU3UVVGRGFFTXNWVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhsUVVGbExFVkJRVVVzYVVOQlFXZERPMEZCUTNaRkxGRkJRVWtzVTBGQlV5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRVZCUVVVN08wRkJSVEZDTEdGQlFVOHNVMEZCVXl4RFFVRkRPMHRCUTJ4Q0xFMUJRVTA3TzBGQlJVd3NXVUZCVFN3eVFrRkJZeXh0UWtGQmJVSXNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03UzBGRGRrWTdSMEZEUml4RFFVRkRMRU5CUVVNN1EwRkRTaUlzSW1acGJHVWlPaUpvWld4d1pYSXRiV2x6YzJsdVp5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JGZUdObGNIUnBiMjRnWm5KdmJTQW5MaTR2WlhoalpYQjBhVzl1Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0b2FXNXpkR0Z1WTJVcElIdGNiaUFnYVc1emRHRnVZMlV1Y21WbmFYTjBaWEpJWld4d1pYSW9KMmhsYkhCbGNrMXBjM05wYm1jbkxDQm1kVzVqZEdsdmJpZ3ZLaUJiWVhKbmN5d2dYVzl3ZEdsdmJuTWdLaThwSUh0Y2JpQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnTHk4Z1FTQnRhWE56YVc1bklHWnBaV3hrSUdsdUlHRWdlM3RtYjI5OWZTQmpiMjV6ZEhKMVkzUXVYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0F2THlCVGIyMWxiMjVsSUdseklHRmpkSFZoYkd4NUlIUnllV2x1WnlCMGJ5QmpZV3hzSUhOdmJXVjBhR2x1Wnl3Z1lteHZkeUIxY0M1Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b0owMXBjM05wYm1jZ2FHVnNjR1Z5T2lCY0lpY2dLeUJoY21kMWJXVnVkSE5iWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0F0SURGZExtNWhiV1VnS3lBblhDSW5LVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVmVnh1SWwxOVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uIChjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb25kaXRpb25hbCkpIHtcbiAgICAgIGNvbmRpdGlvbmFsID0gY29uZGl0aW9uYWwuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHJlbmRlciB0aGUgcG9zaXRpdmUgcGF0aCBpZiB0aGUgdmFsdWUgaXMgdHJ1dGh5IGFuZCBub3QgZW1wdHkuXG4gICAgLy8gVGhlIGBpbmNsdWRlWmVyb2Agb3B0aW9uIG1heSBiZSBzZXQgdG8gdHJlYXQgdGhlIGNvbmR0aW9uYWwgYXMgcHVyZWx5IG5vdCBlbXB0eSBiYXNlZCBvbiB0aGVcbiAgICAvLyBiZWhhdmlvciBvZiBpc0VtcHR5LiBFZmZlY3RpdmVseSB0aGlzIGRldGVybWluZXMgaWYgMCBpcyBoYW5kbGVkIGJ5IHRoZSBwb3NpdGl2ZSBwYXRoIG9yIG5lZ2F0aXZlLlxuICAgIGlmICghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCB8fCBfdXRpbHMuaXNFbXB0eShjb25kaXRpb25hbCkpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uIChjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHsgZm46IG9wdGlvbnMuaW52ZXJzZSwgaW52ZXJzZTogb3B0aW9ucy5mbiwgaGFzaDogb3B0aW9ucy5oYXNoIH0pO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJobGJIQmxjbk12YVdZdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenR4UWtGQmEwTXNWVUZCVlRzN2NVSkJSVGRDTEZWQlFWTXNVVUZCVVN4RlFVRkZPMEZCUTJoRExGVkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RlFVRkZMRlZCUVZNc1YwRkJWeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU16UkN4UlFVRkpMR3RDUVVGWExGZEJRVmNzUTBGQlF5eEZRVUZGTzBGQlFVVXNhVUpCUVZjc1IwRkJSeXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUVVVN096czdPMEZCUzNSRkxGRkJRVWtzUVVGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEpRVUZMTEdWQlFWRXNWMEZCVnl4RFFVRkRMRVZCUVVVN1FVRkRka1VzWVVGQlR5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRemxDTEUxQlFVMDdRVUZEVEN4aFFVRlBMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEZWtJN1IwRkRSaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NWVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhSUVVGUkxFVkJRVVVzVlVGQlV5eFhRVUZYTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUXk5RUxGZEJRVThzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEZkQlFWY3NSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJSU3hQUVVGUExFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkRMRU5CUVVNc1EwRkJRenRIUVVOMlNDeERRVUZETEVOQlFVTTdRMEZEU2lJc0ltWnBiR1VpT2lKcFppNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3YVhORmJYQjBlU3dnYVhOR2RXNWpkR2x2Ym4wZ1puSnZiU0FuTGk0dmRYUnBiSE1uTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlocGJuTjBZVzVqWlNrZ2UxeHVJQ0JwYm5OMFlXNWpaUzV5WldkcGMzUmxja2hsYkhCbGNpZ25hV1luTENCbWRXNWpkR2x2YmloamIyNWthWFJwYjI1aGJDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lHbG1JQ2hwYzBaMWJtTjBhVzl1S0dOdmJtUnBkR2x2Ym1Gc0tTa2dleUJqYjI1a2FYUnBiMjVoYkNBOUlHTnZibVJwZEdsdmJtRnNMbU5oYkd3b2RHaHBjeWs3SUgxY2JseHVJQ0FnSUM4dklFUmxabUYxYkhRZ1ltVm9ZWFpwYjNJZ2FYTWdkRzhnY21WdVpHVnlJSFJvWlNCd2IzTnBkR2wyWlNCd1lYUm9JR2xtSUhSb1pTQjJZV3gxWlNCcGN5QjBjblYwYUhrZ1lXNWtJRzV2ZENCbGJYQjBlUzVjYmlBZ0lDQXZMeUJVYUdVZ1lHbHVZMngxWkdWYVpYSnZZQ0J2Y0hScGIyNGdiV0Y1SUdKbElITmxkQ0IwYnlCMGNtVmhkQ0IwYUdVZ1kyOXVaSFJwYjI1aGJDQmhjeUJ3ZFhKbGJIa2dibTkwSUdWdGNIUjVJR0poYzJWa0lHOXVJSFJvWlZ4dUlDQWdJQzh2SUdKbGFHRjJhVzl5SUc5bUlHbHpSVzF3ZEhrdUlFVm1abVZqZEdsMlpXeDVJSFJvYVhNZ1pHVjBaWEp0YVc1bGN5QnBaaUF3SUdseklHaGhibVJzWldRZ1lua2dkR2hsSUhCdmMybDBhWFpsSUhCaGRHZ2diM0lnYm1WbllYUnBkbVV1WEc0Z0lDQWdhV1lnS0NnaGIzQjBhVzl1Y3k1b1lYTm9MbWx1WTJ4MVpHVmFaWEp2SUNZbUlDRmpiMjVrYVhScGIyNWhiQ2tnZkh3Z2FYTkZiWEIwZVNoamIyNWthWFJwYjI1aGJDa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnZjSFJwYjI1ekxtbHVkbVZ5YzJVb2RHaHBjeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdmNIUnBiMjV6TG1adUtIUm9hWE1wTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzVjYmlBZ2FXNXpkR0Z1WTJVdWNtVm5hWE4wWlhKSVpXeHdaWElvSjNWdWJHVnpjeWNzSUdaMWJtTjBhVzl1S0dOdmJtUnBkR2x2Ym1Gc0xDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ2NtVjBkWEp1SUdsdWMzUmhibU5sTG1obGJIQmxjbk5iSjJsbUoxMHVZMkZzYkNoMGFHbHpMQ0JqYjI1a2FYUnBiMjVoYkN3Z2UyWnVPaUJ2Y0hScGIyNXpMbWx1ZG1WeWMyVXNJR2x1ZG1WeWMyVTZJRzl3ZEdsdmJuTXVabTRzSUdoaGMyZzZJRzl3ZEdsdmJuTXVhR0Z6YUgwcE8xeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uICgpIC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi97XG4gICAgdmFyIGFyZ3MgPSBbdW5kZWZpbmVkXSxcbiAgICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbGV2ZWwgPSAxO1xuICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmhhc2gubGV2ZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xuICAgIH1cbiAgICBhcmdzWzBdID0gbGV2ZWw7XG5cbiAgICBpbnN0YW5jZS5sb2cuYXBwbHkoaW5zdGFuY2UsIGFyZ3MpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJobGJIQmxjbk12Ykc5bkxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3Y1VKQlFXVXNWVUZCVXl4UlFVRlJMRVZCUVVVN1FVRkRhRU1zVlVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRVZCUVVVc2EwTkJRV2xETzBGQlF6bEVMRkZCUVVrc1NVRkJTU3hIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETzFGQlEyeENMRTlCUVU4c1IwRkJSeXhUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNNVF5eFRRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3UVVGRE4wTXNWVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTjZRanM3UVVGRlJDeFJRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRaQ3hSUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVNNVFpeFhRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03UzBGRE5VSXNUVUZCVFN4SlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFbEJRVWtzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRM0pFTEZkQlFVc3NSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dExRVU0xUWp0QlFVTkVMRkZCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTTdPMEZCUldoQ0xGbEJRVkVzUTBGQlF5eEhRVUZITEUxQlFVRXNRMEZCV2l4UlFVRlJMRVZCUVZNc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRGVFSXNRMEZCUXl4RFFVRkRPME5CUTBvaUxDSm1hV3hsSWpvaWJHOW5MbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRvYVc1emRHRnVZMlVwSUh0Y2JpQWdhVzV6ZEdGdVkyVXVjbVZuYVhOMFpYSklaV3h3WlhJb0oyeHZaeWNzSUdaMWJtTjBhVzl1S0M4cUlHMWxjM05oWjJVc0lHOXdkR2x2Ym5NZ0tpOHBJSHRjYmlBZ0lDQnNaWFFnWVhKbmN5QTlJRnQxYm1SbFptbHVaV1JkTEZ4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ1lYSm5kVzFsYm5SelcyRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ0xTQXhYVHRjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dMU0F4T3lCcEt5c3BJSHRjYmlBZ0lDQWdJR0Z5WjNNdWNIVnphQ2hoY21kMWJXVnVkSE5iYVYwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQnNaWFpsYkNBOUlERTdYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVhR0Z6YUM1c1pYWmxiQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0JzWlhabGJDQTlJRzl3ZEdsdmJuTXVhR0Z6YUM1c1pYWmxiRHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzl3ZEdsdmJuTXVaR0YwWVNBbUppQnZjSFJwYjI1ekxtUmhkR0V1YkdWMlpXd2dJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdiR1YyWld3Z1BTQnZjSFJwYjI1ekxtUmhkR0V1YkdWMlpXdzdYRzRnSUNBZ2ZWeHVJQ0FnSUdGeVozTmJNRjBnUFNCc1pYWmxiRHRjYmx4dUlDQWdJR2x1YzNSaGJtTmxMbXh2WnlndUxpNGdZWEpuY3lrN1hHNGdJSDBwTzF4dWZWeHVJbDE5XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24gKG9iaiwgZmllbGQpIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgaWYgKGZpZWxkID09PSAnY29uc3RydWN0b3InICYmICFvYmoucHJvcGVydHlJc0VudW1lcmFibGUoZmllbGQpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gb2JqW2ZpZWxkXTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmJHOXZhM1Z3TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdjVUpCUVdVc1ZVRkJVeXhSUVVGUkxFVkJRVVU3UVVGRGFFTXNWVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhSUVVGUkxFVkJRVVVzVlVGQlV5eEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUTNKRUxGRkJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVTdRVUZEVWl4aFFVRlBMRWRCUVVjc1EwRkJRenRMUVVOYU8wRkJRMFFzVVVGQlNTeExRVUZMTEV0QlFVc3NZVUZCWVN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wRkJReTlFTEdGQlFVOHNVMEZCVXl4RFFVRkRPMHRCUTJ4Q08wRkJRMFFzVjBGQlR5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1IwRkRia0lzUTBGQlF5eERRVUZETzBOQlEwb2lMQ0ptYVd4bElqb2liRzl2YTNWd0xtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNG9hVzV6ZEdGdVkyVXBJSHRjYmlBZ2FXNXpkR0Z1WTJVdWNtVm5hWE4wWlhKSVpXeHdaWElvSjJ4dmIydDFjQ2NzSUdaMWJtTjBhVzl1S0c5aWFpd2dabWxsYkdRcElIdGNiaUFnSUNCcFppQW9JVzlpYWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc5aWFqdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHWnBaV3hrSUQwOVBTQW5ZMjl1YzNSeWRXTjBiM0luSUNZbUlDRnZZbW91Y0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVb1ptbGxiR1FwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2IySnFXMlpwWld4a1hUdGNiaUFnZlNrN1hHNTlYRzRpWFgwPVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoX3V0aWxzLmlzRnVuY3Rpb24oY29udGV4dCkpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghX3V0aWxzLmlzRW1wdHkoY29udGV4dCkpIHtcbiAgICAgIHZhciBkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBfdXRpbHMuYmxvY2tQYXJhbXMoW2NvbnRleHRdLCBbZGF0YSAmJiBkYXRhLmNvbnRleHRQYXRoXSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmQybDBhQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN08zRkNRVUVyUlN4VlFVRlZPenR4UWtGRk1VVXNWVUZCVXl4UlFVRlJMRVZCUVVVN1FVRkRhRU1zVlVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1ZVRkJVeXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlEzcEVMRkZCUVVrc2EwSkJRVmNzVDBGQlR5eERRVUZETEVWQlFVVTdRVUZCUlN4aFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVRkZPenRCUVVVeFJDeFJRVUZKTEVWQlFVVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRE96dEJRVVZ3UWl4UlFVRkpMRU5CUVVNc1pVRkJVU3hQUVVGUExFTkJRVU1zUlVGQlJUdEJRVU55UWl4VlFVRkpMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEzaENMRlZCUVVrc1QwRkJUeXhEUVVGRExFbEJRVWtzU1VGQlNTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUXk5Q0xGbEJRVWtzUjBGQlJ5eHRRa0ZCV1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGFrTXNXVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXg1UWtGQmEwSXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wOUJRMmhHT3p0QlFVVkVMR0ZCUVU4c1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJUdEJRVU5xUWl4WlFVRkpMRVZCUVVVc1NVRkJTVHRCUVVOV0xHMUNRVUZYTEVWQlFVVXNiVUpCUVZrc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VDBGRGFFVXNRMEZCUXl4RFFVRkRPMHRCUTBvc1RVRkJUVHRCUVVOTUxHRkJRVThzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVNNVFqdEhRVU5HTEVOQlFVTXNRMEZCUXp0RFFVTktJaXdpWm1sc1pTSTZJbmRwZEdndWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdlMkZ3Y0dWdVpFTnZiblJsZUhSUVlYUm9MQ0JpYkc5amExQmhjbUZ0Y3l3Z1kzSmxZWFJsUm5KaGJXVXNJR2x6Ulcxd2RIa3NJR2x6Um5WdVkzUnBiMjU5SUdaeWIyMGdKeTR1TDNWMGFXeHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRvYVc1emRHRnVZMlVwSUh0Y2JpQWdhVzV6ZEdGdVkyVXVjbVZuYVhOMFpYSklaV3h3WlhJb0ozZHBkR2duTENCbWRXNWpkR2x2YmloamIyNTBaWGgwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnYVdZZ0tHbHpSblZ1WTNScGIyNG9ZMjl1ZEdWNGRDa3BJSHNnWTI5dWRHVjRkQ0E5SUdOdmJuUmxlSFF1WTJGc2JDaDBhR2x6S1RzZ2ZWeHVYRzRnSUNBZ2JHVjBJR1p1SUQwZ2IzQjBhVzl1Y3k1bWJqdGNibHh1SUNBZ0lHbG1JQ2doYVhORmJYQjBlU2hqYjI1MFpYaDBLU2tnZTF4dUlDQWdJQ0FnYkdWMElHUmhkR0VnUFNCdmNIUnBiMjV6TG1SaGRHRTdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWVhSaElDWW1JRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnSUNBZ0lHUmhkR0VnUFNCamNtVmhkR1ZHY21GdFpTaHZjSFJwYjI1ekxtUmhkR0VwTzF4dUlDQWdJQ0FnSUNCa1lYUmhMbU52Ym5SbGVIUlFZWFJvSUQwZ1lYQndaVzVrUTI5dWRHVjRkRkJoZEdnb2IzQjBhVzl1Y3k1a1lYUmhMbU52Ym5SbGVIUlFZWFJvTENCdmNIUnBiMjV6TG1sa2Mxc3dYU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmloamIyNTBaWGgwTENCN1hHNGdJQ0FnSUNBZ0lHUmhkR0U2SUdSaGRHRXNYRzRnSUNBZ0lDQWdJR0pzYjJOclVHRnlZVzF6T2lCaWJHOWphMUJoY21GdGN5aGJZMjl1ZEdWNGRGMHNJRnRrWVhSaElDWW1JR1JoZEdFdVkyOXVkR1Y0ZEZCaGRHaGRLVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdmNIUnBiMjV6TG1sdWRtVnljMlVvZEdocGN5azdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgbG9nZ2VyID0ge1xuICBtZXRob2RNYXA6IFsnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJ10sXG4gIGxldmVsOiAnaW5mbycsXG5cbiAgLy8gTWFwcyBhIGdpdmVuIGxldmVsIHZhbHVlIHRvIHRoZSBgbWV0aG9kTWFwYCBpbmRleGVzIGFib3ZlLlxuICBsb29rdXBMZXZlbDogZnVuY3Rpb24gbG9va3VwTGV2ZWwobGV2ZWwpIHtcbiAgICBpZiAodHlwZW9mIGxldmVsID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGxldmVsTWFwID0gX3V0aWxzLmluZGV4T2YobG9nZ2VyLm1ldGhvZE1hcCwgbGV2ZWwudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAobGV2ZWxNYXAgPj0gMCkge1xuICAgICAgICBsZXZlbCA9IGxldmVsTWFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWwgPSBwYXJzZUludChsZXZlbCwgMTApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsZXZlbDtcbiAgfSxcblxuICAvLyBDYW4gYmUgb3ZlcnJpZGRlbiBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudFxuICBsb2c6IGZ1bmN0aW9uIGxvZyhsZXZlbCkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcbiAgICAgIHZhciBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lc3NhZ2UgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIG1lc3NhZ2VbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlW21ldGhvZF0uYXBwbHkoY29uc29sZSwgbWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gbG9nZ2VyO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyeHZaMmRsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPM0ZDUVVGelFpeFRRVUZUT3p0QlFVVXZRaXhKUVVGSkxFMUJRVTBzUjBGQlJ6dEJRVU5ZTEZkQlFWTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEU5QlFVOHNRMEZCUXp0QlFVTTNReXhQUVVGTExFVkJRVVVzVFVGQlRUczdPMEZCUjJJc1lVRkJWeXhGUVVGRkxIRkNRVUZUTEV0QlFVc3NSVUZCUlR0QlFVTXpRaXhSUVVGSkxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNSVUZCUlR0QlFVTTNRaXhWUVVGSkxGRkJRVkVzUjBGQlJ5eGxRVUZSTEUxQlFVMHNRMEZCUXl4VFFVRlRMRVZCUVVVc1MwRkJTeXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZET1VRc1ZVRkJTU3hSUVVGUkxFbEJRVWtzUTBGQlF5eEZRVUZGTzBGQlEycENMR0ZCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU03VDBGRGJFSXNUVUZCVFR0QlFVTk1MR0ZCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMDlCUXpkQ08wdEJRMFk3TzBGQlJVUXNWMEZCVHl4TFFVRkxMRU5CUVVNN1IwRkRaRHM3TzBGQlIwUXNTMEZCUnl4RlFVRkZMR0ZCUVZNc1MwRkJTeXhGUVVGak8wRkJReTlDTEZOQlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZET3p0QlFVVnNReXhSUVVGSkxFOUJRVThzVDBGQlR5eExRVUZMTEZkQlFWY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMRVZCUVVVN1FVRkRMMFVzVlVGQlNTeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU55UXl4VlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGT3p0QlFVTndRaXhqUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzA5QlEyaENPenQzUTBGUWJVSXNUMEZCVHp0QlFVRlFMR1ZCUVU4N096dEJRVkV6UWl4aFFVRlBMRU5CUVVNc1RVRkJUU3hQUVVGRExFTkJRV1lzVDBGQlR5eEZRVUZaTEU5QlFVOHNRMEZCUXl4RFFVRkRPMHRCUXpkQ08wZEJRMFk3UTBGRFJpeERRVUZET3p0eFFrRkZZU3hOUVVGTklpd2labWxzWlNJNklteHZaMmRsY2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdhVzVrWlhoUFpuMGdabkp2YlNBbkxpOTFkR2xzY3ljN1hHNWNibXhsZENCc2IyZG5aWElnUFNCN1hHNGdJRzFsZEdodlpFMWhjRG9nV3lka1pXSjFaeWNzSUNkcGJtWnZKeXdnSjNkaGNtNG5MQ0FuWlhKeWIzSW5YU3hjYmlBZ2JHVjJaV3c2SUNkcGJtWnZKeXhjYmx4dUlDQXZMeUJOWVhCeklHRWdaMmwyWlc0Z2JHVjJaV3dnZG1Gc2RXVWdkRzhnZEdobElHQnRaWFJvYjJSTllYQmdJR2x1WkdWNFpYTWdZV0p2ZG1VdVhHNGdJR3h2YjJ0MWNFeGxkbVZzT2lCbWRXNWpkR2x2Ymloc1pYWmxiQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYkdWMlpXd2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCc1pYUWdiR1YyWld4TllYQWdQU0JwYm1SbGVFOW1LR3h2WjJkbGNpNXRaWFJvYjJSTllYQXNJR3hsZG1Wc0xuUnZURzkzWlhKRFlYTmxLQ2twTzF4dUlDQWdJQ0FnYVdZZ0tHeGxkbVZzVFdGd0lENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjJaV3dnUFNCc1pYWmxiRTFoY0R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUd4bGRtVnNJRDBnY0dGeWMyVkpiblFvYkdWMlpXd3NJREV3S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiR1YyWld3N1hHNGdJSDBzWEc1Y2JpQWdMeThnUTJGdUlHSmxJRzkyWlhKeWFXUmtaVzRnYVc0Z2RHaGxJR2h2YzNRZ1pXNTJhWEp2Ym0xbGJuUmNiaUFnYkc5bk9pQm1kVzVqZEdsdmJpaHNaWFpsYkN3Z0xpNHViV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkbVZzSUQwZ2JHOW5aMlZ5TG14dmIydDFjRXhsZG1Wc0tHeGxkbVZzS1R0Y2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyOXVjMjlzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2JHOW5aMlZ5TG14dmIydDFjRXhsZG1Wc0tHeHZaMmRsY2k1c1pYWmxiQ2tnUEQwZ2JHVjJaV3dwSUh0Y2JpQWdJQ0FnSUd4bGRDQnRaWFJvYjJRZ1BTQnNiMmRuWlhJdWJXVjBhRzlrVFdGd1cyeGxkbVZzWFR0Y2JpQWdJQ0FnSUdsbUlDZ2hZMjl1YzI5c1pWdHRaWFJvYjJSZEtTQjdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRZMjl1YzI5c1pWeHVJQ0FnSUNBZ0lDQnRaWFJvYjJRZ1BTQW5iRzluSnp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOdmJuTnZiR1ZiYldWMGFHOWtYU2d1TGk1dFpYTnpZV2RsS1RzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxamIyNXpiMnhsWEc0Z0lDQWdmVnh1SUNCOVhHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JzYjJkblpYSTdYRzRpWFgwPVxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoSGFuZGxlYmFycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB2YXIgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxuICAgICAgJEhhbmRsZWJhcnMgPSByb290LkhhbmRsZWJhcnM7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocm9vdC5IYW5kbGViYXJzID09PSBIYW5kbGViYXJzKSB7XG4gICAgICByb290LkhhbmRsZWJhcnMgPSAkSGFuZGxlYmFycztcbiAgICB9XG4gICAgcmV0dXJuIEhhbmRsZWJhcnM7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDI1dkxXTnZibVpzYVdOMExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TzNGQ1FVTmxMRlZCUVZNc1ZVRkJWU3hGUVVGRk96dEJRVVZzUXl4TlFVRkpMRWxCUVVrc1IwRkJSeXhQUVVGUExFMUJRVTBzUzBGQlN5eFhRVUZYTEVkQlFVY3NUVUZCVFN4SFFVRkhMRTFCUVUwN1RVRkRkRVFzVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN08wRkJSV3hETEZsQlFWVXNRMEZCUXl4VlFVRlZMRWRCUVVjc1dVRkJWenRCUVVOcVF5eFJRVUZKTEVsQlFVa3NRMEZCUXl4VlFVRlZMRXRCUVVzc1ZVRkJWU3hGUVVGRk8wRkJRMnhETEZWQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1YwRkJWeXhEUVVGRE8wdEJReTlDTzBGQlEwUXNWMEZCVHl4VlFVRlZMRU5CUVVNN1IwRkRia0lzUTBGQlF6dERRVU5JSWl3aVptbHNaU0k2SW01dkxXTnZibVpzYVdOMExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvZ1oyeHZZbUZzSUhkcGJtUnZkeUFxTDF4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRvU0dGdVpHeGxZbUZ5Y3lrZ2UxeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNCc1pYUWdjbTl2ZENBOUlIUjVjR1Z2WmlCbmJHOWlZV3dnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnWjJ4dlltRnNJRG9nZDJsdVpHOTNMRnh1SUNBZ0lDQWdKRWhoYm1Sc1pXSmhjbk1nUFNCeWIyOTBMa2hoYm1Sc1pXSmhjbk03WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNGdJRWhoYm1Sc1pXSmhjbk11Ym05RGIyNW1iR2xqZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lHbG1JQ2h5YjI5MExraGhibVJzWldKaGNuTWdQVDA5SUVoaGJtUnNaV0poY25NcElIdGNiaUFnSUNBZ0lISnZiM1F1U0dGdVpHeGxZbUZ5Y3lBOUlDUklZVzVrYkdWaVlYSnpPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnU0dGdVpHeGxZbUZ5Y3p0Y2JpQWdmVHRjYm4xY2JpSmRmUT09XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNoZWNrUmV2aXNpb24gPSBjaGVja1JldmlzaW9uO1xuZXhwb3J0cy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuZXhwb3J0cy53cmFwUHJvZ3JhbSA9IHdyYXBQcm9ncmFtO1xuZXhwb3J0cy5yZXNvbHZlUGFydGlhbCA9IHJlc29sdmVQYXJ0aWFsO1xuZXhwb3J0cy5pbnZva2VQYXJ0aWFsID0gaW52b2tlUGFydGlhbDtcbmV4cG9ydHMubm9vcCA9IG5vb3A7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF91dGlscyk7XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi9leGNlcHRpb24nKTtcblxudmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxudmFyIF9iYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5cbmZ1bmN0aW9uIGNoZWNrUmV2aXNpb24oY29tcGlsZXJJbmZvKSB7XG4gIHZhciBjb21waWxlclJldmlzaW9uID0gY29tcGlsZXJJbmZvICYmIGNvbXBpbGVySW5mb1swXSB8fCAxLFxuICAgICAgY3VycmVudFJldmlzaW9uID0gX2Jhc2UuQ09NUElMRVJfUkVWSVNJT047XG5cbiAgaWYgKGNvbXBpbGVyUmV2aXNpb24gIT09IGN1cnJlbnRSZXZpc2lvbikge1xuICAgIGlmIChjb21waWxlclJldmlzaW9uIDwgY3VycmVudFJldmlzaW9uKSB7XG4gICAgICB2YXIgcnVudGltZVZlcnNpb25zID0gX2Jhc2UuUkVWSVNJT05fQ0hBTkdFU1tjdXJyZW50UmV2aXNpb25dLFxuICAgICAgICAgIGNvbXBpbGVyVmVyc2lvbnMgPSBfYmFzZS5SRVZJU0lPTl9DSEFOR0VTW2NvbXBpbGVyUmV2aXNpb25dO1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGFuIG9sZGVyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgKyAnUGxlYXNlIHVwZGF0ZSB5b3VyIHByZWNvbXBpbGVyIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIHJ1bnRpbWVWZXJzaW9ucyArICcpIG9yIGRvd25ncmFkZSB5b3VyIHJ1bnRpbWUgdG8gYW4gb2xkZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVyVmVyc2lvbnMgKyAnKS4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXNlIHRoZSBlbWJlZGRlZCB2ZXJzaW9uIGluZm8gc2luY2UgdGhlIHJ1bnRpbWUgZG9lc24ndCBrbm93IGFib3V0IHRoaXMgcmV2aXNpb24geWV0XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYSBuZXdlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICsgJ1BsZWFzZSB1cGRhdGUgeW91ciBydW50aW1lIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVySW5mb1sxXSArICcpLicpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMsIGVudikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIWVudikge1xuICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdObyBlbnZpcm9ubWVudCBwYXNzZWQgdG8gdGVtcGxhdGUnKTtcbiAgfVxuICBpZiAoIXRlbXBsYXRlU3BlYyB8fCAhdGVtcGxhdGVTcGVjLm1haW4pIHtcbiAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5rbm93biB0ZW1wbGF0ZSBvYmplY3Q6ICcgKyB0eXBlb2YgdGVtcGxhdGVTcGVjKTtcbiAgfVxuXG4gIHRlbXBsYXRlU3BlYy5tYWluLmRlY29yYXRvciA9IHRlbXBsYXRlU3BlYy5tYWluX2Q7XG5cbiAgLy8gTm90ZTogVXNpbmcgZW52LlZNIHJlZmVyZW5jZXMgcmF0aGVyIHRoYW4gbG9jYWwgdmFyIHJlZmVyZW5jZXMgdGhyb3VnaG91dCB0aGlzIHNlY3Rpb24gdG8gYWxsb3dcbiAgLy8gZm9yIGV4dGVybmFsIHVzZXJzIHRvIG92ZXJyaWRlIHRoZXNlIGFzIHBzdWVkby1zdXBwb3J0ZWQgQVBJcy5cbiAgZW52LlZNLmNoZWNrUmV2aXNpb24odGVtcGxhdGVTcGVjLmNvbXBpbGVyKTtcblxuICBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsV3JhcHBlcihwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgICAgY29udGV4dCA9IFV0aWxzLmV4dGVuZCh7fSwgY29udGV4dCwgb3B0aW9ucy5oYXNoKTtcbiAgICAgIGlmIChvcHRpb25zLmlkcykge1xuICAgICAgICBvcHRpb25zLmlkc1swXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFydGlhbCA9IGVudi5WTS5yZXNvbHZlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIHZhciByZXN1bHQgPSBlbnYuVk0uaW52b2tlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHJlc3VsdCA9PSBudWxsICYmIGVudi5jb21waWxlKSB7XG4gICAgICBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0gPSBlbnYuY29tcGlsZShwYXJ0aWFsLCB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJPcHRpb25zLCBlbnYpO1xuICAgICAgcmVzdWx0ID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIGlmIChvcHRpb25zLmluZGVudCkge1xuICAgICAgICB2YXIgbGluZXMgPSByZXN1bHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICghbGluZXNbaV0gJiYgaSArIDEgPT09IGwpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpbmVzW2ldID0gb3B0aW9ucy5pbmRlbnQgKyBsaW5lc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgY29tcGlsZWQgd2hlbiBydW5uaW5nIGluIHJ1bnRpbWUtb25seSBtb2RlJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSnVzdCBhZGQgd2F0ZXJcbiAgdmFyIGNvbnRhaW5lciA9IHtcbiAgICBzdHJpY3Q6IGZ1bmN0aW9uIHN0cmljdChvYmosIG5hbWUpIHtcbiAgICAgIGlmICghKG5hbWUgaW4gb2JqKSkge1xuICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnXCInICsgbmFtZSArICdcIiBub3QgZGVmaW5lZCBpbiAnICsgb2JqKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpbbmFtZV07XG4gICAgfSxcbiAgICBsb29rdXA6IGZ1bmN0aW9uIGxvb2t1cChkZXB0aHMsIG5hbWUpIHtcbiAgICAgIHZhciBsZW4gPSBkZXB0aHMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZGVwdGhzW2ldICYmIGRlcHRoc1tpXVtuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGRlcHRoc1tpXVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGFtYmRhOiBmdW5jdGlvbiBsYW1iZGEoY3VycmVudCwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nID8gY3VycmVudC5jYWxsKGNvbnRleHQpIDogY3VycmVudDtcbiAgICB9LFxuXG4gICAgZXNjYXBlRXhwcmVzc2lvbjogVXRpbHMuZXNjYXBlRXhwcmVzc2lvbixcbiAgICBpbnZva2VQYXJ0aWFsOiBpbnZva2VQYXJ0aWFsV3JhcHBlcixcblxuICAgIGZuOiBmdW5jdGlvbiBmbihpKSB7XG4gICAgICB2YXIgcmV0ID0gdGVtcGxhdGVTcGVjW2ldO1xuICAgICAgcmV0LmRlY29yYXRvciA9IHRlbXBsYXRlU3BlY1tpICsgJ19kJ107XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG5cbiAgICBwcm9ncmFtczogW10sXG4gICAgcHJvZ3JhbTogZnVuY3Rpb24gcHJvZ3JhbShpLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgICB2YXIgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldLFxuICAgICAgICAgIGZuID0gdGhpcy5mbihpKTtcbiAgICAgIGlmIChkYXRhIHx8IGRlcHRocyB8fCBibG9ja1BhcmFtcyB8fCBkZWNsYXJlZEJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4sIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyYW1XcmFwcGVyO1xuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKHZhbHVlLCBkZXB0aCkge1xuICAgICAgd2hpbGUgKHZhbHVlICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5fcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgbWVyZ2U6IGZ1bmN0aW9uIG1lcmdlKHBhcmFtLCBjb21tb24pIHtcbiAgICAgIHZhciBvYmogPSBwYXJhbSB8fCBjb21tb247XG5cbiAgICAgIGlmIChwYXJhbSAmJiBjb21tb24gJiYgcGFyYW0gIT09IGNvbW1vbikge1xuICAgICAgICBvYmogPSBVdGlscy5leHRlbmQoe30sIGNvbW1vbiwgcGFyYW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgLy8gQW4gZW1wdHkgb2JqZWN0IHRvIHVzZSBhcyByZXBsYWNlbWVudCBmb3IgbnVsbC1jb250ZXh0c1xuICAgIG51bGxDb250ZXh0OiBPYmplY3Quc2VhbCh7fSksXG5cbiAgICBub29wOiBlbnYuVk0ubm9vcCxcbiAgICBjb21waWxlckluZm86IHRlbXBsYXRlU3BlYy5jb21waWxlclxuICB9O1xuXG4gIGZ1bmN0aW9uIHJldChjb250ZXh0KSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcblxuICAgIHZhciBkYXRhID0gb3B0aW9ucy5kYXRhO1xuXG4gICAgcmV0Ll9zZXR1cChvcHRpb25zKTtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCAmJiB0ZW1wbGF0ZVNwZWMudXNlRGF0YSkge1xuICAgICAgZGF0YSA9IGluaXREYXRhKGNvbnRleHQsIGRhdGEpO1xuICAgIH1cbiAgICB2YXIgZGVwdGhzID0gdW5kZWZpbmVkLFxuICAgICAgICBibG9ja1BhcmFtcyA9IHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyA/IFtdIDogdW5kZWZpbmVkO1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzKSB7XG4gICAgICBpZiAob3B0aW9ucy5kZXB0aHMpIHtcbiAgICAgICAgZGVwdGhzID0gY29udGV4dCAhPSBvcHRpb25zLmRlcHRoc1swXSA/IFtjb250ZXh0XS5jb25jYXQob3B0aW9ucy5kZXB0aHMpIDogb3B0aW9ucy5kZXB0aHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXB0aHMgPSBbY29udGV4dF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFpbihjb250ZXh0IC8qLCBvcHRpb25zKi8pIHtcbiAgICAgIHJldHVybiAnJyArIHRlbXBsYXRlU3BlYy5tYWluKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgfVxuICAgIG1haW4gPSBleGVjdXRlRGVjb3JhdG9ycyh0ZW1wbGF0ZVNwZWMubWFpbiwgbWFpbiwgY29udGFpbmVyLCBvcHRpb25zLmRlcHRocyB8fCBbXSwgZGF0YSwgYmxvY2tQYXJhbXMpO1xuICAgIHJldHVybiBtYWluKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG4gIHJldC5pc1RvcCA9IHRydWU7XG5cbiAgcmV0Ll9zZXR1cCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLnBhcnRpYWwpIHtcbiAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMuaGVscGVycywgZW52LmhlbHBlcnMpO1xuXG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwpIHtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMucGFydGlhbHMsIGVudi5wYXJ0aWFscyk7XG4gICAgICB9XG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwgfHwgdGVtcGxhdGVTcGVjLnVzZURlY29yYXRvcnMpIHtcbiAgICAgICAgY29udGFpbmVyLmRlY29yYXRvcnMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5kZWNvcmF0b3JzLCBlbnYuZGVjb3JhdG9ycyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gb3B0aW9ucy5oZWxwZXJzO1xuICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3B0aW9ucy5wYXJ0aWFscztcbiAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gb3B0aW9ucy5kZWNvcmF0b3JzO1xuICAgIH1cbiAgfTtcblxuICByZXQuX2NoaWxkID0gZnVuY3Rpb24gKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZUJsb2NrUGFyYW1zICYmICFibG9ja1BhcmFtcykge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ211c3QgcGFzcyBibG9jayBwYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMgJiYgIWRlcHRocykge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ211c3QgcGFzcyBwYXJlbnQgZGVwdGhzJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdyYXBQcm9ncmFtKGNvbnRhaW5lciwgaSwgdGVtcGxhdGVTcGVjW2ldLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICBmdW5jdGlvbiBwcm9nKGNvbnRleHQpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xuXG4gICAgdmFyIGN1cnJlbnREZXB0aHMgPSBkZXB0aHM7XG4gICAgaWYgKGRlcHRocyAmJiBjb250ZXh0ICE9IGRlcHRoc1swXSAmJiAhKGNvbnRleHQgPT09IGNvbnRhaW5lci5udWxsQ29udGV4dCAmJiBkZXB0aHNbMF0gPT09IG51bGwpKSB7XG4gICAgICBjdXJyZW50RGVwdGhzID0gW2NvbnRleHRdLmNvbmNhdChkZXB0aHMpO1xuICAgIH1cblxuICAgIHJldHVybiBmbihjb250YWluZXIsIGNvbnRleHQsIGNvbnRhaW5lci5oZWxwZXJzLCBjb250YWluZXIucGFydGlhbHMsIG9wdGlvbnMuZGF0YSB8fCBkYXRhLCBibG9ja1BhcmFtcyAmJiBbb3B0aW9ucy5ibG9ja1BhcmFtc10uY29uY2F0KGJsb2NrUGFyYW1zKSwgY3VycmVudERlcHRocyk7XG4gIH1cblxuICBwcm9nID0gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcyk7XG5cbiAgcHJvZy5wcm9ncmFtID0gaTtcbiAgcHJvZy5kZXB0aCA9IGRlcHRocyA/IGRlcHRocy5sZW5ndGggOiAwO1xuICBwcm9nLmJsb2NrUGFyYW1zID0gZGVjbGFyZWRCbG9ja1BhcmFtcyB8fCAwO1xuICByZXR1cm4gcHJvZztcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICBpZiAoIXBhcnRpYWwpIHtcbiAgICBpZiAob3B0aW9ucy5uYW1lID09PSAnQHBhcnRpYWwtYmxvY2snKSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV07XG4gICAgfVxuICB9IGVsc2UgaWYgKCFwYXJ0aWFsLmNhbGwgJiYgIW9wdGlvbnMubmFtZSkge1xuICAgIC8vIFRoaXMgaXMgYSBkeW5hbWljIHBhcnRpYWwgdGhhdCByZXR1cm5lZCBhIHN0cmluZ1xuICAgIG9wdGlvbnMubmFtZSA9IHBhcnRpYWw7XG4gICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbcGFydGlhbF07XG4gIH1cbiAgcmV0dXJuIHBhcnRpYWw7XG59XG5cbmZ1bmN0aW9uIGludm9rZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICAvLyBVc2UgdGhlIGN1cnJlbnQgY2xvc3VyZSBjb250ZXh0IHRvIHNhdmUgdGhlIHBhcnRpYWwtYmxvY2sgaWYgdGhpcyBwYXJ0aWFsXG4gIHZhciBjdXJyZW50UGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICBvcHRpb25zLnBhcnRpYWwgPSB0cnVlO1xuICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICBvcHRpb25zLmRhdGEuY29udGV4dFBhdGggPSBvcHRpb25zLmlkc1swXSB8fCBvcHRpb25zLmRhdGEuY29udGV4dFBhdGg7XG4gIH1cblxuICB2YXIgcGFydGlhbEJsb2NrID0gdW5kZWZpbmVkO1xuICBpZiAob3B0aW9ucy5mbiAmJiBvcHRpb25zLmZuICE9PSBub29wKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIG9wdGlvbnMuZGF0YSA9IF9iYXNlLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAvLyBXcmFwcGVyIGZ1bmN0aW9uIHRvIGdldCBhY2Nlc3MgdG8gY3VycmVudFBhcnRpYWxCbG9jayBmcm9tIHRoZSBjbG9zdXJlXG4gICAgICB2YXIgZm4gPSBvcHRpb25zLmZuO1xuICAgICAgcGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBmdW5jdGlvbiBwYXJ0aWFsQmxvY2tXcmFwcGVyKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcblxuICAgICAgICAvLyBSZXN0b3JlIHRoZSBwYXJ0aWFsLWJsb2NrIGZyb20gdGhlIGNsb3N1cmUgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhlIGJsb2NrXG4gICAgICAgIC8vIGkuZS4gdGhlIHBhcnQgaW5zaWRlIHRoZSBibG9jayBvZiB0aGUgcGFydGlhbCBjYWxsLlxuICAgICAgICBvcHRpb25zLmRhdGEgPSBfYmFzZS5jcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGN1cnJlbnRQYXJ0aWFsQmxvY2s7XG4gICAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH07XG4gICAgICBpZiAoZm4ucGFydGlhbHMpIHtcbiAgICAgICAgb3B0aW9ucy5wYXJ0aWFscyA9IFV0aWxzLmV4dGVuZCh7fSwgb3B0aW9ucy5wYXJ0aWFscywgZm4ucGFydGlhbHMpO1xuICAgICAgfVxuICAgIH0pKCk7XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkICYmIHBhcnRpYWxCbG9jaykge1xuICAgIHBhcnRpYWwgPSBwYXJ0aWFsQmxvY2s7XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBmb3VuZCcpO1xuICB9IGVsc2UgaWYgKHBhcnRpYWwgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiBwYXJ0aWFsKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEoY29udGV4dCwgZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgISgncm9vdCcgaW4gZGF0YSkpIHtcbiAgICBkYXRhID0gZGF0YSA/IF9iYXNlLmNyZWF0ZUZyYW1lKGRhdGEpIDoge307XG4gICAgZGF0YS5yb290ID0gY29udGV4dDtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcykge1xuICBpZiAoZm4uZGVjb3JhdG9yKSB7XG4gICAgdmFyIHByb3BzID0ge307XG4gICAgcHJvZyA9IGZuLmRlY29yYXRvcihwcm9nLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aHMgJiYgZGVwdGhzWzBdLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICBVdGlscy5leHRlbmQocHJvZywgcHJvcHMpO1xuICB9XG4gIHJldHVybiBwcm9nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMM0oxYm5ScGJXVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdjVUpCUVhWQ0xGTkJRVk03TzBsQlFYQkNMRXRCUVVzN08zbENRVU5MTEdGQlFXRTdPenM3YjBKQlF6aENMRkZCUVZFN08wRkJSV3hGTEZOQlFWTXNZVUZCWVN4RFFVRkRMRmxCUVZrc1JVRkJSVHRCUVVNeFF5eE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExGbEJRVmtzU1VGQlNTeFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJRenROUVVOMlJDeGxRVUZsTERCQ1FVRnZRaXhEUVVGRE96dEJRVVV4UXl4TlFVRkpMR2RDUVVGblFpeExRVUZMTEdWQlFXVXNSVUZCUlR0QlFVTjRReXhSUVVGSkxHZENRVUZuUWl4SFFVRkhMR1ZCUVdVc1JVRkJSVHRCUVVOMFF5eFZRVUZOTEdWQlFXVXNSMEZCUnl4MVFrRkJhVUlzWlVGQlpTeERRVUZETzFWQlEyNUVMR2RDUVVGblFpeEhRVUZITEhWQ1FVRnBRaXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMEZCUXpWRUxGbEJRVTBzTWtKQlFXTXNlVVpCUVhsR0xFZEJRM1pITEhGRVFVRnhSQ3hIUVVGSExHVkJRV1VzUjBGQlJ5eHRSRUZCYlVRc1IwRkJSeXhuUWtGQlowSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVOb1N5eE5RVUZOT3p0QlFVVk1MRmxCUVUwc01rSkJRV01zZDBaQlFYZEdMRWRCUTNSSExHbEVRVUZwUkN4SFFVRkhMRmxCUVZrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTnVSanRIUVVOR08wTkJRMFk3TzBGQlJVMHNVMEZCVXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hGUVVGRkxFZEJRVWNzUlVGQlJUczdRVUZGTVVNc1RVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU5TTEZWQlFVMHNNa0pCUVdNc2JVTkJRVzFETEVOQlFVTXNRMEZCUXp0SFFVTXhSRHRCUVVORUxFMUJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRM1pETEZWQlFVMHNNa0pCUVdNc01rSkJRVEpDTEVkQlFVY3NUMEZCVHl4WlFVRlpMRU5CUVVNc1EwRkJRenRIUVVONFJUczdRVUZGUkN4alFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRPenM3TzBGQlNXeEVMRXRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeERRVUZETEZsQlFWa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenM3UVVGRk5VTXNWMEZCVXl4dlFrRkJiMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVOMlJDeFJRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVN1FVRkRhRUlzWVVGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRiRVFzVlVGQlNTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUTJZc1pVRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1QwRkRka0k3UzBGRFJqczdRVUZGUkN4WFFVRlBMRWRCUVVjc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUTNSRkxGRkJRVWtzVFVGQlRTeEhRVUZITEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6czdRVUZGZUVVc1VVRkJTU3hOUVVGTkxFbEJRVWtzU1VGQlNTeEpRVUZKTEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUVVVN1FVRkRha01zWVVGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1dVRkJXU3hEUVVGRExHVkJRV1VzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjZSaXhaUVVGTkxFZEJRVWNzVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMHRCUXpORU8wRkJRMFFzVVVGQlNTeE5RVUZOTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTJ4Q0xGVkJRVWtzVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTnNRaXhaUVVGSkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJReTlDTEdGQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZETlVNc1kwRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU0xUWl4clFrRkJUVHRYUVVOUU96dEJRVVZFTEdWQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVOMFF6dEJRVU5FTEdOQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzA5QlF6TkNPMEZCUTBRc1lVRkJUeXhOUVVGTkxFTkJRVU03UzBGRFppeE5RVUZOTzBGQlEwd3NXVUZCVFN3eVFrRkJZeXhqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NSMEZCUnl3d1JFRkJNRVFzUTBGQlF5eERRVUZETzB0QlEycElPMGRCUTBZN096dEJRVWRFTEUxQlFVa3NVMEZCVXl4SFFVRkhPMEZCUTJRc1ZVRkJUU3hGUVVGRkxHZENRVUZUTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVN1FVRkRNVUlzVlVGQlNTeEZRVUZGTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVFc1FVRkJReXhGUVVGRk8wRkJRMnhDTEdOQlFVMHNNa0pCUVdNc1IwRkJSeXhIUVVGSExFbEJRVWtzUjBGQlJ5eHRRa0ZCYlVJc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF6dFBRVU0zUkR0QlFVTkVMR0ZCUVU4c1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlEyeENPMEZCUTBRc1ZVRkJUU3hGUVVGRkxHZENRVUZUTEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVN1FVRkROMElzVlVGQlRTeEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVNeFFpeFhRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUXpWQ0xGbEJRVWtzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SlFVRkpMRVZCUVVVN1FVRkRlRU1zYVVKQlFVOHNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFOQlEzaENPMDlCUTBZN1MwRkRSanRCUVVORUxGVkJRVTBzUlVGQlJTeG5Ra0ZCVXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRMnBETEdGQlFVOHNUMEZCVHl4UFFVRlBMRXRCUVVzc1ZVRkJWU3hIUVVGSExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGRE8wdEJRM2hGT3p0QlFVVkVMRzlDUVVGblFpeEZRVUZGTEV0QlFVc3NRMEZCUXl4blFrRkJaMEk3UVVGRGVFTXNhVUpCUVdFc1JVRkJSU3h2UWtGQmIwSTdPMEZCUlc1RExFMUJRVVVzUlVGQlJTeFpRVUZUTEVOQlFVTXNSVUZCUlR0QlFVTmtMRlZCUVVrc1IwRkJSeXhIUVVGSExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXhRaXhUUVVGSExFTkJRVU1zVTBGQlV5eEhRVUZITEZsQlFWa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGRrTXNZVUZCVHl4SFFVRkhMRU5CUVVNN1MwRkRXanM3UVVGRlJDeFpRVUZSTEVWQlFVVXNSVUZCUlR0QlFVTmFMRmRCUVU4c1JVRkJSU3hwUWtGQlV5eERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRzFDUVVGdFFpeEZRVUZGTEZkQlFWY3NSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkRia1VzVlVGQlNTeGpRVUZqTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03VlVGRGFrTXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEY0VJc1ZVRkJTU3hKUVVGSkxFbEJRVWtzVFVGQlRTeEpRVUZKTEZkQlFWY3NTVUZCU1N4dFFrRkJiVUlzUlVGQlJUdEJRVU40UkN4elFrRkJZeXhIUVVGSExGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGSkxFVkJRVVVzYlVKQlFXMUNMRVZCUVVVc1YwRkJWeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzA5QlF6TkdMRTFCUVUwc1NVRkJTU3hEUVVGRExHTkJRV01zUlVGQlJUdEJRVU14UWl4elFrRkJZeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1QwRkRPVVE3UVVGRFJDeGhRVUZQTEdOQlFXTXNRMEZCUXp0TFFVTjJRanM3UVVGRlJDeFJRVUZKTEVWQlFVVXNZMEZCVXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRk8wRkJRek5DTEdGQlFVOHNTMEZCU3l4SlFVRkpMRXRCUVVzc1JVRkJSU3hGUVVGRk8wRkJRM1pDTEdGQlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRE8wOUJRM1pDTzBGQlEwUXNZVUZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHRCUVVORUxGTkJRVXNzUlVGQlJTeGxRVUZUTEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkROMElzVlVGQlNTeEhRVUZITEVkQlFVY3NTMEZCU3l4SlFVRkpMRTFCUVUwc1EwRkJRenM3UVVGRk1VSXNWVUZCU1N4TFFVRkxMRWxCUVVrc1RVRkJUU3hKUVVGTExFdEJRVXNzUzBGQlN5eE5RVUZOTEVGQlFVTXNSVUZCUlR0QlFVTjZReXhYUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzA5QlEzWkRPenRCUVVWRUxHRkJRVThzUjBGQlJ5eERRVUZETzB0QlExbzdPMEZCUlVRc1pVRkJWeXhGUVVGRkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRPenRCUVVVMVFpeFJRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSk8wRkJRMnBDTEdkQ1FVRlpMRVZCUVVVc1dVRkJXU3hEUVVGRExGRkJRVkU3UjBGRGNFTXNRMEZCUXpzN1FVRkZSaXhYUVVGVExFZEJRVWNzUTBGQlF5eFBRVUZQTEVWQlFXZENPMUZCUVdRc1QwRkJUeXg1UkVGQlJ5eEZRVUZGT3p0QlFVTm9ReXhSUVVGSkxFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRPenRCUVVWNFFpeFBRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRM0JDTEZGQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhKUVVGSkxGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVTdRVUZETlVNc1ZVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRhRU03UVVGRFJDeFJRVUZKTEUxQlFVMHNXVUZCUVR0UlFVTk9MRmRCUVZjc1IwRkJSeXhaUVVGWkxFTkJRVU1zWTBGQll5eEhRVUZITEVWQlFVVXNSMEZCUnl4VFFVRlRMRU5CUVVNN1FVRkRMMFFzVVVGQlNTeFpRVUZaTEVOQlFVTXNVMEZCVXl4RlFVRkZPMEZCUXpGQ0xGVkJRVWtzVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTnNRaXhqUVVGTkxFZEJRVWNzVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNN1QwRkRNMFlzVFVGQlRUdEJRVU5NTEdOQlFVMHNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wOUJRM0JDTzB0QlEwWTdPMEZCUlVRc1lVRkJVeXhKUVVGSkxFTkJRVU1zVDBGQlR5eG5Ra0ZCWlR0QlFVTnNReXhoUVVGUExFVkJRVVVzUjBGQlJ5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hQUVVGUExFVkJRVVVzVTBGQlV5eERRVUZETEU5QlFVOHNSVUZCUlN4VFFVRlRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFhRVUZYTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1MwRkRja2c3UVVGRFJDeFJRVUZKTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1UwRkJVeXhGUVVGRkxFOUJRVThzUTBGQlF5eE5RVUZOTEVsQlFVa3NSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dEJRVU4wUnl4WFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdSMEZETDBJN1FVRkRSQ3hMUVVGSExFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXpzN1FVRkZha0lzUzBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlRMRTlCUVU4c1JVRkJSVHRCUVVNM1FpeFJRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSVHRCUVVOd1FpeGxRVUZUTEVOQlFVTXNUMEZCVHl4SFFVRkhMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNSVUZCUlN4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03TzBGQlJXeEZMRlZCUVVrc1dVRkJXU3hEUVVGRExGVkJRVlVzUlVGQlJUdEJRVU16UWl4cFFrRkJVeXhEUVVGRExGRkJRVkVzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMDlCUTNSRk8wRkJRMFFzVlVGQlNTeFpRVUZaTEVOQlFVTXNWVUZCVlN4SlFVRkpMRmxCUVZrc1EwRkJReXhoUVVGaExFVkJRVVU3UVVGRGVrUXNhVUpCUVZNc1EwRkJReXhWUVVGVkxFZEJRVWNzVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFZEJRVWNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UFFVTTFSVHRMUVVOR0xFMUJRVTA3UVVGRFRDeGxRVUZUTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU03UVVGRGNFTXNaVUZCVXl4RFFVRkRMRkZCUVZFc1IwRkJSeXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETzBGQlEzUkRMR1ZCUVZNc1EwRkJReXhWUVVGVkxFZEJRVWNzVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXp0TFFVTXpRenRIUVVOR0xFTkJRVU03TzBGQlJVWXNTMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhWUVVGVExFTkJRVU1zUlVGQlJTeEpRVUZKTEVWQlFVVXNWMEZCVnl4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVOc1JDeFJRVUZKTEZsQlFWa3NRMEZCUXl4alFVRmpMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVU3UVVGREwwTXNXVUZCVFN3eVFrRkJZeXgzUWtGQmQwSXNRMEZCUXl4RFFVRkRPMHRCUXk5RE8wRkJRMFFzVVVGQlNTeFpRVUZaTEVOQlFVTXNVMEZCVXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRM0pETEZsQlFVMHNNa0pCUVdNc2VVSkJRWGxDTEVOQlFVTXNRMEZCUXp0TFFVTm9SRHM3UVVGRlJDeFhRVUZQTEZkQlFWY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhGUVVGRkxGZEJRVmNzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0SFFVTnFSaXhEUVVGRE8wRkJRMFlzVTBGQlR5eEhRVUZITEVOQlFVTTdRMEZEV2pzN1FVRkZUU3hUUVVGVExGZEJRVmNzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGSkxFVkJRVVVzYlVKQlFXMUNMRVZCUVVVc1YwRkJWeXhGUVVGRkxFMUJRVTBzUlVGQlJUdEJRVU0xUml4WFFVRlRMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRV2RDTzFGQlFXUXNUMEZCVHl4NVJFRkJSeXhGUVVGRk96dEJRVU5xUXl4UlFVRkpMR0ZCUVdFc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRE0wSXNVVUZCU1N4TlFVRk5MRWxCUVVrc1QwRkJUeXhKUVVGSkxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1MwRkJTeXhUUVVGVExFTkJRVU1zVjBGQlZ5eEpRVUZKTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhKUVVGSkxFTkJRVUVzUVVGQlF5eEZRVUZGTzBGQlEyaEhMRzFDUVVGaExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UzBGRE1VTTdPMEZCUlVRc1YwRkJUeXhGUVVGRkxFTkJRVU1zVTBGQlV5eEZRVU5tTEU5QlFVOHNSVUZEVUN4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGRkxGTkJRVk1zUTBGQlF5eFJRVUZSTEVWQlEzSkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFbEJRVWtzU1VGQlNTeEZRVU53UWl4WFFVRlhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVONFJDeGhRVUZoTEVOQlFVTXNRMEZCUXp0SFFVTndRanM3UVVGRlJDeE5RVUZKTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVc1RVRkJUU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXpzN1FVRkZla1VzVFVGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRha0lzVFVGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEZUVNc1RVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eHRRa0ZCYlVJc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE5VTXNVMEZCVHl4SlFVRkpMRU5CUVVNN1EwRkRZanM3UVVGRlRTeFRRVUZUTEdOQlFXTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU40UkN4TlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRMW9zVVVGQlNTeFBRVUZQTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2RDUVVGblFpeEZRVUZGTzBGQlEzSkRMR0ZCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMHRCUTNwRExFMUJRVTA3UVVGRFRDeGhRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZETVVNN1IwRkRSaXhOUVVGTkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJUczdRVUZGZWtNc1YwRkJUeXhEUVVGRExFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTTdRVUZEZGtJc1YwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1IwRkRja003UVVGRFJDeFRRVUZQTEU5QlFVOHNRMEZCUXp0RFFVTm9RanM3UVVGRlRTeFRRVUZUTEdGQlFXRXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUczdRVUZGZGtRc1RVRkJUU3h0UWtGQmJVSXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1FVRkRNVVVzVTBGQlR5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRka0lzVFVGQlNTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUTJZc1YwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJRenRIUVVOMlJUczdRVUZGUkN4TlFVRkpMRmxCUVZrc1dVRkJRU3hEUVVGRE8wRkJRMnBDTEUxQlFVa3NUMEZCVHl4RFFVRkRMRVZCUVVVc1NVRkJTU3hQUVVGUExFTkJRVU1zUlVGQlJTeExRVUZMTEVsQlFVa3NSVUZCUlRzN1FVRkRja01zWVVGQlR5eERRVUZETEVsQlFVa3NSMEZCUnl4clFrRkJXU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdPMEZCUlhwRExGVkJRVWtzUlVGQlJTeEhRVUZITEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNN1FVRkRjRUlzYTBKQlFWa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEhRVUZITEZOQlFWTXNiVUpCUVcxQ0xFTkJRVU1zVDBGQlR5eEZRVUZuUWp0WlFVRmtMRTlCUVU4c2VVUkJRVWNzUlVGQlJUczdPenRCUVVrdlJpeGxRVUZQTEVOQlFVTXNTVUZCU1N4SFFVRkhMR3RDUVVGWkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTjZReXhsUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SFFVRkhMRzFDUVVGdFFpeERRVUZETzBGQlEzQkVMR1ZCUVU4c1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0UFFVTTNRaXhEUVVGRE8wRkJRMFlzVlVGQlNTeEZRVUZGTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTJZc1pVRkJUeXhEUVVGRExGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSU3hQUVVGUExFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFVVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRQUVVOd1JUczdSMEZEUmpzN1FVRkZSQ3hOUVVGSkxFOUJRVThzUzBGQlN5eFRRVUZUTEVsQlFVa3NXVUZCV1N4RlFVRkZPMEZCUTNwRExGZEJRVThzUjBGQlJ5eFpRVUZaTEVOQlFVTTdSMEZEZUVJN08wRkJSVVFzVFVGQlNTeFBRVUZQTEV0QlFVc3NVMEZCVXl4RlFVRkZPMEZCUTNwQ0xGVkJRVTBzTWtKQlFXTXNZMEZCWXl4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFZEJRVWNzY1VKQlFYRkNMRU5CUVVNc1EwRkJRenRIUVVNMVJTeE5RVUZOTEVsQlFVa3NUMEZCVHl4WlFVRlpMRkZCUVZFc1JVRkJSVHRCUVVOMFF5eFhRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UjBGRGJFTTdRMEZEUmpzN1FVRkZUU3hUUVVGVExFbEJRVWtzUjBGQlJ6dEJRVUZGTEZOQlFVOHNSVUZCUlN4RFFVRkRPME5CUVVVN08wRkJSWEpETEZOQlFWTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVU3UVVGREwwSXNUVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJTU3hGUVVGRkxFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVRXNRVUZCUXl4RlFVRkZPMEZCUXpsQ0xGRkJRVWtzUjBGQlJ5eEpRVUZKTEVkQlFVY3NhMEpCUVZrc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEzSkRMRkZCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETzBkQlEzSkNPMEZCUTBRc1UwRkJUeXhKUVVGSkxFTkJRVU03UTBGRFlqczdRVUZGUkN4VFFVRlRMR2xDUVVGcFFpeERRVUZETEVWQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1UwRkJVeXhGUVVGRkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNWMEZCVnl4RlFVRkZPMEZCUTNwRkxFMUJRVWtzUlVGQlJTeERRVUZETEZOQlFWTXNSVUZCUlR0QlFVTm9RaXhSUVVGSkxFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEWml4UlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSU3hOUVVGTkxFbEJRVWtzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hYUVVGWExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZETlVZc1UwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1IwRkRNMEk3UVVGRFJDeFRRVUZQTEVsQlFVa3NRMEZCUXp0RFFVTmlJaXdpWm1sc1pTSTZJbkoxYm5ScGJXVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnS2lCaGN5QlZkR2xzY3lCbWNtOXRJQ2N1TDNWMGFXeHpKenRjYm1sdGNHOXlkQ0JGZUdObGNIUnBiMjRnWm5KdmJTQW5MaTlsZUdObGNIUnBiMjRuTzF4dWFXMXdiM0owSUhzZ1EwOU5VRWxNUlZKZlVrVldTVk5KVDA0c0lGSkZWa2xUU1U5T1gwTklRVTVIUlZNc0lHTnlaV0YwWlVaeVlXMWxJSDBnWm5KdmJTQW5MaTlpWVhObEp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR05vWldOclVtVjJhWE5wYjI0b1kyOXRjR2xzWlhKSmJtWnZLU0I3WEc0Z0lHTnZibk4wSUdOdmJYQnBiR1Z5VW1WMmFYTnBiMjRnUFNCamIyMXdhV3hsY2tsdVptOGdKaVlnWTI5dGNHbHNaWEpKYm1adld6QmRJSHg4SURFc1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SU1pYWnBjMmx2YmlBOUlFTlBUVkJKVEVWU1gxSkZWa2xUU1U5T08xeHVYRzRnSUdsbUlDaGpiMjF3YVd4bGNsSmxkbWx6YVc5dUlDRTlQU0JqZFhKeVpXNTBVbVYyYVhOcGIyNHBJSHRjYmlBZ0lDQnBaaUFvWTI5dGNHbHNaWEpTWlhacGMybHZiaUE4SUdOMWNuSmxiblJTWlhacGMybHZiaWtnZTF4dUlDQWdJQ0FnWTI5dWMzUWdjblZ1ZEdsdFpWWmxjbk5wYjI1eklEMGdVa1ZXU1ZOSlQwNWZRMGhCVGtkRlUxdGpkWEp5Wlc1MFVtVjJhWE5wYjI1ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dGNHbHNaWEpXWlhKemFXOXVjeUE5SUZKRlZrbFRTVTlPWDBOSVFVNUhSVk5iWTI5dGNHbHNaWEpTWlhacGMybHZibDA3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkVVpXMXdiR0YwWlNCM1lYTWdjSEpsWTI5dGNHbHNaV1FnZDJsMGFDQmhiaUJ2YkdSbGNpQjJaWEp6YVc5dUlHOW1JRWhoYm1Sc1pXSmhjbk1nZEdoaGJpQjBhR1VnWTNWeWNtVnVkQ0J5ZFc1MGFXMWxMaUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RRYkdWaGMyVWdkWEJrWVhSbElIbHZkWElnY0hKbFkyOXRjR2xzWlhJZ2RHOGdZU0J1WlhkbGNpQjJaWEp6YVc5dUlDZ25JQ3NnY25WdWRHbHRaVlpsY25OcGIyNXpJQ3NnSnlrZ2IzSWdaRzkzYm1keVlXUmxJSGx2ZFhJZ2NuVnVkR2x0WlNCMGJ5QmhiaUJ2YkdSbGNpQjJaWEp6YVc5dUlDZ25JQ3NnWTI5dGNHbHNaWEpXWlhKemFXOXVjeUFySUNjcExpY3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QlZjMlVnZEdobElHVnRZbVZrWkdWa0lIWmxjbk5wYjI0Z2FXNW1ieUJ6YVc1alpTQjBhR1VnY25WdWRHbHRaU0JrYjJWemJpZDBJR3R1YjNjZ1lXSnZkWFFnZEdocGN5QnlaWFpwYzJsdmJpQjVaWFJjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjFSbGJYQnNZWFJsSUhkaGN5QndjbVZqYjIxd2FXeGxaQ0IzYVhSb0lHRWdibVYzWlhJZ2RtVnljMmx2YmlCdlppQklZVzVrYkdWaVlYSnpJSFJvWVc0Z2RHaGxJR04xY25KbGJuUWdjblZ1ZEdsdFpTNGdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5VR3hsWVhObElIVndaR0YwWlNCNWIzVnlJSEoxYm5ScGJXVWdkRzhnWVNCdVpYZGxjaUIyWlhKemFXOXVJQ2duSUNzZ1kyOXRjR2xzWlhKSmJtWnZXekZkSUNzZ0p5a3VKeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUIwWlcxd2JHRjBaU2gwWlcxd2JHRjBaVk53WldNc0lHVnVkaWtnZTF4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdibVY0ZENBcUwxeHVJQ0JwWmlBb0lXVnVkaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjA1dklHVnVkbWx5YjI1dFpXNTBJSEJoYzNObFpDQjBieUIwWlcxd2JHRjBaU2NwTzF4dUlDQjlYRzRnSUdsbUlDZ2hkR1Z0Y0d4aGRHVlRjR1ZqSUh4OElDRjBaVzF3YkdGMFpWTndaV011YldGcGJpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9KMVZ1YTI1dmQyNGdkR1Z0Y0d4aGRHVWdiMkpxWldOME9pQW5JQ3NnZEhsd1pXOW1JSFJsYlhCc1lYUmxVM0JsWXlrN1hHNGdJSDFjYmx4dUlDQjBaVzF3YkdGMFpWTndaV011YldGcGJpNWtaV052Y21GMGIzSWdQU0IwWlcxd2JHRjBaVk53WldNdWJXRnBibDlrTzF4dVhHNGdJQzh2SUU1dmRHVTZJRlZ6YVc1bklHVnVkaTVXVFNCeVpXWmxjbVZ1WTJWeklISmhkR2hsY2lCMGFHRnVJR3h2WTJGc0lIWmhjaUJ5WldabGNtVnVZMlZ6SUhSb2NtOTFaMmh2ZFhRZ2RHaHBjeUJ6WldOMGFXOXVJSFJ2SUdGc2JHOTNYRzRnSUM4dklHWnZjaUJsZUhSbGNtNWhiQ0IxYzJWeWN5QjBieUJ2ZG1WeWNtbGtaU0IwYUdWelpTQmhjeUJ3YzNWbFpHOHRjM1Z3Y0c5eWRHVmtJRUZRU1hNdVhHNGdJR1Z1ZGk1V1RTNWphR1ZqYTFKbGRtbHphVzl1S0hSbGJYQnNZWFJsVTNCbFl5NWpiMjF3YVd4bGNpazdYRzVjYmlBZ1puVnVZM1JwYjI0Z2FXNTJiMnRsVUdGeWRHbGhiRmR5WVhCd1pYSW9jR0Z5ZEdsaGJDd2dZMjl1ZEdWNGRDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbWhoYzJncElIdGNiaUFnSUNBZ0lHTnZiblJsZUhRZ1BTQlZkR2xzY3k1bGVIUmxibVFvZTMwc0lHTnZiblJsZUhRc0lHOXdkR2x2Ym5NdWFHRnphQ2s3WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1cFpITXBJSHRjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVwWkhOYk1GMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhCaGNuUnBZV3dnUFNCbGJuWXVWazB1Y21WemIyeDJaVkJoY25ScFlXd3VZMkZzYkNoMGFHbHpMQ0J3WVhKMGFXRnNMQ0JqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQnNaWFFnY21WemRXeDBJRDBnWlc1MkxsWk5MbWx1ZG05clpWQmhjblJwWVd3dVkyRnNiQ2gwYUdsekxDQndZWEowYVdGc0xDQmpiMjUwWlhoMExDQnZjSFJwYjI1ektUdGNibHh1SUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDBnYm5Wc2JDQW1KaUJsYm5ZdVkyOXRjR2xzWlNrZ2UxeHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1d1lYSjBhV0ZzYzF0dmNIUnBiMjV6TG01aGJXVmRJRDBnWlc1MkxtTnZiWEJwYkdVb2NHRnlkR2xoYkN3Z2RHVnRjR3hoZEdWVGNHVmpMbU52YlhCcGJHVnlUM0IwYVc5dWN5d2daVzUyS1R0Y2JpQWdJQ0FnSUhKbGMzVnNkQ0E5SUc5d2RHbHZibk11Y0dGeWRHbGhiSE5iYjNCMGFXOXVjeTV1WVcxbFhTaGpiMjUwWlhoMExDQnZjSFJwYjI1ektUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tISmxjM1ZzZENBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NXBibVJsYm5RcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUd4cGJtVnpJRDBnY21WemRXeDBMbk53YkdsMEtDZGNYRzRuS1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQnNhVzVsY3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXeHBibVZ6VzJsZElDWW1JR2tnS3lBeElEMDlQU0JzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQnNhVzVsYzF0cFhTQTlJRzl3ZEdsdmJuTXVhVzVrWlc1MElDc2diR2x1WlhOYmFWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WemRXeDBJRDBnYkdsdVpYTXVhbTlwYmlnblhGeHVKeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkVWFHVWdjR0Z5ZEdsaGJDQW5JQ3NnYjNCMGFXOXVjeTV1WVcxbElDc2dKeUJqYjNWc1pDQnViM1FnWW1VZ1kyOXRjR2xzWldRZ2QyaGxiaUJ5ZFc1dWFXNW5JR2x1SUhKMWJuUnBiV1V0YjI1c2VTQnRiMlJsSnlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OGdTblZ6ZENCaFpHUWdkMkYwWlhKY2JpQWdiR1YwSUdOdmJuUmhhVzVsY2lBOUlIdGNiaUFnSUNCemRISnBZM1E2SUdaMWJtTjBhVzl1S0c5aWFpd2dibUZ0WlNrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0VvYm1GdFpTQnBiaUJ2WW1vcEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjF3aUp5QXJJRzVoYldVZ0t5QW5YQ0lnYm05MElHUmxabWx1WldRZ2FXNGdKeUFySUc5aWFpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2IySnFXMjVoYldWZE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYkc5dmEzVndPaUJtZFc1amRHbHZiaWhrWlhCMGFITXNJRzVoYldVcElIdGNiaUFnSUNBZ0lHTnZibk4wSUd4bGJpQTlJR1JsY0hSb2N5NXNaVzVuZEdnN1hHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoa1pYQjBhSE5iYVYwZ0ppWWdaR1Z3ZEdoelcybGRXMjVoYldWZElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaR1Z3ZEdoelcybGRXMjVoYldWZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNiaUFnSUNCc1lXMWlaR0U2SUdaMWJtTjBhVzl1S0dOMWNuSmxiblFzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdZM1Z5Y21WdWRDQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lHTjFjbkpsYm5RdVkyRnNiQ2hqYjI1MFpYaDBLU0E2SUdOMWNuSmxiblE3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR1Z6WTJGd1pVVjRjSEpsYzNOcGIyNDZJRlYwYVd4ekxtVnpZMkZ3WlVWNGNISmxjM05wYjI0c1hHNGdJQ0FnYVc1MmIydGxVR0Z5ZEdsaGJEb2dhVzUyYjJ0bFVHRnlkR2xoYkZkeVlYQndaWElzWEc1Y2JpQWdJQ0JtYmpvZ1puVnVZM1JwYjI0b2FTa2dlMXh1SUNBZ0lDQWdiR1YwSUhKbGRDQTlJSFJsYlhCc1lYUmxVM0JsWTF0cFhUdGNiaUFnSUNBZ0lISmxkQzVrWldOdmNtRjBiM0lnUFNCMFpXMXdiR0YwWlZOd1pXTmJhU0FySUNkZlpDZGRPMXh1SUNBZ0lDQWdjbVYwZFhKdUlISmxkRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjSEp2WjNKaGJYTTZJRnRkTEZ4dUlDQWdJSEJ5YjJkeVlXMDZJR1oxYm1OMGFXOXVLR2tzSUdSaGRHRXNJR1JsWTJ4aGNtVmtRbXh2WTJ0UVlYSmhiWE1zSUdKc2IyTnJVR0Z5WVcxekxDQmtaWEIwYUhNcElIdGNiaUFnSUNBZ0lHeGxkQ0J3Y205bmNtRnRWM0poY0hCbGNpQTlJSFJvYVhNdWNISnZaM0poYlhOYmFWMHNYRzRnSUNBZ0lDQWdJQ0FnWm00Z1BTQjBhR2x6TG1adUtHa3BPMXh1SUNBZ0lDQWdhV1lnS0dSaGRHRWdmSHdnWkdWd2RHaHpJSHg4SUdKc2IyTnJVR0Z5WVcxeklIeDhJR1JsWTJ4aGNtVmtRbXh2WTJ0UVlYSmhiWE1wSUh0Y2JpQWdJQ0FnSUNBZ2NISnZaM0poYlZkeVlYQndaWElnUFNCM2NtRndVSEp2WjNKaGJTaDBhR2x6TENCcExDQm1iaXdnWkdGMFlTd2daR1ZqYkdGeVpXUkNiRzlqYTFCaGNtRnRjeXdnWW14dlkydFFZWEpoYlhNc0lHUmxjSFJvY3lrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDRndjbTluY21GdFYzSmhjSEJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQndjbTluY21GdFYzSmhjSEJsY2lBOUlIUm9hWE11Y0hKdlozSmhiWE5iYVYwZ1BTQjNjbUZ3VUhKdlozSmhiU2gwYUdsekxDQnBMQ0JtYmlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnY0hKdlozSmhiVmR5WVhCd1pYSTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHUmhkR0U2SUdaMWJtTjBhVzl1S0haaGJIVmxMQ0JrWlhCMGFDa2dlMXh1SUNBZ0lDQWdkMmhwYkdVZ0tIWmhiSFZsSUNZbUlHUmxjSFJvTFMwcElIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQjJZV3gxWlM1ZmNHRnlaVzUwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYldWeVoyVTZJR1oxYm1OMGFXOXVLSEJoY21GdExDQmpiMjF0YjI0cElIdGNiaUFnSUNBZ0lHeGxkQ0J2WW1vZ1BTQndZWEpoYlNCOGZDQmpiMjF0YjI0N1hHNWNiaUFnSUNBZ0lHbG1JQ2h3WVhKaGJTQW1KaUJqYjIxdGIyNGdKaVlnS0hCaGNtRnRJQ0U5UFNCamIyMXRiMjRwS1NCN1hHNGdJQ0FnSUNBZ0lHOWlhaUE5SUZWMGFXeHpMbVY0ZEdWdVpDaDdmU3dnWTI5dGJXOXVMQ0J3WVhKaGJTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnZZbW83WEc0Z0lDQWdmU3hjYmlBZ0lDQXZMeUJCYmlCbGJYQjBlU0J2WW1wbFkzUWdkRzhnZFhObElHRnpJSEpsY0d4aFkyVnRaVzUwSUdadmNpQnVkV3hzTFdOdmJuUmxlSFJ6WEc0Z0lDQWdiblZzYkVOdmJuUmxlSFE2SUU5aWFtVmpkQzV6WldGc0tIdDlLU3hjYmx4dUlDQWdJRzV2YjNBNklHVnVkaTVXVFM1dWIyOXdMRnh1SUNBZ0lHTnZiWEJwYkdWeVNXNW1iem9nZEdWdGNHeGhkR1ZUY0dWakxtTnZiWEJwYkdWeVhHNGdJSDA3WEc1Y2JpQWdablZ1WTNScGIyNGdjbVYwS0dOdmJuUmxlSFFzSUc5d2RHbHZibk1nUFNCN2ZTa2dlMXh1SUNBZ0lHeGxkQ0JrWVhSaElEMGdiM0IwYVc5dWN5NWtZWFJoTzF4dVhHNGdJQ0FnY21WMExsOXpaWFIxY0NodmNIUnBiMjV6S1R0Y2JpQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NdWNHRnlkR2xoYkNBbUppQjBaVzF3YkdGMFpWTndaV011ZFhObFJHRjBZU2tnZTF4dUlDQWdJQ0FnWkdGMFlTQTlJR2x1YVhSRVlYUmhLR052Ym5SbGVIUXNJR1JoZEdFcE8xeHVJQ0FnSUgxY2JpQWdJQ0JzWlhRZ1pHVndkR2h6TEZ4dUlDQWdJQ0FnSUNCaWJHOWphMUJoY21GdGN5QTlJSFJsYlhCc1lYUmxVM0JsWXk1MWMyVkNiRzlqYTFCaGNtRnRjeUEvSUZ0ZElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lHbG1JQ2gwWlcxd2JHRjBaVk53WldNdWRYTmxSR1Z3ZEdoektTQjdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWlhCMGFITXBJSHRjYmlBZ0lDQWdJQ0FnWkdWd2RHaHpJRDBnWTI5dWRHVjRkQ0FoUFNCdmNIUnBiMjV6TG1SbGNIUm9jMXN3WFNBL0lGdGpiMjUwWlhoMFhTNWpiMjVqWVhRb2IzQjBhVzl1Y3k1a1pYQjBhSE1wSURvZ2IzQjBhVzl1Y3k1a1pYQjBhSE03WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JrWlhCMGFITWdQU0JiWTI5dWRHVjRkRjA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdablZ1WTNScGIyNGdiV0ZwYmloamIyNTBaWGgwTHlvc0lHOXdkR2x2Ym5NcUx5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDY25JQ3NnZEdWdGNHeGhkR1ZUY0dWakxtMWhhVzRvWTI5dWRHRnBibVZ5TENCamIyNTBaWGgwTENCamIyNTBZV2x1WlhJdWFHVnNjR1Z5Y3l3Z1kyOXVkR0ZwYm1WeUxuQmhjblJwWVd4ekxDQmtZWFJoTENCaWJHOWphMUJoY21GdGN5d2daR1Z3ZEdoektUdGNiaUFnSUNCOVhHNGdJQ0FnYldGcGJpQTlJR1Y0WldOMWRHVkVaV052Y21GMGIzSnpLSFJsYlhCc1lYUmxVM0JsWXk1dFlXbHVMQ0J0WVdsdUxDQmpiMjUwWVdsdVpYSXNJRzl3ZEdsdmJuTXVaR1Z3ZEdoeklIeDhJRnRkTENCa1lYUmhMQ0JpYkc5amExQmhjbUZ0Y3lrN1hHNGdJQ0FnY21WMGRYSnVJRzFoYVc0b1kyOXVkR1Y0ZEN3Z2IzQjBhVzl1Y3lrN1hHNGdJSDFjYmlBZ2NtVjBMbWx6Vkc5d0lEMGdkSEoxWlR0Y2JseHVJQ0J5WlhRdVgzTmxkSFZ3SUQwZ1puVnVZM1JwYjI0b2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUdsbUlDZ2hiM0IwYVc5dWN5NXdZWEowYVdGc0tTQjdYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXVhR1ZzY0dWeWN5QTlJR052Ym5SaGFXNWxjaTV0WlhKblpTaHZjSFJwYjI1ekxtaGxiSEJsY25Nc0lHVnVkaTVvWld4d1pYSnpLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tIUmxiWEJzWVhSbFUzQmxZeTUxYzJWUVlYSjBhV0ZzS1NCN1hHNGdJQ0FnSUNBZ0lHTnZiblJoYVc1bGNpNXdZWEowYVdGc2N5QTlJR052Ym5SaGFXNWxjaTV0WlhKblpTaHZjSFJwYjI1ekxuQmhjblJwWVd4ekxDQmxibll1Y0dGeWRHbGhiSE1wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tIUmxiWEJzWVhSbFUzQmxZeTUxYzJWUVlYSjBhV0ZzSUh4OElIUmxiWEJzWVhSbFUzQmxZeTUxYzJWRVpXTnZjbUYwYjNKektTQjdYRzRnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaTVrWldOdmNtRjBiM0p6SUQwZ1kyOXVkR0ZwYm1WeUxtMWxjbWRsS0c5d2RHbHZibk11WkdWamIzSmhkRzl5Y3l3Z1pXNTJMbVJsWTI5eVlYUnZjbk1wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXVhR1ZzY0dWeWN5QTlJRzl3ZEdsdmJuTXVhR1ZzY0dWeWN6dGNiaUFnSUNBZ0lHTnZiblJoYVc1bGNpNXdZWEowYVdGc2N5QTlJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITTdYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXVaR1ZqYjNKaGRHOXljeUE5SUc5d2RHbHZibk11WkdWamIzSmhkRzl5Y3p0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2NtVjBMbDlqYUdsc1pDQTlJR1oxYm1OMGFXOXVLR2tzSUdSaGRHRXNJR0pzYjJOclVHRnlZVzF6TENCa1pYQjBhSE1wSUh0Y2JpQWdJQ0JwWmlBb2RHVnRjR3hoZEdWVGNHVmpMblZ6WlVKc2IyTnJVR0Z5WVcxeklDWW1JQ0ZpYkc5amExQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVjRZMlZ3ZEdsdmJpZ25iWFZ6ZENCd1lYTnpJR0pzYjJOcklIQmhjbUZ0Y3ljcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RHVnRjR3hoZEdWVGNHVmpMblZ6WlVSbGNIUm9jeUFtSmlBaFpHVndkR2h6S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtDZHRkWE4wSUhCaGMzTWdjR0Z5Wlc1MElHUmxjSFJvY3ljcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIzY21Gd1VISnZaM0poYlNoamIyNTBZV2x1WlhJc0lHa3NJSFJsYlhCc1lYUmxVM0JsWTF0cFhTd2daR0YwWVN3Z01Dd2dZbXh2WTJ0UVlYSmhiWE1zSUdSbGNIUm9jeWs3WEc0Z0lIMDdYRzRnSUhKbGRIVnliaUJ5WlhRN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUIzY21Gd1VISnZaM0poYlNoamIyNTBZV2x1WlhJc0lHa3NJR1p1TENCa1lYUmhMQ0JrWldOc1lYSmxaRUpzYjJOclVHRnlZVzF6TENCaWJHOWphMUJoY21GdGN5d2daR1Z3ZEdoektTQjdYRzRnSUdaMWJtTjBhVzl1SUhCeWIyY29ZMjl1ZEdWNGRDd2diM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJQ0FnYkdWMElHTjFjbkpsYm5SRVpYQjBhSE1nUFNCa1pYQjBhSE03WEc0Z0lDQWdhV1lnS0dSbGNIUm9jeUFtSmlCamIyNTBaWGgwSUNFOUlHUmxjSFJvYzFzd1hTQW1KaUFoS0dOdmJuUmxlSFFnUFQwOUlHTnZiblJoYVc1bGNpNXVkV3hzUTI5dWRHVjRkQ0FtSmlCa1pYQjBhSE5iTUYwZ1BUMDlJRzUxYkd3cEtTQjdYRzRnSUNBZ0lDQmpkWEp5Wlc1MFJHVndkR2h6SUQwZ1cyTnZiblJsZUhSZExtTnZibU5oZENoa1pYQjBhSE1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQm1iaWhqYjI1MFlXbHVaWElzWEc0Z0lDQWdJQ0FnSUdOdmJuUmxlSFFzWEc0Z0lDQWdJQ0FnSUdOdmJuUmhhVzVsY2k1b1pXeHdaWEp6TENCamIyNTBZV2x1WlhJdWNHRnlkR2xoYkhNc1hHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdVpHRjBZU0I4ZkNCa1lYUmhMRnh1SUNBZ0lDQWdJQ0JpYkc5amExQmhjbUZ0Y3lBbUppQmJiM0IwYVc5dWN5NWliRzlqYTFCaGNtRnRjMTB1WTI5dVkyRjBLR0pzYjJOclVHRnlZVzF6S1N4Y2JpQWdJQ0FnSUNBZ1kzVnljbVZ1ZEVSbGNIUm9jeWs3WEc0Z0lIMWNibHh1SUNCd2NtOW5JRDBnWlhobFkzVjBaVVJsWTI5eVlYUnZjbk1vWm00c0lIQnliMmNzSUdOdmJuUmhhVzVsY2l3Z1pHVndkR2h6TENCa1lYUmhMQ0JpYkc5amExQmhjbUZ0Y3lrN1hHNWNiaUFnY0hKdlp5NXdjbTluY21GdElEMGdhVHRjYmlBZ2NISnZaeTVrWlhCMGFDQTlJR1JsY0hSb2N5QS9JR1JsY0hSb2N5NXNaVzVuZEdnZ09pQXdPMXh1SUNCd2NtOW5MbUpzYjJOclVHRnlZVzF6SUQwZ1pHVmpiR0Z5WldSQ2JHOWphMUJoY21GdGN5QjhmQ0F3TzF4dUlDQnlaWFIxY200Z2NISnZaenRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlISmxjMjlzZG1WUVlYSjBhV0ZzS0hCaGNuUnBZV3dzSUdOdmJuUmxlSFFzSUc5d2RHbHZibk1wSUh0Y2JpQWdhV1lnS0NGd1lYSjBhV0ZzS1NCN1hHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWJtRnRaU0E5UFQwZ0owQndZWEowYVdGc0xXSnNiMk5ySnlrZ2UxeHVJQ0FnSUNBZ2NHRnlkR2xoYkNBOUlHOXdkR2x2Ym5NdVpHRjBZVnNuY0dGeWRHbGhiQzFpYkc5amF5ZGRPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCd1lYSjBhV0ZzSUQwZ2IzQjBhVzl1Y3k1d1lYSjBhV0ZzYzF0dmNIUnBiMjV6TG01aGJXVmRPMXh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJR2xtSUNnaGNHRnlkR2xoYkM1allXeHNJQ1ltSUNGdmNIUnBiMjV6TG01aGJXVXBJSHRjYmlBZ0lDQXZMeUJVYUdseklHbHpJR0VnWkhsdVlXMXBZeUJ3WVhKMGFXRnNJSFJvWVhRZ2NtVjBkWEp1WldRZ1lTQnpkSEpwYm1kY2JpQWdJQ0J2Y0hScGIyNXpMbTVoYldVZ1BTQndZWEowYVdGc08xeHVJQ0FnSUhCaGNuUnBZV3dnUFNCdmNIUnBiMjV6TG5CaGNuUnBZV3h6VzNCaGNuUnBZV3hkTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ3WVhKMGFXRnNPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FXNTJiMnRsVUdGeWRHbGhiQ2h3WVhKMGFXRnNMQ0JqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDOHZJRlZ6WlNCMGFHVWdZM1Z5Y21WdWRDQmpiRzl6ZFhKbElHTnZiblJsZUhRZ2RHOGdjMkYyWlNCMGFHVWdjR0Z5ZEdsaGJDMWliRzlqYXlCcFppQjBhR2x6SUhCaGNuUnBZV3hjYmlBZ1kyOXVjM1FnWTNWeWNtVnVkRkJoY25ScFlXeENiRzlqYXlBOUlHOXdkR2x2Ym5NdVpHRjBZU0FtSmlCdmNIUnBiMjV6TG1SaGRHRmJKM0JoY25ScFlXd3RZbXh2WTJzblhUdGNiaUFnYjNCMGFXOXVjeTV3WVhKMGFXRnNJRDBnZEhKMVpUdGNiaUFnYVdZZ0tHOXdkR2x2Ym5NdWFXUnpLU0I3WEc0Z0lDQWdiM0IwYVc5dWN5NWtZWFJoTG1OdmJuUmxlSFJRWVhSb0lEMGdiM0IwYVc5dWN5NXBaSE5iTUYwZ2ZId2diM0IwYVc5dWN5NWtZWFJoTG1OdmJuUmxlSFJRWVhSb08xeHVJQ0I5WEc1Y2JpQWdiR1YwSUhCaGNuUnBZV3hDYkc5amF6dGNiaUFnYVdZZ0tHOXdkR2x2Ym5NdVptNGdKaVlnYjNCMGFXOXVjeTVtYmlBaFBUMGdibTl2Y0NrZ2UxeHVJQ0FnSUc5d2RHbHZibk11WkdGMFlTQTlJR055WldGMFpVWnlZVzFsS0c5d2RHbHZibk11WkdGMFlTazdYRzRnSUNBZ0x5OGdWM0poY0hCbGNpQm1kVzVqZEdsdmJpQjBieUJuWlhRZ1lXTmpaWE56SUhSdklHTjFjbkpsYm5SUVlYSjBhV0ZzUW14dlkyc2dabkp2YlNCMGFHVWdZMnh2YzNWeVpWeHVJQ0FnSUd4bGRDQm1iaUE5SUc5d2RHbHZibk11Wm00N1hHNGdJQ0FnY0dGeWRHbGhiRUpzYjJOcklEMGdiM0IwYVc5dWN5NWtZWFJoV3lkd1lYSjBhV0ZzTFdKc2IyTnJKMTBnUFNCbWRXNWpkR2x2YmlCd1lYSjBhV0ZzUW14dlkydFhjbUZ3Y0dWeUtHTnZiblJsZUhRc0lHOXdkR2x2Ym5NZ1BTQjdmU2tnZTF4dVhHNGdJQ0FnSUNBdkx5QlNaWE4wYjNKbElIUm9aU0J3WVhKMGFXRnNMV0pzYjJOcklHWnliMjBnZEdobElHTnNiM04xY21VZ1ptOXlJSFJvWlNCbGVHVmpkWFJwYjI0Z2IyWWdkR2hsSUdKc2IyTnJYRzRnSUNBZ0lDQXZMeUJwTG1VdUlIUm9aU0J3WVhKMElHbHVjMmxrWlNCMGFHVWdZbXh2WTJzZ2IyWWdkR2hsSUhCaGNuUnBZV3dnWTJGc2JDNWNiaUFnSUNBZ0lHOXdkR2x2Ym5NdVpHRjBZU0E5SUdOeVpXRjBaVVp5WVcxbEtHOXdkR2x2Ym5NdVpHRjBZU2s3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbVJoZEdGYkozQmhjblJwWVd3dFlteHZZMnNuWFNBOUlHTjFjbkpsYm5SUVlYSjBhV0ZzUW14dlkyczdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNG9ZMjl1ZEdWNGRDd2diM0IwYVc5dWN5azdYRzRnSUNBZ2ZUdGNiaUFnSUNCcFppQW9abTR1Y0dGeWRHbGhiSE1wSUh0Y2JpQWdJQ0FnSUc5d2RHbHZibk11Y0dGeWRHbGhiSE1nUFNCVmRHbHNjeTVsZUhSbGJtUW9lMzBzSUc5d2RHbHZibk11Y0dGeWRHbGhiSE1zSUdadUxuQmhjblJwWVd4ektUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBaaUFvY0dGeWRHbGhiQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSEJoY25ScFlXeENiRzlqYXlrZ2UxeHVJQ0FnSUhCaGNuUnBZV3dnUFNCd1lYSjBhV0ZzUW14dlkyczdYRzRnSUgxY2JseHVJQ0JwWmlBb2NHRnlkR2xoYkNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVY0WTJWd2RHbHZiaWduVkdobElIQmhjblJwWVd3Z0p5QXJJRzl3ZEdsdmJuTXVibUZ0WlNBcklDY2dZMjkxYkdRZ2JtOTBJR0psSUdadmRXNWtKeWs3WEc0Z0lIMGdaV3h6WlNCcFppQW9jR0Z5ZEdsaGJDQnBibk4wWVc1alpXOW1JRVoxYm1OMGFXOXVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQmhjblJwWVd3b1kyOXVkR1Y0ZEN3Z2IzQjBhVzl1Y3lrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHNXZiM0FvS1NCN0lISmxkSFZ5YmlBbkp6c2dmVnh1WEc1bWRXNWpkR2x2YmlCcGJtbDBSR0YwWVNoamIyNTBaWGgwTENCa1lYUmhLU0I3WEc0Z0lHbG1JQ2doWkdGMFlTQjhmQ0FoS0NkeWIyOTBKeUJwYmlCa1lYUmhLU2tnZTF4dUlDQWdJR1JoZEdFZ1BTQmtZWFJoSUQ4Z1kzSmxZWFJsUm5KaGJXVW9aR0YwWVNrZ09pQjdmVHRjYmlBZ0lDQmtZWFJoTG5KdmIzUWdQU0JqYjI1MFpYaDBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmtZWFJoTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJsZUdWamRYUmxSR1ZqYjNKaGRHOXljeWhtYml3Z2NISnZaeXdnWTI5dWRHRnBibVZ5TENCa1pYQjBhSE1zSUdSaGRHRXNJR0pzYjJOclVHRnlZVzF6S1NCN1hHNGdJR2xtSUNobWJpNWtaV052Y21GMGIzSXBJSHRjYmlBZ0lDQnNaWFFnY0hKdmNITWdQU0I3ZlR0Y2JpQWdJQ0J3Y205bklEMGdabTR1WkdWamIzSmhkRzl5S0hCeWIyY3NJSEJ5YjNCekxDQmpiMjUwWVdsdVpYSXNJR1JsY0hSb2N5QW1KaUJrWlhCMGFITmJNRjBzSUdSaGRHRXNJR0pzYjJOclVHRnlZVzF6TENCa1pYQjBhSE1wTzF4dUlDQWdJRlYwYVd4ekxtVjRkR1Z1WkNod2NtOW5MQ0J3Y205d2N5azdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIQnliMmM3WEc1OVhHNGlYWDA9XG4iLCIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJycgKyB0aGlzLnN0cmluZztcbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNhZmVTdHJpbmc7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDNOaFptVXRjM1J5YVc1bkxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGRFFTeFRRVUZUTEZWQlFWVXNRMEZCUXl4TlFVRk5MRVZCUVVVN1FVRkRNVUlzVFVGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1EwRkRkRUk3TzBGQlJVUXNWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1dVRkJWenRCUVVOMlJTeFRRVUZQTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRE8wTkJRM3BDTEVOQlFVTTdPM0ZDUVVWaExGVkJRVlVpTENKbWFXeGxJam9pYzJGbVpTMXpkSEpwYm1jdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCQ2RXbHNaQ0J2ZFhRZ2IzVnlJR0poYzJsaklGTmhabVZUZEhKcGJtY2dkSGx3WlZ4dVpuVnVZM1JwYjI0Z1UyRm1aVk4wY21sdVp5aHpkSEpwYm1jcElIdGNiaUFnZEdocGN5NXpkSEpwYm1jZ1BTQnpkSEpwYm1jN1hHNTlYRzVjYmxOaFptVlRkSEpwYm1jdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bklEMGdVMkZtWlZOMGNtbHVaeTV3Y205MGIzUjVjR1V1ZEc5SVZFMU1JRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJSEpsZEhWeWJpQW5KeUFySUhSb2FYTXVjM1J5YVc1bk8xeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVTJGbVpWTjBjbWx1Wnp0Y2JpSmRmUT09XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmV4dGVuZCA9IGV4dGVuZDtcbmV4cG9ydHMuaW5kZXhPZiA9IGluZGV4T2Y7XG5leHBvcnRzLmVzY2FwZUV4cHJlc3Npb24gPSBlc2NhcGVFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbmV4cG9ydHMuY3JlYXRlRnJhbWUgPSBjcmVhdGVGcmFtZTtcbmV4cG9ydHMuYmxvY2tQYXJhbXMgPSBibG9ja1BhcmFtcztcbmV4cG9ydHMuYXBwZW5kQ29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aDtcbnZhciBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG52YXIgYmFkQ2hhcnMgPSAvWyY8PlwiJ2A9XS9nLFxuICAgIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuICByZXR1cm4gZXNjYXBlW2Nocl07XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChvYmogLyogLCAuLi5zb3VyY2UgKi8pIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tpXSwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmV4cG9ydHMudG9TdHJpbmcgPSB0b1N0cmluZztcbi8vIFNvdXJjZWQgZnJvbSBsb2Rhc2hcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcbi8qIGVzbGludC1kaXNhYmxlIGZ1bmMtc3R5bGUgKi9cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJyA6IGZhbHNlO1xufTtcblxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5cbmZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUV4cHJlc3Npb24oc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGVzY2FwZSBTYWZlU3RyaW5ncywgc2luY2UgdGhleSdyZSBhbHJlYWR5IHNhZmVcbiAgICBpZiAoc3RyaW5nICYmIHN0cmluZy50b0hUTUwpIHtcbiAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XG4gICAgfSBlbHNlIGlmIChzdHJpbmcgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyArICcnO1xuICAgIH1cblxuICAgIC8vIEZvcmNlIGEgc3RyaW5nIGNvbnZlcnNpb24gYXMgdGhpcyB3aWxsIGJlIGRvbmUgYnkgdGhlIGFwcGVuZCByZWdhcmRsZXNzIGFuZFxuICAgIC8vIHRoZSByZWdleCB0ZXN0IHdpbGwgZG8gdGhpcyB0cmFuc3BhcmVudGx5IGJlaGluZCB0aGUgc2NlbmVzLCBjYXVzaW5nIGlzc3VlcyBpZlxuICAgIC8vIGFuIG9iamVjdCdzIHRvIHN0cmluZyBoYXMgZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGl0LlxuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICB9XG5cbiAgaWYgKCFwb3NzaWJsZS50ZXN0KHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFtZShvYmplY3QpIHtcbiAgdmFyIGZyYW1lID0gZXh0ZW5kKHt9LCBvYmplY3QpO1xuICBmcmFtZS5fcGFyZW50ID0gb2JqZWN0O1xuICByZXR1cm4gZnJhbWU7XG59XG5cbmZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgcmV0dXJuIChjb250ZXh0UGF0aCA/IGNvbnRleHRQYXRoICsgJy4nIDogJycpICsgaWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwzVjBhV3h6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN1FVRkJRU3hKUVVGTkxFMUJRVTBzUjBGQlJ6dEJRVU5pTEV0QlFVY3NSVUZCUlN4UFFVRlBPMEZCUTFvc1MwRkJSeXhGUVVGRkxFMUJRVTA3UVVGRFdDeExRVUZITEVWQlFVVXNUVUZCVFR0QlFVTllMRXRCUVVjc1JVRkJSU3hSUVVGUk8wRkJRMklzUzBGQlJ5eEZRVUZGTEZGQlFWRTdRVUZEWWl4TFFVRkhMRVZCUVVVc1VVRkJVVHRCUVVOaUxFdEJRVWNzUlVGQlJTeFJRVUZSTzBOQlEyUXNRMEZCUXpzN1FVRkZSaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eFpRVUZaTzBsQlEzWkNMRkZCUVZFc1IwRkJSeXhYUVVGWExFTkJRVU03TzBGQlJUZENMRk5CUVZNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU4yUWl4VFFVRlBMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dERRVU53UWpzN1FVRkZUU3hUUVVGVExFMUJRVTBzUTBGQlF5eEhRVUZITEc5Q1FVRnRRanRCUVVNelF5eFBRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVONlF5eFRRVUZMTEVsQlFVa3NSMEZCUnl4SlFVRkpMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU0xUWl4VlFVRkpMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVTdRVUZETTBRc1YwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFBRVU01UWp0TFFVTkdPMGRCUTBZN08wRkJSVVFzVTBGQlR5eEhRVUZITEVOQlFVTTdRMEZEV2pzN1FVRkZUU3hKUVVGSkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJRenM3T3pzN08wRkJTMmhFTEVsQlFVa3NWVUZCVlN4SFFVRkhMRzlDUVVGVExFdEJRVXNzUlVGQlJUdEJRVU12UWl4VFFVRlBMRTlCUVU4c1MwRkJTeXhMUVVGTExGVkJRVlVzUTBGQlF6dERRVU53UXl4RFFVRkRPenM3UVVGSFJpeEpRVUZKTEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRCUVVOdVFpeFZRVWxOTEZWQlFWVXNSMEZLYUVJc1ZVRkJWU3hIUVVGSExGVkJRVk1zUzBGQlN5eEZRVUZGTzBGQlF6TkNMRmRCUVU4c1QwRkJUeXhMUVVGTExFdEJRVXNzVlVGQlZTeEpRVUZKTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzYlVKQlFXMUNMRU5CUVVNN1IwRkRjRVlzUTBGQlF6dERRVU5JTzFGQlEwOHNWVUZCVlN4SFFVRldMRlZCUVZVN096czdPMEZCU1Znc1NVRkJUU3hQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNTVUZCU1N4VlFVRlRMRXRCUVVzc1JVRkJSVHRCUVVOMFJDeFRRVUZQTEVGQlFVTXNTMEZCU3l4SlFVRkpMRTlCUVU4c1MwRkJTeXhMUVVGTExGRkJRVkVzUjBGQlNTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExHZENRVUZuUWl4SFFVRkhMRXRCUVVzc1EwRkJRenREUVVOcVJ5eERRVUZET3pzN096dEJRVWRMTEZOQlFWTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVU3UVVGRGNFTXNUMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTm9SQ3hSUVVGSkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4TFFVRkxMRVZCUVVVN1FVRkRkRUlzWVVGQlR5eERRVUZETEVOQlFVTTdTMEZEVmp0SFFVTkdPMEZCUTBRc1UwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dERRVU5ZT3p0QlFVZE5MRk5CUVZNc1owSkJRV2RDTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTNaRExFMUJRVWtzVDBGQlR5eE5RVUZOTEV0QlFVc3NVVUZCVVN4RlFVRkZPenRCUVVVNVFpeFJRVUZKTEUxQlFVMHNTVUZCU1N4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRek5DTEdGQlFVOHNUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8wdEJRM2hDTEUxQlFVMHNTVUZCU1N4TlFVRk5MRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRM3BDTEdGQlFVOHNSVUZCUlN4RFFVRkRPMHRCUTFnc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEyeENMR0ZCUVU4c1RVRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF6dExRVU53UWpzN096czdRVUZMUkN4VlFVRk5MRWRCUVVjc1JVRkJSU3hIUVVGSExFMUJRVTBzUTBGQlF6dEhRVU4wUWpzN1FVRkZSQ3hOUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSVHRCUVVGRkxGZEJRVThzVFVGQlRTeERRVUZETzBkQlFVVTdRVUZET1VNc1UwRkJUeXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenREUVVNM1F6czdRVUZGVFN4VFFVRlRMRTlCUVU4c1EwRkJReXhMUVVGTExFVkJRVVU3UVVGRE4wSXNUVUZCU1N4RFFVRkRMRXRCUVVzc1NVRkJTU3hMUVVGTExFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlEzcENMRmRCUVU4c1NVRkJTU3hEUVVGRE8wZEJRMklzVFVGQlRTeEpRVUZKTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hMUVVGTExFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVTXZReXhYUVVGUExFbEJRVWtzUTBGQlF6dEhRVU5pTEUxQlFVMDdRVUZEVEN4WFFVRlBMRXRCUVVzc1EwRkJRenRIUVVOa08wTkJRMFk3TzBGQlJVMHNVMEZCVXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMnhETEUxQlFVa3NTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZETDBJc1QwRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEZGtJc1UwRkJUeXhMUVVGTExFTkJRVU03UTBGRFpEczdRVUZGVFN4VFFVRlRMRmRCUVZjc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEZRVUZGTzBGQlEzWkRMRkZCUVUwc1EwRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlEyeENMRk5CUVU4c1RVRkJUU3hEUVVGRE8wTkJRMlk3TzBGQlJVMHNVMEZCVXl4cFFrRkJhVUlzUTBGQlF5eFhRVUZYTEVWQlFVVXNSVUZCUlN4RlFVRkZPMEZCUTJwRUxGTkJRVThzUTBGQlF5eFhRVUZYTEVkQlFVY3NWMEZCVnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVUVzUjBGQlNTeEZRVUZGTEVOQlFVTTdRMEZEY0VRaUxDSm1hV3hsSWpvaWRYUnBiSE11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmpiMjV6ZENCbGMyTmhjR1VnUFNCN1hHNGdJQ2NtSnpvZ0p5WmhiWEE3Snl4Y2JpQWdKenduT2lBbkpteDBPeWNzWEc0Z0lDYytKem9nSnlabmREc25MRnh1SUNBblhDSW5PaUFuSm5GMWIzUTdKeXhjYmlBZ1hDSW5YQ0k2SUNjbUkzZ3lOenNuTEZ4dUlDQW5ZQ2M2SUNjbUkzZzJNRHNuTEZ4dUlDQW5QU2M2SUNjbUkzZ3pSRHNuWEc1OU8xeHVYRzVqYjI1emRDQmlZV1JEYUdGeWN5QTlJQzliSmp3K1hDSW5ZRDFkTDJjc1hHNGdJQ0FnSUNCd2IzTnphV0pzWlNBOUlDOWJKancrWENJbllEMWRMenRjYmx4dVpuVnVZM1JwYjI0Z1pYTmpZWEJsUTJoaGNpaGphSElwSUh0Y2JpQWdjbVYwZFhKdUlHVnpZMkZ3WlZ0amFISmRPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1pYaDBaVzVrS0c5aWFpOHFJQ3dnTGk0dWMyOTFjbU5sSUNvdktTQjdYRzRnSUdadmNpQW9iR1YwSUdrZ1BTQXhPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdabTl5SUNoc1pYUWdhMlY1SUdsdUlHRnlaM1Z0Wlc1MGMxdHBYU2tnZTF4dUlDQWdJQ0FnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaGhjbWQxYldWdWRITmJhVjBzSUd0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnYjJKcVcydGxlVjBnUFNCaGNtZDFiV1Z1ZEhOYmFWMWJhMlY1WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYjJKcU8xeHVmVnh1WEc1bGVIQnZjblFnYkdWMElIUnZVM1J5YVc1bklEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp6dGNibHh1THk4Z1UyOTFjbU5sWkNCbWNtOXRJR3h2WkdGemFGeHVMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJKbGMzUnBaV3B6TDJ4dlpHRnphQzlpYkc5aUwyMWhjM1JsY2k5TVNVTkZUbE5GTG5SNGRGeHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdablZ1WXkxemRIbHNaU0FxTDF4dWJHVjBJR2x6Um5WdVkzUnBiMjRnUFNCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBblpuVnVZM1JwYjI0bk8xeHVmVHRjYmk4dklHWmhiR3hpWVdOcklHWnZjaUJ2YkdSbGNpQjJaWEp6YVc5dWN5QnZaaUJEYUhKdmJXVWdZVzVrSUZOaFptRnlhVnh1THlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYm1sbUlDaHBjMFoxYm1OMGFXOXVLQzk0THlrcElIdGNiaUFnYVhOR2RXNWpkR2x2YmlBOUlHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCMGIxTjBjbWx1Wnk1allXeHNLSFpoYkhWbEtTQTlQVDBnSjF0dlltcGxZM1FnUm5WdVkzUnBiMjVkSnp0Y2JpQWdmVHRjYm4xY2JtVjRjRzl5ZENCN2FYTkdkVzVqZEdsdmJuMDdYRzR2S2lCbGMyeHBiblF0Wlc1aFlteGxJR1oxYm1NdGMzUjViR1VnS2k5Y2JseHVMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCcGMwRnljbUY1SUQwZ1FYSnlZWGt1YVhOQmNuSmhlU0I4ZkNCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z0tIWmhiSFZsSUNZbUlIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0oyOWlhbVZqZENjcElEOGdkRzlUZEhKcGJtY3VZMkZzYkNoMllXeDFaU2tnUFQwOUlDZGJiMkpxWldOMElFRnljbUY1WFNjZ09pQm1ZV3h6WlR0Y2JuMDdYRzVjYmk4dklFOXNaR1Z5SUVsRklIWmxjbk5wYjI1eklHUnZJRzV2ZENCa2FYSmxZM1JzZVNCemRYQndiM0owSUdsdVpHVjRUMllnYzI4Z2QyVWdiWFZ6ZENCcGJYQnNaVzFsYm5RZ2IzVnlJRzkzYml3Z2MyRmtiSGt1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVc1a1pYaFBaaWhoY25KaGVTd2dkbUZzZFdVcElIdGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR3hsYmlBOUlHRnljbUY1TG14bGJtZDBhRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ2FXWWdLR0Z5Y21GNVcybGRJRDA5UFNCMllXeDFaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQXRNVHRjYm4xY2JseHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaWE5qWVhCbFJYaHdjbVZ6YzJsdmJpaHpkSEpwYm1jcElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCemRISnBibWNnSVQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0x5OGdaRzl1SjNRZ1pYTmpZWEJsSUZOaFptVlRkSEpwYm1kekxDQnphVzVqWlNCMGFHVjVKM0psSUdGc2NtVmhaSGtnYzJGbVpWeHVJQ0FnSUdsbUlDaHpkSEpwYm1jZ0ppWWdjM1J5YVc1bkxuUnZTRlJOVENrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhOMGNtbHVaeTUwYjBoVVRVd29LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE4wY21sdVp5QTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0p5YzdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hjM1J5YVc1bktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2MzUnlhVzVuSUNzZ0p5YzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdSbTl5WTJVZ1lTQnpkSEpwYm1jZ1kyOXVkbVZ5YzJsdmJpQmhjeUIwYUdseklIZHBiR3dnWW1VZ1pHOXVaU0JpZVNCMGFHVWdZWEJ3Wlc1a0lISmxaMkZ5Wkd4bGMzTWdZVzVrWEc0Z0lDQWdMeThnZEdobElISmxaMlY0SUhSbGMzUWdkMmxzYkNCa2J5QjBhR2x6SUhSeVlXNXpjR0Z5Wlc1MGJIa2dZbVZvYVc1a0lIUm9aU0J6WTJWdVpYTXNJR05oZFhOcGJtY2dhWE56ZFdWeklHbG1YRzRnSUNBZ0x5OGdZVzRnYjJKcVpXTjBKM01nZEc4Z2MzUnlhVzVuSUdoaGN5QmxjMk5oY0dWa0lHTm9ZWEpoWTNSbGNuTWdhVzRnYVhRdVhHNGdJQ0FnYzNSeWFXNW5JRDBnSnljZ0t5QnpkSEpwYm1jN1hHNGdJSDFjYmx4dUlDQnBaaUFvSVhCdmMzTnBZbXhsTG5SbGMzUW9jM1J5YVc1bktTa2dleUJ5WlhSMWNtNGdjM1J5YVc1bk95QjlYRzRnSUhKbGRIVnliaUJ6ZEhKcGJtY3VjbVZ3YkdGalpTaGlZV1JEYUdGeWN5d2daWE5qWVhCbFEyaGhjaWs3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMFZ0Y0hSNUtIWmhiSFZsS1NCN1hHNGdJR2xtSUNnaGRtRnNkV1VnSmlZZ2RtRnNkV1VnSVQwOUlEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaHBjMEZ5Y21GNUtIWmhiSFZsS1NBbUppQjJZV3gxWlM1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnlaV0YwWlVaeVlXMWxLRzlpYW1WamRDa2dlMXh1SUNCc1pYUWdabkpoYldVZ1BTQmxlSFJsYm1Rb2UzMHNJRzlpYW1WamRDazdYRzRnSUdaeVlXMWxMbDl3WVhKbGJuUWdQU0J2WW1wbFkzUTdYRzRnSUhKbGRIVnliaUJtY21GdFpUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdKc2IyTnJVR0Z5WVcxektIQmhjbUZ0Y3l3Z2FXUnpLU0I3WEc0Z0lIQmhjbUZ0Y3k1d1lYUm9JRDBnYVdSek8xeHVJQ0J5WlhSMWNtNGdjR0Z5WVcxek8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWVhCd1pXNWtRMjl1ZEdWNGRGQmhkR2dvWTI5dWRHVjRkRkJoZEdnc0lHbGtLU0I3WEc0Z0lISmxkSFZ5YmlBb1kyOXVkR1Y0ZEZCaGRHZ2dQeUJqYjI1MFpYaDBVR0YwYUNBcklDY3VKeUE2SUNjbktTQXJJR2xrTzF4dWZWeHVJbDE5XG4iLCIvLyBDcmVhdGUgYSBzaW1wbGUgcGF0aCBhbGlhcyB0byBhbGxvdyBicm93c2VyaWZ5IHRvIHJlc29sdmVcbi8vIHRoZSBydW50aW1lIG9uIGEgc3VwcG9ydGVkIHBhdGguXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9janMvaGFuZGxlYmFycy5ydW50aW1lJylbJ2RlZmF1bHQnXTtcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My40LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE5LTA1LTAxVDIxOjA0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjQuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0gKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNFxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAxOS0wNC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdChub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIpICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiYgcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggdHlwZW9mIGVsZW0uY29udGVudERvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0Ly8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGVcblx0Ly8gV2UgdXNlIGdldENsaWVudFJlY3RzKCkgdG8gY2hlY2sgZm9yIGhpZGRlbi9kaXNjb25uZWN0ZWQuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveFxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBEYXRlLm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiJFwiXSA9IHJlcXVpcmUoXCItIS4vanF1ZXJ5LmpzXCIpOyIsIi8vIC5kaXJuYW1lLCAuYmFzZW5hbWUsIGFuZCAuZXh0bmFtZSBtZXRob2RzIGFyZSBleHRyYWN0ZWQgZnJvbSBOb2RlLmpzIHY4LjExLjEsXG4vLyBiYWNrcG9ydGVkIGFuZCB0cmFuc3BsaXRlZCB3aXRoIEJhYmVsLCB3aXRoIGJhY2t3YXJkcy1jb21wYXQgZml4ZXNcblxuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNvbHZlZFBhdGggPSAnJyxcbiAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkge1xuICAgIHZhciBwYXRoID0gKGkgPj0gMCkgPyBhcmd1bWVudHNbaV0gOiBwcm9jZXNzLmN3ZCgpO1xuXG4gICAgLy8gU2tpcCBlbXB0eSBhbmQgaW52YWxpZCBlbnRyaWVzXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHJlc29sdmVkUGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFyZXNvbHZlZEFic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nO1xufTtcblxuLy8gcGF0aC5ub3JtYWxpemUocGF0aClcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc0Fic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgaWYgKCFwYXRoICYmICFpc0Fic29sdXRlKSB7XG4gICAgcGF0aCA9ICcuJztcbiAgfVxuICBpZiAocGF0aCAmJiB0cmFpbGluZ1NsYXNoKSB7XG4gICAgcGF0aCArPSAnLyc7XG4gIH1cblxuICByZXR1cm4gKGlzQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuam9pbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGF0aHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICByZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufTtcblxuXG4vLyBwYXRoLnJlbGF0aXZlKGZyb20sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZWxhdGl2ZSA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gIGZyb20gPSBleHBvcnRzLnJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IGV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xuXG4gIGZ1bmN0aW9uIHRyaW0oYXJyKSB7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoYXJyW3N0YXJ0XSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBlbmQgPSBhcnIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7XG4gICAgICBpZiAoYXJyW2VuZF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCArIDEpO1xuICB9XG5cbiAgdmFyIGZyb21QYXJ0cyA9IHRyaW0oZnJvbS5zcGxpdCgnLycpKTtcbiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xuXG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLCB0b1BhcnRzLmxlbmd0aCk7XG4gIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpO1xuICB9XG5cbiAgb3V0cHV0UGFydHMgPSBvdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtcblxuICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xufTtcblxuZXhwb3J0cy5zZXAgPSAnLyc7XG5leHBvcnRzLmRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm4gJy4nO1xuICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcbiAgdmFyIGhhc1Jvb3QgPSBjb2RlID09PSA0NyAvKi8qLztcbiAgdmFyIGVuZCA9IC0xO1xuICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAxOyAtLWkpIHtcbiAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvclxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiBoYXNSb290ID8gJy8nIDogJy4nO1xuICBpZiAoaGFzUm9vdCAmJiBlbmQgPT09IDEpIHtcbiAgICAvLyByZXR1cm4gJy8vJztcbiAgICAvLyBCYWNrd2FyZHMtY29tcGF0IGZpeDpcbiAgICByZXR1cm4gJy8nO1xuICB9XG4gIHJldHVybiBwYXRoLnNsaWNlKDAsIGVuZCk7XG59O1xuXG5mdW5jdGlvbiBiYXNlbmFtZShwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHBhdGggPSBwYXRoICsgJyc7XG5cbiAgdmFyIHN0YXJ0ID0gMDtcbiAgdmFyIGVuZCA9IC0xO1xuICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgdmFyIGk7XG5cbiAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaSkgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZW5kID09PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgLy8gcGF0aCBjb21wb25lbnRcbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgZW5kID0gaSArIDE7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiAnJztcbiAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG59XG5cbi8vIFVzZXMgYSBtaXhlZCBhcHByb2FjaCBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHksIGFzIGV4dCBiZWhhdmlvciBjaGFuZ2VkXG4vLyBpbiBuZXcgTm9kZS5qcyB2ZXJzaW9ucywgc28gb25seSBiYXNlbmFtZSgpIGFib3ZlIGlzIGJhY2twb3J0ZWQgaGVyZVxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uIChwYXRoLCBleHQpIHtcbiAgdmFyIGYgPSBiYXNlbmFtZShwYXRoKTtcbiAgaWYgKGV4dCAmJiBmLnN1YnN0cigtMSAqIGV4dC5sZW5ndGgpID09PSBleHQpIHtcbiAgICBmID0gZi5zdWJzdHIoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gZjtcbn07XG5cbmV4cG9ydHMuZXh0bmFtZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHBhdGggPSBwYXRoICsgJyc7XG4gIHZhciBzdGFydERvdCA9IC0xO1xuICB2YXIgc3RhcnRQYXJ0ID0gMDtcbiAgdmFyIGVuZCA9IC0xO1xuICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxuICAvLyBhZnRlciBhbnkgcGF0aCBzZXBhcmF0b3Igd2UgZmluZFxuICB2YXIgcHJlRG90U3RhdGUgPSAwO1xuICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgLy8gZXh0ZW5zaW9uXG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgIGVuZCA9IGkgKyAxO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gNDYgLyouKi8pIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEpXG4gICAgICAgICAgc3RhcnREb3QgPSBpO1xuICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSlcbiAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7XG4gICAgfSBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcbiAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAvLyBoYXZlIGEgZ29vZCBjaGFuY2UgYXQgaGF2aW5nIGEgbm9uLWVtcHR5IGV4dGVuc2lvblxuICAgICAgcHJlRG90U3RhdGUgPSAtMTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhcnREb3QgPT09IC0xIHx8IGVuZCA9PT0gLTEgfHxcbiAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XG4gICAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xuICAgICAgcHJlRG90U3RhdGUgPT09IDEgJiYgc3RhcnREb3QgPT09IGVuZCAtIDEgJiYgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIi4uL2ZvbnQvZm9udGVsbG8uZW90XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIi4uL2ZvbnQvZm9udGVsbG8uc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIi4uL2ZvbnQvZm9udGVsbG8udHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIi4uL2ZvbnQvZm9udGVsbG8ud29mZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCIuLi9mb250L2ZvbnRlbGxvLndvZmYyXCI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHt1dGlsc30gPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbmNvbnN0IHdhcmZyYW1lRGF0YSA9IHJlcXVpcmUoXCIuL3dhcmZyYW1lLWRhdGEuanNcIik7XG5jb25zdCBDbG9ja0VpZG9sb24gPSByZXF1aXJlKFwiLi9jbG9jay1laWRvbG9uLmpzXCIpO1xuY29uc3QgQ2xvY2tPcmJ2YWxsaXMgPSByZXF1aXJlKFwiLi9jbG9jay1vcmJ2YWxsaXMuanNcIik7XG5cbnZhciBhcHAgPSB7XG4gIG5hbWU6IFwiV2FyZnJhbWUgTWFzdGVyeSBIZWxwZXJcIixcbiAgdmVyc2lvbjogXCIyLjQuNVwiLFxuICBkYXRhOiB7fSxcbiAgY29uZmlnOiB7XG4gICAgbW9kYWw6IHtcbiAgICAgIGFuaW1hdGlvbjogXCJwb3BcIixcbiAgICAgIGFuaW1hdGlvbl9zcGVlZDogMFxuICAgIH1cbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgIGFwcC5yZW5kZXIuc3Bpbm5lci5zaG93KCk7XG4gICAgdXRpbHMudHJ5TG9jYWxTdG9yYWdlKCk7XG4gICAgdXRpbHMucmVnaXN0ZXJIYW5kbGViYXJIZWxwZXJzKCk7XG4gICAgYXBwLmNsb2Nrcy5pbml0KCk7XG4gICAgaWYgKHV0aWxzLnJlYWRMb2NhbFN0b3JhZ2UoXCJkYXRhXCIpID09IGZhbHNlKSB7XG4gICAgICBhcHAudG9vbHMuZmlyc3RSdW4oKTtcbiAgICB9XG4gICAgYXBwLmRhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHdhcmZyYW1lRGF0YSkpO1xuICAgIGFwcC5zdG9yYWdlLmdldERhdGEoXG4gICAgICBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAvLyBVZ2x5IGhhY2sgaW4gb3JkZXIgdG8gc29sdmUgYmFja3dhcmRzIGNvbXBhYmlsaXR5IHdpdGggb2xkIGRhdGEtc291cmNlc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChkYXRhLmRhdGFbaV0uaW5kZXhPZihcIk1LMVwiKSA9PSAwKSB7XG4gICAgICAgICAgICBkYXRhLmRhdGFbaV0gPSBkYXRhLmRhdGFbaV0ucmVwbGFjZShcIk1LMVwiLCBcIk1rMVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXRpbHMud3JpdGVMb2NhbFN0b3JhZ2UoXCJkYXRhXCIsIEpTT04uc3RyaW5naWZ5KGRhdGEuZGF0YSkpO1xuICAgICAgICBhcHAudG9vbHMubWFwRnJvbVN0b3JhZ2UoKTtcbiAgICAgICAgYXBwLnJlbmRlci5wYWdlLnN0YXJ0KCk7XG4gICAgICAgIGFwcC5yZW5kZXIuc3Bpbm5lci5zaG93KCk7XG4gICAgICAgICQoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTtcbiAgICAgICAgYXBwLnJlbmRlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgYXBwLnNlYXJjaC51cGRhdGVJbmRpY2F0b3IoKTtcbiAgICAgIH1cbiAgICApO1xuXG4gIH0sXG4gIHRvb2xzOiB7XG4gICAgcmVzdGFydDogZnVuY3Rpb24gKCkge1xuICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZmlyc3RSdW46IGZ1bmN0aW9uICgpIHtcbiAgICAgIHV0aWxzLndyaXRlTG9jYWxTdG9yYWdlKFwiZGF0YVwiLCBcIltdXCIpO1xuICAgICAgYXBwLnJlbmRlci5wYWdlLmhlbHAoKTtcbiAgICB9LFxuICAgIG1hcEZyb21TdG9yYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2hlY2tlZCA9IGFwcC5zdG9yYWdlLmxpc3QoKTtcbiAgICAgIGlmIChjaGVja2VkLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoZWNrZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcHAuaXRlbS5zZXRTdGF0ZShjaGVja2VkW2ldLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjbG9zZU1vZGFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKCcucmV2ZWFsLW1vZGFsJykuZm91bmRhdGlvbigncmV2ZWFsJywgJ2Nsb3NlJyk7XG4gICAgfSxcbiAgICBjbG9zZU1lbnU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoJy50b3AtYmFyJykucmVtb3ZlQ2xhc3MoJ2V4cGFuZGVkJyk7XG4gICAgfSxcbiAgICBzdGF0dXNCeVR5cGU6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICB2YXIgaXRlbXMgPSB7XG4gICAgICAgIHJhbmtlZDogW10sXG4gICAgICAgIHVucmFua2VkOiBbXVxuICAgICAgfVxuICAgICAgdmFyIGwgPSBhcHAuZGF0YS5hcnJheS5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGw7IGsrKykge1xuICAgICAgICBpZiAoYXBwLmRhdGEuYXJyYXlba11bXCJ0eXBlXCJdID09IHR5cGUgJiYgYXBwLmRhdGEuYXJyYXlba11bXCJjaGVja2VkXCJdID09IHRydWUpIHtcbiAgICAgICAgICBpdGVtcy5yYW5rZWQucHVzaChhcHAuZGF0YS5hcnJheVtrXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYXBwLmRhdGEuYXJyYXlba11bXCJ0eXBlXCJdID09IHR5cGUgJiYgYXBwLmRhdGEuYXJyYXlba11bXCJjaGVja2VkXCJdID09IGZhbHNlKSB7XG4gICAgICAgICAgaXRlbXMudW5yYW5rZWQucHVzaChhcHAuZGF0YS5hcnJheVtrXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtcztcbiAgICB9LFxuICAgIGl0ZW1Db3VudEJ5VHlwZTogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHZhciBsID0gYXBwLmRhdGEuYXJyYXkubGVuZ3RoO1xuICAgICAgdmFyIGxpc3QgPSBbXTtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgbDsgaysrKSB7XG4gICAgICAgIGlmIChhcHAuZGF0YS5hcnJheVtrXVtcInR5cGVcIl0gPT0gdHlwZSkge1xuICAgICAgICAgIGxpc3QucHVzaChhcHAuZGF0YS5hcnJheVtrXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBsaXN0Lmxlbmd0aDtcbiAgICB9LFxuICAgIGNoZWNrRGF0YTogZnVuY3Rpb24oKXtcbiAgICAgIHZhciBtaXNzaW5nV2lraWFVcmwgPSBbXTtcbiAgICAgIHZhciBtaXNzaW5nTWFzdGVyeVJlcSA9IFtdO1xuICAgICAgdmFyIG1pc3NpbmdJbWFnZU5hbWUgPSBbXTtcbiAgICAgIGFwcC5kYXRhLmFycmF5LmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgIGlmICh0eXBlb2YoaXRlbS53aWtpYVVybCkgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIG1pc3NpbmdXaWtpYVVybC5wdXNoKGl0ZW0ubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZihpdGVtLm1hc3RlcnlSZXEpID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBtaXNzaW5nTWFzdGVyeVJlcS5wdXNoKGl0ZW0ubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZihpdGVtLmltYWdlTmFtZSkgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIG1pc3NpbmdJbWFnZU5hbWUucHVzaChpdGVtLm5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKFwibWlzc2luZ1dpa2lhVXJsXCIsIG1pc3NpbmdXaWtpYVVybCk7XG4gICAgICBjb25zb2xlLmxvZyhcIm1pc3NpbmdNYXN0ZXJ5UmVxXCIsIG1pc3NpbmdNYXN0ZXJ5UmVxKTtcbiAgICAgIGNvbnNvbGUubG9nKFwibWlzc2luZ0ltYWdlTmFtZVwiLCBtaXNzaW5nSW1hZ2VOYW1lKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjoge1xuICAgIHZpZXdzOiB7XG4gICAgICBzZWFyY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gcmVxdWlyZShcIi4vLi4vdmlld3Mvc2VhcmNoLmhic1wiKTtcbiAgICAgICAgdmFyIGh0bWwgPSB0ZW1wbGF0ZSgpO1xuICAgICAgICAkKFwiI3NlYXJjaC1wbGFjZWhvbGRlclwiKS5odG1sKGh0bWwpO1xuICAgICAgfSxcbiAgICAgIGZpbHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi8uLi92aWV3cy9maWx0ZXIuaGJzXCIpO1xuICAgICAgICB2YXIgaHRtbCA9IHRlbXBsYXRlKCk7XG4gICAgICAgICQoXCIjZmlsdGVyLXBsYWNlaG9sZGVyXCIpLmh0bWwoaHRtbCk7XG4gICAgICB9LFxuICAgICAgYWxsSXRlbXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gcmVxdWlyZShcIi4vLi4vdmlld3MvYWxsLWl0ZW1zLmhic1wiKTtcbiAgICAgICAgdmFyIGh0bWwgPSB0ZW1wbGF0ZShhcHAuZGF0YS5hcnJheSk7XG4gICAgICAgICQoXCIjYWxsLWl0ZW1zLXBsYWNlaG9sZGVyXCIpLmh0bWwoaHRtbCk7XG4gICAgICB9LFxuICAgICAgc3RhdHVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjaGVja2VkSXRlbXMgPSBhcHAuc3RvcmFnZS5saXN0KCkubGVuZ3RoO1xuICAgICAgICB2YXIgYXZhaWxhYmxlSXRlbXMgPSBhcHAuZGF0YS5hcnJheS5sZW5ndGg7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoXCIuLy4uL3ZpZXdzL3N0YXR1cy5oYnNcIik7XG4gICAgICAgIHZhciBodG1sID0gdGVtcGxhdGUoe1xuICAgICAgICAgIFwiY2hlY2tlZEl0ZW1zXCI6IGNoZWNrZWRJdGVtcyxcbiAgICAgICAgICBcImF2YWlsYWJsZUl0ZW1zXCI6IGF2YWlsYWJsZUl0ZW1zXG4gICAgICAgIH0pO1xuICAgICAgICAkKFwiI3N0YXR1cy1wbGFjZWhvbGRlclwiKS5odG1sKGh0bWwpO1xuICAgICAgfSxcbiAgICAgIGl0ZW06IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXBwLmRhdGEuYXJyYXlbYXBwLml0ZW0uZ2V0SW5kZXhCeU5hbWUobmFtZSldO1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi8uLi92aWV3cy9pdGVtLmhic1wiKTtcbiAgICAgICAgdmFyIGh0bWwgPSB0ZW1wbGF0ZShkYXRhKTtcbiAgICAgICAgJCgnKltkYXRhLW5hbWU9XCInICsgbmFtZSArICdcIl0nKS5yZXBsYWNlV2l0aChodG1sKTtcbiAgICAgIH0sXG4gICAgICBoZWxwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoXCIuLy4uL3ZpZXdzL3BhZ2VzL2hlbHAuaGJzXCIpO1xuICAgICAgICB2YXIgaHRtbCA9IHRlbXBsYXRlKGFwcC5kYXRhKTtcbiAgICAgICAgJChcIiNoZWxwLXBsYWNlaG9sZGVyXCIpLmh0bWwoaHRtbCk7XG4gICAgICB9LFxuICAgICAgc3RhdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gcmVxdWlyZShcIi4vLi4vdmlld3MvcGFnZXMvc3RhdHMuaGJzXCIpO1xuICAgICAgICB2YXIgaHRtbCA9IHRlbXBsYXRlKGFwcC5zdGF0cy5jcmVhdGUoKSk7XG4gICAgICAgICQoXCIjc3RhdHMtcGxhY2Vob2xkZXJcIikuaHRtbChodG1sKTtcbiAgICAgIH0sXG4gICAgICB1c2VyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoXCIuLy4uL3ZpZXdzL3BhZ2VzL3VzZXIuaGJzXCIpO1xuICAgICAgICB2YXIgaHRtbCA9IHRlbXBsYXRlKHVzZXIpO1xuICAgICAgICAkKFwiI3VzZXItcGxhY2Vob2xkZXJcIikuaHRtbChodG1sKTtcbiAgICAgIH0sXG4gICAgICBjbG9jazogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi8uLi92aWV3cy9jbG9jay1tb2RhbC5oYnNcIik7XG4gICAgICAgIHZhciBodG1sID0gdGVtcGxhdGUoKTtcbiAgICAgICAgJChcIiNjbG9jay1wbGFjZWhvbGRlclwiKS5odG1sKGh0bWwpO1xuICAgICAgfSxcbiAgICAgIGd1aWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoXCIuLy4uL3ZpZXdzL2JlZ2lubmVyLWd1aWRlLmhic1wiKTtcbiAgICAgICAgdmFyIGh0bWwgPSB0ZW1wbGF0ZShhcHAuZGF0YSk7XG4gICAgICAgICQoXCIjZ3VpZGUtcGxhY2Vob2xkZXJcIikuaHRtbChodG1sKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHBhZ2U6IHtcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFwcC5yZW5kZXIucmVzZXQoKTtcbiAgICAgICAgYXBwLnJlbmRlci52aWV3cy5zZWFyY2goKTtcbiAgICAgICAgYXBwLnJlbmRlci52aWV3cy5maWx0ZXIoKTtcbiAgICAgICAgYXBwLnJlbmRlci52aWV3cy5zdGF0dXMoKTtcbiAgICAgICAgYXBwLnJlbmRlci52aWV3cy5hbGxJdGVtcygpO1xuICAgICAgICBhcHAucmVuZGVyLnZpZXdzLmNsb2NrKCk7XG4gICAgICAgIGFwcC5yZW5kZXIudmlld3MuaGVscCgpO1xuICAgICAgICBhcHAuc2VhcmNoLnVwZGF0ZUluZGljYXRvcigpO1xuICAgICAgfSxcbiAgICAgIGhlbHA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXBwLnJlbmRlci52aWV3cy5oZWxwKCk7XG4gICAgICAgICQoXCIjaGVscC1tb2RhbFwiKS5mb3VuZGF0aW9uKFwicmV2ZWFsXCIsIFwib3BlblwiLCBhcHAuY29uZmlnLm1vZGFsKTtcbiAgICAgICAgYXBwLnRvb2xzLmNsb3NlTWVudSgpO1xuICAgICAgfSxcbiAgICAgIHN0YXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFwcC5yZW5kZXIudmlld3Muc3RhdHMoKTtcbiAgICAgICAgJChcIiNzdGF0cy1tb2RhbFwiKS5mb3VuZGF0aW9uKFwicmV2ZWFsXCIsIFwib3BlblwiLCBhcHAuY29uZmlnLm1vZGFsKTtcbiAgICAgICAgYXBwLnRvb2xzLmNsb3NlTWVudSgpO1xuICAgICAgfSxcbiAgICAgIGNsb2NrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoXCIjY2xvY2stbW9kYWxcIikuZm91bmRhdGlvbihcInJldmVhbFwiLCBcIm9wZW5cIiwgYXBwLmNvbmZpZy5tb2RhbCk7XG4gICAgICAgIGFwcC50b29scy5jbG9zZU1lbnUoKTtcbiAgICAgIH0sXG4gICAgICBndWlkZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBhcHAucmVuZGVyLnZpZXdzLmd1aWRlKCk7XG4gICAgICAgICQoXCIjZ3VpZGUtbW9kYWxcIikuZm91bmRhdGlvbihcInJldmVhbFwiLCBcIm9wZW5cIiwgYXBwLmNvbmZpZy5tb2RhbCk7XG4gICAgICAgIGFwcC50b29scy5jbG9zZU1lbnUoKTtcbiAgICAgIH0sXG4gICAgICB1c2VyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFwcC5yZW5kZXIudmlld3MudXNlcigpO1xuICAgICAgICAkKFwiI3VzZXItbW9kYWxcIikuZm91bmRhdGlvbihcInJldmVhbFwiLCBcIm9wZW5cIiwgYXBwLmNvbmZpZy5tb2RhbCk7XG4gICAgICAgIGFwcC50b29scy5jbG9zZU1lbnUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKFwiLnZpZXctcGxhY2Vob2xkZXJcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICQodGhpcykuaHRtbChcIlwiKTtcbiAgICAgIH0pXG4gICAgfSxcbiAgICBzcGlubmVyOiB7XG4gICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoXCIuc3Bpbm5lci1sb2FkZWRcIikuaGlkZSgpO1xuICAgICAgICAkKFwiI3NwaW5uZXJcIikuc2hvdygpO1xuICAgICAgfSxcbiAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJChcIiNzcGlubmVyXCIpLmhpZGUoKTtcbiAgICAgICAgJChcIi5zcGlubmVyLWxvYWRlZFwiKS5zaG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzdG9yYWdlOiB7XG4gICAgbGlzdDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHV0aWxzLnJlYWRMb2NhbFN0b3JhZ2UoXCJkYXRhXCIpKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgLy9UT0RPIHJlbmFtZSB0byBpdGVtRXhpc3RcbiAgICAgIHZhciBkYXRhID0gYXBwLnN0b3JhZ2UubGlzdCgpO1xuICAgICAgaWYgKGRhdGEuaW5kZXhPZihpdGVtKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjaGVja2VkID0gYXBwLnN0b3JhZ2UubGlzdCgpO1xuICAgICAgaWYgKGNoZWNrZWQuaW5kZXhPZihpdGVtKSA9PSAtMSkge1xuICAgICAgICBjaGVja2VkLnB1c2goaXRlbSk7XG4gICAgICAgIHV0aWxzLndyaXRlTG9jYWxTdG9yYWdlKFwiZGF0YVwiLCBKU09OLnN0cmluZ2lmeShjaGVja2VkKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkl0ZW0gYWxyZWFkeSBleGlzdHMgaW4gc3RvcmFnZVwiLCBpdGVtKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBkYXRhID0gYXBwLnN0b3JhZ2UubGlzdCgpO1xuICAgICAgdmFyIGluZGV4ID0gZGF0YS5pbmRleE9mKGl0ZW0pO1xuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBkYXRhLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHV0aWxzLndyaXRlTG9jYWxTdG9yYWdlKFwiZGF0YVwiLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkl0ZW0gZG8gbm90IGV4aXN0IGluIHN0b3JhZ2VcIiwgaXRlbSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xuICAgICAgdXRpbHMud3JpdGVMb2NhbFN0b3JhZ2UoXCJkYXRhXCIsIFwiW11cIik7XG4gICAgfSxcbiAgICBzYXZlRGF0YTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFwcC5zdG9yYWdlLmxpc3QoKTtcbiAgICAgICQuYWpheCh7XG4gICAgICAgIHVybDogXCJhamF4LWNvbnRyb2xsZXIucGhwP2FjdGlvbj1zYXZlXCIsXG4gICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAganNvbjogSlNPTi5zdHJpbmdpZnkocGF5bG9hZClcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtcIkVSUk9SXCJdICE9XCJ1bmRlZmluZWRcIil7XG4gICAgICAgICAgICBhcHAudG9vbHMucmVzdGFydCgpOyAgICAgICAgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldERhdGE6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgJC5hamF4KHtcbiAgICAgICAgdXJsOiBcImFqYXgtY29udHJvbGxlci5waHA/YWN0aW9uPWdldFwiLFxuICAgICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBmaWx0ZXI6IHtcbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgYXBwLnNlYXJjaC5hY3Rpb24oKTtcbiAgICB9LFxuICAgIGdldFN0YXR1czogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICQoXCIuZmlsdGVyLXN0YXR1czpjaGVja2VkXCIpLnZhbCgpO1xuICAgIH0sXG4gICAgc2V0Qm9keUNsYXNzOiBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwiZmlsdGVyLWFjdGl2ZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwiZmlsdGVyLWFjdGl2ZVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNlYXJjaDoge1xuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlucHV0LCBmaWx0ZXIsIGxpLCBuYW1lLCBpLCBjYXRlZ29yeSwgdHlwZSwgYWNxdWlzaXRpb247XG4gICAgICB2YXIgZmlsdGVyU3RhdHVzID0gYXBwLmZpbHRlci5nZXRTdGF0dXMoKTtcbiAgICAgIGFwcC5maWx0ZXIuc2V0Qm9keUNsYXNzKGZpbHRlclN0YXR1cyk7XG4gICAgICBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoXCIpO1xuICAgICAgZmlsdGVyID0gaW5wdXQudmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICAgIGxpID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIml0ZW1cIik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmFtZSA9IGxpW2ldLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJuYW1lXCIpWzBdO1xuICAgICAgICB0eXBlID0gbGlbaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInR5cGVcIilbMF07XG4gICAgICAgIGNhdGVnb3J5ID0gbGlbaV0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNhdGVnb3J5XCIpWzBdO1xuICAgICAgICBhY3F1aXNpdGlvbiA9IGxpW2ldLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJhY3F1aXNpdGlvblwiKVswXTtcbiAgICAgICAgaWYgKG5hbWUuaW5uZXJIVE1MLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpID4gLTFcbiAgICAgICAgICB8fCBjYXRlZ29yeS5pbm5lckhUTUwudG9VcHBlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgPiAtMVxuICAgICAgICAgIHx8IHR5cGUuaW5uZXJIVE1MLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpID4gLTFcbiAgICAgICAgICB8fCBhY3F1aXNpdGlvbi5pbm5lckhUTUwudG9VcHBlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgPiAtMSkge1xuICAgICAgICAgIGxpW2ldLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpW2ldLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3dpdGNoIChmaWx0ZXJTdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcImFsbFwiOlxuICAgICAgICAgIGFwcC5maWx0ZXIuc2V0Qm9keUNsYXNzKGZhbHNlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInJhbmtlZFwiOlxuICAgICAgICAgICQoXCIuaXRlbS5pdGVtLXVuY2hlY2tlZFwiKS5oaWRlKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ1bnJhbmtlZFwiOlxuICAgICAgICAgICQoXCIuaXRlbS5pdGVtLWNoZWNrZWRcIikuaGlkZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYXBwLnNlYXJjaC51cGRhdGVJbmRpY2F0b3IoKTtcbiAgICB9LFxuICAgIHVwZGF0ZUluZGljYXRvcjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvdW50ID0gJChcIi5pdGVtOnZpc2libGVcIikubGVuZ3RoO1xuICAgICAgdmFyIHN0cmluZyA9ICQoXCIjc2VhcmNoXCIpLnZhbCgpO1xuICAgICAgaWYgKHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgJChcIiNzZWFyY2gtaW5kaWNhdG9yXCIpLmZpbmQoXCIjc2VhcmNoLWluZGljYXRvci1zdHJpbmdcIikuaHRtbChcIlNlYXJjaGluZyBmb3IgPGI+XCIgKyBzdHJpbmcgKyBcIjwvYj4uIFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIjc2VhcmNoLWluZGljYXRvclwiKS5maW5kKFwiI3NlYXJjaC1pbmRpY2F0b3Itc3RyaW5nXCIpLmh0bWwoXCJcIik7XG4gICAgICB9XG4gICAgICAkKFwiI3NlYXJjaC1pbmRpY2F0b3JcIikuZmluZChcIiNzZWFyY2gtaW5kaWNhdG9yLXZhbHVlXCIpLmh0bWwoY291bnQpO1xuICAgICAgdmFyIGZpbHRlclN0YXR1cyA9IGFwcC5maWx0ZXIuZ2V0U3RhdHVzKCk7XG4gICAgICBpZiAoZmlsdGVyU3RhdHVzID09IFwidW5yYW5rZWRcIiB8fCBmaWx0ZXJTdGF0dXMgPT0gXCJyYW5rZWRcIikge1xuICAgICAgICAkKFwiI3NlYXJjaC1pbmRpY2F0b3JcIikuYWRkQ2xhc3MoXCJzZWFyY2gtaW5kaWNhdG9yLWZpbHRlcmVkXCIpO1xuICAgICAgICBhcHAuZmlsdGVyLnNldEJvZHlDbGFzcyh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIjc2VhcmNoLWluZGljYXRvclwiKS5yZW1vdmVDbGFzcyhcInNlYXJjaC1pbmRpY2F0b3ItZmlsdGVyZWRcIik7XG4gICAgICAgIGFwcC5maWx0ZXIuc2V0Qm9keUNsYXNzKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKFwiI3NlYXJjaFwiKS52YWwoXCJcIikuZm9jdXMoKTtcbiAgICAgICQoXCI6cmFkaW9bdmFsdWU9YWxsXVwiKS5jbGljaygpO1xuICAgICAgYXBwLnNlYXJjaC5hY3Rpb24oKTtcbiAgICB9LFxuICAgIHNlYXJjaEZvcjogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgRm91bmRhdGlvbi5saWJzLnJldmVhbC5jbG9zZSgpO1xuICAgICAgYXBwLnNlYXJjaC5jbGVhcigpO1xuICAgICAgJChcIiNzZWFyY2hcIikudmFsKHN0cmluZykua2V5dXAoKTtcbiAgICB9XG4gIH0sXG4gIGl0ZW06IHtcbiAgICBnZXREYXRhQnlOYW1lOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGluZGV4ID0gdXRpbHMuZ2V0SW5kZXhPZihhcHAuZGF0YS5hcnJheSwgXCJuYW1lXCIsIG5hbWUpO1xuICAgICAgcmV0dXJuIGFwcC5kYXRhLmFycmF5W2luZGV4XTtcbiAgICB9LFxuICAgIGdldEluZGV4QnlOYW1lOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIHV0aWxzLmdldEluZGV4T2YoYXBwLmRhdGEuYXJyYXksIFwibmFtZVwiLCBuYW1lKTtcbiAgICB9LFxuICAgIHRvZ2dsZUluZm86IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZGF0YSA9IGFwcC5pdGVtLmdldERhdGFCeU5hbWUobmFtZSk7XG4gICAgICB2YXIgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi8uLi92aWV3cy9pdGVtLW1vZGFsLmhic1wiKTtcbiAgICAgIHZhciBodG1sID0gdGVtcGxhdGUoZGF0YSk7XG4gICAgICAkKFwiI2l0ZW0taW5mby1wbGFjZWhvbGRlclwiKS5odG1sKGh0bWwpLmZvdW5kYXRpb24oXCJyZXZlYWxcIiwgXCJvcGVuXCIsIGFwcC5jb25maWcubW9kYWwpO1xuICAgICAgYXBwLnRvb2xzLmNsb3NlTWVudSgpO1xuICAgIH0sXG4gICAgY2hlY2s6IGZ1bmN0aW9uIChuYW1lLCBzdGF0ZSkge1xuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIGFwcC5zdG9yYWdlLmFkZChuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcC5zdG9yYWdlLnJlbW92ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGFwcC5pdGVtLnNldFN0YXRlKG5hbWUsIHN0YXRlKTtcbiAgICAgIGFwcC5zdG9yYWdlLnNhdmVEYXRhKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXBwLnJlbmRlci52aWV3cy5zdGF0dXMoKTtcbiAgICAgICAgYXBwLnJlbmRlci52aWV3cy5pdGVtKG5hbWUpO1xuICAgICAgICBhcHAuc2VhcmNoLnVwZGF0ZUluZGljYXRvcigpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRTdGF0ZTogZnVuY3Rpb24gKG5hbWUsIHN0YXRlKSB7XG4gICAgICB2YXIgb2JqSW5kZXggPSBhcHAuaXRlbS5nZXRJbmRleEJ5TmFtZShuYW1lKTtcbiAgICAgIGlmIChvYmpJbmRleCAhPT0gLTEgJiYgb2JqSW5kZXggIT09IGZhbHNlKSB7XG4gICAgICAgIGFwcC5kYXRhLmFycmF5W29iakluZGV4XVtcImNoZWNrZWRcIl0gPSBzdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYW4ndCBmaW5kIGluZGV4IGZvciBcIiArIG5hbWUpO1xuICAgICAgICBhbGVydChcIkNhbid0IGZpbmQgaW5kZXggZm9yIFwiICsgbmFtZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGVja0FsbDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRhdGEgPSB3YXJmcmFtZURhdGEuYXJyYXk7XG4gICAgICB2YXIgYWxsSXRlbXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBhbGxJdGVtcy5wdXNoKGRhdGFbaV1bXCJuYW1lXCJdKTtcbiAgICAgIH1cbiAgICAgIHV0aWxzLndyaXRlTG9jYWxTdG9yYWdlKFwiZGF0YVwiLCBKU09OLnN0cmluZ2lmeShhbGxJdGVtcykpO1xuICAgICAgYXBwLnN0b3JhZ2Uuc2F2ZURhdGEoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhcHAudG9vbHMucmVzdGFydCgpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0sXG4gICAgdW5DaGVja0FsbDogZnVuY3Rpb24gKCkge1xuICAgICAgdXRpbHMud3JpdGVMb2NhbFN0b3JhZ2UoXCJkYXRhXCIsIEpTT04uc3RyaW5naWZ5KFtdKSk7XG4gICAgICBhcHAuc3RvcmFnZS5zYXZlRGF0YShcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFwcC50b29scy5yZXN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9LFxuICBzdGF0czoge1xuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgLy92YXIgdHlwZXMgPSBhcHAuZGF0YS5jb25zdGFudHMuVFlQRVM7XG4gICAgICB2YXIgY2F0ZWdvcmllcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFiZWxcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgICAgIFwidHlwZXNcIjogW1xuICAgICAgICAgICAgXCJXYXJmcmFtZVwiICAgICAgICAgICBcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhYmVsXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgICAgIFwidHlwZXNcIjogW1xuICAgICAgICAgICAgXCJQcmltYXJ5XCIgICAgICAgICAgIFxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFiZWxcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgICAgICBcInR5cGVzXCI6IFtcbiAgICAgICAgICAgIFwiU2Vjb25kYXJ5XCIgICAgICAgICAgIFxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFiZWxcIjogXCJNZWxlZVwiLFxuICAgICAgICAgIFwidHlwZXNcIjogW1xuICAgICAgICAgICAgXCJNZWxlZVwiLFxuICAgICAgICAgICAgXCJaYXdcIiAgICAgICAgICAgXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYWJlbFwiOiBcIlJvYm90aWNcIixcbiAgICAgICAgICBcInR5cGVzXCI6IFtcbiAgICAgICAgICAgIFwiU2VudGluZWxcIiwgICAgICAgICAgIFxuICAgICAgICAgICAgXCJTZW50aW5lbCBXZWFwb25cIiAgICAgICAgICAgXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYWJlbFwiOiBcIkNvbXBhbmlvbnNcIixcbiAgICAgICAgICBcInR5cGVzXCI6IFtcbiAgICAgICAgICAgIFwiQ29tcGFuaW9uXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhYmVsXCI6IFwiVmVoaWNsZXNcIixcbiAgICAgICAgICBcInR5cGVzXCI6IFtcbiAgICAgICAgICAgIFwiVmVoaWNsZVwiICAgICAgICAgICAgXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYWJlbFwiOiBcIkFyY2hndW5cIixcbiAgICAgICAgICBcInR5cGVzXCI6IFtcbiAgICAgICAgICAgIFwiQXJjaHdpbmcgR3VuXCIgICAgICAgXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYWJlbFwiOiBcIkFyY2htZWxlZVwiLFxuICAgICAgICAgIFwidHlwZXNcIjogW1xuICAgICAgICAgICAgXCJBcmNod2luZyBNZWxlZVwiICAgICAgIFxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFiZWxcIjogXCJBbXBzXCIsXG4gICAgICAgICAgXCJ0eXBlc1wiOiBbXG4gICAgICAgICAgICBcIkFtcFwiXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdO1xuICAgICAgdmFyIGRhdGEgPSBbXTtcbiAgICAgIHZhciB0b3RhbEl0ZW1zID0gMDtcbiAgICAgIHZhciB0b3RhbEl0ZW1zUmFua2VkID0gMDtcbiAgICAgIHZhciB0b3RhbEl0ZW1zVW5yYW5rZWQgPSAwO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gY2F0ZWdvcmllcykge1xuICAgICAgICB2YXIgdHlwZURhdGFSYW5rZWQgPSBbXTtcbiAgICAgICAgdmFyIHR5cGVEYXRhVW5yYW5rZWQgPSBbXTtcbiAgICAgICAgdmFyIHR5cGVEYXRhVG90YWwgPSAwO1xuICAgICAgICBmb3IgKHZhciB0eXBlIGluIGNhdGVnb3JpZXNba2V5XVtcInR5cGVzXCJdKSB7XG4gICAgICAgICAgdmFyIHR5cGVTdGF0dXMgPSBhcHAudG9vbHMuc3RhdHVzQnlUeXBlKGNhdGVnb3JpZXNba2V5XVtcInR5cGVzXCJdW3R5cGVdKTtcbiAgICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCB0eXBlU3RhdHVzW1widW5yYW5rZWRcIl0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHR5cGVEYXRhVW5yYW5rZWQucHVzaCh0eXBlU3RhdHVzW1widW5yYW5rZWRcIl1baV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCB0eXBlU3RhdHVzW1wicmFua2VkXCJdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0eXBlRGF0YVJhbmtlZC5wdXNoKHR5cGVTdGF0dXNbXCJyYW5rZWRcIl1baV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdG90YWwgPSB0eXBlRGF0YVRvdGFsICsgKHR5cGVEYXRhUmFua2VkLmxlbmd0aCArIHR5cGVEYXRhVW5yYW5rZWQubGVuZ3RoKTs7XG4gICAgICAgIHZhciBpdGVtID0ge1xuICAgICAgICAgIFwibmFtZVwiOiBjYXRlZ29yaWVzW2tleV1bXCJsYWJlbFwiXSxcbiAgICAgICAgICBcInJhbmtlZFwiOiB0eXBlRGF0YVJhbmtlZCxcbiAgICAgICAgICBcInVucmFua2VkXCI6IHR5cGVEYXRhVW5yYW5rZWQsXG4gICAgICAgICAgXCJ0b3RhbFwiOiB0b3RhbFxuICAgICAgICB9O1xuICAgICAgICBkYXRhLnB1c2goaXRlbSk7XG4gICAgICAgIHRvdGFsSXRlbXMgKz0gdG90YWw7XG4gICAgICAgIHRvdGFsSXRlbXNSYW5rZWQgKz0gdHlwZURhdGFSYW5rZWQubGVuZ3RoO1xuICAgICAgICB0b3RhbEl0ZW1zVW5yYW5rZWQgKz0gdHlwZURhdGFVbnJhbmtlZC5sZW5ndGg7XG4gICAgICB9XG4gICAgICBkYXRhLnRvdGFsSXRlbXNSYW5rZWQgPSB0b3RhbEl0ZW1zUmFua2VkO1xuICAgICAgZGF0YS50b3RhbEl0ZW1zVW5yYW5rZWQgPSB0b3RhbEl0ZW1zVW5yYW5rZWQ7XG4gICAgICBkYXRhLnRvdGFsSXRlbXMgPSB0b3RhbEl0ZW1zO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9LFxuICBpbXBvcnQ6IHtcbiAgICBzaG93TW9kYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoXCIjbW9kYWwtaW1wb3J0XCIpLmZvdW5kYXRpb24oJ3JldmVhbCcsICdvcGVuJywgYXBwLmNvbmZpZy5tb2RhbClcbiAgICB9LFxuICAgIGxpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZSgkKCcjaW1wb3J0LWRhdGEnKS52YWwoKSk7XG4gICAgICBjb25zb2xlLmxvZyhcIkRhdGEgdG8gaW1wb3J0XCIsIGRhdGEpO1xuICAgICAgdXRpbHMud3JpdGVMb2NhbFN0b3JhZ2UoXCJkYXRhXCIsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICAgIGFwcC5zdG9yYWdlLnNhdmVEYXRhKG51bGwpO1xuICAgICAgYXBwLnRvb2xzLnJlc3RhcnQoKTtcbiAgICB9XG4gIH0sXG4gIGV4cG9ydDoge1xuICAgIHNob3dNb2RhbDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRhdGEgPSB1dGlscy5yZWFkTG9jYWxTdG9yYWdlKFwiZGF0YVwiKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiRGF0YSB0byBleHBvcnRcIiwgSlNPTi5wYXJzZShkYXRhKSk7XG4gICAgICAkKFwiI2V4cG9ydC1kYXRhLXBsYWNlaG9sZGVyXCIpLmh0bWwoZGF0YSk7XG4gICAgICAkKFwiI21vZGFsLWV4cG9ydFwiKS5mb3VuZGF0aW9uKCdyZXZlYWwnLCAnb3BlbicsIGFwcC5jb25maWcubW9kYWwpXG4gICAgfSxcbiAgICBjc3Y6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gICAgICB2YXIgYXJyYXkgPSBKU09OLnBhcnNlKHV0aWxzLnJlYWRMb2NhbFN0b3JhZ2UoXCJkYXRhXCIpKTtcbiAgICAgIHZhciBzdHIgPSAnUmFua2VkIGl0ZW1zICcgKyB0b2RheSArICc6ICcgKyBhcnJheS5sZW5ndGggKyAnXFxyXFxuJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RyICs9IGFycmF5W2ldICsgJ1xcclxcbic7XG4gICAgICB9XG4gICAgICB3aW5kb3cub3BlbihcImRhdGE6dGV4dC9jc3Y7Y2hhcnNldD11dGYtOCxcIiArIGVzY2FwZShzdHIpKVxuICAgIH1cbiAgfSxcbiAgY2xvY2tzOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNsb2NrRWlkb2xvbiA9IG5ldyBDbG9ja0VpZG9sb24oKTtcbiAgICAgIHZhciBjbG9ja09yYnZhbGxpcyA9IG5ldyBDbG9ja09yYnZhbGxpcygpO1xuICAgICAgY2xvY2tFaWRvbG9uLmluaXQoKTtcbiAgICAgIGNsb2NrT3JidmFsbGlzLmluaXQoKTtcbiAgICAgICQoXCIjY2xvY2stbW9kYWxcIikuYmluZCgnY2xvc2VkLmZuZHRuLnJldmVhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xvY2tFaWRvbG9uLnN0b3AoKTtcbiAgICAgICAgY2xvY2tPcmJ2YWxsaXMuc3RvcCgpO1xuICAgICAgfSk7XG4gICAgICAkKFwiI2Nsb2NrLW1vZGFsXCIpLmJpbmQoJ29wZW4uZm5kdG4ucmV2ZWFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjbG9ja0VpZG9sb24uc3RhcnQoKTtcbiAgICAgICAgY2xvY2tPcmJ2YWxsaXMudXBkYXRlVGltZSgpO1xuICAgICAgICBjbG9ja09yYnZhbGxpcy5zdGFydCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gIGFwcC5pbml0KCk7XG59KTtcblxud2luZG93LmFwcCA9IGFwcDsgLy9UT0RPIGRlbGV0ZSBvciBub3Q/XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhcHA6IGFwcFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZWlkb190aW1lc3RhbXAgPSAxNTQwMDE1MTQxO1xuICBjb25zdCBVUERBVEVfSU5URVJWQUwgPSAxMDAwO1xuICBjb25zdCBXQVJOSU5HX01FU1NBR0UgPSBcIldhcm5pbmc6IHVuYWJsZSB0byBnZXQgdGltZS4gUmV0cnlpbmcgc29vbi5cIjtcblxuICBmdW5jdGlvbiBkZWZhdWx0R2V0VGltZUNhbGxiYWNrKHQpIHtcbiAgICBlaWRvX3RpbWVzdGFtcCA9IHQ7XG4gIH1cblxuICBmdW5jdGlvbiBwYWQocykge1xuICAgIGlmIChzLnRvU3RyaW5nKCkubGVuZ3RoID09IDEpIHJldHVybiAnMCcgKyBzLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHMudG9TdHJpbmcoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRpbWVGYWlsdXJlKGhhc0lzc3VlKSB7XG4gICAgdmFyIGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndhcm5pbmctY29udGFpbmVyXCIpO1xuICAgIGlmIChoYXNJc3N1ZSkge1xuICAgICAgZS5pbm5lckhUTUwgPSBXQVJOSU5HX01FU1NBR0U7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMuZ2V0Q2V0dXNUaW1lLCAzMDAwMCwgdHJ1ZSwgZGVmYXVsdEdldFRpbWVDYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgIGUuaW5uZXJIVE1MID0gXCJcIjtcbiAgfVxuXG4gIHRoaXMuZ2V0Q2V0dXNUaW1lID0gZnVuY3Rpb24gKGZldGNoLCBjYWxsYmFjaykge1xuICAgIHZhciB0aW1lc3RhbXAgPSAxNTIyNzY0MzAxO1x0Ly9TdGF0aWMgdGltZXN0YW1wIHRvIGJlIHJldHVybmVkIGluIGNhc2Ugb2YgYW4gZXJyb3IuIENvcnJlY3QgYXMgb2YgMjAxOC0wNC0wMywgZm9yIFBDIHZlcnNpb24gMjIuMTcuMC4xLiBNaWdodCBub3QgYmUgYWNjdXJhdGUgaW4gdGhlIGZ1dHVyZS5cbiAgICBpZiAoIWZldGNoKSB7XG4gICAgICBjYWxsYmFjayh0aW1lc3RhbXApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB3b3JsZFN0YXRlRmlsZVVybCA9IFwiaHR0cDovL2NvbnRlbnQud2FyZnJhbWUuY29tL2R5bmFtaWMvd29ybGRTdGF0ZS5waHBcIjtcbiAgICB2YXIgd29ybGRTdGF0ZUNPUlNVcmwgPSBcImh0dHBzOi8vd2hhdGV2ZXItb3JpZ2luLmhlcm9rdWFwcC5jb20vZ2V0P2NhbGxiYWNrPT8mdXJsPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHdvcmxkU3RhdGVGaWxlVXJsKTtcblxuICAgICQuYWpheChcbiAgICAgIHtcbiAgICAgICAgdXJsOiB3b3JsZFN0YXRlQ09SU1VybCxcbiAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgdmFyIHdvcmxkU3RhdGVEYXRhO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3b3JsZFN0YXRlRGF0YSA9IEpTT04ucGFyc2UoZGF0YS5jb250ZW50cyk7IC8vVGhlIGRhdGEgaXMgcmV0dXJuZWQgYXMgYSBzdHJpbmcgaW5zaWRlIGEgSlNPTiByZXNwb25zZSBhbmQgaGFzIHRvIGJlIHBhcnNlZC5cbiAgICAgICAgICB9XG4gICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNvdWxkIG5vdCBmZXRjaCBDZXR1cyB0aW1lIChcIiwgZS5tZXNzYWdlLCBcIikuIFVzaW5nIHN0YXRpYyB0aW1lc3RhbXAuIEFjY3VyYWN5IG5vdCBndWFyYW50ZWVkLlwiKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHRpbWVzdGFtcCk7XG4gICAgICAgICAgICBzZXRUaW1lRmFpbHVyZSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHN5bmRpY2F0ZSA9IHdvcmxkU3RhdGVEYXRhW1wiU3luZGljYXRlTWlzc2lvbnNcIl0uZmluZChlbGVtZW50ID0+IChlbGVtZW50W1wiVGFnXCJdID09IFwiQ2V0dXNTeW5kaWNhdGVcIikpO1xuICAgICAgICAgIGlmIChzeW5kaWNhdGUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZXRUaW1lRmFpbHVyZSh0cnVlKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHRpbWVzdGFtcCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFRpbWVGYWlsdXJlKGZhbHNlKTtcbiAgICAgICAgICB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKHN5bmRpY2F0ZVtcIkV4cGlyeVwiXVtcIiRkYXRlXCJdW1wiJG51bWJlckxvbmdcIl0gLyAxMDAwKTtcdC8vVGhlIGFjdGl2YXRpb24gdGltZSwgY29udmVydGVkIHRvIHdob2xlIHNlY29uZHNcbiAgICAgICAgICBjYWxsYmFjayh0aW1lc3RhbXApO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIkNvdW5kIG5vdCBmZXRjaCBDZXR1cyB0aW1lOlwiLCBzdGF0dXMsIGVycm9yLCBcIi4gVXNpbmcgc3RhdGljIHRpbWVzdGFtcC4gQWNjdXJhY3kgbm90IGd1YXJhbnRlZWQuXCIpO1xuICAgICAgICAgIHNldFRpbWVGYWlsdXJlKHRydWUpO1xuICAgICAgICAgIGNhbGxiYWNrKHRpbWVzdGFtcCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7XG4gICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICAgIHZhciB0aW1lID0gZC5nZXRUaW1lKCkgLyAxMDAwO1xuICAgIC8vIFRoaXMgdGltZSBpcyB0aGUgZW5kIG9mIG5pZ2h0IGFuZCBzdGFydCBvZiBkYXlcbiAgICB2YXIgc3RhcnRfdGltZSA9IChlaWRvX3RpbWVzdGFtcCAtIDE1MCAqIDYwKVxuICAgIHZhciBpcmx0aW1lX20gPSAoKHRpbWUgLSBzdGFydF90aW1lKSAvIDYwKSAlIDE1MDsgIC8vIDEwMG0gb2YgZGF5ICsgNTBtIG9mIG5pZ2h0XG5cbiAgICB2YXIgZWlkb3RpbWVfaW5faCA9IChpcmx0aW1lX20gLyA2LjI1KSArIDY7XG4gICAgaWYgKGVpZG90aW1lX2luX2ggPCAwKSBlaWRvdGltZV9pbl9oICs9IDI0O1xuICAgIGlmIChlaWRvdGltZV9pbl9oID4gMjQpIGVpZG90aW1lX2luX2ggLT0gMjQ7XG4gICAgdmFyIGVpZG90aW1lX2ggPSBNYXRoLmZsb29yKGVpZG90aW1lX2luX2gpO1xuICAgIHZhciBlaWRvdGltZV9tID0gTWF0aC5mbG9vcigoZWlkb3RpbWVfaW5faCAqIDYwKSAlIDYwKTtcbiAgICB2YXIgZWlkb3RpbWVfcyA9IE1hdGguZmxvb3IoKGVpZG90aW1lX2luX2ggKiA2MCAqIDYwKSAlIDYwKTtcblxuICAgIHZhciB3cmFwcGVkX3RpbWUgPSBlaWRvdGltZV9pbl9oIC0gNTtcbiAgICBpZiAod3JhcHBlZF90aW1lIDwgMCkgd3JhcHBlZF90aW1lICs9IDI0O1xuICAgIC8vdmFyIHNsaWRlcl9wZXJjZW50ID0gd3JhcHBlZF90aW1lIC8gMjQgKiA5MCArIDVcbiAgICAvLyQoJy5zbGlkZXInKS5jc3MoJ3RvcCcsIHNsaWRlcl9wZXJjZW50ICsgJyUnKTtcblxuICAgIHZhciBuZXh0X2ludGVydmFsO1xuXG4gICAgLy8gTmlnaHQgaXMgZnJvbSA5cG0gdG8gNWFtXG4gICAgLy8gRGF5IGlzIGZyb20gNWFtIHRvIDlwbVxuICAgIGlmICgxNTAgLSBpcmx0aW1lX20gPiA1MCkge1xuICAgICAgJCgnI2VpZG9sb24tY2xvY2snKS5hZGRDbGFzcygndGltZS1pcy1kYXknKS5yZW1vdmVDbGFzcygndGltZS1pcy1uaWdodCcpO1xuICAgICAgJCgnI2VpZG9sb24tY2xvY2sgLmRheScpLmFkZENsYXNzKCduaWdodCcpLnJlbW92ZUNsYXNzKCdkYXknKTtcbiAgICAgICQoJyNlaWRvbG9uLWNsb2NrIC5uaWdodCcpLnRleHQoJ25pZ2h0Jyk7XG4gICAgICBuZXh0X2ludGVydmFsID0gMjE7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoJyNlaWRvbG9uLWNsb2NrJykuYWRkQ2xhc3MoJ3RpbWUtaXMtbmlnaHQnKS5yZW1vdmVDbGFzcygndGltZS1pcy1kYXknKTtcbiAgICAgICQoJyNlaWRvbG9uLWNsb2NrIC5uaWdodCcpLmFkZENsYXNzKCdkYXknKS5yZW1vdmVDbGFzcygnbmlnaHQnKTtcbiAgICAgICQoJyNlaWRvbG9uLWNsb2NrIC5kYXknKS50ZXh0KCdkYXknKTtcbiAgICAgIG5leHRfaW50ZXJ2YWwgPSA1O1xuICAgIH1cblxuICAgIHZhciBlaWRvX3VudGlsX2ggPSBuZXh0X2ludGVydmFsIC0gKGVpZG90aW1lX2ggJSAyNCk7XG4gICAgaWYgKGVpZG9fdW50aWxfaCA8IDApIGVpZG9fdW50aWxfaCArPSAyNFxuICAgIHZhciBpcmxfdW50aWxfaW5fbSA9IDE1MCAtIGlybHRpbWVfbTtcbiAgICBpZiAoaXJsX3VudGlsX2luX20gPiA1MCkgaXJsX3VudGlsX2luX20gLT0gNTBcblxuICAgIHZhciBpcmxfdW50aWxfaCA9IE1hdGguZmxvb3IoaXJsX3VudGlsX2luX20gLyA2MCk7XG4gICAgdmFyIGlybF91bnRpbF9tID0gTWF0aC5mbG9vcihpcmxfdW50aWxfaW5fbSAlIDYwKTtcbiAgICB2YXIgaXJsX3VudGlsX3MgPSBNYXRoLmZsb29yKChpcmxfdW50aWxfaW5fbSAqIDYwKSAlIDYwKTtcblxuICAgICQoJy50aW1lPi5iaWctaG91cicpLnRleHQocGFkKGlybF91bnRpbF9oKSk7XG4gICAgJCgnLnRpbWU+LmJpZy1taW51dGUnKS50ZXh0KHBhZChpcmxfdW50aWxfbSkpO1xuICAgICQoJy50aW1lPi5iaWctc2Vjb25kJykudGV4dChwYWQoaXJsX3VudGlsX3MpKTtcbiAgfVxuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmdldENldHVzVGltZSgxLCBkZWZhdWx0R2V0VGltZUNhbGxiYWNrKTtcbiAgfTtcblxuICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHVwZGF0ZVRpbWUoKTtcbiAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwodXBkYXRlVGltZSwgVVBEQVRFX0lOVEVSVkFMKTtcbiAgfTtcblxuICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgfTtcbn07XG5cbi8vbW9kdWxlLmV4cG9ydHMgPSB7XG4vLyAgQ2xvY2s6IENsb2NrXG4vL307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGZ1bmN0aW9uIGNvbnZlcnRNaWxsaXNlY29uZHMobWlsbGlzKSB7XG4gICAgICAgIHZhciBtaW51dGVzID0gTWF0aC5mbG9vcihtaWxsaXMgLyA2MDAwMCk7XG4gICAgICAgIHZhciBzZWNvbmRzID0gKChtaWxsaXMgJSA2MDAwMCkgLyAxMDAwKS50b0ZpeGVkKDApO1xuICAgICAgICByZXR1cm4gbWludXRlcyArIFwiOlwiICsgKHNlY29uZHMgPCAxMCA/ICcwJyA6ICcnKSArIHNlY29uZHM7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV4dFN0YXRlO1xuICAgICAgICB2YXIgbmV4dFBlcmlvZDtcbiAgICAgICAgdmFyIHRTdGFydCA9IDE1NDIxMzIwMjQwMDA7XG4gICAgICAgIHZhciBjeWNsZUxlbmd0aCA9IDE2MDAwMDA7XG4gICAgICAgIHZhciB3YXJtTGVuZ3RoID0gNDAwMDAwO1xuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSAoRGF0ZS5ub3coKSAtIHRTdGFydCkgJSBjeWNsZUxlbmd0aDtcbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lIDwgd2FybUxlbmd0aCkge1xuICAgICAgICAgICAgbmV4dFBlcmlvZCA9IHdhcm1MZW5ndGggLSBjdXJyZW50VGltZTtcbiAgICAgICAgICAgIG5leHRTdGF0ZSA9IFwiY29sZFwiO1xuICAgICAgICAgICAgJCgnI29yYnZhbGxpcy1jbG9jaycpLmFkZENsYXNzKCd3ZWF0aGVyLWlzLXdhcm0nKS5yZW1vdmVDbGFzcygnd2VhdGhlci1pcy1jb2xkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0UGVyaW9kID0gY3ljbGVMZW5ndGggLSBjdXJyZW50VGltZTtcbiAgICAgICAgICAgIG5leHRTdGF0ZSA9IFwid2FybVwiO1xuICAgICAgICAgICAgJCgnI29yYnZhbGxpcy1jbG9jaycpLmFkZENsYXNzKCd3ZWF0aGVyLWlzLWNvbGQnKS5yZW1vdmVDbGFzcygnd2VhdGhlci1pcy13YXJtJyk7XG4gICAgICAgIH1cbiAgICAgICAgJCgnI29yYnZhbGxpcy1jbG9jayAubmV4dC1wZXJpb2QnKS50ZXh0KG5leHRTdGF0ZSk7XG4gICAgICAgICQoJy53ZWF0aGVyPi5iaWctbWludXRlJykudGV4dChjb252ZXJ0TWlsbGlzZWNvbmRzKG5leHRQZXJpb2QpKTtcbiAgICB9XG4gICAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRpbWUoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMudXBkYXRlVGltZSwgMTAwMCk7XG4gICAgfTtcblxuICAgIHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICB9O1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvY2Fsc3RvcmFnZToge1xuICAgIGRvbWFpbjogXCJ3YXJmcmFtZS1tYXN0ZXJ5LWhlbHBlci5cIlxuICB9XG59O1xuIiwiY29uc3QgY29uZmlnID0gcmVxdWlyZShcIi4vY29uZmlnLmpzXCIpO1xuY29uc3QgSGFuZGxlYmFycyA9IHJlcXVpcmUoJ2hhbmRsZWJhcnMvcnVudGltZScpO1xuXG52YXIgdXRpbHMgPSB7XG5cbiAgaXNJbkFycmF5OiBmdW5jdGlvbiAoYXJyLCBvYmopIHtcbiAgICByZXR1cm4gKGFyci5pbmRleE9mKG9iaikgIT0gLTEpO1xuICB9LFxuXG4gIGdldEluZGV4T2Y6IGZ1bmN0aW9uIChhcnJheSwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBsID0gYXJyYXkubGVuZ3RoO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgbDsgaysrKSB7XG4gICAgICBpZiAoYXJyYXlba11ba2V5XSA9PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIHNjcnViTmFtZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciB0ZW1wID0gc3RyaW5nLnJlcGxhY2UoL1teYS16QS1aXSsvZywgJycpO1xuICAgIHJldHVybiB0ZW1wLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gIH0sXG5cbiAgZm9ybWF0TnVtYmVyOiBmdW5jdGlvbihudW0pIHtcbiAgICByZXR1cm4gbnVtLnRvU3RyaW5nKCkucmVwbGFjZSgvKFxcZCkoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIiQxLlwiKVxuICB9LFxuXG4gIHNvcnROdW1iZXI6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGE7XG4gIH0sXG5cbiAgLy9cbiAgLy8gIExvY2Fsc3RvcmFnZVxuICAvL1xuICBzdXBwb3J0c0xvY2FsU3RvcmFnZTogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gJ2xvY2FsU3RvcmFnZScgaW4gd2luZG93ICYmIHdpbmRvd1snbG9jYWxTdG9yYWdlJ10gIT09IG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcblxuICBwcml2YXRlTW9kZUVuYWJsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY29uZmlnW1wibG9jYWxzdG9yYWdlXCJdW1wiZG9tYWluXCJdICsgXCJsb2NhbHN0b3JhZ2UudGVzdFwiLCBcImRhdGFcIik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKC9RVU9UQV8/RVhDRUVERUQvaS50ZXN0KGUubmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShjb25maWdbXCJsb2NhbHN0b3JhZ2VcIl1bXCJkb21haW5cIl0gKyBcImxvY2Fsc3RvcmFnZS50ZXN0XCIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIHRyeUxvY2FsU3RvcmFnZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdXRpbHMuc3VwcG9ydHNMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5wcml2YXRlTW9kZUVuYWJsZWQoKSkge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZUVuYWJsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuXG4gIExvY2FsU3RvcmFnZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlRW5hYmxlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgd3JpdGVMb2NhbFN0b3JhZ2U6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHV0aWxzLkxvY2FsU3RvcmFnZSgpKSB7XG4gICAgICBsb2NhbFN0b3JhZ2VbY29uZmlnW1wibG9jYWxzdG9yYWdlXCJdW1wiZG9tYWluXCJdICsga2V5XSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVhZExvY2FsU3RvcmFnZTogZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICh1dGlscy5Mb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgaWYgKGxvY2FsU3RvcmFnZVtjb25maWdbXCJsb2NhbHN0b3JhZ2VcIl1bXCJkb21haW5cIl0gKyBrZXldKSB7XG4gICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2VbY29uZmlnW1wibG9jYWxzdG9yYWdlXCJdW1wiZG9tYWluXCJdICsga2V5XSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvL1xuICAvLyAgSGFuZGxlYmFyc1xuICAvL1xuICByZWdpc3RlckhhbmRsZWJhckhlbHBlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdjb25maWcnLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICB2YXIgc3RyID0gYXJndW1lbnRzWzBdO1xuICAgICAgaWYgKHN0ci5pbmRleE9mKFwiLlwiKSAhPT0gLTEpIHtcbiAgICAgICAgdmFyIHN0clBhcnQgPSBzdHIuc3BsaXQoXCIuXCIpO1xuICAgICAgICByZXR1cm4gSi5jb25maWdbc3RyUGFydFswXV1bc3RyUGFydFsxXV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gSi5jb25maWdbc3RyXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdlc2NhcGUnLCBmdW5jdGlvbih2YXJpYWJsZSkge1xuICAgICAgaWYgKHR5cGVvZih2YXJpYWJsZSkgIT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICAgIHJldHVybiB2YXJpYWJsZS5yZXBsYWNlKC8oWydcIl0pL2csICdcXFxcJDEnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCd1bmVzY2FwZScsIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHZhciBkb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGFyZ3VtZW50c1swXSwgXCJ0ZXh0L2h0bWxcIik7XG4gICAgICByZXR1cm4gZG9jLmRvY3VtZW50RWxlbWVudC50ZXh0Q29udGVudDtcbiAgICB9KTtcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwiaWZWYWx1ZVwiLCBmdW5jdGlvbiAoY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChjb25kaXRpb25hbCA9PSBvcHRpb25zLmhhc2guZXF1YWxzKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwicmVwbGFjZVwiLCBmdW5jdGlvbiAoc3RyLCBhLCBiKSB7XG4gICAgICAvLyBFeGFtcGxlOiB7e3tyZXBsYWNlIEltYWdlVXJsLlVybCBcInNtYWxsXCIgXCJtZWRpdW1cIn19fVxuICAgICAgaWYgKHN0ciAmJiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoIWEgfHwgdHlwZW9mIGEgIT09ICdzdHJpbmcnKSByZXR1cm4gc3RyO1xuICAgICAgICBpZiAoIWIgfHwgdHlwZW9mIGIgIT09ICdzdHJpbmcnKSBiID0gJyc7XG4gICAgICAgIHJldHVybiBzdHIuc3BsaXQoYSkuam9pbihiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpZkNvbmQnLCBmdW5jdGlvbiAodjEsIG9wZXJhdG9yLCB2Miwgb3B0aW9ucykge1xuICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgICAgICBjYXNlICc9PSc6XG4gICAgICAgICAgcmV0dXJuICh2MSA9PSB2MikgPyBvcHRpb25zLmZuKHRoaXMpIDogb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgICAgICBjYXNlICc9PT0nOlxuICAgICAgICAgIHJldHVybiAodjEgPT09IHYyKSA/IG9wdGlvbnMuZm4odGhpcykgOiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgICAgIGNhc2UgJyE9JzpcbiAgICAgICAgICByZXR1cm4gKHYxICE9IHYyKSA/IG9wdGlvbnMuZm4odGhpcykgOiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgICAgIGNhc2UgJyE9PSc6XG4gICAgICAgICAgcmV0dXJuICh2MSAhPT0gdjIpID8gb3B0aW9ucy5mbih0aGlzKSA6IG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgcmV0dXJuICh2MSA8IHYyKSA/IG9wdGlvbnMuZm4odGhpcykgOiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgICByZXR1cm4gKHYxIDw9IHYyKSA/IG9wdGlvbnMuZm4odGhpcykgOiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgIHJldHVybiAodjEgPiB2MikgPyBvcHRpb25zLmZuKHRoaXMpIDogb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgICAgICBjYXNlICc+PSc6XG4gICAgICAgICAgcmV0dXJuICh2MSA+PSB2MikgPyBvcHRpb25zLmZuKHRoaXMpIDogb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgICAgICBjYXNlICcmJic6XG4gICAgICAgICAgcmV0dXJuICh2MSAmJiB2MikgPyBvcHRpb25zLmZuKHRoaXMpIDogb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgICAgICBjYXNlICd8fCc6XG4gICAgICAgICAgcmV0dXJuICh2MSB8fCB2MikgPyBvcHRpb25zLmZuKHRoaXMpIDogb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHV0aWxzOiB1dGlsc1xufTtcbiIsIi8qXG4gKiBGb3VuZGF0aW9uIFJlc3BvbnNpdmUgTGlicmFyeVxuICogaHR0cDovL2ZvdW5kYXRpb24uenVyYi5jb21cbiAqIENvcHlyaWdodCAyMDE1LCBaVVJCXG4gKiBGcmVlIHRvIHVzZSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuKi9cblxuKGZ1bmN0aW9uICgkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBoZWFkZXJfaGVscGVycyA9IGZ1bmN0aW9uIChjbGFzc19hcnJheSkge1xuICAgIHZhciBoZWFkID0gJCgnaGVhZCcpO1xuICAgIGhlYWQucHJlcGVuZCgkLm1hcChjbGFzc19hcnJheSwgZnVuY3Rpb24gKGNsYXNzX25hbWUpIHtcbiAgICAgIGlmIChoZWFkLmhhcygnLicgKyBjbGFzc19uYW1lKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuICc8bWV0YSBjbGFzcz1cIicgKyBjbGFzc19uYW1lICsgJ1wiIC8+JztcbiAgICAgIH1cbiAgICB9KSk7XG4gIH07XG5cbiAgaGVhZGVyX2hlbHBlcnMoW1xuICAgICdmb3VuZGF0aW9uLW1xLXNtYWxsJyxcbiAgICAnZm91bmRhdGlvbi1tcS1zbWFsbC1vbmx5JyxcbiAgICAnZm91bmRhdGlvbi1tcS1tZWRpdW0nLFxuICAgICdmb3VuZGF0aW9uLW1xLW1lZGl1bS1vbmx5JyxcbiAgICAnZm91bmRhdGlvbi1tcS1sYXJnZScsXG4gICAgJ2ZvdW5kYXRpb24tbXEtbGFyZ2Utb25seScsXG4gICAgJ2ZvdW5kYXRpb24tbXEteGxhcmdlJyxcbiAgICAnZm91bmRhdGlvbi1tcS14bGFyZ2Utb25seScsXG4gICAgJ2ZvdW5kYXRpb24tbXEteHhsYXJnZScsXG4gICAgJ2ZvdW5kYXRpb24tZGF0YS1hdHRyaWJ1dGUtbmFtZXNwYWNlJ10pO1xuXG4gIC8vIEVuYWJsZSBGYXN0Q2xpY2sgaWYgcHJlc2VudFxuXG4gICQoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgRmFzdENsaWNrICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gRG9uJ3QgYXR0YWNoIHRvIGJvZHkgaWYgdW5kZWZpbmVkXG4gICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIEZhc3RDbGljay5hdHRhY2goZG9jdW1lbnQuYm9keSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBwcml2YXRlIEZhc3QgU2VsZWN0b3Igd3JhcHBlcixcbiAgLy8gcmV0dXJucyBqUXVlcnkgb2JqZWN0LiBPbmx5IHVzZSB3aGVyZVxuICAvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgYXZhaWxhYmxlLlxuICB2YXIgUyA9IGZ1bmN0aW9uIChzZWxlY3RvciwgY29udGV4dCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICB2YXIgY29udDtcbiAgICAgICAgaWYgKGNvbnRleHQuanF1ZXJ5KSB7XG4gICAgICAgICAgY29udCA9IGNvbnRleHRbMF07XG4gICAgICAgICAgaWYgKCFjb250KSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udCA9IGNvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQoY29udC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJChzZWxlY3RvciwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gTmFtZXNwYWNlIGZ1bmN0aW9ucy5cblxuICB2YXIgYXR0cl9uYW1lID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgICB2YXIgYXJyID0gW107XG4gICAgaWYgKCFpbml0KSB7XG4gICAgICBhcnIucHVzaCgnZGF0YScpO1xuICAgIH1cbiAgICBpZiAodGhpcy5uYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgYXJyLnB1c2godGhpcy5uYW1lc3BhY2UpO1xuICAgIH1cbiAgICBhcnIucHVzaCh0aGlzLm5hbWUpO1xuXG4gICAgcmV0dXJuIGFyci5qb2luKCctJyk7XG4gIH07XG5cbiAgdmFyIGFkZF9uYW1lc3BhY2UgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KCctJyksXG4gICAgICAgIGkgPSBwYXJ0cy5sZW5ndGgsXG4gICAgICAgIGFyciA9IFtdO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGkgIT09IDApIHtcbiAgICAgICAgYXJyLnB1c2gocGFydHNbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMubmFtZXNwYWNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBhcnIucHVzaCh0aGlzLm5hbWVzcGFjZSwgcGFydHNbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFyci5wdXNoKHBhcnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhcnIucmV2ZXJzZSgpLmpvaW4oJy0nKTtcbiAgfTtcblxuICAvLyBFdmVudCBiaW5kaW5nIGFuZCBkYXRhLW9wdGlvbnMgdXBkYXRpbmcuXG5cbiAgdmFyIGJpbmRpbmdzID0gZnVuY3Rpb24gKG1ldGhvZCwgb3B0aW9ucykge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYmluZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgdmFyICR0aGlzID0gUyh0aGlzKSxcbiAgICAgICAgICAgICAgc2hvdWxkX2JpbmRfZXZlbnRzID0gISR0aGlzLmRhdGEoc2VsZi5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKTtcbiAgICAgICAgICAkdGhpcy5kYXRhKHNlbGYuYXR0cl9uYW1lKHRydWUpICsgJy1pbml0JywgJC5leHRlbmQoe30sIHNlbGYuc2V0dGluZ3MsIChvcHRpb25zIHx8IG1ldGhvZCksIHNlbGYuZGF0YV9vcHRpb25zKCR0aGlzKSkpO1xuXG4gICAgICAgICAgaWYgKHNob3VsZF9iaW5kX2V2ZW50cykge1xuICAgICAgICAgICAgc2VsZi5ldmVudHModGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgaWYgKFModGhpcy5zY29wZSkuaXMoJ1snICsgdGhpcy5hdHRyX25hbWUoKSArJ10nKSkge1xuICAgICAgYmluZC5jYWxsKHRoaXMuc2NvcGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBTKCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyddJywgdGhpcy5zY29wZSkuZWFjaChiaW5kKTtcbiAgICB9XG4gICAgLy8gIyBQYXRjaCB0byBmaXggIzUwNDMgdG8gbW92ZSB0aGlzICphZnRlciogdGhlIGlmL2Vsc2UgY2xhdXNlIGluIG9yZGVyIGZvciBCYWNrYm9uZSBhbmQgc2ltaWxhciBmcmFtZXdvcmtzIHRvIGhhdmUgaW1wcm92ZWQgY29udHJvbCBvdmVyIGV2ZW50IGJpbmRpbmcgYW5kIGRhdGEtb3B0aW9ucyB1cGRhdGluZy5cbiAgICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB0aGlzW21ldGhvZF0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgfTtcblxuICB2YXIgc2luZ2xlX2ltYWdlX2xvYWRlZCA9IGZ1bmN0aW9uIChpbWFnZSwgY2FsbGJhY2spIHtcbiAgICBmdW5jdGlvbiBsb2FkZWQgKCkge1xuICAgICAgY2FsbGJhY2soaW1hZ2VbMF0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJpbmRMb2FkICgpIHtcbiAgICAgIHRoaXMub25lKCdsb2FkJywgbG9hZGVkKTtcblxuICAgICAgaWYgKC9NU0lFIChcXGQrXFwuXFxkKyk7Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgIHZhciBzcmMgPSB0aGlzLmF0dHIoICdzcmMnICksXG4gICAgICAgICAgICBwYXJhbSA9IHNyYy5tYXRjaCggL1xcPy8gKSA/ICcmJyA6ICc/JztcblxuICAgICAgICBwYXJhbSArPSAncmFuZG9tPScgKyAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgICB0aGlzLmF0dHIoJ3NyYycsIHNyYyArIHBhcmFtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWltYWdlLmF0dHIoJ3NyYycpKSB7XG4gICAgICBsb2FkZWQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW1hZ2VbMF0uY29tcGxldGUgfHwgaW1hZ2VbMF0ucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgbG9hZGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJpbmRMb2FkLmNhbGwoaW1hZ2UpO1xuICAgIH1cbiAgfTtcblxuICAvKiEgbWF0Y2hNZWRpYSgpIHBvbHlmaWxsIC0gVGVzdCBhIENTUyBtZWRpYSB0eXBlL3F1ZXJ5IGluIEpTLiBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBEdWFsIE1JVC9CU0QgbGljZW5zZSAqL1xuXG4gIHdpbmRvdy5tYXRjaE1lZGlhIHx8ICh3aW5kb3cubWF0Y2hNZWRpYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAgIC8vIEZvciBicm93c2VycyB0aGF0IHN1cHBvcnQgbWF0Y2hNZWRpdW0gYXBpIHN1Y2ggYXMgSUUgOSBhbmQgd2Via2l0XG4gICAgICB2YXIgc3R5bGVNZWRpYSA9ICh3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWEpO1xuXG4gICAgICAvLyBGb3IgdGhvc2UgdGhhdCBkb24ndCBzdXBwb3J0IG1hdGNoTWVkaXVtXG4gICAgICBpZiAoIXN0eWxlTWVkaWEpIHtcbiAgICAgICAgICB2YXIgc3R5bGUgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgICAgICAgICAgICBzY3JpcHQgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXSxcbiAgICAgICAgICAgICAgaW5mbyAgICAgICAgPSBudWxsO1xuXG4gICAgICAgICAgc3R5bGUudHlwZSAgPSAndGV4dC9jc3MnO1xuICAgICAgICAgIHN0eWxlLmlkICAgID0gJ21hdGNobWVkaWFqcy10ZXN0JztcblxuICAgICAgICAgIHNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgc2NyaXB0KTtcblxuICAgICAgICAgIC8vICdzdHlsZS5jdXJyZW50U3R5bGUnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlJyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgICAgICAgaW5mbyA9ICgnZ2V0Q29tcHV0ZWRTdHlsZScgaW4gd2luZG93KSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzdHlsZSwgbnVsbCkgfHwgc3R5bGUuY3VycmVudFN0eWxlO1xuXG4gICAgICAgICAgc3R5bGVNZWRpYSA9IHtcbiAgICAgICAgICAgICAgbWF0Y2hNZWRpdW06IGZ1bmN0aW9uKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9ICdAbWVkaWEgJyArIG1lZGlhICsgJ3sgI21hdGNobWVkaWFqcy10ZXN0IHsgd2lkdGg6IDFweDsgfSB9JztcblxuICAgICAgICAgICAgICAgICAgLy8gJ3N0eWxlLnN0eWxlU2hlZXQnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3N0eWxlLnRleHRDb250ZW50JyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgICAgICAgICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgICAgICAgICAgICByZXR1cm4gaW5mby53aWR0aCA9PT0gJzFweCc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24obWVkaWEpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBtYXRjaGVzOiBzdHlsZU1lZGlhLm1hdGNoTWVkaXVtKG1lZGlhIHx8ICdhbGwnKSxcbiAgICAgICAgICAgICAgbWVkaWE6IG1lZGlhIHx8ICdhbGwnXG4gICAgICAgICAgfTtcbiAgICAgIH07XG4gIH0oKSk7XG5cbiAgLypcbiAgICoganF1ZXJ5LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vZ25hcmYzNy9qcXVlcnktcmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAqIFJlcXVpcmVzIGpRdWVyeSAxLjgrXG4gICAqXG4gICAqIENvcHlyaWdodCAoYykgMjAxMiBDb3JleSBGcmFuZ1xuICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gICAqL1xuXG4gIChmdW5jdGlvbihqUXVlcnkpIHtcblxuXG4gIC8vIHJlcXVlc3RBbmltYXRpb25GcmFtZSBwb2x5ZmlsbCBhZGFwdGVkIGZyb20gRXJpayBNw7ZsbGVyXG4gIC8vIGZpeGVzIGZyb20gUGF1bCBJcmlzaCBhbmQgVGlubyBaaWpkZWxcbiAgLy8gaHR0cDovL3BhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cbiAgLy8gaHR0cDovL215Lm9wZXJhLmNvbS9lbW9sbGVyL2Jsb2cvMjAxMS8xMi8yMC9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWVyLWFuaW1hdGluZ1xuXG4gIHZhciBhbmltYXRpbmcsXG4gICAgICBsYXN0VGltZSA9IDAsXG4gICAgICB2ZW5kb3JzID0gWyd3ZWJraXQnLCAnbW96J10sXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLFxuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUsXG4gICAgICBqcXVlcnlGeEF2YWlsYWJsZSA9ICd1bmRlZmluZWQnICE9PSB0eXBlb2YgalF1ZXJ5LmZ4O1xuXG4gIGZvciAoOyBsYXN0VGltZSA8IHZlbmRvcnMubGVuZ3RoICYmICFyZXF1ZXN0QW5pbWF0aW9uRnJhbWU7IGxhc3RUaW1lKyspIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbIHZlbmRvcnNbbGFzdFRpbWVdICsgJ1JlcXVlc3RBbmltYXRpb25GcmFtZScgXTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSA9IGNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3dbIHZlbmRvcnNbbGFzdFRpbWVdICsgJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJyBdIHx8XG4gICAgICB3aW5kb3dbIHZlbmRvcnNbbGFzdFRpbWVdICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZScgXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhZigpIHtcbiAgICBpZiAoYW5pbWF0aW5nKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmFmKTtcblxuICAgICAgaWYgKGpxdWVyeUZ4QXZhaWxhYmxlKSB7XG4gICAgICAgIGpRdWVyeS5meC50aWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgIC8vIHVzZSByQUZcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNhbmNlbEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgaWYgKGpxdWVyeUZ4QXZhaWxhYmxlKSB7XG4gICAgICBqUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiAodGltZXIpIHtcbiAgICAgICAgaWYgKHRpbWVyKCkgJiYgalF1ZXJ5LnRpbWVycy5wdXNoKHRpbWVyKSAmJiAhYW5pbWF0aW5nKSB7XG4gICAgICAgICAgYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICByYWYoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgalF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gcG9seWZpbGxcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgdGltZVRvQ2FsbCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnJUaW1lIC0gbGFzdFRpbWUpKSxcbiAgICAgICAgaWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcbiAgICAgICAgfSwgdGltZVRvQ2FsbCk7XG4gICAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9O1xuXG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgfVxuXG4gIH0oICQgKSk7XG5cbiAgZnVuY3Rpb24gcmVtb3ZlUXVvdGVzIChzdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycgfHwgc3RyaW5nIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXlsnXFxcXC9cIl0rfCg7XFxzP30pK3xbJ1xcXFwvXCJdKyQvZywgJycpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBNZWRpYVF1ZXJ5KHNlbGVjdG9yKSB7XG4gICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgIHRoaXMucXVlcnkgPSAnJztcbiAgfVxuXG4gIE1lZGlhUXVlcnkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5IHx8ICh0aGlzLnF1ZXJ5ID0gUyh0aGlzLnNlbGVjdG9yKS5jc3MoJ2ZvbnQtZmFtaWx5JykucmVwbGFjZSgvXltcXC9cXFxcJ1wiXSt8KDtcXHM/fSkrfFtcXC9cXFxcJ1wiXSskL2csICcnKSk7XG4gIH07XG5cbiAgd2luZG93LkZvdW5kYXRpb24gPSB7XG4gICAgbmFtZSA6ICdGb3VuZGF0aW9uJyxcblxuICAgIHZlcnNpb24gOiAnNS41LjMnLFxuXG4gICAgbWVkaWFfcXVlcmllcyA6IHtcbiAgICAgICdzbWFsbCcgICAgICAgOiBuZXcgTWVkaWFRdWVyeSgnLmZvdW5kYXRpb24tbXEtc21hbGwnKSxcbiAgICAgICdzbWFsbC1vbmx5JyAgOiBuZXcgTWVkaWFRdWVyeSgnLmZvdW5kYXRpb24tbXEtc21hbGwtb25seScpLFxuICAgICAgJ21lZGl1bScgICAgICA6IG5ldyBNZWRpYVF1ZXJ5KCcuZm91bmRhdGlvbi1tcS1tZWRpdW0nKSxcbiAgICAgICdtZWRpdW0tb25seScgOiBuZXcgTWVkaWFRdWVyeSgnLmZvdW5kYXRpb24tbXEtbWVkaXVtLW9ubHknKSxcbiAgICAgICdsYXJnZScgICAgICAgOiBuZXcgTWVkaWFRdWVyeSgnLmZvdW5kYXRpb24tbXEtbGFyZ2UnKSxcbiAgICAgICdsYXJnZS1vbmx5JyAgOiBuZXcgTWVkaWFRdWVyeSgnLmZvdW5kYXRpb24tbXEtbGFyZ2Utb25seScpLFxuICAgICAgJ3hsYXJnZScgICAgICA6IG5ldyBNZWRpYVF1ZXJ5KCcuZm91bmRhdGlvbi1tcS14bGFyZ2UnKSxcbiAgICAgICd4bGFyZ2Utb25seScgOiBuZXcgTWVkaWFRdWVyeSgnLmZvdW5kYXRpb24tbXEteGxhcmdlLW9ubHknKSxcbiAgICAgICd4eGxhcmdlJyAgICAgOiBuZXcgTWVkaWFRdWVyeSgnLmZvdW5kYXRpb24tbXEteHhsYXJnZScpXG4gICAgfSxcblxuICAgIHN0eWxlc2hlZXQgOiAkKCc8c3R5bGU+PC9zdHlsZT4nKS5hcHBlbmRUbygnaGVhZCcpWzBdLnNoZWV0LFxuXG4gICAgZ2xvYmFsIDoge1xuICAgICAgbmFtZXNwYWNlIDogdW5kZWZpbmVkXG4gICAgfSxcblxuICAgIGluaXQgOiBmdW5jdGlvbiAoc2NvcGUsIGxpYnJhcmllcywgbWV0aG9kLCBvcHRpb25zLCByZXNwb25zZSkge1xuICAgICAgdmFyIGFyZ3MgPSBbc2NvcGUsIG1ldGhvZCwgb3B0aW9ucywgcmVzcG9uc2VdLFxuICAgICAgICAgIHJlc3BvbnNlcyA9IFtdO1xuXG4gICAgICAvLyBjaGVjayBSVExcbiAgICAgIHRoaXMucnRsID0gL3J0bC9pLnRlc3QoUygnaHRtbCcpLmF0dHIoJ2RpcicpKTtcblxuICAgICAgLy8gc2V0IGZvdW5kYXRpb24gZ2xvYmFsIHNjb3BlXG4gICAgICB0aGlzLnNjb3BlID0gc2NvcGUgfHwgdGhpcy5zY29wZTtcblxuICAgICAgdGhpcy5zZXRfbmFtZXNwYWNlKCk7XG5cbiAgICAgIGlmIChsaWJyYXJpZXMgJiYgdHlwZW9mIGxpYnJhcmllcyA9PT0gJ3N0cmluZycgJiYgIS9yZWZsb3cvaS50ZXN0KGxpYnJhcmllcykpIHtcbiAgICAgICAgaWYgKHRoaXMubGlicy5oYXNPd25Qcm9wZXJ0eShsaWJyYXJpZXMpKSB7XG4gICAgICAgICAgcmVzcG9uc2VzLnB1c2godGhpcy5pbml0X2xpYihsaWJyYXJpZXMsIGFyZ3MpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgbGliIGluIHRoaXMubGlicykge1xuICAgICAgICAgIHJlc3BvbnNlcy5wdXNoKHRoaXMuaW5pdF9saWIobGliLCBsaWJyYXJpZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBTKHdpbmRvdykub24oXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgUyh3aW5kb3cpXG4gICAgICAgICAgLnRyaWdnZXIoJ3Jlc2l6ZS5mbmR0bi5jbGVhcmluZycpXG4gICAgICAgICAgLnRyaWdnZXIoJ3Jlc2l6ZS5mbmR0bi5kcm9wZG93bicpXG4gICAgICAgICAgLnRyaWdnZXIoJ3Jlc2l6ZS5mbmR0bi5lcXVhbGl6ZXInKVxuICAgICAgICAgIC50cmlnZ2VyKCdyZXNpemUuZm5kdG4uaW50ZXJjaGFuZ2UnKVxuICAgICAgICAgIC50cmlnZ2VyKCdyZXNpemUuZm5kdG4uam95cmlkZScpXG4gICAgICAgICAgLnRyaWdnZXIoJ3Jlc2l6ZS5mbmR0bi5tYWdlbGxhbicpXG4gICAgICAgICAgLnRyaWdnZXIoJ3Jlc2l6ZS5mbmR0bi50b3BiYXInKVxuICAgICAgICAgIC50cmlnZ2VyKCdyZXNpemUuZm5kdG4uc2xpZGVyJyk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH0sXG5cbiAgICBpbml0X2xpYiA6IGZ1bmN0aW9uIChsaWIsIGFyZ3MpIHtcbiAgICAgIGlmICh0aGlzLmxpYnMuaGFzT3duUHJvcGVydHkobGliKSkge1xuICAgICAgICB0aGlzLnBhdGNoKHRoaXMubGlic1tsaWJdKTtcblxuICAgICAgICBpZiAoYXJncyAmJiBhcmdzLmhhc093blByb3BlcnR5KGxpYikpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5saWJzW2xpYl0uc2V0dGluZ3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICQuZXh0ZW5kKHRydWUsIHRoaXMubGlic1tsaWJdLnNldHRpbmdzLCBhcmdzW2xpYl0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5saWJzW2xpYl0uZGVmYXVsdHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICQuZXh0ZW5kKHRydWUsIHRoaXMubGlic1tsaWJdLmRlZmF1bHRzLCBhcmdzW2xpYl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLmxpYnNbbGliXS5pbml0LmFwcGx5KHRoaXMubGlic1tsaWJdLCBbdGhpcy5zY29wZSwgYXJnc1tsaWJdXSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzID0gYXJncyBpbnN0YW5jZW9mIEFycmF5ID8gYXJncyA6IG5ldyBBcnJheShhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlic1tsaWJdLmluaXQuYXBwbHkodGhpcy5saWJzW2xpYl0sIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge307XG4gICAgfSxcblxuICAgIHBhdGNoIDogZnVuY3Rpb24gKGxpYikge1xuICAgICAgbGliLnNjb3BlID0gdGhpcy5zY29wZTtcbiAgICAgIGxpYi5uYW1lc3BhY2UgPSB0aGlzLmdsb2JhbC5uYW1lc3BhY2U7XG4gICAgICBsaWIucnRsID0gdGhpcy5ydGw7XG4gICAgICBsaWJbJ2RhdGFfb3B0aW9ucyddID0gdGhpcy51dGlscy5kYXRhX29wdGlvbnM7XG4gICAgICBsaWJbJ2F0dHJfbmFtZSddID0gYXR0cl9uYW1lO1xuICAgICAgbGliWydhZGRfbmFtZXNwYWNlJ10gPSBhZGRfbmFtZXNwYWNlO1xuICAgICAgbGliWydiaW5kaW5ncyddID0gYmluZGluZ3M7XG4gICAgICBsaWJbJ1MnXSA9IHRoaXMudXRpbHMuUztcbiAgICB9LFxuXG4gICAgaW5oZXJpdCA6IGZ1bmN0aW9uIChzY29wZSwgbWV0aG9kcykge1xuICAgICAgdmFyIG1ldGhvZHNfYXJyID0gbWV0aG9kcy5zcGxpdCgnICcpLFxuICAgICAgICAgIGkgPSBtZXRob2RzX2Fyci5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKHRoaXMudXRpbHMuaGFzT3duUHJvcGVydHkobWV0aG9kc19hcnJbaV0pKSB7XG4gICAgICAgICAgc2NvcGVbbWV0aG9kc19hcnJbaV1dID0gdGhpcy51dGlsc1ttZXRob2RzX2FycltpXV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0X25hbWVzcGFjZSA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBEb24ndCBib3RoZXIgcmVhZGluZyB0aGUgbmFtZXNwYWNlIG91dCBvZiB0aGUgbWV0YSB0YWdcbiAgICAgIC8vICAgIGlmIHRoZSBuYW1lc3BhY2UgaGFzIGJlZW4gc2V0IGdsb2JhbGx5IGluIGphdmFzY3JpcHRcbiAgICAgIC8vXG4gICAgICAvLyBFeGFtcGxlOlxuICAgICAgLy8gICAgRm91bmRhdGlvbi5nbG9iYWwubmFtZXNwYWNlID0gJ215LW5hbWVzcGFjZSc7XG4gICAgICAvLyBvciBtYWtlIGl0IGFuIGVtcHR5IHN0cmluZzpcbiAgICAgIC8vICAgIEZvdW5kYXRpb24uZ2xvYmFsLm5hbWVzcGFjZSA9ICcnO1xuICAgICAgLy9cbiAgICAgIC8vXG5cbiAgICAgIC8vIElmIHRoZSBuYW1lc3BhY2UgaGFzIG5vdCBiZWVuIHNldCAoaXMgdW5kZWZpbmVkKSwgdHJ5IHRvIHJlYWQgaXQgb3V0IG9mIHRoZSBtZXRhIGVsZW1lbnQuXG4gICAgICAvLyBPdGhlcndpc2UgdXNlIHRoZSBnbG9iYWxseSBkZWZpbmVkIG5hbWVzcGFjZSwgZXZlbiBpZiBpdCdzIGVtcHR5ICgnJylcbiAgICAgIHZhciBuYW1lc3BhY2UgPSAoIHRoaXMuZ2xvYmFsLm5hbWVzcGFjZSA9PT0gdW5kZWZpbmVkICkgPyAkKCcuZm91bmRhdGlvbi1kYXRhLWF0dHJpYnV0ZS1uYW1lc3BhY2UnKS5jc3MoJ2ZvbnQtZmFtaWx5JykgOiB0aGlzLmdsb2JhbC5uYW1lc3BhY2U7XG5cbiAgICAgIC8vIEZpbmFsbHksIGlmIHRoZSBuYW1zZXBhY2UgaXMgZWl0aGVyIHVuZGVmaW5lZCBvciBmYWxzZSwgc2V0IGl0IHRvIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgIC8vIE90aGVyd2lzZSB1c2UgdGhlIG5hbWVzcGFjZSB2YWx1ZS5cbiAgICAgIHRoaXMuZ2xvYmFsLm5hbWVzcGFjZSA9ICggbmFtZXNwYWNlID09PSB1bmRlZmluZWQgfHwgL2ZhbHNlL2kudGVzdChuYW1lc3BhY2UpICkgPyAnJyA6IG5hbWVzcGFjZTtcbiAgICB9LFxuXG4gICAgbGlicyA6IHt9LFxuXG4gICAgLy8gbWV0aG9kcyB0aGF0IGNhbiBiZSBpbmhlcml0ZWQgaW4gbGlicmFyaWVzXG4gICAgdXRpbHMgOiB7XG5cbiAgICAgIC8vIERlc2NyaXB0aW9uOlxuICAgICAgLy8gICAgRmFzdCBTZWxlY3RvciB3cmFwcGVyIHJldHVybnMgalF1ZXJ5IG9iamVjdC4gT25seSB1c2Ugd2hlcmUgZ2V0RWxlbWVudEJ5SWRcbiAgICAgIC8vICAgIGlzIG5vdCBhdmFpbGFibGUuXG4gICAgICAvL1xuICAgICAgLy8gQXJndW1lbnRzOlxuICAgICAgLy8gICAgU2VsZWN0b3IgKFN0cmluZyk6IENTUyBzZWxlY3RvciBkZXNjcmliaW5nIHRoZSBlbGVtZW50KHMpIHRvIGJlXG4gICAgICAvLyAgICByZXR1cm5lZCBhcyBhIGpRdWVyeSBvYmplY3QuXG4gICAgICAvL1xuICAgICAgLy8gICAgU2NvcGUgKFN0cmluZyk6IENTUyBzZWxlY3RvciBkZXNjcmliaW5nIHRoZSBhcmVhIHRvIGJlIHNlYXJjaGVkLiBEZWZhdWx0XG4gICAgICAvLyAgICBpcyBkb2N1bWVudC5cbiAgICAgIC8vXG4gICAgICAvLyBSZXR1cm5zOlxuICAgICAgLy8gICAgRWxlbWVudCAoalF1ZXJ5IE9iamVjdCk6IGpRdWVyeSBvYmplY3QgY29udGFpbmluZyBlbGVtZW50cyBtYXRjaGluZyB0aGVcbiAgICAgIC8vICAgIHNlbGVjdG9yIHdpdGhpbiB0aGUgc2NvcGUuXG4gICAgICBTIDogUyxcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBFeGVjdXRlcyBhIGZ1bmN0aW9uIGEgbWF4IG9mIG9uY2UgZXZlcnkgbiBtaWxsaXNlY29uZHNcbiAgICAgIC8vXG4gICAgICAvLyBBcmd1bWVudHM6XG4gICAgICAvLyAgICBGdW5jIChGdW5jdGlvbik6IEZ1bmN0aW9uIHRvIGJlIHRocm90dGxlZC5cbiAgICAgIC8vXG4gICAgICAvLyAgICBEZWxheSAoSW50ZWdlcik6IEZ1bmN0aW9uIGV4ZWN1dGlvbiB0aHJlc2hvbGQgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgLy9cbiAgICAgIC8vIFJldHVybnM6XG4gICAgICAvLyAgICBMYXp5X2Z1bmN0aW9uIChGdW5jdGlvbik6IEZ1bmN0aW9uIHdpdGggdGhyb3R0bGluZyBhcHBsaWVkLlxuICAgICAgdGhyb3R0bGUgOiBmdW5jdGlvbiAoZnVuYywgZGVsYXkpIHtcbiAgICAgICAgdmFyIHRpbWVyID0gbnVsbDtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgICAgIGlmICh0aW1lciA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBFeGVjdXRlcyBhIGZ1bmN0aW9uIHdoZW4gaXQgc3RvcHMgYmVpbmcgaW52b2tlZCBmb3IgbiBzZWNvbmRzXG4gICAgICAvLyAgICBNb2RpZmllZCB2ZXJzaW9uIG9mIF8uZGVib3VuY2UoKSBodHRwOi8vdW5kZXJzY29yZWpzLm9yZ1xuICAgICAgLy9cbiAgICAgIC8vIEFyZ3VtZW50czpcbiAgICAgIC8vICAgIEZ1bmMgKEZ1bmN0aW9uKTogRnVuY3Rpb24gdG8gYmUgZGVib3VuY2VkLlxuICAgICAgLy9cbiAgICAgIC8vICAgIERlbGF5IChJbnRlZ2VyKTogRnVuY3Rpb24gZXhlY3V0aW9uIHRocmVzaG9sZCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAvL1xuICAgICAgLy8gICAgSW1tZWRpYXRlIChCb29sKTogV2hldGhlciB0aGUgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBhdCB0aGUgYmVnaW5uaW5nXG4gICAgICAvLyAgICBvZiB0aGUgZGVsYXkgaW5zdGVhZCBvZiB0aGUgZW5kLiBEZWZhdWx0IGlzIGZhbHNlLlxuICAgICAgLy9cbiAgICAgIC8vIFJldHVybnM6XG4gICAgICAvLyAgICBMYXp5X2Z1bmN0aW9uIChGdW5jdGlvbik6IEZ1bmN0aW9uIHdpdGggZGVib3VuY2luZyBhcHBsaWVkLlxuICAgICAgZGVib3VuY2UgOiBmdW5jdGlvbiAoZnVuYywgZGVsYXksIGltbWVkaWF0ZSkge1xuICAgICAgICB2YXIgdGltZW91dCwgcmVzdWx0O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIGRlbGF5KTtcbiAgICAgICAgICBpZiAoY2FsbE5vdykge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIERlc2NyaXB0aW9uOlxuICAgICAgLy8gICAgUGFyc2VzIGRhdGEtb3B0aW9ucyBhdHRyaWJ1dGVcbiAgICAgIC8vXG4gICAgICAvLyBBcmd1bWVudHM6XG4gICAgICAvLyAgICBFbCAoalF1ZXJ5IE9iamVjdCk6IEVsZW1lbnQgdG8gYmUgcGFyc2VkLlxuICAgICAgLy9cbiAgICAgIC8vIFJldHVybnM6XG4gICAgICAvLyAgICBPcHRpb25zIChKYXZhc2NyaXB0IE9iamVjdCk6IENvbnRlbnRzIG9mIHRoZSBlbGVtZW50J3MgZGF0YS1vcHRpb25zXG4gICAgICAvLyAgICBhdHRyaWJ1dGUuXG4gICAgICBkYXRhX29wdGlvbnMgOiBmdW5jdGlvbiAoZWwsIGRhdGFfYXR0cl9uYW1lKSB7XG4gICAgICAgIGRhdGFfYXR0cl9uYW1lID0gZGF0YV9hdHRyX25hbWUgfHwgJ29wdGlvbnMnO1xuICAgICAgICB2YXIgb3B0cyA9IHt9LCBpaSwgcCwgb3B0c19hcnIsXG4gICAgICAgICAgICBkYXRhX29wdGlvbnMgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IEZvdW5kYXRpb24uZ2xvYmFsLm5hbWVzcGFjZTtcblxuICAgICAgICAgICAgICBpZiAobmFtZXNwYWNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwuZGF0YShuYW1lc3BhY2UgKyAnLScgKyBkYXRhX2F0dHJfbmFtZSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gZWwuZGF0YShkYXRhX2F0dHJfbmFtZSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjYWNoZWRfb3B0aW9ucyA9IGRhdGFfb3B0aW9ucyhlbCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjYWNoZWRfb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGVkX29wdGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRzX2FyciA9IChjYWNoZWRfb3B0aW9ucyB8fCAnOicpLnNwbGl0KCc7Jyk7XG4gICAgICAgIGlpID0gb3B0c19hcnIubGVuZ3RoO1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzTnVtYmVyIChvKSB7XG4gICAgICAgICAgcmV0dXJuICFpc05hTiAobyAtIDApICYmIG8gIT09IG51bGwgJiYgbyAhPT0gJycgJiYgbyAhPT0gZmFsc2UgJiYgbyAhPT0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRyaW0gKHN0cikge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuICQudHJpbShzdHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGlpLS0pIHtcbiAgICAgICAgICBwID0gb3B0c19hcnJbaWldLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgcCA9IFtwWzBdLCBwLnNsaWNlKDEpLmpvaW4oJzonKV07XG5cbiAgICAgICAgICBpZiAoL3RydWUvaS50ZXN0KHBbMV0pKSB7XG4gICAgICAgICAgICBwWzFdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKC9mYWxzZS9pLnRlc3QocFsxXSkpIHtcbiAgICAgICAgICAgIHBbMV0gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzTnVtYmVyKHBbMV0pKSB7XG4gICAgICAgICAgICBpZiAocFsxXS5pbmRleE9mKCcuJykgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHBbMV0gPSBwYXJzZUludChwWzFdLCAxMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwWzFdID0gcGFyc2VGbG9hdChwWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocC5sZW5ndGggPT09IDIgJiYgcFswXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBvcHRzW3RyaW0ocFswXSldID0gdHJpbShwWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0cztcbiAgICAgIH0sXG5cbiAgICAgIC8vIERlc2NyaXB0aW9uOlxuICAgICAgLy8gICAgQWRkcyBKUy1yZWNvZ25pemFibGUgbWVkaWEgcXVlcmllc1xuICAgICAgLy9cbiAgICAgIC8vIEFyZ3VtZW50czpcbiAgICAgIC8vICAgIE1lZGlhIChTdHJpbmcpOiBLZXkgc3RyaW5nIGZvciB0aGUgbWVkaWEgcXVlcnkgdG8gYmUgc3RvcmVkIGFzIGluXG4gICAgICAvLyAgICBGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXNcbiAgICAgIC8vXG4gICAgICAvLyAgICBDbGFzcyAoU3RyaW5nKTogQ2xhc3MgbmFtZSBmb3IgdGhlIGdlbmVyYXRlZCA8bWV0YT4gdGFnXG4gICAgICByZWdpc3Rlcl9tZWRpYSA6IGZ1bmN0aW9uIChtZWRpYSwgbWVkaWFfY2xhc3MpIHtcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ubWVkaWFfcXVlcmllc1ttZWRpYV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICQoJ2hlYWQnKS5hcHBlbmQoJzxtZXRhIGNsYXNzPVwiJyArIG1lZGlhX2NsYXNzICsgJ1wiLz4nKTtcbiAgICAgICAgICBGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXNbbWVkaWFdID0gcmVtb3ZlUXVvdGVzKCQoJy4nICsgbWVkaWFfY2xhc3MpLmNzcygnZm9udC1mYW1pbHknKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8vIERlc2NyaXB0aW9uOlxuICAgICAgLy8gICAgQWRkIGN1c3RvbSBDU1Mgd2l0aGluIGEgSlMtZGVmaW5lZCBtZWRpYSBxdWVyeVxuICAgICAgLy9cbiAgICAgIC8vIEFyZ3VtZW50czpcbiAgICAgIC8vICAgIFJ1bGUgKFN0cmluZyk6IENTUyBydWxlIHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBkb2N1bWVudC5cbiAgICAgIC8vXG4gICAgICAvLyAgICBNZWRpYSAoU3RyaW5nKTogT3B0aW9uYWwgbWVkaWEgcXVlcnkgc3RyaW5nIGZvciB0aGUgQ1NTIHJ1bGUgdG8gYmVcbiAgICAgIC8vICAgIG5lc3RlZCB1bmRlci5cbiAgICAgIGFkZF9jdXN0b21fcnVsZSA6IGZ1bmN0aW9uIChydWxlLCBtZWRpYSkge1xuICAgICAgICBpZiAobWVkaWEgPT09IHVuZGVmaW5lZCAmJiBGb3VuZGF0aW9uLnN0eWxlc2hlZXQpIHtcbiAgICAgICAgICBGb3VuZGF0aW9uLnN0eWxlc2hlZXQuaW5zZXJ0UnVsZShydWxlLCBGb3VuZGF0aW9uLnN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcXVlcnkgPSBGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXNbbWVkaWFdO1xuXG4gICAgICAgICAgaWYgKHF1ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEZvdW5kYXRpb24uc3R5bGVzaGVldC5pbnNlcnRSdWxlKCdAbWVkaWEgJyArXG4gICAgICAgICAgICAgIEZvdW5kYXRpb24ubWVkaWFfcXVlcmllc1ttZWRpYV0gKyAneyAnICsgcnVsZSArICcgfScsIEZvdW5kYXRpb24uc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBQZXJmb3JtcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gYW4gaW1hZ2UgaXMgZnVsbHkgbG9hZGVkXG4gICAgICAvL1xuICAgICAgLy8gQXJndW1lbnRzOlxuICAgICAgLy8gICAgSW1hZ2UgKGpRdWVyeSBPYmplY3QpOiBJbWFnZShzKSB0byBjaGVjayBpZiBsb2FkZWQuXG4gICAgICAvL1xuICAgICAgLy8gICAgQ2FsbGJhY2sgKEZ1bmN0aW9uKTogRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGltYWdlIGlzIGZ1bGx5IGxvYWRlZC5cbiAgICAgIGltYWdlX2xvYWRlZCA6IGZ1bmN0aW9uIChpbWFnZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIHVubG9hZGVkID0gaW1hZ2VzLmxlbmd0aDtcblxuICAgICAgICBmdW5jdGlvbiBwaWN0dXJlc19oYXNfaGVpZ2h0KGltYWdlcykge1xuICAgICAgICAgIHZhciBwaWN0dXJlc19udW1iZXIgPSBpbWFnZXMubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IHBpY3R1cmVzX251bWJlciAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZihpbWFnZXMuYXR0cignaGVpZ2h0JykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bmxvYWRlZCA9PT0gMCB8fCBwaWN0dXJlc19oYXNfaGVpZ2h0KGltYWdlcykpIHtcbiAgICAgICAgICBjYWxsYmFjayhpbWFnZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW1hZ2VzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNpbmdsZV9pbWFnZV9sb2FkZWQoc2VsZi5TKHRoaXMpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB1bmxvYWRlZCAtPSAxO1xuICAgICAgICAgICAgaWYgKHVubG9hZGVkID09PSAwKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGltYWdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBSZXR1cm5zIGEgcmFuZG9tLCBhbHBoYW51bWVyaWMgc3RyaW5nXG4gICAgICAvL1xuICAgICAgLy8gQXJndW1lbnRzOlxuICAgICAgLy8gICAgTGVuZ3RoIChJbnRlZ2VyKTogTGVuZ3RoIG9mIHN0cmluZyB0byBiZSBnZW5lcmF0ZWQuIERlZmF1bHRzIHRvIHJhbmRvbVxuICAgICAgLy8gICAgaW50ZWdlci5cbiAgICAgIC8vXG4gICAgICAvLyBSZXR1cm5zOlxuICAgICAgLy8gICAgUmFuZCAoU3RyaW5nKTogUHNldWRvLXJhbmRvbSwgYWxwaGFudW1lcmljIHN0cmluZy5cbiAgICAgIHJhbmRvbV9zdHIgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5maWR4KSB7XG4gICAgICAgICAgdGhpcy5maWR4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZWZpeCA9IHRoaXMucHJlZml4IHx8IFsodGhpcy5uYW1lIHx8ICdGJyksICgrbmV3IERhdGUpLnRvU3RyaW5nKDM2KV0uam9pbignLScpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnByZWZpeCArICh0aGlzLmZpZHgrKykudG9TdHJpbmcoMzYpO1xuICAgICAgfSxcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBIZWxwZXIgZm9yIHdpbmRvdy5tYXRjaE1lZGlhXG4gICAgICAvL1xuICAgICAgLy8gQXJndW1lbnRzOlxuICAgICAgLy8gICAgbXEgKFN0cmluZyk6IE1lZGlhIHF1ZXJ5XG4gICAgICAvL1xuICAgICAgLy8gUmV0dXJuczpcbiAgICAgIC8vICAgIChCb29sZWFuKTogV2hldGhlciB0aGUgbWVkaWEgcXVlcnkgcGFzc2VzIG9yIG5vdFxuICAgICAgbWF0Y2ggOiBmdW5jdGlvbiAobXEpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKG1xKS5tYXRjaGVzO1xuICAgICAgfSxcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBIZWxwZXJzIGZvciBjaGVja2luZyBGb3VuZGF0aW9uIGRlZmF1bHQgbWVkaWEgcXVlcmllcyB3aXRoIEpTXG4gICAgICAvL1xuICAgICAgLy8gUmV0dXJuczpcbiAgICAgIC8vICAgIChCb29sZWFuKTogV2hldGhlciB0aGUgbWVkaWEgcXVlcnkgcGFzc2VzIG9yIG5vdFxuXG4gICAgICBpc19zbWFsbF91cCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2goRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzLnNtYWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIGlzX21lZGl1bV91cCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2goRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzLm1lZGl1bSk7XG4gICAgICB9LFxuXG4gICAgICBpc19sYXJnZV91cCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2goRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzLmxhcmdlKTtcbiAgICAgIH0sXG5cbiAgICAgIGlzX3hsYXJnZV91cCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2goRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzLnhsYXJnZSk7XG4gICAgICB9LFxuXG4gICAgICBpc194eGxhcmdlX3VwIDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRjaChGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXMueHhsYXJnZSk7XG4gICAgICB9LFxuXG4gICAgICBpc19zbWFsbF9vbmx5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNfbWVkaXVtX3VwKCkgJiYgIXRoaXMuaXNfbGFyZ2VfdXAoKSAmJiAhdGhpcy5pc194bGFyZ2VfdXAoKSAmJiAhdGhpcy5pc194eGxhcmdlX3VwKCk7XG4gICAgICB9LFxuXG4gICAgICBpc19tZWRpdW1fb25seSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNfbWVkaXVtX3VwKCkgJiYgIXRoaXMuaXNfbGFyZ2VfdXAoKSAmJiAhdGhpcy5pc194bGFyZ2VfdXAoKSAmJiAhdGhpcy5pc194eGxhcmdlX3VwKCk7XG4gICAgICB9LFxuXG4gICAgICBpc19sYXJnZV9vbmx5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc19tZWRpdW1fdXAoKSAmJiB0aGlzLmlzX2xhcmdlX3VwKCkgJiYgIXRoaXMuaXNfeGxhcmdlX3VwKCkgJiYgIXRoaXMuaXNfeHhsYXJnZV91cCgpO1xuICAgICAgfSxcblxuICAgICAgaXNfeGxhcmdlX29ubHkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzX21lZGl1bV91cCgpICYmIHRoaXMuaXNfbGFyZ2VfdXAoKSAmJiB0aGlzLmlzX3hsYXJnZV91cCgpICYmICF0aGlzLmlzX3h4bGFyZ2VfdXAoKTtcbiAgICAgIH0sXG5cbiAgICAgIGlzX3h4bGFyZ2Vfb25seSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNfbWVkaXVtX3VwKCkgJiYgdGhpcy5pc19sYXJnZV91cCgpICYmIHRoaXMuaXNfeGxhcmdlX3VwKCkgJiYgdGhpcy5pc194eGxhcmdlX3VwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gICQuZm4uZm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIEZvdW5kYXRpb24uaW5pdC5hcHBseShGb3VuZGF0aW9uLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0pO1xuICB9O1xuXG59KGpRdWVyeSwgd2luZG93LCB3aW5kb3cuZG9jdW1lbnQpKTtcblxuOyhmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgb3Blbk1vZGFscyA9IFtdO1xuXG4gIEZvdW5kYXRpb24ubGlicy5yZXZlYWwgPSB7XG4gICAgbmFtZSA6ICdyZXZlYWwnLFxuXG4gICAgdmVyc2lvbiA6ICc1LjUuMycsXG5cbiAgICBsb2NrZWQgOiBmYWxzZSxcblxuICAgIHNldHRpbmdzIDoge1xuICAgICAgYW5pbWF0aW9uIDogJ2ZhZGVBbmRQb3AnLFxuICAgICAgYW5pbWF0aW9uX3NwZWVkIDogMjUwLFxuICAgICAgY2xvc2Vfb25fYmFja2dyb3VuZF9jbGljayA6IHRydWUsXG4gICAgICBjbG9zZV9vbl9lc2MgOiB0cnVlLFxuICAgICAgZGlzbWlzc19tb2RhbF9jbGFzcyA6ICdjbG9zZS1yZXZlYWwtbW9kYWwnLFxuICAgICAgbXVsdGlwbGVfb3BlbmVkIDogZmFsc2UsXG4gICAgICBiZ19jbGFzcyA6ICdyZXZlYWwtbW9kYWwtYmcnLFxuICAgICAgcm9vdF9lbGVtZW50IDogJ2JvZHknLFxuICAgICAgb3BlbiA6IGZ1bmN0aW9uKCl7fSxcbiAgICAgIG9wZW5lZCA6IGZ1bmN0aW9uKCl7fSxcbiAgICAgIGNsb3NlIDogZnVuY3Rpb24oKXt9LFxuICAgICAgY2xvc2VkIDogZnVuY3Rpb24oKXt9LFxuICAgICAgb25fYWpheF9lcnJvcjogJC5ub29wLFxuICAgICAgYmcgOiAkKCcucmV2ZWFsLW1vZGFsLWJnJyksXG4gICAgICBjc3MgOiB7XG4gICAgICAgIG9wZW4gOiB7XG4gICAgICAgICAgJ29wYWNpdHknIDogMCxcbiAgICAgICAgICAndmlzaWJpbGl0eScgOiAndmlzaWJsZScsXG4gICAgICAgICAgJ2Rpc3BsYXknIDogJ2Jsb2NrJ1xuICAgICAgICB9LFxuICAgICAgICBjbG9zZSA6IHtcbiAgICAgICAgICAnb3BhY2l0eScgOiAxLFxuICAgICAgICAgICd2aXNpYmlsaXR5JyA6ICdoaWRkZW4nLFxuICAgICAgICAgICdkaXNwbGF5JyA6ICdub25lJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGluaXQgOiBmdW5jdGlvbiAoc2NvcGUsIG1ldGhvZCwgb3B0aW9ucykge1xuICAgICAgJC5leHRlbmQodHJ1ZSwgdGhpcy5zZXR0aW5ncywgbWV0aG9kLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYmluZGluZ3MobWV0aG9kLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgZXZlbnRzIDogZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgUyA9IHNlbGYuUztcblxuICAgICAgUyh0aGlzLnNjb3BlKVxuICAgICAgICAub2ZmKCcucmV2ZWFsJylcbiAgICAgICAgLm9uKCdjbGljay5mbmR0bi5yZXZlYWwnLCAnWycgKyB0aGlzLmFkZF9uYW1lc3BhY2UoJ2RhdGEtcmV2ZWFsLWlkJykgKyAnXTpub3QoW2Rpc2FibGVkXSknLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIGlmICghc2VsZi5sb2NrZWQpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gUyh0aGlzKSxcbiAgICAgICAgICAgICAgICBhamF4ID0gZWxlbWVudC5kYXRhKHNlbGYuZGF0YV9hdHRyKCdyZXZlYWwtYWpheCcpKSxcbiAgICAgICAgICAgICAgICByZXBsYWNlQ29udGVudFNlbCA9IGVsZW1lbnQuZGF0YShzZWxmLmRhdGFfYXR0cigncmV2ZWFsLXJlcGxhY2UtY29udGVudCcpKTtcblxuICAgICAgICAgICAgc2VsZi5sb2NrZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFqYXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNlbGYub3Blbi5jYWxsKHNlbGYsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHVybCA9IGFqYXggPT09IHRydWUgPyBlbGVtZW50LmF0dHIoJ2hyZWYnKSA6IGFqYXg7XG4gICAgICAgICAgICAgIHNlbGYub3Blbi5jYWxsKHNlbGYsIGVsZW1lbnQsIHt1cmwgOiB1cmx9LCB7IHJlcGxhY2VDb250ZW50U2VsIDogcmVwbGFjZUNvbnRlbnRTZWwgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgUyhkb2N1bWVudClcbiAgICAgICAgLm9uKCdjbGljay5mbmR0bi5yZXZlYWwnLCB0aGlzLmNsb3NlX3RhcmdldHMoKSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKCFzZWxmLmxvY2tlZCkge1xuICAgICAgICAgICAgdmFyIHNldHRpbmdzID0gUygnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10ub3BlbicpLmRhdGEoc2VsZi5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKSB8fCBzZWxmLnNldHRpbmdzLFxuICAgICAgICAgICAgICAgIGJnX2NsaWNrZWQgPSBTKGUudGFyZ2V0KVswXSA9PT0gUygnLicgKyBzZXR0aW5ncy5iZ19jbGFzcylbMF07XG5cbiAgICAgICAgICAgIGlmIChiZ19jbGlja2VkKSB7XG4gICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5jbG9zZV9vbl9iYWNrZ3JvdW5kX2NsaWNrKSB7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5sb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi5jbG9zZS5jYWxsKHNlbGYsIGJnX2NsaWNrZWQgPyBTKCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXS5vcGVuOm5vdCgudG9iYWNrKScpIDogUyh0aGlzKS5jbG9zZXN0KCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICBpZiAoUygnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nLCB0aGlzLnNjb3BlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIFModGhpcy5zY29wZSlcbiAgICAgICAgICAvLyAub2ZmKCcucmV2ZWFsJylcbiAgICAgICAgICAub24oJ29wZW4uZm5kdG4ucmV2ZWFsJywgdGhpcy5zZXR0aW5ncy5vcGVuKVxuICAgICAgICAgIC5vbignb3BlbmVkLmZuZHRuLnJldmVhbCcsIHRoaXMuc2V0dGluZ3Mub3BlbmVkKVxuICAgICAgICAgIC5vbignb3BlbmVkLmZuZHRuLnJldmVhbCcsIHRoaXMub3Blbl92aWRlbylcbiAgICAgICAgICAub24oJ2Nsb3NlLmZuZHRuLnJldmVhbCcsIHRoaXMuc2V0dGluZ3MuY2xvc2UpXG4gICAgICAgICAgLm9uKCdjbG9zZWQuZm5kdG4ucmV2ZWFsJywgdGhpcy5zZXR0aW5ncy5jbG9zZWQpXG4gICAgICAgICAgLm9uKCdjbG9zZWQuZm5kdG4ucmV2ZWFsJywgdGhpcy5jbG9zZV92aWRlbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBTKHRoaXMuc2NvcGUpXG4gICAgICAgICAgLy8gLm9mZignLnJldmVhbCcpXG4gICAgICAgICAgLm9uKCdvcGVuLmZuZHRuLnJldmVhbCcsICdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScsIHRoaXMuc2V0dGluZ3Mub3BlbilcbiAgICAgICAgICAub24oJ29wZW5lZC5mbmR0bi5yZXZlYWwnLCAnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nLCB0aGlzLnNldHRpbmdzLm9wZW5lZClcbiAgICAgICAgICAub24oJ29wZW5lZC5mbmR0bi5yZXZlYWwnLCAnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nLCB0aGlzLm9wZW5fdmlkZW8pXG4gICAgICAgICAgLm9uKCdjbG9zZS5mbmR0bi5yZXZlYWwnLCAnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nLCB0aGlzLnNldHRpbmdzLmNsb3NlKVxuICAgICAgICAgIC5vbignY2xvc2VkLmZuZHRuLnJldmVhbCcsICdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScsIHRoaXMuc2V0dGluZ3MuY2xvc2VkKVxuICAgICAgICAgIC5vbignY2xvc2VkLmZuZHRuLnJldmVhbCcsICdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScsIHRoaXMuY2xvc2VfdmlkZW8pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLy8gUEFUQ0ggIzM6IHR1cm5pbmcgb24ga2V5IHVwIGNhcHR1cmUgb25seSB3aGVuIGEgcmV2ZWFsIHdpbmRvdyBpcyBvcGVuXG4gICAga2V5X3VwX29uIDogZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIFBBVENIICMxOiBmaXhpbmcgbXVsdGlwbGUga2V5dXAgZXZlbnQgdHJpZ2dlciBmcm9tIHNpbmdsZSBrZXkgcHJlc3NcbiAgICAgIHNlbGYuUygnYm9keScpLm9mZigna2V5dXAuZm5kdG4ucmV2ZWFsJykub24oJ2tleXVwLmZuZHRuLnJldmVhbCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG4gICAgICAgIHZhciBvcGVuX21vZGFsID0gc2VsZi5TKCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXS5vcGVuJyksXG4gICAgICAgICAgICBzZXR0aW5ncyA9IG9wZW5fbW9kYWwuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpIHx8IHNlbGYuc2V0dGluZ3MgO1xuICAgICAgICAvLyBQQVRDSCAjMjogbWFraW5nIHN1cmUgdGhhdCB0aGUgY2xvc2UgZXZlbnQgY2FuIGJlIGNhbGxlZCBvbmx5IHdoaWxlIHVubG9ja2VkLFxuICAgICAgICAvLyAgICAgICAgICAgc28gdGhhdCBtdWx0aXBsZSBrZXl1cC5mbmR0bi5yZXZlYWwgZXZlbnRzIGRvbid0IHByZXZlbnQgY2xlYW4gY2xvc2luZyBvZiB0aGUgcmV2ZWFsIHdpbmRvdy5cbiAgICAgICAgaWYgKCBzZXR0aW5ncyAmJiBldmVudC53aGljaCA9PT0gMjcgICYmIHNldHRpbmdzLmNsb3NlX29uX2VzYyAmJiAhc2VsZi5sb2NrZWQpIHsgLy8gMjcgaXMgdGhlIGtleWNvZGUgZm9yIHRoZSBFc2NhcGUga2V5XG4gICAgICAgICAgc2VsZi5jbG9zZS5jYWxsKHNlbGYsIG9wZW5fbW9kYWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8vIFBBVENIICMzOiB0dXJuaW5nIG9uIGtleSB1cCBjYXB0dXJlIG9ubHkgd2hlbiBhIHJldmVhbCB3aW5kb3cgaXMgb3BlblxuICAgIGtleV91cF9vZmYgOiBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICAgIHRoaXMuUygnYm9keScpLm9mZigna2V5dXAuZm5kdG4ucmV2ZWFsJyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgb3BlbiA6IGZ1bmN0aW9uICh0YXJnZXQsIGFqYXhfc2V0dGluZ3MpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICBtb2RhbDtcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldC5zZWxlY3RvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBGaW5kIHRoZSBuYW1lZCBub2RlOyBvbmx5IHVzZSB0aGUgZmlyc3Qgb25lIGZvdW5kLCBzaW5jZSB0aGUgcmVzdCBvZiB0aGUgY29kZSBhc3N1bWVzIHRoZXJlJ3Mgb25seSBvbmUgbm9kZVxuICAgICAgICAgIG1vZGFsID0gc2VsZi5TKCcjJyArIHRhcmdldC5kYXRhKHNlbGYuZGF0YV9hdHRyKCdyZXZlYWwtaWQnKSkpLmZpcnN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kYWwgPSBzZWxmLlModGhpcy5zY29wZSk7XG5cbiAgICAgICAgICBhamF4X3NldHRpbmdzID0gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RhbCA9IHNlbGYuUyh0aGlzLnNjb3BlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNldHRpbmdzID0gbW9kYWwuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpO1xuICAgICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB0aGlzLnNldHRpbmdzO1xuXG5cbiAgICAgIGlmIChtb2RhbC5oYXNDbGFzcygnb3BlbicpICYmIHRhcmdldCAhPT0gdW5kZWZpbmVkICYmIHRhcmdldC5hdHRyKCdkYXRhLXJldmVhbC1pZCcpID09IG1vZGFsLmF0dHIoJ2lkJykpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2xvc2UobW9kYWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW1vZGFsLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgdmFyIG9wZW5fbW9kYWwgPSBzZWxmLlMoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICddLm9wZW4nKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1vZGFsLmRhdGEoJ2Nzcy10b3AnKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBtb2RhbC5kYXRhKCdjc3MtdG9wJywgcGFyc2VJbnQobW9kYWwuY3NzKCd0b3AnKSwgMTApKVxuICAgICAgICAgICAgLmRhdGEoJ29mZnNldCcsIHRoaXMuY2FjaGVfb2Zmc2V0KG1vZGFsKSk7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RhbC5hdHRyKCd0YWJpbmRleCcsJzAnKS5hdHRyKCdhcmlhLWhpZGRlbicsJ2ZhbHNlJyk7XG5cbiAgICAgICAgdGhpcy5rZXlfdXBfb24obW9kYWwpOyAgICAvLyBQQVRDSCAjMzogdHVybmluZyBvbiBrZXkgdXAgY2FwdHVyZSBvbmx5IHdoZW4gYSByZXZlYWwgd2luZG93IGlzIG9wZW5cblxuICAgICAgICAvLyBQcmV2ZW50IG5hbWVzcGFjZSBldmVudCBmcm9tIHRyaWdnZXJpbmcgdHdpY2VcbiAgICAgICAgbW9kYWwub24oJ29wZW4uZm5kdG4ucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAhPT0gJ2ZuZHRuLnJldmVhbCcpIHJldHVybjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9kYWwub24oJ29wZW4uZm5kdG4ucmV2ZWFsJykudHJpZ2dlcignb3Blbi5mbmR0bi5yZXZlYWwnKTtcblxuICAgICAgICBpZiAob3Blbl9tb2RhbC5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgdGhpcy50b2dnbGVfYmcobW9kYWwsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhamF4X3NldHRpbmdzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGFqYXhfc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICB1cmwgOiBhamF4X3NldHRpbmdzXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcGVuTW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZihvcGVuX21vZGFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmKHNldHRpbmdzLm11bHRpcGxlX29wZW5lZCkge1xuICAgICAgICAgICAgICBzZWxmLnRvX2JhY2sob3Blbl9tb2RhbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWxmLmhpZGUob3Blbl9tb2RhbCwgc2V0dGluZ3MuY3NzLmNsb3NlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBibDogYWRkIHRoZSBvcGVuX21vZGFsIHRoYXQgaXNuJ3QgYWxyZWFkeSBpbiB0aGUgYmFja2dyb3VuZCB0byB0aGUgb3Blbk1vZGFscyBhcnJheVxuICAgICAgICAgIGlmKHNldHRpbmdzLm11bHRpcGxlX29wZW5lZCkge1xuICAgICAgICAgICAgb3Blbk1vZGFscy5wdXNoKG1vZGFsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnNob3cobW9kYWwsIHNldHRpbmdzLmNzcy5vcGVuKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodHlwZW9mIGFqYXhfc2V0dGluZ3MgPT09ICd1bmRlZmluZWQnIHx8ICFhamF4X3NldHRpbmdzLnVybCkge1xuICAgICAgICAgIG9wZW5Nb2RhbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBvbGRfc3VjY2VzcyA9IHR5cGVvZiBhamF4X3NldHRpbmdzLnN1Y2Nlc3MgIT09ICd1bmRlZmluZWQnID8gYWpheF9zZXR0aW5ncy5zdWNjZXNzIDogbnVsbDtcbiAgICAgICAgICAkLmV4dGVuZChhamF4X3NldHRpbmdzLCB7XG4gICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKG9sZF9zdWNjZXNzKSApIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2xkX3N1Y2Nlc3MoZGF0YSwgdGV4dFN0YXR1cywganFYSFIpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICBkYXRhID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdGlvbnMucmVwbGFjZUNvbnRlbnRTZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbW9kYWwuZmluZChvcHRpb25zLnJlcGxhY2VDb250ZW50U2VsKS5odG1sKGRhdGEpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vZGFsLmh0bWwoZGF0YSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZWxmLlMobW9kYWwpLmZvdW5kYXRpb24oJ3NlY3Rpb24nLCAncmVmbG93Jyk7XG4gICAgICAgICAgICAgIHNlbGYuUyhtb2RhbCkuY2hpbGRyZW4oKS5mb3VuZGF0aW9uKCk7XG5cbiAgICAgICAgICAgICAgb3Blbk1vZGFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBjaGVjayBmb3IgaWYgdXNlciBpbml0YWxpemVkIHdpdGggZXJyb3IgY2FsbGJhY2tcbiAgICAgICAgICBpZiAoc2V0dGluZ3Mub25fYWpheF9lcnJvciAhPT0gJC5ub29wKSB7XG4gICAgICAgICAgICAkLmV4dGVuZChhamF4X3NldHRpbmdzLCB7XG4gICAgICAgICAgICAgIGVycm9yIDogc2V0dGluZ3Mub25fYWpheF9lcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJC5hamF4KGFqYXhfc2V0dGluZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzZWxmLlMod2luZG93KS50cmlnZ2VyKCdyZXNpemUnKTtcbiAgICB9LFxuXG4gICAgY2xvc2UgOiBmdW5jdGlvbiAobW9kYWwpIHtcbiAgICAgIHZhciBtb2RhbCA9IG1vZGFsICYmIG1vZGFsLmxlbmd0aCA/IG1vZGFsIDogdGhpcy5TKHRoaXMuc2NvcGUpLFxuICAgICAgICAgIG9wZW5fbW9kYWxzID0gdGhpcy5TKCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXS5vcGVuJyksXG4gICAgICAgICAgc2V0dGluZ3MgPSBtb2RhbC5kYXRhKHRoaXMuYXR0cl9uYW1lKHRydWUpICsgJy1pbml0JykgfHwgdGhpcy5zZXR0aW5ncyxcbiAgICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKG9wZW5fbW9kYWxzLmxlbmd0aCA+IDApIHtcblxuICAgICAgICBtb2RhbC5yZW1vdmVBdHRyKCd0YWJpbmRleCcsJzAnKS5hdHRyKCdhcmlhLWhpZGRlbicsJ3RydWUnKTtcblxuICAgICAgICB0aGlzLmxvY2tlZCA9IHRydWU7XG4gICAgICAgIHRoaXMua2V5X3VwX29mZihtb2RhbCk7ICAgLy8gUEFUQ0ggIzM6IHR1cm5pbmcgb24ga2V5IHVwIGNhcHR1cmUgb25seSB3aGVuIGEgcmV2ZWFsIHdpbmRvdyBpcyBvcGVuXG5cbiAgICAgICAgbW9kYWwudHJpZ2dlcignY2xvc2UuZm5kdG4ucmV2ZWFsJyk7XG5cbiAgICAgICAgaWYgKChzZXR0aW5ncy5tdWx0aXBsZV9vcGVuZWQgJiYgb3Blbl9tb2RhbHMubGVuZ3RoID09PSAxKSB8fCAhc2V0dGluZ3MubXVsdGlwbGVfb3BlbmVkIHx8IG1vZGFsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBzZWxmLnRvZ2dsZV9iZyhtb2RhbCwgZmFsc2UpO1xuICAgICAgICAgIHNlbGYudG9fZnJvbnQobW9kYWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLm11bHRpcGxlX29wZW5lZCkge1xuICAgICAgICAgIHZhciBpc0N1cnJlbnQgPSBtb2RhbC5pcygnOm5vdCgudG9iYWNrKScpO1xuICAgICAgICAgIHNlbGYuaGlkZShtb2RhbCwgc2V0dGluZ3MuY3NzLmNsb3NlLCBzZXR0aW5ncyk7XG4gICAgICAgICAgaWYoaXNDdXJyZW50KSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGxhc3QgbW9kYWwgc2luY2UgaXQgaXMgbm93IGNsb3NlZFxuICAgICAgICAgICAgb3Blbk1vZGFscy5wb3AoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpc24ndCB0aGUgY3VycmVudCBtb2RhbCwgdGhlbiBmaW5kIGl0IGluIHRoZSBhcnJheSBhbmQgcmVtb3ZlIGl0XG4gICAgICAgICAgICBvcGVuTW9kYWxzID0gJC5ncmVwKG9wZW5Nb2RhbHMsIGZ1bmN0aW9uKGVsdCkge1xuICAgICAgICAgICAgICB2YXIgaXNUaGlzID0gZWx0WzBdPT09bW9kYWxbMF07XG4gICAgICAgICAgICAgIGlmKGlzVGhpcykge1xuICAgICAgICAgICAgICAgIC8vIHNpbmNlIGl0J3Mgbm90IGN1cnJlbnRseSBpbiB0aGUgZnJvbnQsIHB1dCBpdCBpbiB0aGUgZnJvbnQgbm93IHRoYXQgaXQgaXMgaGlkZGVuXG4gICAgICAgICAgICAgICAgLy8gc28gdGhhdCBpZiBpdCdzIHJlLW9wZW5lZCwgaXQgd29uJ3QgYmUgLnRvYmFja1xuICAgICAgICAgICAgICAgIHNlbGYudG9fZnJvbnQobW9kYWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiAhaXNUaGlzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGZpbmFsbHksIHNob3cgdGhlIG5leHQgbW9kYWwgaW4gdGhlIHN0YWNrLCBpZiB0aGVyZSBpcyBvbmVcbiAgICAgICAgICBpZihvcGVuTW9kYWxzLmxlbmd0aD4wKSB7XG4gICAgICAgICAgICBzZWxmLnRvX2Zyb250KG9wZW5Nb2RhbHNbb3Blbk1vZGFscy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuaGlkZShvcGVuX21vZGFscywgc2V0dGluZ3MuY3NzLmNsb3NlLCBzZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY2xvc2VfdGFyZ2V0cyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBiYXNlID0gJy4nICsgdGhpcy5zZXR0aW5ncy5kaXNtaXNzX21vZGFsX2NsYXNzO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5jbG9zZV9vbl9iYWNrZ3JvdW5kX2NsaWNrKSB7XG4gICAgICAgIHJldHVybiBiYXNlICsgJywgLicgKyB0aGlzLnNldHRpbmdzLmJnX2NsYXNzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYmFzZTtcbiAgICB9LFxuXG4gICAgdG9nZ2xlX2JnIDogZnVuY3Rpb24gKG1vZGFsLCBzdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuUygnLicgKyB0aGlzLnNldHRpbmdzLmJnX2NsYXNzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5iZyA9ICQoJzxkaXYgLz4nLCB7J2NsYXNzJzogdGhpcy5zZXR0aW5ncy5iZ19jbGFzc30pXG4gICAgICAgICAgLmFwcGVuZFRvKCdib2R5JykuaGlkZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmlzaWJsZSA9IHRoaXMuc2V0dGluZ3MuYmcuZmlsdGVyKCc6dmlzaWJsZScpLmxlbmd0aCA+IDA7XG4gICAgICBpZiAoIHN0YXRlICE9IHZpc2libGUgKSB7XG4gICAgICAgIGlmICggc3RhdGUgPT0gdW5kZWZpbmVkID8gdmlzaWJsZSA6ICFzdGF0ZSApIHtcbiAgICAgICAgICB0aGlzLmhpZGUodGhpcy5zZXR0aW5ncy5iZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zaG93KHRoaXMuc2V0dGluZ3MuYmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNob3cgOiBmdW5jdGlvbiAoZWwsIGNzcykge1xuICAgICAgLy8gaXMgbW9kYWxcbiAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gZWwuZGF0YSh0aGlzLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpIHx8IHRoaXMuc2V0dGluZ3MsXG4gICAgICAgICAgICByb290X2VsZW1lbnQgPSBzZXR0aW5ncy5yb290X2VsZW1lbnQsXG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcztcblxuICAgICAgICBpZiAoZWwucGFyZW50KHJvb3RfZWxlbWVudCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZWwud3JhcCgnPGRpdiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCIgLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICAgIGVsLm9uKCdjbG9zZWQuZm5kdG4ucmV2ZWFsLndyYXBwZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbC5kZXRhY2goKS5hcHBlbmRUbyhwbGFjZWhvbGRlcik7XG4gICAgICAgICAgICBlbC51bndyYXAoKS51bmJpbmQoJ2Nsb3NlZC5mbmR0bi5yZXZlYWwud3JhcHBlZCcpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZWwuZGV0YWNoKCkuYXBwZW5kVG8ocm9vdF9lbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhbmltRGF0YSA9IGdldEFuaW1hdGlvbkRhdGEoc2V0dGluZ3MuYW5pbWF0aW9uKTtcbiAgICAgICAgaWYgKCFhbmltRGF0YS5hbmltYXRlKSB7XG4gICAgICAgICAgdGhpcy5sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbURhdGEucG9wKSB7XG4gICAgICAgICAgY3NzLnRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSAtIGVsLmRhdGEoJ29mZnNldCcpICsgJ3B4JztcbiAgICAgICAgICB2YXIgZW5kX2NzcyA9IHtcbiAgICAgICAgICAgIHRvcDogJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgZWwuZGF0YSgnY3NzLXRvcCcpICsgJ3B4JyxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsXG4gICAgICAgICAgICAgIC5jc3MoY3NzKVxuICAgICAgICAgICAgICAuYW5pbWF0ZShlbmRfY3NzLCBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQsICdsaW5lYXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbC50cmlnZ2VyKCdvcGVuZWQuZm5kdG4ucmV2ZWFsJyk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5hZGRDbGFzcygnb3BlbicpO1xuICAgICAgICAgIH0sIHNldHRpbmdzLmFuaW1hdGlvbl9zcGVlZCAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3NzLnRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSArIGVsLmRhdGEoJ2Nzcy10b3AnKSArICdweCc7XG5cbiAgICAgICAgaWYgKGFuaW1EYXRhLmZhZGUpIHtcbiAgICAgICAgICB2YXIgZW5kX2NzcyA9IHtvcGFjaXR5OiAxfTtcblxuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbFxuICAgICAgICAgICAgICAuY3NzKGNzcylcbiAgICAgICAgICAgICAgLmFuaW1hdGUoZW5kX2Nzcywgc2V0dGluZ3MuYW5pbWF0aW9uX3NwZWVkLCAnbGluZWFyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWwudHJpZ2dlcignb3BlbmVkLmZuZHRuLnJldmVhbCcpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICB9LCBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbC5jc3MoY3NzKS5zaG93KCkuY3NzKHtvcGFjaXR5IDogMX0pLmFkZENsYXNzKCdvcGVuJykudHJpZ2dlcignb3BlbmVkLmZuZHRuLnJldmVhbCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzO1xuXG4gICAgICAvLyBzaG91bGQgd2UgYW5pbWF0ZSB0aGUgYmFja2dyb3VuZD9cbiAgICAgIGlmIChnZXRBbmltYXRpb25EYXRhKHNldHRpbmdzLmFuaW1hdGlvbikuZmFkZSkge1xuICAgICAgICByZXR1cm4gZWwuZmFkZUluKHNldHRpbmdzLmFuaW1hdGlvbl9zcGVlZCAvIDIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvY2tlZCA9IGZhbHNlO1xuXG4gICAgICByZXR1cm4gZWwuc2hvdygpO1xuICAgIH0sXG5cbiAgICB0b19iYWNrIDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIGVsLmFkZENsYXNzKCd0b2JhY2snKTtcbiAgICB9LFxuXG4gICAgdG9fZnJvbnQgOiBmdW5jdGlvbihlbCkge1xuICAgICAgZWwucmVtb3ZlQ2xhc3MoJ3RvYmFjaycpO1xuICAgIH0sXG5cbiAgICBoaWRlIDogZnVuY3Rpb24gKGVsLCBjc3MpIHtcbiAgICAgIC8vIGlzIG1vZGFsXG4gICAgICBpZiAoY3NzKSB7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IGVsLmRhdGEodGhpcy5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKSxcbiAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8IHRoaXMuc2V0dGluZ3M7XG5cbiAgICAgICAgdmFyIGFuaW1EYXRhID0gZ2V0QW5pbWF0aW9uRGF0YShzZXR0aW5ncy5hbmltYXRpb24pO1xuICAgICAgICBpZiAoIWFuaW1EYXRhLmFuaW1hdGUpIHtcbiAgICAgICAgICB0aGlzLmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmltRGF0YS5wb3ApIHtcbiAgICAgICAgICB2YXIgZW5kX2NzcyA9IHtcbiAgICAgICAgICAgIHRvcDogLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgLSBlbC5kYXRhKCdvZmZzZXQnKSArICdweCcsXG4gICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbFxuICAgICAgICAgICAgICAuYW5pbWF0ZShlbmRfY3NzLCBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQsICdsaW5lYXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbC5jc3MoY3NzKS50cmlnZ2VyKCdjbG9zZWQuZm5kdG4ucmV2ZWFsJyk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnb3BlbicpO1xuICAgICAgICAgIH0sIHNldHRpbmdzLmFuaW1hdGlvbl9zcGVlZCAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuaW1EYXRhLmZhZGUpIHtcbiAgICAgICAgICB2YXIgZW5kX2NzcyA9IHtvcGFjaXR5IDogMH07XG5cbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxcbiAgICAgICAgICAgICAgLmFuaW1hdGUoZW5kX2Nzcywgc2V0dGluZ3MuYW5pbWF0aW9uX3NwZWVkLCAnbGluZWFyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWwuY3NzKGNzcykudHJpZ2dlcignY2xvc2VkLmZuZHRuLnJldmVhbCcpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICB9LCBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbC5oaWRlKCkuY3NzKGNzcykucmVtb3ZlQ2xhc3MoJ29wZW4nKS50cmlnZ2VyKCdjbG9zZWQuZm5kdG4ucmV2ZWFsJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3M7XG5cbiAgICAgIC8vIHNob3VsZCB3ZSBhbmltYXRlIHRoZSBiYWNrZ3JvdW5kP1xuICAgICAgaWYgKGdldEFuaW1hdGlvbkRhdGEoc2V0dGluZ3MuYW5pbWF0aW9uKS5mYWRlKSB7XG4gICAgICAgIHJldHVybiBlbC5mYWRlT3V0KHNldHRpbmdzLmFuaW1hdGlvbl9zcGVlZCAvIDIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWwuaGlkZSgpO1xuICAgIH0sXG5cbiAgICBjbG9zZV92aWRlbyA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdmlkZW8gPSAkKCcuZmxleC12aWRlbycsIGUudGFyZ2V0KSxcbiAgICAgICAgICBpZnJhbWUgPSAkKCdpZnJhbWUnLCB2aWRlbyk7XG5cbiAgICAgIGlmIChpZnJhbWUubGVuZ3RoID4gMCkge1xuICAgICAgICBpZnJhbWUuYXR0cignZGF0YS1zcmMnLCBpZnJhbWVbMF0uc3JjKTtcbiAgICAgICAgaWZyYW1lLmF0dHIoJ3NyYycsIGlmcmFtZS5hdHRyKCdzcmMnKSk7XG4gICAgICAgIHZpZGVvLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb3Blbl92aWRlbyA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdmlkZW8gPSAkKCcuZmxleC12aWRlbycsIGUudGFyZ2V0KSxcbiAgICAgICAgICBpZnJhbWUgPSB2aWRlby5maW5kKCdpZnJhbWUnKTtcblxuICAgICAgaWYgKGlmcmFtZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBkYXRhX3NyYyA9IGlmcmFtZS5hdHRyKCdkYXRhLXNyYycpO1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFfc3JjID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmcmFtZVswXS5zcmMgPSBpZnJhbWUuYXR0cignZGF0YS1zcmMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3JjID0gaWZyYW1lWzBdLnNyYztcbiAgICAgICAgICBpZnJhbWVbMF0uc3JjID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmcmFtZVswXS5zcmMgPSBzcmM7XG4gICAgICAgIH1cbiAgICAgICAgdmlkZW8uc2hvdygpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBkYXRhX2F0dHIgOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICBpZiAodGhpcy5uYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lc3BhY2UgKyAnLScgKyBzdHI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfSxcblxuICAgIGNhY2hlX29mZnNldCA6IGZ1bmN0aW9uIChtb2RhbCkge1xuICAgICAgdmFyIG9mZnNldCA9IG1vZGFsLnNob3coKS5oZWlnaHQoKSArIHBhcnNlSW50KG1vZGFsLmNzcygndG9wJyksIDEwKSArIG1vZGFsLnNjcm9sbFk7XG5cbiAgICAgIG1vZGFsLmhpZGUoKTtcblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9LFxuXG4gICAgb2ZmIDogZnVuY3Rpb24gKCkge1xuICAgICAgJCh0aGlzLnNjb3BlKS5vZmYoJy5mbmR0bi5yZXZlYWwnKTtcbiAgICB9LFxuXG4gICAgcmVmbG93IDogZnVuY3Rpb24gKCkge31cbiAgfTtcblxuICAvKlxuICAgKiBnZXRBbmltYXRpb25EYXRhKCdwb3BBbmRGYWRlJykgLy8ge2FuaW1hdGU6IHRydWUsICBwb3A6IHRydWUsICBmYWRlOiB0cnVlfVxuICAgKiBnZXRBbmltYXRpb25EYXRhKCdmYWRlJykgICAgICAgLy8ge2FuaW1hdGU6IHRydWUsICBwb3A6IGZhbHNlLCBmYWRlOiB0cnVlfVxuICAgKiBnZXRBbmltYXRpb25EYXRhKCdwb3AnKSAgICAgICAgLy8ge2FuaW1hdGU6IHRydWUsICBwb3A6IHRydWUsICBmYWRlOiBmYWxzZX1cbiAgICogZ2V0QW5pbWF0aW9uRGF0YSgnZm9vJykgICAgICAgIC8vIHthbmltYXRlOiBmYWxzZSwgcG9wOiBmYWxzZSwgZmFkZTogZmFsc2V9XG4gICAqIGdldEFuaW1hdGlvbkRhdGEobnVsbCkgICAgICAgICAvLyB7YW5pbWF0ZTogZmFsc2UsIHBvcDogZmFsc2UsIGZhZGU6IGZhbHNlfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QW5pbWF0aW9uRGF0YShzdHIpIHtcbiAgICB2YXIgZmFkZSA9IC9mYWRlL2kudGVzdChzdHIpO1xuICAgIHZhciBwb3AgPSAvcG9wL2kudGVzdChzdHIpO1xuICAgIHJldHVybiB7XG4gICAgICBhbmltYXRlIDogZmFkZSB8fCBwb3AsXG4gICAgICBwb3AgOiBwb3AsXG4gICAgICBmYWRlIDogZmFkZVxuICAgIH07XG4gIH1cbn0oalF1ZXJ5LCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudCkpO1xuXG47KGZ1bmN0aW9uICgkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIEZvdW5kYXRpb24ubGlicy50b29sdGlwID0ge1xuICAgIG5hbWUgOiAndG9vbHRpcCcsXG5cbiAgICB2ZXJzaW9uIDogJzUuNS4zJyxcblxuICAgIHNldHRpbmdzIDoge1xuICAgICAgYWRkaXRpb25hbF9pbmhlcml0YWJsZV9jbGFzc2VzIDogW10sXG4gICAgICB0b29sdGlwX2NsYXNzIDogJy50b29sdGlwJyxcbiAgICAgIGFwcGVuZF90byA6ICdib2R5JyxcbiAgICAgIHRvdWNoX2Nsb3NlX3RleHQgOiAnVGFwIFRvIENsb3NlJyxcbiAgICAgIGRpc2FibGVfZm9yX3RvdWNoIDogZmFsc2UsXG4gICAgICBob3Zlcl9kZWxheSA6IDIwMCxcbiAgICAgIGZhZGVfaW5fZHVyYXRpb24gOiAxNTAsXG4gICAgICBmYWRlX291dF9kdXJhdGlvbiA6IDE1MCxcbiAgICAgIHNob3dfb24gOiAnYWxsJyxcbiAgICAgIHRpcF90ZW1wbGF0ZSA6IGZ1bmN0aW9uIChzZWxlY3RvciwgY29udGVudCkge1xuICAgICAgICByZXR1cm4gJzxzcGFuIGRhdGEtc2VsZWN0b3I9XCInICsgc2VsZWN0b3IgKyAnXCIgaWQ9XCInICsgc2VsZWN0b3IgKyAnXCIgY2xhc3M9XCInXG4gICAgICAgICAgKyBGb3VuZGF0aW9uLmxpYnMudG9vbHRpcC5zZXR0aW5ncy50b29sdGlwX2NsYXNzLnN1YnN0cmluZygxKVxuICAgICAgICAgICsgJ1wiIHJvbGU9XCJ0b29sdGlwXCI+JyArIGNvbnRlbnQgKyAnPHNwYW4gY2xhc3M9XCJudWJcIj48L3NwYW4+PC9zcGFuPic7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGNhY2hlIDoge30sXG5cbiAgICBpbml0IDogZnVuY3Rpb24gKHNjb3BlLCBtZXRob2QsIG9wdGlvbnMpIHtcbiAgICAgIEZvdW5kYXRpb24uaW5oZXJpdCh0aGlzLCAncmFuZG9tX3N0cicpO1xuICAgICAgdGhpcy5iaW5kaW5ncyhtZXRob2QsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICBzaG91bGRfc2hvdyA6IGZ1bmN0aW9uICh0YXJnZXQsIHRpcCkge1xuICAgICAgdmFyIHNldHRpbmdzID0gJC5leHRlbmQoe30sIHRoaXMuc2V0dGluZ3MsIHRoaXMuZGF0YV9vcHRpb25zKHRhcmdldCkpO1xuXG4gICAgICBpZiAoc2V0dGluZ3Muc2hvd19vbiA9PT0gJ2FsbCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc21hbGwoKSAmJiBzZXR0aW5ncy5zaG93X29uID09PSAnc21hbGwnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm1lZGl1bSgpICYmIHNldHRpbmdzLnNob3dfb24gPT09ICdtZWRpdW0nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmxhcmdlKCkgJiYgc2V0dGluZ3Muc2hvd19vbiA9PT0gJ2xhcmdlJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgbWVkaXVtIDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG1hdGNoTWVkaWEoRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzWydtZWRpdW0nXSkubWF0Y2hlcztcbiAgICB9LFxuXG4gICAgbGFyZ2UgOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbWF0Y2hNZWRpYShGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXNbJ2xhcmdlJ10pLm1hdGNoZXM7XG4gICAgfSxcblxuICAgIGV2ZW50cyA6IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIFMgPSBzZWxmLlM7XG5cbiAgICAgIHNlbGYuY3JlYXRlKHRoaXMuUyhpbnN0YW5jZSkpO1xuXG4gICAgICBmdW5jdGlvbiBfc3RhcnRTaG93KGVsdCwgJHRoaXMsIGltbWVkaWF0ZSkge1xuICAgICAgICBpZiAoZWx0LnRpbWVyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgICAgIGVsdC50aW1lciA9IG51bGw7XG4gICAgICAgICAgc2VsZi5zaG93VGlwKCR0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbHQudGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVsdC50aW1lciA9IG51bGw7XG4gICAgICAgICAgICBzZWxmLnNob3dUaXAoJHRoaXMpO1xuICAgICAgICAgIH0uYmluZChlbHQpLCBzZWxmLnNldHRpbmdzLmhvdmVyX2RlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfc3RhcnRIaWRlKGVsdCwgJHRoaXMpIHtcbiAgICAgICAgaWYgKGVsdC50aW1lcikge1xuICAgICAgICAgIGNsZWFyVGltZW91dChlbHQudGltZXIpO1xuICAgICAgICAgIGVsdC50aW1lciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmhpZGUoJHRoaXMpO1xuICAgICAgfVxuXG4gICAgICAkKHRoaXMuc2NvcGUpXG4gICAgICAgIC5vZmYoJy50b29sdGlwJylcbiAgICAgICAgLm9uKCdtb3VzZWVudGVyLmZuZHRuLnRvb2x0aXAgbW91c2VsZWF2ZS5mbmR0bi50b29sdGlwIHRvdWNoc3RhcnQuZm5kdG4udG9vbHRpcCBNU1BvaW50ZXJEb3duLmZuZHRuLnRvb2x0aXAnLFxuICAgICAgICAgICdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyICR0aGlzID0gUyh0aGlzKSxcbiAgICAgICAgICAgICAgc2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgc2VsZi5zZXR0aW5ncywgc2VsZi5kYXRhX29wdGlvbnMoJHRoaXMpKSxcbiAgICAgICAgICAgICAgaXNfdG91Y2ggPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChNb2Rlcm5penIudG91Y2ggJiYgL3RvdWNoc3RhcnR8TVNQb2ludGVyRG93bi9pLnRlc3QoZS50eXBlKSAmJiBTKGUudGFyZ2V0KS5pcygnYScpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKC9tb3VzZS9pLnRlc3QoZS50eXBlKSAmJiBzZWxmLmllX3RvdWNoKGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGlmICgkdGhpcy5oYXNDbGFzcygnb3BlbicpKSB7XG4gICAgICAgICAgICBpZiAoTW9kZXJuaXpyLnRvdWNoICYmIC90b3VjaHN0YXJ0fE1TUG9pbnRlckRvd24vaS50ZXN0KGUudHlwZSkpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5oaWRlKCR0aGlzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLmRpc2FibGVfZm9yX3RvdWNoICYmIE1vZGVybml6ci50b3VjaCAmJiAvdG91Y2hzdGFydHxNU1BvaW50ZXJEb3duL2kudGVzdChlLnR5cGUpKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXNldHRpbmdzLmRpc2FibGVfZm9yX3RvdWNoICYmIE1vZGVybml6ci50b3VjaCAmJiAvdG91Y2hzdGFydHxNU1BvaW50ZXJEb3duL2kudGVzdChlLnR5cGUpKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgUyhzZXR0aW5ncy50b29sdGlwX2NsYXNzICsgJy5vcGVuJykuaGlkZSgpO1xuICAgICAgICAgICAgICBpc190b3VjaCA9IHRydWU7XG4gICAgICAgICAgICAgIC8vIGNsb3NlIG90aGVyIG9wZW4gdG9vbHRpcHMgb24gdG91Y2hcbiAgICAgICAgICAgICAgaWYgKCQoJy5vcGVuWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICB2YXIgcHJldk9wZW4gPSBTKCQoJy5vcGVuWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nKVswXSk7XG4gICAgICAgICAgICAgICBzZWxmLmhpZGUocHJldk9wZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgvZW50ZXJ8b3Zlci9pLnRlc3QoZS50eXBlKSkge1xuICAgICAgICAgICAgICBfc3RhcnRTaG93KHRoaXMsICR0aGlzKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcgfHwgZS50eXBlID09PSAnbW91c2VsZWF2ZScpIHtcbiAgICAgICAgICAgICAgX3N0YXJ0SGlkZSh0aGlzLCAkdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfc3RhcnRTaG93KHRoaXMsICR0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignbW91c2VsZWF2ZS5mbmR0bi50b29sdGlwIHRvdWNoc3RhcnQuZm5kdG4udG9vbHRpcCBNU1BvaW50ZXJEb3duLmZuZHRuLnRvb2x0aXAnLCAnWycgKyB0aGlzLmF0dHJfbmFtZSgpICsgJ10ub3BlbicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKC9tb3VzZS9pLnRlc3QoZS50eXBlKSAmJiBzZWxmLmllX3RvdWNoKGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCQodGhpcykuZGF0YSgndG9vbHRpcC1vcGVuLWV2ZW50LXR5cGUnKSA9PSAndG91Y2gnICYmIGUudHlwZSA9PSAnbW91c2VsZWF2ZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2UgaWYgKCQodGhpcykuZGF0YSgndG9vbHRpcC1vcGVuLWV2ZW50LXR5cGUnKSA9PSAnbW91c2UnICYmIC9NU1BvaW50ZXJEb3dufHRvdWNoc3RhcnQvaS50ZXN0KGUudHlwZSkpIHtcbiAgICAgICAgICAgIHNlbGYuY29udmVydF90b190b3VjaCgkKHRoaXMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3N0YXJ0SGlkZSh0aGlzLCAkKHRoaXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignRE9NTm9kZVJlbW92ZWQgRE9NQXR0ck1vZGlmaWVkJywgJ1snICsgdGhpcy5hdHRyX25hbWUoKSArICddOm5vdChhKScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgX3N0YXJ0SGlkZSh0aGlzLCBTKHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGllX3RvdWNoIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIEhvdyBkbyBJIGRpc3Rpbmd1aXNoIGJldHdlZW4gSUUxMSBhbmQgV2luZG93cyBQaG9uZSA4Pz8/Pz9cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgc2hvd1RpcCA6IGZ1bmN0aW9uICgkdGFyZ2V0KSB7XG4gICAgICB2YXIgJHRpcCA9IHRoaXMuZ2V0VGlwKCR0YXJnZXQpO1xuICAgICAgaWYgKHRoaXMuc2hvdWxkX3Nob3coJHRhcmdldCwgJHRpcCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hvdygkdGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9LFxuXG4gICAgZ2V0VGlwIDogZnVuY3Rpb24gKCR0YXJnZXQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IoJHRhcmdldCksXG4gICAgICAgICAgc2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgdGhpcy5zZXR0aW5ncywgdGhpcy5kYXRhX29wdGlvbnMoJHRhcmdldCkpLFxuICAgICAgICAgIHRpcCA9IG51bGw7XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICB0aXAgPSB0aGlzLlMoJ3NwYW5bZGF0YS1zZWxlY3Rvcj1cIicgKyBzZWxlY3RvciArICdcIl0nICsgc2V0dGluZ3MudG9vbHRpcF9jbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAodHlwZW9mIHRpcCA9PT0gJ29iamVjdCcpID8gdGlwIDogZmFsc2U7XG4gICAgfSxcblxuICAgIHNlbGVjdG9yIDogZnVuY3Rpb24gKCR0YXJnZXQpIHtcbiAgICAgIHZhciBkYXRhU2VsZWN0b3IgPSAkdGFyZ2V0LmF0dHIodGhpcy5hdHRyX25hbWUoKSkgfHwgJHRhcmdldC5hdHRyKCdkYXRhLXNlbGVjdG9yJyk7XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YVNlbGVjdG9yICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGFTZWxlY3RvciA9IHRoaXMucmFuZG9tX3N0cig2KTtcbiAgICAgICAgJHRhcmdldFxuICAgICAgICAgIC5hdHRyKCdkYXRhLXNlbGVjdG9yJywgZGF0YVNlbGVjdG9yKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JywgZGF0YVNlbGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGFTZWxlY3RvcjtcbiAgICB9LFxuXG4gICAgY3JlYXRlIDogZnVuY3Rpb24gKCR0YXJnZXQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCB0aGlzLnNldHRpbmdzLCB0aGlzLmRhdGFfb3B0aW9ucygkdGFyZ2V0KSksXG4gICAgICAgICAgdGlwX3RlbXBsYXRlID0gdGhpcy5zZXR0aW5ncy50aXBfdGVtcGxhdGU7XG5cbiAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MudGlwX3RlbXBsYXRlID09PSAnc3RyaW5nJyAmJiB3aW5kb3cuaGFzT3duUHJvcGVydHkoc2V0dGluZ3MudGlwX3RlbXBsYXRlKSkge1xuICAgICAgICB0aXBfdGVtcGxhdGUgPSB3aW5kb3dbc2V0dGluZ3MudGlwX3RlbXBsYXRlXTtcbiAgICAgIH1cblxuICAgICAgdmFyICR0aXAgPSAkKHRpcF90ZW1wbGF0ZSh0aGlzLnNlbGVjdG9yKCR0YXJnZXQpLCAkKCc8ZGl2PjwvZGl2PicpLmh0bWwoJHRhcmdldC5hdHRyKCd0aXRsZScpKS5odG1sKCkpKSxcbiAgICAgICAgICBjbGFzc2VzID0gdGhpcy5pbmhlcml0YWJsZV9jbGFzc2VzKCR0YXJnZXQpO1xuXG4gICAgICAkdGlwLmFkZENsYXNzKGNsYXNzZXMpLmFwcGVuZFRvKHNldHRpbmdzLmFwcGVuZF90byk7XG5cbiAgICAgIGlmIChNb2Rlcm5penIudG91Y2gpIHtcbiAgICAgICAgJHRpcC5hcHBlbmQoJzxzcGFuIGNsYXNzPVwidGFwLXRvLWNsb3NlXCI+JyArIHNldHRpbmdzLnRvdWNoX2Nsb3NlX3RleHQgKyAnPC9zcGFuPicpO1xuICAgICAgICAkdGlwLm9uKCd0b3VjaHN0YXJ0LmZuZHRuLnRvb2x0aXAgTVNQb2ludGVyRG93bi5mbmR0bi50b29sdGlwJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBzZWxmLmhpZGUoJHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0LnJlbW92ZUF0dHIoJ3RpdGxlJykuYXR0cigndGl0bGUnLCAnJyk7XG4gICAgfSxcblxuICAgIHJlcG9zaXRpb24gOiBmdW5jdGlvbiAodGFyZ2V0LCB0aXAsIGNsYXNzZXMpIHtcbiAgICAgIHZhciB3aWR0aCwgbnViLCBudWJIZWlnaHQsIG51YldpZHRoLCBvYmpQb3M7XG5cbiAgICAgIHRpcC5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJykuc2hvdygpO1xuXG4gICAgICB3aWR0aCA9IHRhcmdldC5kYXRhKCd3aWR0aCcpO1xuICAgICAgbnViID0gdGlwLmNoaWxkcmVuKCcubnViJyk7XG4gICAgICBudWJIZWlnaHQgPSBudWIub3V0ZXJIZWlnaHQoKTtcbiAgICAgIG51YldpZHRoID0gbnViLm91dGVyV2lkdGgoKTtcblxuICAgICAgaWYgKHRoaXMuc21hbGwoKSkge1xuICAgICAgICB0aXAuY3NzKHsnd2lkdGgnIDogJzEwMCUnfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aXAuY3NzKHsnd2lkdGgnIDogKHdpZHRoKSA/IHdpZHRoIDogJ2F1dG8nfSk7XG4gICAgICB9XG5cbiAgICAgIG9ialBvcyA9IGZ1bmN0aW9uIChvYmosIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgd2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIG9iai5jc3Moe1xuICAgICAgICAgICd0b3AnIDogKHRvcCkgPyB0b3AgOiAnYXV0bycsXG4gICAgICAgICAgJ2JvdHRvbScgOiAoYm90dG9tKSA/IGJvdHRvbSA6ICdhdXRvJyxcbiAgICAgICAgICAnbGVmdCcgOiAobGVmdCkgPyBsZWZ0IDogJ2F1dG8nLFxuICAgICAgICAgICdyaWdodCcgOiAocmlnaHQpID8gcmlnaHQgOiAnYXV0bydcbiAgICAgICAgfSkuZW5kKCk7XG4gICAgICB9O1xuICAgICAgXG4gICAgICB2YXIgb190b3AgPSB0YXJnZXQub2Zmc2V0KCkudG9wO1xuICAgICAgdmFyIG9fbGVmdCA9IHRhcmdldC5vZmZzZXQoKS5sZWZ0O1xuICAgICAgdmFyIG91dGVySGVpZ2h0ID0gdGFyZ2V0Lm91dGVySGVpZ2h0KCk7XG5cbiAgICAgIG9ialBvcyh0aXAsIChvX3RvcCArIG91dGVySGVpZ2h0ICsgMTApLCAnYXV0bycsICdhdXRvJywgb19sZWZ0KTtcblxuICAgICAgaWYgKHRoaXMuc21hbGwoKSkge1xuICAgICAgICBvYmpQb3ModGlwLCAob190b3AgKyBvdXRlckhlaWdodCArIDEwKSwgJ2F1dG8nLCAnYXV0bycsIDEyLjUsICQodGhpcy5zY29wZSkud2lkdGgoKSk7XG4gICAgICAgIHRpcC5hZGRDbGFzcygndGlwLW92ZXJyaWRlJyk7XG4gICAgICAgIG9ialBvcyhudWIsIC1udWJIZWlnaHQsICdhdXRvJywgJ2F1dG8nLCBvX2xlZnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCkge1xuICAgICAgICAgIG51Yi5hZGRDbGFzcygncnRsJyk7XG4gICAgICAgICAgb19sZWZ0ID0gb19sZWZ0ICsgdGFyZ2V0Lm91dGVyV2lkdGgoKSAtIHRpcC5vdXRlcldpZHRoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBvYmpQb3ModGlwLCAob190b3AgKyBvdXRlckhlaWdodCArIDEwKSwgJ2F1dG8nLCAnYXV0bycsIG9fbGVmdCk7XG4gICAgICAgIC8vIHJlc2V0IG51YiBmcm9tIHNtYWxsIHN0eWxlcywgaWYgdGhleSd2ZSBiZWVuIGFwcGxpZWRcbiAgICAgICAgaWYgKG51Yi5hdHRyKCdzdHlsZScpKSB7XG4gICAgICAgICAgbnViLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRpcC5yZW1vdmVDbGFzcygndGlwLW92ZXJyaWRlJyk7XG4gICAgICAgIFxuICAgICAgICB2YXIgdGlwX291dGVySGVpZ2h0ID0gdGlwLm91dGVySGVpZ2h0KCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoY2xhc3NlcyAmJiBjbGFzc2VzLmluZGV4T2YoJ3RpcC10b3AnKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKSB7XG4gICAgICAgICAgICBudWIuYWRkQ2xhc3MoJ3J0bCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmpQb3ModGlwLCAob190b3AgLSB0aXBfb3V0ZXJIZWlnaHQpLCAnYXV0bycsICdhdXRvJywgb19sZWZ0KVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd0aXAtb3ZlcnJpZGUnKTtcbiAgICAgICAgfSBlbHNlIGlmIChjbGFzc2VzICYmIGNsYXNzZXMuaW5kZXhPZigndGlwLWxlZnQnKSA+IC0xKSB7XG4gICAgICAgICAgb2JqUG9zKHRpcCwgKG9fdG9wICsgKG91dGVySGVpZ2h0IC8gMikgLSAodGlwX291dGVySGVpZ2h0IC8gMikpLCAnYXV0bycsICdhdXRvJywgKG9fbGVmdCAtIHRpcC5vdXRlcldpZHRoKCkgLSBudWJIZWlnaHQpKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd0aXAtb3ZlcnJpZGUnKTtcbiAgICAgICAgICBudWIucmVtb3ZlQ2xhc3MoJ3J0bCcpO1xuICAgICAgICB9IGVsc2UgaWYgKGNsYXNzZXMgJiYgY2xhc3Nlcy5pbmRleE9mKCd0aXAtcmlnaHQnKSA+IC0xKSB7XG4gICAgICAgICAgb2JqUG9zKHRpcCwgKG9fdG9wICsgKG91dGVySGVpZ2h0IC8gMikgLSAodGlwX291dGVySGVpZ2h0IC8gMikpLCAnYXV0bycsICdhdXRvJywgKG9fbGVmdCArIHRhcmdldC5vdXRlcldpZHRoKCkgKyBudWJIZWlnaHQpKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd0aXAtb3ZlcnJpZGUnKTtcbiAgICAgICAgICBudWIucmVtb3ZlQ2xhc3MoJ3J0bCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRpcC5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpLmhpZGUoKTtcbiAgICB9LFxuXG4gICAgc21hbGwgOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbWF0Y2hNZWRpYShGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXMuc21hbGwpLm1hdGNoZXMgJiZcbiAgICAgICAgIW1hdGNoTWVkaWEoRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzLm1lZGl1bSkubWF0Y2hlcztcbiAgICB9LFxuXG4gICAgaW5oZXJpdGFibGVfY2xhc3NlcyA6IGZ1bmN0aW9uICgkdGFyZ2V0KSB7XG4gICAgICB2YXIgc2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgdGhpcy5zZXR0aW5ncywgdGhpcy5kYXRhX29wdGlvbnMoJHRhcmdldCkpLFxuICAgICAgICAgIGluaGVyaXRhYmxlcyA9IFsndGlwLXRvcCcsICd0aXAtbGVmdCcsICd0aXAtYm90dG9tJywgJ3RpcC1yaWdodCcsICdyYWRpdXMnLCAncm91bmQnXS5jb25jYXQoc2V0dGluZ3MuYWRkaXRpb25hbF9pbmhlcml0YWJsZV9jbGFzc2VzKSxcbiAgICAgICAgICBjbGFzc2VzID0gJHRhcmdldC5hdHRyKCdjbGFzcycpLFxuICAgICAgICAgIGZpbHRlcmVkID0gY2xhc3NlcyA/ICQubWFwKGNsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgICBpZiAoJC5pbkFycmF5KGVsLCBpbmhlcml0YWJsZXMpICE9PSAtMSkge1xuICAgICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuam9pbignICcpIDogJyc7XG5cbiAgICAgIHJldHVybiAkLnRyaW0oZmlsdGVyZWQpO1xuICAgIH0sXG5cbiAgICBjb252ZXJ0X3RvX3RvdWNoIDogZnVuY3Rpb24gKCR0YXJnZXQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAkdGlwID0gc2VsZi5nZXRUaXAoJHRhcmdldCksXG4gICAgICAgICAgc2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgc2VsZi5zZXR0aW5ncywgc2VsZi5kYXRhX29wdGlvbnMoJHRhcmdldCkpO1xuXG4gICAgICBpZiAoJHRpcC5maW5kKCcudGFwLXRvLWNsb3NlJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICR0aXAuYXBwZW5kKCc8c3BhbiBjbGFzcz1cInRhcC10by1jbG9zZVwiPicgKyBzZXR0aW5ncy50b3VjaF9jbG9zZV90ZXh0ICsgJzwvc3Bhbj4nKTtcbiAgICAgICAgJHRpcC5vbignY2xpY2suZm5kdG4udG9vbHRpcC50YXBjbG9zZSB0b3VjaHN0YXJ0LmZuZHRuLnRvb2x0aXAudGFwY2xvc2UgTVNQb2ludGVyRG93bi5mbmR0bi50b29sdGlwLnRhcGNsb3NlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBzZWxmLmhpZGUoJHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0LmRhdGEoJ3Rvb2x0aXAtb3Blbi1ldmVudC10eXBlJywgJ3RvdWNoJyk7XG4gICAgfSxcblxuICAgIHNob3cgOiBmdW5jdGlvbiAoJHRhcmdldCkge1xuICAgICAgdmFyICR0aXAgPSB0aGlzLmdldFRpcCgkdGFyZ2V0KTtcbiAgICAgIGlmICgkdGFyZ2V0LmRhdGEoJ3Rvb2x0aXAtb3Blbi1ldmVudC10eXBlJykgPT0gJ3RvdWNoJykge1xuICAgICAgICB0aGlzLmNvbnZlcnRfdG9fdG91Y2goJHRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVwb3NpdGlvbigkdGFyZ2V0LCAkdGlwLCAkdGFyZ2V0LmF0dHIoJ2NsYXNzJykpO1xuICAgICAgJHRhcmdldC5hZGRDbGFzcygnb3BlbicpO1xuICAgICAgJHRpcC5mYWRlSW4odGhpcy5zZXR0aW5ncy5mYWRlX2luX2R1cmF0aW9uKTtcbiAgICB9LFxuXG4gICAgaGlkZSA6IGZ1bmN0aW9uICgkdGFyZ2V0KSB7XG4gICAgICB2YXIgJHRpcCA9IHRoaXMuZ2V0VGlwKCR0YXJnZXQpO1xuXG4gICAgICAkdGlwLmZhZGVPdXQodGhpcy5zZXR0aW5ncy5mYWRlX291dF9kdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGlwLmZpbmQoJy50YXAtdG8tY2xvc2UnKS5yZW1vdmUoKTtcbiAgICAgICAgJHRpcC5vZmYoJ2NsaWNrLmZuZHRuLnRvb2x0aXAudGFwY2xvc2UgTVNQb2ludGVyRG93bi5mbmR0bi50YXBjbG9zZScpO1xuICAgICAgICAkdGFyZ2V0LnJlbW92ZUNsYXNzKCdvcGVuJyk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgb2ZmIDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5TKHRoaXMuc2NvcGUpLm9mZignLmZuZHRuLnRvb2x0aXAnKTtcbiAgICAgIHRoaXMuUyh0aGlzLnNldHRpbmdzLnRvb2x0aXBfY2xhc3MpLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgJCgnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nKS5lcShpKS5hdHRyKCd0aXRsZScsICQodGhpcykudGV4dCgpKTtcbiAgICAgIH0pLnJlbW92ZSgpO1xuICAgIH0sXG5cbiAgICByZWZsb3cgOiBmdW5jdGlvbiAoKSB7fVxuICB9O1xufShqUXVlcnksIHdpbmRvdywgd2luZG93LmRvY3VtZW50KSk7XG5cbjsoZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgRm91bmRhdGlvbi5saWJzLnRvcGJhciA9IHtcbiAgICBuYW1lIDogJ3RvcGJhcicsXG5cbiAgICB2ZXJzaW9uIDogJzUuNS4zJyxcblxuICAgIHNldHRpbmdzIDoge1xuICAgICAgaW5kZXggOiAwLFxuICAgICAgc3RhcnRfb2Zmc2V0IDogMCxcbiAgICAgIHN0aWNreV9jbGFzcyA6ICdzdGlja3knLFxuICAgICAgY3VzdG9tX2JhY2tfdGV4dCA6IHRydWUsXG4gICAgICBiYWNrX3RleHQgOiAnQmFjaycsXG4gICAgICBtb2JpbGVfc2hvd19wYXJlbnRfbGluayA6IHRydWUsXG4gICAgICBpc19ob3ZlciA6IHRydWUsXG4gICAgICBzY3JvbGx0b3AgOiB0cnVlLCAvLyBqdW1wIHRvIHRvcCB3aGVuIHN0aWNreSBuYXYgbWVudSB0b2dnbGUgaXMgY2xpY2tlZFxuICAgICAgc3RpY2t5X29uIDogJ2FsbCcsXG4gICAgICBkcm9wZG93bl9hdXRvY2xvc2U6IHRydWVcbiAgICB9LFxuXG4gICAgaW5pdCA6IGZ1bmN0aW9uIChzZWN0aW9uLCBtZXRob2QsIG9wdGlvbnMpIHtcbiAgICAgIEZvdW5kYXRpb24uaW5oZXJpdCh0aGlzLCAnYWRkX2N1c3RvbV9ydWxlIHJlZ2lzdGVyX21lZGlhIHRocm90dGxlJyk7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHNlbGYucmVnaXN0ZXJfbWVkaWEoJ3RvcGJhcicsICdmb3VuZGF0aW9uLW1xLXRvcGJhcicpO1xuXG4gICAgICB0aGlzLmJpbmRpbmdzKG1ldGhvZCwgb3B0aW9ucyk7XG5cbiAgICAgIHNlbGYuUygnWycgKyB0aGlzLmF0dHJfbmFtZSgpICsgJ10nLCB0aGlzLnNjb3BlKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvcGJhciA9ICQodGhpcyksXG4gICAgICAgICAgICBzZXR0aW5ncyA9IHRvcGJhci5kYXRhKHNlbGYuYXR0cl9uYW1lKHRydWUpICsgJy1pbml0JyksXG4gICAgICAgICAgICBzZWN0aW9uID0gc2VsZi5TKCdzZWN0aW9uLCAudG9wLWJhci1zZWN0aW9uJywgdGhpcyk7XG4gICAgICAgIHRvcGJhci5kYXRhKCdpbmRleCcsIDApO1xuICAgICAgICB2YXIgdG9wYmFyQ29udGFpbmVyID0gdG9wYmFyLnBhcmVudCgpO1xuICAgICAgICBpZiAodG9wYmFyQ29udGFpbmVyLmhhc0NsYXNzKCdmaXhlZCcpIHx8IHNlbGYuaXNfc3RpY2t5KHRvcGJhciwgdG9wYmFyQ29udGFpbmVyLCBzZXR0aW5ncykgKSB7XG4gICAgICAgICAgc2VsZi5zZXR0aW5ncy5zdGlja3lfY2xhc3MgPSBzZXR0aW5ncy5zdGlja3lfY2xhc3M7XG4gICAgICAgICAgc2VsZi5zZXR0aW5ncy5zdGlja3lfdG9wYmFyID0gdG9wYmFyO1xuICAgICAgICAgIHRvcGJhci5kYXRhKCdoZWlnaHQnLCB0b3BiYXJDb250YWluZXIub3V0ZXJIZWlnaHQoKSk7XG4gICAgICAgICAgdG9wYmFyLmRhdGEoJ3N0aWNreW9mZnNldCcsIHRvcGJhckNvbnRhaW5lci5vZmZzZXQoKS50b3ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvcGJhci5kYXRhKCdoZWlnaHQnLCB0b3BiYXIub3V0ZXJIZWlnaHQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNldHRpbmdzLmFzc2VtYmxlZCkge1xuICAgICAgICAgIHNlbGYuYXNzZW1ibGUodG9wYmFyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5pc19ob3Zlcikge1xuICAgICAgICAgIHNlbGYuUygnLmhhcy1kcm9wZG93bicsIHRvcGJhcikuYWRkQ2xhc3MoJ25vdC1jbGljaycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuUygnLmhhcy1kcm9wZG93bicsIHRvcGJhcikucmVtb3ZlQ2xhc3MoJ25vdC1jbGljaycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFkIGJvZHkgd2hlbiBzdGlja3kgKHNjcm9sbGVkKSBvciBmaXhlZC5cbiAgICAgICAgc2VsZi5hZGRfY3VzdG9tX3J1bGUoJy5mLXRvcGJhci1maXhlZCB7IHBhZGRpbmctdG9wOiAnICsgdG9wYmFyLmRhdGEoJ2hlaWdodCcpICsgJ3B4IH0nKTtcblxuICAgICAgICBpZiAodG9wYmFyQ29udGFpbmVyLmhhc0NsYXNzKCdmaXhlZCcpKSB7XG4gICAgICAgICAgc2VsZi5TKCdib2R5JykuYWRkQ2xhc3MoJ2YtdG9wYmFyLWZpeGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgfSxcblxuICAgIGlzX3N0aWNreSA6IGZ1bmN0aW9uICh0b3BiYXIsIHRvcGJhckNvbnRhaW5lciwgc2V0dGluZ3MpIHtcbiAgICAgIHZhciBzdGlja3kgICAgID0gdG9wYmFyQ29udGFpbmVyLmhhc0NsYXNzKHNldHRpbmdzLnN0aWNreV9jbGFzcyk7XG4gICAgICB2YXIgc21hbGxNYXRjaCA9IG1hdGNoTWVkaWEoRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzLnNtYWxsKS5tYXRjaGVzO1xuICAgICAgdmFyIG1lZE1hdGNoICAgPSBtYXRjaE1lZGlhKEZvdW5kYXRpb24ubWVkaWFfcXVlcmllcy5tZWRpdW0pLm1hdGNoZXM7XG4gICAgICB2YXIgbHJnTWF0Y2ggICA9IG1hdGNoTWVkaWEoRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzLmxhcmdlKS5tYXRjaGVzO1xuXG4gICAgICBpZiAoc3RpY2t5ICYmIHNldHRpbmdzLnN0aWNreV9vbiA9PT0gJ2FsbCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoc3RpY2t5ICYmIHRoaXMuc21hbGwoKSAmJiBzZXR0aW5ncy5zdGlja3lfb24uaW5kZXhPZignc21hbGwnKSAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHNtYWxsTWF0Y2ggJiYgIW1lZE1hdGNoICYmICFscmdNYXRjaCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgfVxuICAgICAgaWYgKHN0aWNreSAmJiB0aGlzLm1lZGl1bSgpICYmIHNldHRpbmdzLnN0aWNreV9vbi5pbmRleE9mKCdtZWRpdW0nKSAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHNtYWxsTWF0Y2ggJiYgbWVkTWF0Y2ggJiYgIWxyZ01hdGNoKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICB9XG4gICAgICBpZiAoc3RpY2t5ICYmIHRoaXMubGFyZ2UoKSAmJiBzZXR0aW5ncy5zdGlja3lfb24uaW5kZXhPZignbGFyZ2UnKSAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHNtYWxsTWF0Y2ggJiYgbWVkTWF0Y2ggJiYgbHJnTWF0Y2gpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgIH1cblxuICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgdG9nZ2xlIDogZnVuY3Rpb24gKHRvZ2dsZUVsKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgdG9wYmFyO1xuXG4gICAgICBpZiAodG9nZ2xlRWwpIHtcbiAgICAgICAgdG9wYmFyID0gc2VsZi5TKHRvZ2dsZUVsKS5jbG9zZXN0KCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9wYmFyID0gc2VsZi5TKCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2V0dGluZ3MgPSB0b3BiYXIuZGF0YSh0aGlzLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpO1xuXG4gICAgICB2YXIgc2VjdGlvbiA9IHNlbGYuUygnc2VjdGlvbiwgLnRvcC1iYXItc2VjdGlvbicsIHRvcGJhcik7XG5cbiAgICAgIGlmIChzZWxmLmJyZWFrcG9pbnQoKSkge1xuICAgICAgICBpZiAoIXNlbGYucnRsKSB7XG4gICAgICAgICAgc2VjdGlvbi5jc3Moe2xlZnQgOiAnMCUnfSk7XG4gICAgICAgICAgJCgnPi5uYW1lJywgc2VjdGlvbikuY3NzKHtsZWZ0IDogJzEwMCUnfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VjdGlvbi5jc3Moe3JpZ2h0IDogJzAlJ30pO1xuICAgICAgICAgICQoJz4ubmFtZScsIHNlY3Rpb24pLmNzcyh7cmlnaHQgOiAnMTAwJSd9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuUygnbGkubW92ZWQnLCBzZWN0aW9uKS5yZW1vdmVDbGFzcygnbW92ZWQnKTtcbiAgICAgICAgdG9wYmFyLmRhdGEoJ2luZGV4JywgMCk7XG5cbiAgICAgICAgdG9wYmFyXG4gICAgICAgICAgLnRvZ2dsZUNsYXNzKCdleHBhbmRlZCcpXG4gICAgICAgICAgLmNzcygnaGVpZ2h0JywgJycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2V0dGluZ3Muc2Nyb2xsdG9wKSB7XG4gICAgICAgIGlmICghdG9wYmFyLmhhc0NsYXNzKCdleHBhbmRlZCcpKSB7XG4gICAgICAgICAgaWYgKHRvcGJhci5oYXNDbGFzcygnZml4ZWQnKSkge1xuICAgICAgICAgICAgdG9wYmFyLnBhcmVudCgpLmFkZENsYXNzKCdmaXhlZCcpO1xuICAgICAgICAgICAgdG9wYmFyLnJlbW92ZUNsYXNzKCdmaXhlZCcpO1xuICAgICAgICAgICAgc2VsZi5TKCdib2R5JykuYWRkQ2xhc3MoJ2YtdG9wYmFyLWZpeGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRvcGJhci5wYXJlbnQoKS5oYXNDbGFzcygnZml4ZWQnKSkge1xuICAgICAgICAgIGlmIChzZXR0aW5ncy5zY3JvbGx0b3ApIHtcbiAgICAgICAgICAgIHRvcGJhci5wYXJlbnQoKS5yZW1vdmVDbGFzcygnZml4ZWQnKTtcbiAgICAgICAgICAgIHRvcGJhci5hZGRDbGFzcygnZml4ZWQnKTtcbiAgICAgICAgICAgIHNlbGYuUygnYm9keScpLnJlbW92ZUNsYXNzKCdmLXRvcGJhci1maXhlZCcpO1xuXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvcGJhci5wYXJlbnQoKS5yZW1vdmVDbGFzcygnZXhwYW5kZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZWxmLmlzX3N0aWNreSh0b3BiYXIsIHRvcGJhci5wYXJlbnQoKSwgc2V0dGluZ3MpKSB7XG4gICAgICAgICAgdG9wYmFyLnBhcmVudCgpLmFkZENsYXNzKCdmaXhlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvcGJhci5wYXJlbnQoKS5oYXNDbGFzcygnZml4ZWQnKSkge1xuICAgICAgICAgIGlmICghdG9wYmFyLmhhc0NsYXNzKCdleHBhbmRlZCcpKSB7XG4gICAgICAgICAgICB0b3BiYXIucmVtb3ZlQ2xhc3MoJ2ZpeGVkJyk7XG4gICAgICAgICAgICB0b3BiYXIucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2V4cGFuZGVkJyk7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZV9zdGlja3lfcG9zaXRpb25pbmcoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9wYmFyLmFkZENsYXNzKCdmaXhlZCcpO1xuICAgICAgICAgICAgdG9wYmFyLnBhcmVudCgpLmFkZENsYXNzKCdleHBhbmRlZCcpO1xuICAgICAgICAgICAgc2VsZi5TKCdib2R5JykuYWRkQ2xhc3MoJ2YtdG9wYmFyLWZpeGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHRpbWVyIDogbnVsbCxcblxuICAgIGV2ZW50cyA6IGZ1bmN0aW9uIChiYXIpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICBTID0gdGhpcy5TO1xuXG4gICAgICBTKHRoaXMuc2NvcGUpXG4gICAgICAgIC5vZmYoJy50b3BiYXInKVxuICAgICAgICAub24oJ2NsaWNrLmZuZHRuLnRvcGJhcicsICdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXSAudG9nZ2xlLXRvcGJhcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHNlbGYudG9nZ2xlKHRoaXMpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ2NsaWNrLmZuZHRuLnRvcGJhciBjb250ZXh0bWVudS5mbmR0bi50b3BiYXInLCAnLnRvcC1iYXIgLnRvcC1iYXItc2VjdGlvbiBsaSBhW2hyZWZePVwiI1wiXSxbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXSAudG9wLWJhci1zZWN0aW9uIGxpIGFbaHJlZl49XCIjXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgbGkgPSAkKHRoaXMpLmNsb3Nlc3QoJ2xpJyksXG4gICAgICAgICAgICAgIHRvcGJhciA9IGxpLmNsb3Nlc3QoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICddJyksXG4gICAgICAgICAgICAgIHNldHRpbmdzID0gdG9wYmFyLmRhdGEoc2VsZi5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKTtcblxuICAgICAgICAgIGlmIChzZXR0aW5ncy5kcm9wZG93bl9hdXRvY2xvc2UgJiYgc2V0dGluZ3MuaXNfaG92ZXIpIHtcbiAgICAgICAgICAgIHZhciBob3ZlckxpID0gJCh0aGlzKS5jbG9zZXN0KCcuaG92ZXInKTtcbiAgICAgICAgICAgIGhvdmVyTGkucmVtb3ZlQ2xhc3MoJ2hvdmVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWxmLmJyZWFrcG9pbnQoKSAmJiAhbGkuaGFzQ2xhc3MoJ2JhY2snKSAmJiAhbGkuaGFzQ2xhc3MoJ2hhcy1kcm9wZG93bicpKSB7XG4gICAgICAgICAgICBzZWxmLnRvZ2dsZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgICAgICAub24oJ2NsaWNrLmZuZHRuLnRvcGJhcicsICdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXSBsaS5oYXMtZHJvcGRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciBsaSA9IFModGhpcyksXG4gICAgICAgICAgICAgIHRhcmdldCA9IFMoZS50YXJnZXQpLFxuICAgICAgICAgICAgICB0b3BiYXIgPSBsaS5jbG9zZXN0KCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScpLFxuICAgICAgICAgICAgICBzZXR0aW5ncyA9IHRvcGJhci5kYXRhKHNlbGYuYXR0cl9uYW1lKHRydWUpICsgJy1pbml0Jyk7XG5cbiAgICAgICAgICBpZiAodGFyZ2V0LmRhdGEoJ3JldmVhbElkJykpIHtcbiAgICAgICAgICAgIHNlbGYudG9nZ2xlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYuYnJlYWtwb2ludCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNldHRpbmdzLmlzX2hvdmVyICYmICFNb2Rlcm5penIudG91Y2gpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgaWYgKGxpLmhhc0NsYXNzKCdob3ZlcicpKSB7XG4gICAgICAgICAgICBsaVxuICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2hvdmVyJylcbiAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdob3ZlcicpO1xuXG4gICAgICAgICAgICBsaS5wYXJlbnRzKCdsaS5ob3ZlcicpXG4gICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnaG92ZXInKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGkuYWRkQ2xhc3MoJ2hvdmVyJyk7XG5cbiAgICAgICAgICAgICQobGkpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2hvdmVyJyk7XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRbMF0ubm9kZU5hbWUgPT09ICdBJyAmJiB0YXJnZXQucGFyZW50KCkuaGFzQ2xhc3MoJ2hhcy1kcm9wZG93bicpKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignY2xpY2suZm5kdG4udG9wYmFyJywgJ1snICsgdGhpcy5hdHRyX25hbWUoKSArICddIC5oYXMtZHJvcGRvd24+YScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKHNlbGYuYnJlYWtwb2ludCgpKSB7XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFyICR0aGlzID0gUyh0aGlzKSxcbiAgICAgICAgICAgICAgICB0b3BiYXIgPSAkdGhpcy5jbG9zZXN0KCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScpLFxuICAgICAgICAgICAgICAgIHNlY3Rpb24gPSB0b3BiYXIuZmluZCgnc2VjdGlvbiwgLnRvcC1iYXItc2VjdGlvbicpLFxuICAgICAgICAgICAgICAgIGRyb3Bkb3duSGVpZ2h0ID0gJHRoaXMubmV4dCgnLmRyb3Bkb3duJykub3V0ZXJIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAkc2VsZWN0ZWRMaSA9ICR0aGlzLmNsb3Nlc3QoJ2xpJyk7XG5cbiAgICAgICAgICAgIHRvcGJhci5kYXRhKCdpbmRleCcsIHRvcGJhci5kYXRhKCdpbmRleCcpICsgMSk7XG4gICAgICAgICAgICAkc2VsZWN0ZWRMaS5hZGRDbGFzcygnbW92ZWQnKTtcblxuICAgICAgICAgICAgaWYgKCFzZWxmLnJ0bCkge1xuICAgICAgICAgICAgICBzZWN0aW9uLmNzcyh7bGVmdCA6IC0oMTAwICogdG9wYmFyLmRhdGEoJ2luZGV4JykpICsgJyUnfSk7XG4gICAgICAgICAgICAgIHNlY3Rpb24uZmluZCgnPi5uYW1lJykuY3NzKHtsZWZ0IDogMTAwICogdG9wYmFyLmRhdGEoJ2luZGV4JykgKyAnJSd9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlY3Rpb24uY3NzKHtyaWdodCA6IC0oMTAwICogdG9wYmFyLmRhdGEoJ2luZGV4JykpICsgJyUnfSk7XG4gICAgICAgICAgICAgIHNlY3Rpb24uZmluZCgnPi5uYW1lJykuY3NzKHtyaWdodCA6IDEwMCAqIHRvcGJhci5kYXRhKCdpbmRleCcpICsgJyUnfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvcGJhci5jc3MoJ2hlaWdodCcsICR0aGlzLnNpYmxpbmdzKCd1bCcpLm91dGVySGVpZ2h0KHRydWUpICsgdG9wYmFyLmRhdGEoJ2hlaWdodCcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICBTKHdpbmRvdykub2ZmKCcudG9wYmFyJykub24oJ3Jlc2l6ZS5mbmR0bi50b3BiYXInLCBzZWxmLnRocm90dGxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLnJlc2l6ZS5jYWxsKHNlbGYpO1xuICAgICAgfSwgNTApKS50cmlnZ2VyKCdyZXNpemUuZm5kdG4udG9wYmFyJykub24oXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgb2Zmc2V0IGlzIGNhbGN1bGF0ZWQgYWZ0ZXIgYWxsIG9mIHRoZSBwYWdlcyByZXNvdXJjZXMgaGF2ZSBsb2FkZWRcbiAgICAgICAgICBTKHRoaXMpLnRyaWdnZXIoJ3Jlc2l6ZS5mbmR0bi50b3BiYXInKTtcbiAgICAgIH0pO1xuXG4gICAgICBTKCdib2R5Jykub2ZmKCcudG9wYmFyJykub24oJ2NsaWNrLmZuZHRuLnRvcGJhcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBTKGUudGFyZ2V0KS5jbG9zZXN0KCdsaScpLmNsb3Nlc3QoJ2xpLmhvdmVyJyk7XG5cbiAgICAgICAgaWYgKHBhcmVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgUygnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10gbGkuaG92ZXInKS5yZW1vdmVDbGFzcygnaG92ZXInKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBHbyB1cCBhIGxldmVsIG9uIENsaWNrXG4gICAgICBTKHRoaXMuc2NvcGUpLm9uKCdjbGljay5mbmR0bi50b3BiYXInLCAnWycgKyB0aGlzLmF0dHJfbmFtZSgpICsgJ10gLmhhcy1kcm9wZG93biAuYmFjaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB2YXIgJHRoaXMgPSBTKHRoaXMpLFxuICAgICAgICAgICAgdG9wYmFyID0gJHRoaXMuY2xvc2VzdCgnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nKSxcbiAgICAgICAgICAgIHNlY3Rpb24gPSB0b3BiYXIuZmluZCgnc2VjdGlvbiwgLnRvcC1iYXItc2VjdGlvbicpLFxuICAgICAgICAgICAgc2V0dGluZ3MgPSB0b3BiYXIuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpLFxuICAgICAgICAgICAgJG1vdmVkTGkgPSAkdGhpcy5jbG9zZXN0KCdsaS5tb3ZlZCcpLFxuICAgICAgICAgICAgJHByZXZpb3VzTGV2ZWxVbCA9ICRtb3ZlZExpLnBhcmVudCgpO1xuXG4gICAgICAgIHRvcGJhci5kYXRhKCdpbmRleCcsIHRvcGJhci5kYXRhKCdpbmRleCcpIC0gMSk7XG5cbiAgICAgICAgaWYgKCFzZWxmLnJ0bCkge1xuICAgICAgICAgIHNlY3Rpb24uY3NzKHtsZWZ0IDogLSgxMDAgKiB0b3BiYXIuZGF0YSgnaW5kZXgnKSkgKyAnJSd9KTtcbiAgICAgICAgICBzZWN0aW9uLmZpbmQoJz4ubmFtZScpLmNzcyh7bGVmdCA6IDEwMCAqIHRvcGJhci5kYXRhKCdpbmRleCcpICsgJyUnfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VjdGlvbi5jc3Moe3JpZ2h0IDogLSgxMDAgKiB0b3BiYXIuZGF0YSgnaW5kZXgnKSkgKyAnJSd9KTtcbiAgICAgICAgICBzZWN0aW9uLmZpbmQoJz4ubmFtZScpLmNzcyh7cmlnaHQgOiAxMDAgKiB0b3BiYXIuZGF0YSgnaW5kZXgnKSArICclJ30pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvcGJhci5kYXRhKCdpbmRleCcpID09PSAwKSB7XG4gICAgICAgICAgdG9wYmFyLmNzcygnaGVpZ2h0JywgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvcGJhci5jc3MoJ2hlaWdodCcsICRwcmV2aW91c0xldmVsVWwub3V0ZXJIZWlnaHQodHJ1ZSkgKyB0b3BiYXIuZGF0YSgnaGVpZ2h0JykpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJG1vdmVkTGkucmVtb3ZlQ2xhc3MoJ21vdmVkJyk7XG4gICAgICAgIH0sIDMwMCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2hvdyBkcm9wZG93biBtZW51cyB3aGVuIHRoZWlyIGl0ZW1zIGFyZSBmb2N1c2VkXG4gICAgICBTKHRoaXMuc2NvcGUpLmZpbmQoJy5kcm9wZG93biBhJylcbiAgICAgICAgLmZvY3VzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkKHRoaXMpLnBhcmVudHMoJy5oYXMtZHJvcGRvd24nKS5hZGRDbGFzcygnaG92ZXInKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmJsdXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQodGhpcykucGFyZW50cygnLmhhcy1kcm9wZG93bicpLnJlbW92ZUNsYXNzKCdob3ZlcicpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgcmVzaXplIDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgc2VsZi5TKCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9wYmFyID0gc2VsZi5TKHRoaXMpLFxuICAgICAgICAgICAgc2V0dGluZ3MgPSB0b3BiYXIuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpO1xuXG4gICAgICAgIHZhciBzdGlja3lDb250YWluZXIgPSB0b3BiYXIucGFyZW50KCcuJyArIHNlbGYuc2V0dGluZ3Muc3RpY2t5X2NsYXNzKTtcbiAgICAgICAgdmFyIHN0aWNreU9mZnNldDtcblxuICAgICAgICBpZiAoIXNlbGYuYnJlYWtwb2ludCgpKSB7XG4gICAgICAgICAgdmFyIGRvVG9nZ2xlID0gdG9wYmFyLmhhc0NsYXNzKCdleHBhbmRlZCcpO1xuICAgICAgICAgIHRvcGJhclxuICAgICAgICAgICAgLmNzcygnaGVpZ2h0JywgJycpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2V4cGFuZGVkJylcbiAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2hvdmVyJyk7XG5cbiAgICAgICAgICAgIGlmIChkb1RvZ2dsZSkge1xuICAgICAgICAgICAgICBzZWxmLnRvZ2dsZSh0b3BiYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuaXNfc3RpY2t5KHRvcGJhciwgc3RpY2t5Q29udGFpbmVyLCBzZXR0aW5ncykpIHtcbiAgICAgICAgICBpZiAoc3RpY2t5Q29udGFpbmVyLmhhc0NsYXNzKCdmaXhlZCcpKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGZpeGVkIHRvIGFsbG93IGZvciBjb3JyZWN0IGNhbGN1bGF0aW9uIG9mIHRoZSBvZmZzZXQuXG4gICAgICAgICAgICBzdGlja3lDb250YWluZXIucmVtb3ZlQ2xhc3MoJ2ZpeGVkJyk7XG5cbiAgICAgICAgICAgIHN0aWNreU9mZnNldCA9IHN0aWNreUNvbnRhaW5lci5vZmZzZXQoKS50b3A7XG4gICAgICAgICAgICBpZiAoc2VsZi5TKGRvY3VtZW50LmJvZHkpLmhhc0NsYXNzKCdmLXRvcGJhci1maXhlZCcpKSB7XG4gICAgICAgICAgICAgIHN0aWNreU9mZnNldCAtPSB0b3BiYXIuZGF0YSgnaGVpZ2h0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvcGJhci5kYXRhKCdzdGlja3lvZmZzZXQnLCBzdGlja3lPZmZzZXQpO1xuICAgICAgICAgICAgc3RpY2t5Q29udGFpbmVyLmFkZENsYXNzKCdmaXhlZCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGlja3lPZmZzZXQgPSBzdGlja3lDb250YWluZXIub2Zmc2V0KCkudG9wO1xuICAgICAgICAgICAgdG9wYmFyLmRhdGEoJ3N0aWNreW9mZnNldCcsIHN0aWNreU9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBicmVha3BvaW50IDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFtYXRjaE1lZGlhKEZvdW5kYXRpb24ubWVkaWFfcXVlcmllc1sndG9wYmFyJ10pLm1hdGNoZXM7XG4gICAgfSxcblxuICAgIHNtYWxsIDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG1hdGNoTWVkaWEoRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzWydzbWFsbCddKS5tYXRjaGVzO1xuICAgIH0sXG5cbiAgICBtZWRpdW0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbWF0Y2hNZWRpYShGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXNbJ21lZGl1bSddKS5tYXRjaGVzO1xuICAgIH0sXG5cbiAgICBsYXJnZSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBtYXRjaE1lZGlhKEZvdW5kYXRpb24ubWVkaWFfcXVlcmllc1snbGFyZ2UnXSkubWF0Y2hlcztcbiAgICB9LFxuXG4gICAgYXNzZW1ibGUgOiBmdW5jdGlvbiAodG9wYmFyKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgc2V0dGluZ3MgPSB0b3BiYXIuZGF0YSh0aGlzLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpLFxuICAgICAgICAgIHNlY3Rpb24gPSBzZWxmLlMoJ3NlY3Rpb24sIC50b3AtYmFyLXNlY3Rpb24nLCB0b3BiYXIpO1xuXG4gICAgICAvLyBQdWxsIGVsZW1lbnQgb3V0IG9mIHRoZSBET00gZm9yIG1hbmlwdWxhdGlvblxuICAgICAgc2VjdGlvbi5kZXRhY2goKTtcblxuICAgICAgc2VsZi5TKCcuaGFzLWRyb3Bkb3duPmEnLCBzZWN0aW9uKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRsaW5rID0gc2VsZi5TKHRoaXMpLFxuICAgICAgICAgICAgJGRyb3Bkb3duID0gJGxpbmsuc2libGluZ3MoJy5kcm9wZG93bicpLFxuICAgICAgICAgICAgdXJsID0gJGxpbmsuYXR0cignaHJlZicpLFxuICAgICAgICAgICAgJHRpdGxlTGk7XG5cbiAgICAgICAgaWYgKCEkZHJvcGRvd24uZmluZCgnLnRpdGxlLmJhY2snKS5sZW5ndGgpIHtcblxuICAgICAgICAgIGlmIChzZXR0aW5ncy5tb2JpbGVfc2hvd19wYXJlbnRfbGluayA9PSB0cnVlICYmIHVybCkge1xuICAgICAgICAgICAgJHRpdGxlTGkgPSAkKCc8bGkgY2xhc3M9XCJ0aXRsZSBiYWNrIGpzLWdlbmVyYXRlZFwiPjxoNT48YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+PC9hPjwvaDU+PC9saT48bGkgY2xhc3M9XCJwYXJlbnQtbGluayBoaWRlLWZvci1tZWRpdW0tdXBcIj48YSBjbGFzcz1cInBhcmVudC1saW5rIGpzLWdlbmVyYXRlZFwiIGhyZWY9XCInICsgdXJsICsgJ1wiPicgKyAkbGluay5odG1sKCkgKyc8L2E+PC9saT4nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHRpdGxlTGkgPSAkKCc8bGkgY2xhc3M9XCJ0aXRsZSBiYWNrIGpzLWdlbmVyYXRlZFwiPjxoNT48YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+PC9hPjwvaDU+Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ29weSBsaW5rIHRvIHN1Ym5hdlxuICAgICAgICAgIGlmIChzZXR0aW5ncy5jdXN0b21fYmFja190ZXh0ID09IHRydWUpIHtcbiAgICAgICAgICAgICQoJ2g1PmEnLCAkdGl0bGVMaSkuaHRtbChzZXR0aW5ncy5iYWNrX3RleHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCdoNT5hJywgJHRpdGxlTGkpLmh0bWwoJyZsYXF1bzsgJyArICRsaW5rLmh0bWwoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgICRkcm9wZG93bi5wcmVwZW5kKCR0aXRsZUxpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIFB1dCBlbGVtZW50IGJhY2sgaW4gdGhlIERPTVxuICAgICAgc2VjdGlvbi5hcHBlbmRUbyh0b3BiYXIpO1xuXG4gICAgICAvLyBjaGVjayBmb3Igc3RpY2t5XG4gICAgICB0aGlzLnN0aWNreSgpO1xuXG4gICAgICB0aGlzLmFzc2VtYmxlZCh0b3BiYXIpO1xuICAgIH0sXG5cbiAgICBhc3NlbWJsZWQgOiBmdW5jdGlvbiAodG9wYmFyKSB7XG4gICAgICB0b3BiYXIuZGF0YSh0aGlzLmF0dHJfbmFtZSh0cnVlKSwgJC5leHRlbmQoe30sIHRvcGJhci5kYXRhKHRoaXMuYXR0cl9uYW1lKHRydWUpKSwge2Fzc2VtYmxlZCA6IHRydWV9KSk7XG4gICAgfSxcblxuICAgIGhlaWdodCA6IGZ1bmN0aW9uICh1bCkge1xuICAgICAgdmFyIHRvdGFsID0gMCxcbiAgICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgJCgnPiBsaScsIHVsKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdG90YWwgKz0gc2VsZi5TKHRoaXMpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9LFxuXG4gICAgc3RpY2t5IDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICB0aGlzLlMod2luZG93KS5vbignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZV9zdGlja3lfcG9zaXRpb25pbmcoKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICB1cGRhdGVfc3RpY2t5X3Bvc2l0aW9uaW5nIDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGtsYXNzID0gJy4nICsgdGhpcy5zZXR0aW5ncy5zdGlja3lfY2xhc3MsXG4gICAgICAgICAgJHdpbmRvdyA9IHRoaXMuUyh3aW5kb3cpLFxuICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAoc2VsZi5zZXR0aW5ncy5zdGlja3lfdG9wYmFyICYmIHNlbGYuaXNfc3RpY2t5KHRoaXMuc2V0dGluZ3Muc3RpY2t5X3RvcGJhcix0aGlzLnNldHRpbmdzLnN0aWNreV90b3BiYXIucGFyZW50KCksIHRoaXMuc2V0dGluZ3MpKSB7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMuc2V0dGluZ3Muc3RpY2t5X3RvcGJhci5kYXRhKCdzdGlja3lvZmZzZXQnKSArIHRoaXMuc2V0dGluZ3Muc3RhcnRfb2Zmc2V0O1xuICAgICAgICBpZiAoIXNlbGYuUyhrbGFzcykuaGFzQ2xhc3MoJ2V4cGFuZGVkJykpIHtcbiAgICAgICAgICBpZiAoJHdpbmRvdy5zY3JvbGxUb3AoKSA+IChkaXN0YW5jZSkpIHtcbiAgICAgICAgICAgIGlmICghc2VsZi5TKGtsYXNzKS5oYXNDbGFzcygnZml4ZWQnKSkge1xuICAgICAgICAgICAgICBzZWxmLlMoa2xhc3MpLmFkZENsYXNzKCdmaXhlZCcpO1xuICAgICAgICAgICAgICBzZWxmLlMoJ2JvZHknKS5hZGRDbGFzcygnZi10b3BiYXItZml4ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCR3aW5kb3cuc2Nyb2xsVG9wKCkgPD0gZGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLlMoa2xhc3MpLmhhc0NsYXNzKCdmaXhlZCcpKSB7XG4gICAgICAgICAgICAgIHNlbGYuUyhrbGFzcykucmVtb3ZlQ2xhc3MoJ2ZpeGVkJyk7XG4gICAgICAgICAgICAgIHNlbGYuUygnYm9keScpLnJlbW92ZUNsYXNzKCdmLXRvcGJhci1maXhlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvZmYgOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLlModGhpcy5zY29wZSkub2ZmKCcuZm5kdG4udG9wYmFyJyk7XG4gICAgICB0aGlzLlMod2luZG93KS5vZmYoJy5mbmR0bi50b3BiYXInKTtcbiAgICB9LFxuXG4gICAgcmVmbG93IDogZnVuY3Rpb24gKCkge31cbiAgfTtcbn0oalF1ZXJ5LCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudCkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwiYXJyYXlcIjogW1xuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFjayAmIEJydW50XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL01lbGVlL0dyaW5lZXJUeWxBeGVBbmRCb2FyL1JlZ29yQXhlU2hpZWxkXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUeWwgUmVnb3LigJlzIGN1c3RvbSBheGUgYW5kIHNoaWVsZCBhcmUgaG93IGhlIGxpa2VzIHRvIGVsaW1pbmF0ZSDigJhmcnVzdHJhdGlvbnPigJkuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyMDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODk5OTk5OTgsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhY2stJi1icnVudC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTd29yZCBhbmQgU2hpZWxkXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzQxL1JlZ29yQXhlU2hpZWxkLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA3MzExNzQ5NDJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Fja18lMjZfQnJ1bnRcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDaGVtIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDkuNTMsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgbG93IGF0dGFjayBzcGVlZC4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkZpbmFsIEhhcmJpbmdlclwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlN5c3RlbWljIFNocmVkXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQWNyaWRcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NsYW5UZWNoL0Jpby9BY2lkRGFydFBpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgQWNyaWQgZmlyZXMgYW4gYWNpZGljLWluZnVzZWQgbmVlZGxlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zMyxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhY3JpZC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1LjAgdG94aW5cIixcbiAgICAgIFwiZmxpZ2h0XCI6IDY1LFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2E4L0FjcmlkMi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNTMwMTkzMDEwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9BY3JpZFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJpbyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCAgcHJvamVjdGlsZSBtdW5pdGlvbnMuIEVhY2ggZmxlY2hldHRlIGRlbGl2ZXJzIHRveGluIERvVCAoc2NhbGVzIHdpdGggbW9kaWZpZWQgYmFzZSBkYW1hZ2UgYW5kIHRveGluIGRhbWFnZSkgcmVnYXJkbGVzcyBvZiBlbGVtZW50YWwgbW9kZGluZy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDgzLjMsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL0dhbWUvQ2F0YnJvd1BldC9NaXJyb3JDYXRicm93UGV0UG93ZXJTdWl0XCIsXG4gICAgICBcIm5hbWVcIjogXCJBZGFyemEgS2F2YXRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQaWVyY2luZyBleWVzIHJlZmxlY3QgZGVhZGx5IGluc3RpbmN0cy5cIixcbiAgICAgIFwidHlwZVwiOiBcIkNvbXBhbmlvblwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhZGFyemEta2F2YXQucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiS2F2YXRcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiS2F2YXQgSW5jdWJhdG9yIFVwZ3JhZGUgU2VnbWVudCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9BZGFyemFfS2F2YXRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQWZ1cmlzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Ba2ltYm8vQWtpbWJvQXV0b1Bpc3RvbHNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRnVyaXMgcGlzdG9scyBlcXVpcHBlZCBpbiBlYWNoIGhhbmQuIFR3aWNlIHRoZSBNYWdhemluZSBDYXBhY2l0eSBhbmQgc2xpZ2h0bHkgZmFzdGVyIEZpcmUgUmF0ZSwgYnV0IEFjY3VyYWN5IGFuZCBSZWxvYWQgU3BlZWQgYXJlIGxvd2VyZWQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE1LjM4NDYxNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM5LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImFmdXJpcy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yMC9BZnVyaXMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDYwNjAxMTAzNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQWZ1cmlzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiUmF3L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDEwOSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJBZ2t1emFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FyY2h3aW5nL01lbGVlL0FyY2hTd29yZEhvb2svQXJjaEhvb2tTd29yZFdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRlYXIgYXBhcnQgaW5jb21pbmcgZW5lbWllcyB3aXRoIHRoaXMgbWFzc2l2ZSBob29rZWQgYmxhZGUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAzNTAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImFna3V6YS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2MvYzIvQXJjaEhvb2tTd29yZC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwNzEwMTc1MTQ3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9BZ2t1emFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwidHlwZVwiOiBcIkFyY2h3aW5nIE1lbGVlXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFrYm9sdG9cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FraW1iby9Ba2ltYm9Cb2x0b1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA0MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIEJvbHRvIGVxdWlwcGVkIGluIGVhY2ggaGFuZC4gVHdpY2UgdGhlIE1hZ2F6aW5lIENhcGFjaXR5IGFuZCBzbGlnaHRseSBmYXN0ZXIgRmlyZSBSYXRlLCBidXQgcmVsb2FkIHRpbWUgaXMgZG91YmxlZCBhbmQgYWNjdXJhY3kgaXMgbG93ZXJlZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjYuNjY2NjY2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA5LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODAwMDAwMDEsXG4gICAgICBcIml0ZW1Db3VudFwiOiAxLFxuICAgICAgXCJwYXJlbnRzXCI6IFtcbiAgICAgICAgXCJBa2phZ2FyYVwiXG4gICAgICBdLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImFrYm9sdG8ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBQaXN0b2xzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MC4wXCIsXG4gICAgICBcImZsaWdodFwiOiA3NSxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wZS9Ba2JvbHRvLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA0MjYwNzU1MTFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0FrYm9sdG9cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJBa2JvbHRvIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9QaXN0b2xzL1ByaW1lQWtib2x0by9QcmltZUFrQm9sdG9XZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzIsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2lsZGVkIHJhaWxzIGFkb3JuIHRoZXNlIHR3byB2aWNpb3VzIGJvbHQgbGF1bmNoaW5nIHBpc3RvbHMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI2LjY2NjY2NixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44MDAwMDAwMSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJha2JvbHRvLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMi4wXCIsXG4gICAgICBcImZsaWdodFwiOiA3NSxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84OC9NaXJhZ2VBa2JvbHRvUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MTIxMzA5NTM0N1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQWtib2x0b19QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTcgMTIgMTJcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibi9hXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTkgMTAgMTBcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCAgcHJvamVjdGlsZSBtdW5pdGlvbnMuIEtlZXAgeW91ciBmcmllbmRzIGNsb3NlOyBrZWVwIHlvdXIgZW5lbWllcyBjbG9zZXIuIEJlY2F1c2UgYm9sdHMgaGF2ZSB0cmF2ZWwgdGltZS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjcuMixcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJBa2Jyb25jb1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQWtpbWJvL0FraW1ib1Nob3RHdW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjgwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgQnJvbmNvIGVxdWlwcGVkIGluIGVhY2ggaGFuZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMy43MDM3MDM2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYWticm9uY28ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBTaG90Z3Vuc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjgwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYS9hMC9EdWFsX0Jyb25jb3MucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDUyNDE0MzY1NVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQWticm9uY29cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQWticm9uY28gUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FraW1iby9QcmltZUFraW1ib1Nob3RHdW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVzZWQgdG9nZXRoZXIsIHRoZXNlIE9yb2tpbiBwaXN0b2xzIGZlZWQgb2ZmIGVhY2ggb3RoZXIsIGluZmxpY3RpbmcgZ3JlYXRlciBkYW1hZ2Ugd2l0aCBhbiBlbmhhbmNlZCBjaGFuY2UgZm9yIGluZHVjaW5nIGVsZW1lbnRhbCBlZmZlY3RzIG9uIHRhcmdldHMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDMuNzAzNzAzNixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJha2Jyb25jby1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFNob3RndW5zXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYWYvREVQcmltZUR1YWxCcm9uY29zLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDAzMDYwMzA1MjNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0FrYnJvbmNvX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNCAwMyAwNlwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsICBoaXRzY2FuIG11bml0aW9ucy4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIjEwMCUgU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNzkuNyxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJBa2phZ2FyYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9scy9UaWdyaXNSZWRlZW1lclNldFBpc3RvbC9Ubm9CbGFkZWRQaXN0b2xzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQnVyc3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZGVzaWduIG9mIHRoZXNlIGhhcmQtaGl0dGluZyBkdWFsIHBpc3RvbHMgaXMgYSBtaXggb2Ygb3JnYW5pYyBhbmQgYmxhZGVkIGVsZW1lbnRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNS4zODQ2MTUsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJha2phZ2FyYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjMwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84OS9Ubm9CbGFkZWRQaXN0b2xzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTAyMDUyMTExMTBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0FramFnYXJhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFramFnYXJhIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9QaXN0b2xzL1ByaW1lQWtqYWdhcmEvQWtKYWdhcmFQcmltZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkJ1cnN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUHJlY2lzaW9uIG1hY2hpbmVkIG1pcnJvcmVkIHBpc3RvbHMuIFByaW1lZCBhbmQgcmVhZHkuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDMzLjMzMzMzMixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJha2phZ2FyYS1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzYuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9iL2JhL0FramFnYXJhUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MTIxODIyNDIyNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQWtqYWdhcmFfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE4IDEyIDEyXCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIm4vYVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDIwIDEwIDI0XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIGluc2FuZSBkcHMsICBoaXRzY2FuIG11bml0aW9ucy4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDYuMyxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJBa2xhdG9cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FraW1iby9Ba2ltYm9QaXN0b2xcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBMYXRvIGVxdWlwcGVkIGluIGVhY2ggaGFuZC4gVHdpY2UgdGhlIE1hZ2F6aW5lIENhcGFjaXR5IGFuZCBGaXJlIFJhdGUsIGJ1dCBSZWxvYWQgdGltZSBpcyBkb3VibGVkIGFuZCBBY2N1cmFjeSBpcyBsb3dlcmVkLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMS4xMTExMTEsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS41MixcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJha2xhdG8ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBQaXN0b2xzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzQvNDcvQWtsYXRvLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzAyMTAwMDIwNTdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0FrbGF0b1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsICBoaXRzY2FuIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDI0NC42LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFrbGV4XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Ba2ltYm8vQWtMZXhQaXN0b2xzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEzMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEdWFsIExleCBwaXN0b2xzIGRvdWJsZSB0aGUgYW1vdW50IG9mIGhpZ2ggY2FsaWJlciBsZWFkIHlvdSBjYW4gdGhyb3cgYXQgdGhlIGVuZW15LCBidXQgYWNjdXJhY3kgYW5kIHJlbG9hZCB0aW1lIHN1ZmZlci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogOS43NTYwOTc4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODAwMDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYWtsZXgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBQaXN0b2xzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMzAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84Lzg1L0RFQWtsZXgucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEyNDE3Mzk0MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQWtsZXhcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQWtsZXggUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FraW1iby9Ba0xleFByaW1lUGlzdG9sc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU2F2YWdlIHRoZSBlbmVteSB3aXRoIGEgTGV4IFByaW1lIGluIGVhY2ggaGFuZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogOS43NTYwOTc4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxNSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjgwMDAwMDAxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImFrbGV4LXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNTAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzYxL0FrbGV4X1ByaW1lLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzAxMjcyMTI5MjlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0FrbGV4X1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNyAwMSAyN1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCAgaGl0c2NhbiBtdW5pdGlvbnMuIE1hc3NpdmUgcmVjb2lsIGh1cnRzIG92ZXJhbGwgRFBTLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA4MC40LFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFrbWFnbnVzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Ba2ltYm8vRHVhbE1hZ251c1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3NixcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUd2ljZSB0aGUgYW1tbyBhbmQgdHdpY2UgdGhlIHN0b3BwaW5nIHBvd2VyIG9mIGEgc2luZ2xlIE1hZ251cy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTEuMTExMTExLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI4LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImFrbWFnbnVzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzYuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzExL0RFQWttYWdudXMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDIwNDAxMzAzOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQWttYWdudXNcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsICBoaXRzY2FuIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogODIuNCxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJBa3NvbWF0aVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9scy9Tb21hU2lkZWFybS9Ba2ltYm9Tb21hUGlzdG9sc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxOCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZGV2YXN0YXRpbmcgcG93ZXIgb2YgdGhlIFNvbWEgcmlmbGUgY29tcGFjdGVkIGludG8gdHdvIGVsZWdhbnQgcGlzdG9scy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTUuMzg0NjE1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA5LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJha3NvbWF0aS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjE4LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZC9kZS9Ba2ltYm9Tb21hUGlzdG9scy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwNDA4MjIzNzE5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Ba3NvbWF0aVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBpbnNhbmUgZHBzLCAgaGl0c2NhbiBtdW5pdGlvbnMuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ2LjEsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQWtzdGlsZXR0b1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9scy9UZW5ub1V6aS9UZW5ub1V6aVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyOCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGVzZSBkaW1pbnV0aXZlIHJhcGlkLWZpcmUgU3RpbGV0dG8gbWFjaGluZS1waXN0b2xzIGFyZSBqdXN0IHRoZSByaWdodCBzaXplIHRvIGJlIGFraW1ibyBzdHlsZSB3aXRob3V0IHNhY3JpZmljaW5nIGFjY3VyYWN5LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyMy41Mjk0MTEsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC41LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImFrc3RpbGV0dG8ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBQaXN0b2xzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyOC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2UvZWYvVGVubm9VemkucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDIwNjA2MTk1N1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQWtzdGlsZXR0b1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAxLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFrc3RpbGV0dG8gUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbHMvUHJpbWVBa3N0aWxldHRvL1ByaW1lQWtzdGlsZXR0b1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdHlsaXNoLCBkaXNjcmVldCBhbmQgYWNjdXJhdGUsIHBlcmZlY3QgZm9yIHRoZSBUZW5ubyBvZiBkaXN0aW5jdGlvbi5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjMuNTI5NDExLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjUsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYWtzdGlsZXR0by1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzYuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzQvNDMvUHJpbWVBa3N0aWxldHRvLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjA1MjAyMTA2NTBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Frc3RpbGV0dG9fUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMSxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE2IDA1IDE3XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTggMDMgMjBcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxOCAwMyAyMFwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBWZXJ5IGdvb2QgYWxsLXJvdW5kZXIgc2Vjb25kYXJ5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2MC42LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFrdmFzdG9cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FraW1iby9EdWFsVmFzdG9zXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDU4LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlZhc3RvIHJldm9sdmVycyBlcXVpcHBlZCBpbiBlYWNoIGhhbmQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDExLjExMTExMSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjIsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYWt2YXN0by5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjU4LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZi9mYS9EdWFsX3Zhc3Rvcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwOTAxMTAwMzMzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Ba3Zhc3RvXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFrdmFzdG8gUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbHMvUHJpbWVWYXN0by9Ba1ByaW1lVmFzdG8vQWtQcmltZVZhc3RvUGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDY2LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk9yb2tpbiBjcmFmdHNtYW5zaGlwIG1hcnJpZWQgd2l0aCBzdXBlcmlvciBmaXJlcG93ZXIuIER1YWwgVmFzdG9zLCBwcmltZWQgYW5kIHJlYWR5IHRvIHN0cmlrZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJha3Zhc3RvLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI2Ni4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wMy9Ba3Zhc3RvUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MTExMzIwMTMxM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQWt2YXN0b19QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTggMTEgMTRcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibmV2ZXJcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwibmV2ZXJcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCAgaGl0c2NhbiBtdW5pdGlvbnMuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU3LjEsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQWt6YW5pXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9QaXN0b2xzL0hhcmxlcXVpbkd1bi9IYXJsZXF1aW5QaXN0b2xzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEyLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBjaG9pY2Ugd2VhcG9uIG9mIE1pcmFnZSwgdGhlc2UgZmFzdC1maXJpbmcgZHVhbCBwaXN0b2xzIGRlbGl2ZXIgYSBkZWFkbHkgcGVyZm9ybWFuY2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE2LjY2NjY2NixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjUyLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImFremFuaS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjEyLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wYy9Ba3phbmkucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDQwMzA1NDg1MVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQWt6YW5pXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA4OC45LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0FyY2h3aW5nL1N1cHBvcnRKZXRQYWNrL1N1cHBvcnRKZXRQYWNrXCIsXG4gICAgICBcIm5hbWVcIjogXCJBbWVzaGFcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUcmFuc2Zvcm0gaW50byBhIHdpbmdlZCBndWFyZGlhbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjEsXG4gICAgICBcInR5cGVcIjogXCJWZWhpY2xlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImFtZXNoYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJBcmNod2luZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvQW1lc2hhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFtcGhpc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU3RhZmYvR3JuU3RhZmZcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZhc2hpb25lZCB3aXRoIEdyaW5lZXIgbWF0ZXJpYWxzIGFuZCBiYWxhbmNlZCBmb3IgbWFyaW5lIGluZmFudHJ5IHVzZSwgdGhlIEFtcGhpcyBpcyBhIHRyYWRpdGlvbmFsIHN0YWZmIHdlYXBvbiB0aGF0IGhhcyByZWNlaXZlZCBhIG1vbnN0cm91cyBtYWtlb3ZlciB0aGF0IGVuYWJsZXMgc2hvY2sgZGFtYWdlIG9uIGp1bXAgYXR0YWNrcy4gQ29ubmVjdHMgd2l0aCBtdWx0aXBsZSBlbmVtaWVzIHdpdGggZWFjaCBzdHJpa2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiA5MixcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS41LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYW1waGlzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN0YWZmXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2Y5L0RFQW1waGlzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDA0MDcwMzU4NTZcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0FtcGhpc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1OSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIHZlcnkgaGlnaCBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDbGFzaGluZyBGb3Jlc3RcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJSZXNvbHV0ZSBGbHVycnlcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFtcHJleFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL0xvbmdHdW5zL0NoYWluTGlnaHRuaW5nR3VuL0NoYWluTGlnaHRuaW5nUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjIsXG4gICAgICBcInRyaWdnZXJcIjogXCJIZWxkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIEFtcHJleCByaWZsZSBmaXJlcyBhIGNvbnRpbnVvdXMgYmVhbSBvZiBoaWdoIHZvbHRhZ2UgZWxlY3RyaWNpdHkgdGhhdCBhcmNzIGFtb25nIG5lYXJieSBlbmVtaWVzLiBUaGlzIHdlYXBvbiBleGNlbHMgYXQgQ3Jvd2QgQ29udHJvbC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTIuNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC42OTk5OTk5OSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYW1wcmV4LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyMi4wIGVsZWN0cmljaXR5XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84Zi9DaGFpbkxpZ2h0bmluZ0d1bkVkaXQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDQyNTE3MTExMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQW1wcmV4XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgaW5zYW5lIGRwcywgYmVhbSBtdW5pdGlvbnMuIEJlYW0gY2hhaW5zIHRvIG5lYXJieSBlbmVtaWVzIGdpdmluZyBpdCBkZWNlbnQgQU9FLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0MC42LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFuZ3N0cnVtXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvUGlzdG9scy9DcnBIYW5kUkwvQ29ycHVzSGFuZFJvY2tldExhdW5jaGVyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEzNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJDaGFyZ2VcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDYXBhYmxlIG9mIGZpcmluZyBtdWx0aXBsZSByb2NrZXRzIGF0IG9uY2UsIHRoZSBBbmdzdHJ1bSBpcyBhIGhhbmRoZWxkIGluc3RydW1lbnQgb2YgZGVzdHJ1Y3Rpb24uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI2LjY2NjY2NixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYW5nc3RydW0ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogMjAwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCIzLVJvY2tldCBCYXJyYWdlIEV4cGxvc2lvblwiLFxuICAgICAgICBcInBlbGxldFwiOiB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiUm9ja2V0XCIsXG4gICAgICAgICAgXCJjb3VudFwiOiAzXG4gICAgICAgIH0sXG4gICAgICAgIFwiYmxhc3RcIjogNzUwLFxuICAgICAgICBcImRhbWFnZVwiOiBcIjc1MC4wIGJsYXN0XCJcbiAgICAgIH0sXG4gICAgICBcInNlY29uZGFyeUFyZWFcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCIzLVJvY2tldCBCYXJyYWdlIEltcGFjdFwiLFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogNTIuNSxcbiAgICAgICAgXCJwZWxsZXRcIjoge1xuICAgICAgICAgIFwibmFtZVwiOiBcIlJvY2tldFwiLFxuICAgICAgICAgIFwiY291bnRcIjogM1xuICAgICAgICB9LFxuICAgICAgICBcImJsYXN0XCI6IDYwMCxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCI2MDAuMCBibGFzdFwiXG4gICAgICB9LFxuICAgICAgXCJzdGF0dXNDaGFuY2VcIjogMjIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZmUvQ29ycHVzSGFuZFJvY2tldC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwNjA2MTUwOTAxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9BbmdzdHJ1bVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJBbmt1XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9TY3l0aGUvUGFyaXNTY3l0aGUvUGFyaXNTY3l0aGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJlYXAgaGF2b2Mgd2l0aCB0aGlzIGZ1bGwgc2l6ZWQgVGVubm8tY3JhZnRlZCBzY3l0aGUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDYsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhbmt1LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNjeXRoZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjcwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZS9lNy9QYXJpc1NjeXRoZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwNjA1MDAyMzEwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Bbmt1XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogOTAuNTksXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlN0YWxraW5nIEZhblwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIkR5aW5nIExpZ2h0XCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQW5reXJvc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvR2F1bnRsZXQvR2F1bnRsZXRcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgcGFpciBvZiBtaWdodHkgZ2F1bnRsZXRzLCB0aGUgQW5reXJvcyB3ZXJlIGRlc2lnbmVkIGJ5IHRoZSBUZW5ubyBmb3IgY2xvc2UgcXVhcnRlcnMgY29tYmF0LiBXaGF0IHRoZXkgbGFjayBpbiByYW5nZSB0aGV5IG1ha2UgdXAgZm9yIGluIHNwZWVkLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogOTAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhbmt5cm9zLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkZpc3RcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzIvMjAvQW5reXJvcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMjIxMTQ0MDAyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Bbmt5cm9zXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQW5reXJvcyBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvR2F1bnRsZXQvUHJpbWVBbmt5cm9zL1ByaW1lQW5reXJvc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzOCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBPcm9raW4gdmFyaWF0aW9uIG9mIHRoZSBBbmt5cm9zIGlzIHN1cGVyaW9yIHRvIGl0cyBzdWNjZXNzb3IgaW4gZXZlcnkgd2F5LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTE0LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ1LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYW5reXJvcy1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJGaXN0XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIzOC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvODcvUHJpbWVBbmt5cm9zLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjAyMjExNDQwMjJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Fua3lyb3NfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE0IDAzIDA2XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTYgMDIgMTZcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxNiAwMiAxNlwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjIuOTYsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCB2ZXJ5IGhpZ2ggYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiR2FpYSdzIFRyYWdlZHlcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJGb3Jlc3QncyBSZW1vcnNlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQXJjYSBQbGFzbW9yXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTG9uZ0d1bnMvQ3JwU2hvdGd1bi9DcnBTaG90Z3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDYwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdGFnZ2VyIHRhcmdldHMgd2l0aCBibGFzdHMgZnJvbSB0aGlzIENvcnB1cyBlbmdpbmVlcmVkIHBsYXNtYSBzaG90Z3VuLiBTdXJ2aXZpbmcgZW5lbWllcyBhcmUgY29uc3VtZWQgd2l0aCByYWRpYXRpb24uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDkuMDkwOTA5LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjYwMDAwMDAyLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhcmNhLXBsYXNtb3IucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNjAwLjAgcmFkaWF0aW9uXCIsXG4gICAgICBcImZsaWdodFwiOiA2MCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xYS9DcnBTaG90Z3VuLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzA5MDcxOTA1MzhcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0FyY2FfUGxhc21vclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAxLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkVuZXJneSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBTaW5nbGUgcGVsbGV0IGlzIHdpZGUgd2l0aCBwdW5jaHRocm91Z2ggYW5kIHRoZXJlZm9yZSBjYW4gYWN0IGFzIEFPRSBhbmQgcmVsaWFibHkgcHJvYyBzdGF0dXMgZWZmZWN0cy4gRG9lcyBub3QgaGF2ZSBhIGhlYWRzaG90IG11bHRpcGxpZXIuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDUzLjIsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQXJjYSBTY2lzY29cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9QaXN0b2xzL1NuaXBlclBpc3RvbC9DcnBTY29wZUd1blwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGlzIHNjb3BlZCBwaXN0b2wgYW5hbHl6ZXMgc3RyaWtlcywgbGVhcm5pbmcgaG93IHRvIGRhbWFnZSBpdHMgdGFyZ2V0cyBtb3N0IGVmZmVjdGl2ZWx5LiBBY2hpZXZlIG1heGltdW0gZGFtYWdlIG91dHB1dCBhZnRlciBmaXZlIHN1Y2Nlc3NpdmUgaGl0cy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMzIsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYXJjYS1zY2lzY28ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI2MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMGYvQ3JwU2NvcGVQaXN0b2wucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDkwNzE5MDUzN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQXJjYV9TY2lzY29cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJFbmVyZ3kgTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCAgaGl0c2NhbiBtdW5pdGlvbnMuIEVhY2ggc2hvdCBsYW5kZWQgZ3JhbnRzIFRhcmdldCBBbmFseXNpcyBidWZmLiBUYXJnZXQgQW5hbHlzaXMgc3RhY2tzIHVwIHRvIDUgdGltZXMsIGxhc3RpbmcgMiBzZWNvbmRzIGVhY2guIENyaXRpY2FsIENoYW5jZSBhbmQgU3RhdHVzIENoYW5jZSBpbmNyZWFzZXMgYnkgNCUgcGVyIHN0YWNrLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2Mi41LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFyY2EgVGl0cm9uXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTWVsZWUvSGFtbWVyL0NvcnB1c0hhbW1lcldlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxODAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVhY2ggc3VjY2Vzc2l2ZSBraWxsIGZyb20gdGhpcyBtYXNzaXZlIGVsZWN0cm9uIGhhbW1lciBidWlsZHMgYW4gZWxlY3Ryb24gY2hhcmdlIHRoYXQgaXMgdW5sZWFzaGVkIG9uIHNsYW0gYXR0YWNrcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDM2MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhcmNhLXRpdHJvbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJIYW1tZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIxODAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84LzhkL0NycEhhbW1lci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwOTA3MTkwNTM1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9BcmNhX1RpdHJvblwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXRpY2FsXCIsXG4gICAgICBcInJhbmtcIjogNDQuODcsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCB2ZXJ5IGxvdyBhdHRhY2sgc3BlZWQuIEtpbGxzIGdyYW50IHVwIHRvIDEwIENhcGFjaXRvciAoKzEwMCUgZWxlY3RyaWNpdHkgZGFtYWdlKSBjaGFyZ2VzIHRoYXQgaXMgdXNlZCBvbiBuZXh0IHNsYW0gYXR0YWNrLiBTbGFtcyBhbHNvIHByb2MgZWxlY3RyaWNpdHkgYW5kIG92ZXJyaWRlcyBoYW1tZXIgcmFnZG9sbC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlNoYXR0ZXJpbmcgU3Rvcm1cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJUaGlyZCBoaXQgb2YgU21hc2hpbmcgRnVyeSBwcm9jcyBzbGFtIGJvbnVzIGZyb20gcGFzc2l2ZSBidXQgZG9lc24ndCBleHBlbmQgY2hhcmdlcy4gXCIsXG4gICAgICBcImNvbWJvXCI6IFwiU21hc2hpbmcgRnVyeSAoMyBoaXRzIG9ubHkpXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQXJnb25ha1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9MYXNlckFpbVJpZmxlL0xhc2VyQWltUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTcsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGljayBvZmYgdGFyZ2V0cyBieSBoaWdobGlnaHRpbmcgZGlzdGFudCBlbmVtaWVzIHVzaW5nIHRoaXMgR3JpbmVlciByaWZsZSdzIGFkdmFuY2VkIGxhc2VyIHNpZ2h0aW5nIHN5c3RlbS4gRGVhZGx5IGluIGJvdGggc2luZ2xlIGZpcmUgYW5kIGF1dG9tYXRpYyBtb2Rlcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjguNTcxNDI4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYXJnb25hay5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTcuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJTZW1pLUF1dG8gTW9kZVwiLFxuICAgICAgICBcInNwZWVkXCI6IDQuMzMsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMjcsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDIuMyxcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMixcbiAgICAgICAgXCJzaG90X3R5cGVcIjogXCJIaXQtU2NhblwiLFxuICAgICAgICBcImltcGFjdFwiOiAyNC41LFxuICAgICAgICBcInNsYXNoXCI6IDI2LjIsXG4gICAgICAgIFwicHVuY3R1cmVcIjogNi4zXG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2EwL0xhc2VyQWltUmlmbGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MTAxNTAxNDAyMVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQXJnb25ha1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNoZW0gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBTY29waW5nIGhpZ2hsaWdodHMgZW5lbWllcyBmb3IgZWFzaWVyIHRhcmdldHRpbmcuIEFsdGVybmF0ZSBiZXR3ZWVuIHNlbWktYXV0byAoaGlnaGVyIERQUykgYW5kIGZ1bGwtYXV0byAoaGlnaGVyIGZpcmUgcmF0ZSkgdG8gZGVhbCB3aXRoIGRpZmZlcmVudCBlbmVtaWVzLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA3OC4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFydGF4XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvU2VudGluZWxzL1NlbnRpbmVsV2VhcG9ucy9HcmVtbGluXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJIZWxkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRnJlZXplIHRhcmdldHMgaW4gdGhlaXIgdHJhY2tzIHdpdGggdGhpcyBzZW50aW5lbCBtb3VudGVkIGljZS1iZWFtLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMi41LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiB0cnVlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwidHlwZVwiOiBcIlNlbnRpbmVsIFdlYXBvblwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhcnRheC5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjUuMCBjb2xkXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wNi9TZW50aW5lbEFydGF4LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzAyMDkyMzUwMjdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0FydGF4XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ29tZXMgd2l0aCBDb21wYW5pb25cIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9OaW5qYS9OaW5qYVwiLFxuICAgICAgXCJuYW1lXCI6IFwiQXNoXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXNoIGlzIGdyZWF0IGZvciBwbGF5ZXJzIGxvb2tpbmcgZm9yIGEgc3RlYWx0aGllciBhcHByb2FjaCB0byBjb21iYXQuIExldGhhbCBhYmlsaXRpZXMgYXJlIGNvbXBsZW1lbnRlZCBieSBwb3dlcnMgb2YgZGlzdHJhY3Rpb24uXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4xNSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiQmxlZWQgZWZmZWN0cyBpbmZsaWN0ZWQgb24gZW5lbWllcyBkbyB8REFNQUdFfCUgaW5jcmVhc2VkIGRhbWFnZSBhbmQgbGFzdCB8RFVSQVRJT058JSBsb25nZXIuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhc2gucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiA3MTcwMTQzLFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiVmFuaWxsYVwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjE1LFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzE3L0FzaE5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNDAyMjkyMVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQXNoXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFuaWNzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvTmluamEvQXNoUHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIkFzaCBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRpc3RyYWN0aW9uIGFuZCBzdWJ0ZXJmdWdlIGJlY29tZSBsZXRoYWwgd2VhcG9ucyB3aXRoIEFzaCBQcmltZS4gRmVhdHVyaW5nIGFsdGVyZWQgbW9kIHBvbGFyaXRpZXMgZm9yIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjIsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkJsZWVkIGVmZmVjdHMgaW5mbGljdGVkIG9uIGVuZW1pZXMgZG8gfERBTUFHRXwlIGluY3JlYXNlZCBkYW1hZ2UgYW5kIGxhc3QgfERVUkFUSU9OfCUgbG9uZ2VyLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYXNoLXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiA0MTQzOTI4LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTYuMTFcIixcbiAgICAgIFwic2V4XCI6IFwiTWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4yLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNjIvQXNoUHJpbWVOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA3MDcyMjIwNTFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0FzaF9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTUgMDcgMDdcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNyAwNSAzMFwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE3IDA1IDMwXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkFzdGlsbGFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL1RuR2xhc3NTaG90Z3VuL1RuR2xhc3NTaG90Z3VuR3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE5MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCbGFzdCBlbmVtaWVzIHdpdGggZ2xhc3Mgc2x1Z3MgdGhhdCBkZXZhc3RhdGUgb24gaW1wYWN0LiBJbiBHYXJhJ3MgaGFuZHMsIHRoaXMgc2lnbmF0dXJlIHdlYXBvbiBoYXMgYSBsYXJnZXIgQW1tbyBQb29sLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhc3RpbGxhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNob3RndW5cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjcwLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDc1LFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy81LzVkL0dsYXNzU2hvdGd1bi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcxMDE4MTM0NTQxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Bc3RpbGxhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBpbnNhbmUgZHBzLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gRGVhbHMgMzAlIG9mIGRhbWFnZSB1cG9uIGltcGFjdCBhbmQgNzAlIG9uIGV4cGxvc2lvbi4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDMuMyxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9CcmF3bGVyL0JyYXdsZXJcIixcbiAgICAgIFwibmFtZVwiOiBcIkF0bGFzXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGl0YW4gb2Ygc3RvbmUsIGxvcmQgb2YgdGhlIGVhcnRobHkgZWxlbWVudGFscy5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAwLjg5OTk5OTk4LFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJCZWNvbWVzIGltbXVuZSB0byBLbm9ja2Rvd24gZWZmZWN0cyB3aGlsZSBvbiB0aGUgZ3JvdW5kLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYXRsYXMucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiA0MDA5NzcyLFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTcuNVwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAwLjksXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvN2YvQXRsYXNOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEwMDIwMzI1NTNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0F0bGFzXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiSm9yZGFzIEdvbGVtIChCb3NzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkF0b21vc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9QaXN0b2xzL0hlYXRHdW4vR3JuSGVhdEd1blwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyOSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkhlbGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGlzIHBhcnRpY2xlIGNhbm5vbiBnZW5lcmF0ZXMgYSBjb25kZW5zZWQgYmVhbSBvZiBzdXBlci1oZWF0ZWQgcGxhc21hIGRlc2lnbmVkIHRvIG1lbHQgcm9jayB0byBvcmUsIGFuZCBlbmVtaWVzIHRvIG1vbHRlbiBzbGFnLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMi41LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODAwMDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYXRvbW9zLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjkuMCBoZWF0XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNy83Ny9Hcm5IZWF0R3VuLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA1MTIyMzMxMTVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0F0b21vc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBpbnNhbmUgZHBzLCAgYmVhbSBtdW5pdGlvbnMuIENoYWlucyA3bSBhd2F5LCBldmVuIHdoZW4gc2hvb3RpbmcgYXQgZGVhZCBib2RpZXMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ5LjEsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJBdHRlcmF4XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL01lbGVlL0dyaW5lZXJXaGlwL0dyaW5lZXJXaGlwXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIG11bHRpLWJsYWRlZCB3aGlwIHRoYXQgaXMgYWRlcHQgYXQgZmxheWluZyBza2luIGZyb20gYm9uZS4gSW4gZXh0cmVtZSBjYXNlcywgZGlzb2JlZGllbnQgR3JpbmVlciBhcmUgc2VudGVuY2VkIHRvIGRlYXRoIGJ5IEF0dGVyYXguXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxODAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImF0dGVyYXgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiV2hpcFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjQ1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNC80ZS9HcmluZWVyV2hpcC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwOTE4MDM1ODA5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9BdHRlcmF4XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiU2xpZGVcIixcbiAgICAgIFwicmFua1wiOiAyNi4xMixcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgbG93IGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkJ1cm5pbmcgV2FzcFwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlNsaWRlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQXR0aWNhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9Ubm9Qcm1yeVhib3cvVG5vUHJtcnlYYm93V2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDgwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlF1aWNrbHkgZmlyZSBvZmYgYSB2b2xsZXkgb2YgZGVhZGx5IGJvbHRzIHdpdGggdGhlIEF0dGljYSByZXBlYXRpbmcgY3Jvc3Nib3cuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDQwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQxNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYXR0aWNhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkNyb3NzYm93XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI4MC4wXCIsXG4gICAgICBcImZsaWdodFwiOiA5MCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZC9kZi9Ubm9Qcm1yeVhib3cucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDQxMDA1NTQwOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQXR0aWNhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjgsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQXppbWFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbHMvU3VuZGlhbEd1bi9TdW5kaWFsUGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgaW50cmljYXRlIGF1dG9tYXRpYyBwaXN0b2wgaXMgYWJsZSB0byBmaXJlIGl0cyBjbGlwIHdoaWNoIHRoZW4gc3BpbnMgaW4gdGhlIGFpciBmb3IgYSBzaG9ydCB0aW1lLCBmaXJpbmcgbGFzZXJzIGF0IG5lYXJieSBlbmVtaWVzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyMi4yMjIyMjEsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDYsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJhemltYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiTGF1bmNoIFR1cnJldFwiLFxuICAgICAgICBcImNyaXRfY2hhbmNlXCI6IDE2LFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogMC4yLFxuICAgICAgICBcImJsYXN0XCI6IDc1LFxuICAgICAgICBcImRhbWFnZVwiOiBcIjc1LjAgYmxhc3RcIlxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNC80Yi9TdW5kaWFsUGlzdG9sLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzEwMzExNDUzMTVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0F6aW1hXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTG9naW4gUmV3YXJkXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBBbHQgZmlyZSBsYXVuY2hlcyB0aGUgcmVtYWluaW5nIGNsaXAgdGhhdCB3aWxsIGFjdCBhcyBhIDQtcG9pbnQgZHVtYiB0dXJyZXQuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDYyLjYsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQmFkIEJhYnlcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9WZWhpY2xlcy9Ib3ZlcmJvYXJkL0hvdmVyYm9hcmRQYXJ0cy9QYXJ0Q29tcG9uZW50cy9Ib3ZlcmJvYXJkU29sYXJpc0EvSG92ZXJib2FyZFNvbGFyaXNBRGVja1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiVmVoaWNsZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJiYWQtYmFieS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJLLURyaXZlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJva3kgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvQmFkX0JhYnlcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQmFsbGEgU3RyaWtlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Pc3Ryb24vTWVsZWUvTW9kdWxhck1lbGVlMDEvVGlwL1RpcE9uZVwiLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYmFsbGEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiWmF3XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkhvaydzIEFudmlsIChDZXR1cylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9CYWxsYV9TdHJpa2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQmFsbGlzdGljYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9scy9BdXRvbWF0aWNIYW5kQ3Jvc3Nib3cvQXV0b0Nyb3NzQm93XCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBCYWxsaXN0aWNhIGNyb3NzYm93IGZlYXR1cmVzIGEgdW5pcXVlIGR1YWwgZmlyaW5nIG1lY2hhbmlzbS4gQ2hvb3NlIGJldHdlZW4gYSBmb3VyIGJvbHQgdm9sbGV5IG9yIGEgZGVhZGx5IGFjY3VyYXRlIGNoYXJnZWQgc2hvdC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogNCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiU2lsZW50XCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJiYWxsaXN0aWNhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkNyb3NzYm93XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogMTAwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJCdXJzdCBTaG90XCIsXG4gICAgICAgIFwic3BlZWRcIjogMTEuNDMsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMy43NSxcbiAgICAgICAgXCJjcml0X211bHRcIjogMS41LFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogMCxcbiAgICAgICAgXCJzaG90X3R5cGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICAgIFwic2hvdF9zcGVlZFwiOiAxMDAsXG4gICAgICAgIFwiaW1wYWN0XCI6IDIuNSxcbiAgICAgICAgXCJzbGFzaFwiOiAyLjUsXG4gICAgICAgIFwicHVuY3R1cmVcIjogMjBcbiAgICAgIH0sXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAxMCxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOS85Mi9ERUJhbGxpc3RpY2EucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEwMTA1MzMzN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQmFsbGlzdGljYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJCYWxsaXN0aWNhIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9QaXN0b2xzL1ByaW1lQmFsbGlzdGljYS9QcmltZUJhbGxpc3RpY2FcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzA0LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQ2hhcmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGJlYXV0eSBvZiB0aGlzIGx1eHVyaW91c2x5IGdpbGRlZCBjcm9zc2JvdyBjYW5ub3Qgb2JzY3VyZSBpdHMgbGV0aGFsIHB1cnBvc2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDQsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIlNpbGVudFwiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjA1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJhbGxpc3RpY2EtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQ3Jvc3Nib3dcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTUyLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDEwMCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9kL2RiL1ByaW1lQmFsbGlzdGljYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwODI5MjE1NDM5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9CYWxsaXN0aWNhX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNyAwOCAyOVwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE5IDA3IDA3XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTkgMDcgMDdcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIHByb2plY3RpbGUgbXVuaXRpb25zLiBDaGFyZ2VkIHNob3Qga2lsbHMgdHVybnMgdGhlIHRhcmdldCBpbnRvIGEgZ2hvc3RseSBzcGVjdGVyIGZvciA3IHNlY29uZHMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDkwLjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvQmFuc2hlZS9CYW5zaGVlXCIsXG4gICAgICBcIm5hbWVcIjogXCJCYW5zaGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXNpbmcgc29uaWMgYXR0YWNrcyBhbmQgYWNvdXN0aWMgdGFyZ2V0IGRldGVjdGlvbiwgQmFuc2hlZSBpcyB3ZWxsIHN1aXRlZCBmb3Igc3RlYWx0aCBnYW1lcGxheSBhbmQgaXMgY2FwYWJsZSBvZiBmaWxsaW5nIGJvdGggYXR0YWNrIGFuZCBzdXBwb3J0IHJvbGVzLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiV2VhcG9uIG5vaXNlcyBhcmUgaHVzaGVkIHNvIHRoYXQgZW5lbWllcyBjYW5ub3QgaGVhciB0aGVtLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYmFuc2hlZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDQ0NzY0OTksXG4gICAgICBcImludHJvZHVjZWRcIjogXCI3XCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4xLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy85LzlkL0JhbnNoZWVOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjMwMDJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0JhbnNoZWVcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvQmFuc2hlZS9CYW5zaGVlUHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIkJhbnNoZWUgUHJpbWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCYW5zaGVlIFByaW1lIGFzc2FpbHMgaGVyIGZvZXMgYnkgbWFuaXB1bGF0aW5nIHNvbmljIGZvcmNlcyB0byBkZWFkbHkgZWZmZWN0LiBGZWF0dXJpbmcgYWx0ZXJlZCBtb2QgcG9sYXJpdGllcyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMTUsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIldlYXBvbiBub2lzZXMgYXJlIGh1c2hlZCBzbyB0aGF0IGVuZW1pZXMgY2Fubm90IGhlYXIgdGhlbS5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJhbnNoZWUtcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDM5NDcwNjQsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIxOS4xMS41XCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4xNSxcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84LzhlL0JhbnNoZWVQcmltZUljb24ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDMwODAyMzIwNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQmFuc2hlZV9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTcgMDIgMjhcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxOCAxMiAxMlwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE4IDEyIDEyXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL1BhY2lmaXN0L1BhY2lmaXN0XCIsXG4gICAgICBcIm5hbWVcIjogXCJCYXJ1dWtcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCZXdhcmUgdGhlIGZ1cnkgb2YgdGhlIHRydWx5IHBhdGllbnQuIFB1c2hlZCBiZXlvbmQgcmVzdHJhaW50LCBhIHJlbHVjdGFudCBtYXN0ZXIgdW5sZWFzaGVzIHRoZSBzdG9ybSB3aXRoaW4uXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4yLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJFYWNoIHByb2plY3RpbGUgZG9kZ2VkLCBlYWNoIGVuZW15IGx1bGxlZCBvciBkaXNhcm1lZCwgZXJvZGVzIEJhcnV1aydzIHJlc3RyYWludCBhbmQgZnVlbHMgdGhlIHN0b3JtIHdpdGhpbi4gQXMgQmFydXVrJ3MgcmVzdHJhaW50IGlzIGRpbWluaXNoZWQgaGUgYmVjb21lcyB1cCB0byB8UEVSQ0VOVHwlIG1vcmUgcmVzaXN0YW50IHRvIGRhbWFnZS5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJhcnV1ay5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJuYXJhbW9uXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IGZhbHNlLFxuICAgICAgXCJjb2xvclwiOiA0NDA3MzU0LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMjQuMlwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjIsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2IvYjUvQmFydXVrSWNvbjI3Mi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgxMjE5MTUxMDU3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9CYXJ1dWtcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJMaXR0bGUgRHVjayAoRm9ydHVuYSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJCYXR0YWNvclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL0xvbmdHdW5zL0NycFNlbnRFeHBlcmltZW50UmlmbGUvQ3JwU2VudEV4cGVyaW1lbnRSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2NixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG8gQnVyc3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHdlYXBvbiB0aGF0IGJ1aWxkcyBjaGFyZ2UgdGhlIG1vcmUgaXQga2lsbHMuIEhpdCBjYXBhY2l0eSB0aGVuIHJlbGVhc2UgZm9yIGFuIG9ibGl0ZXJhdGluZyBkaXNjaGFyZ2Ugb2YgcG93ZXIuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJiYXR0YWNvci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDIuMCBtYWduZXRpY1wiLFxuICAgICAgXCJmbGlnaHRcIjogMTE1LFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcInNwZWVkXCI6IDEsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMzQsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDMsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLjEsXG4gICAgICAgIFwiY2hhcmdlX3RpbWVcIjogMC40LFxuICAgICAgICBcInNob3RfdHlwZVwiOiBcIkhpdC1TY2FuXCIsXG4gICAgICAgIFwicmFkaWF0aW9uXCI6IDIwOCxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCIyMDguMCByYWRpYXRpb25cIlxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZC9kOC9CYXR0YWNvci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgxMTEwMjAxMDUxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9CYXR0YWNvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkVuZXJneSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBpbnNhbmUgZHBzLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gUHJpbWFyeSBmaXJlIGhhcyB0d28tcm91bmQgYnVyc3Qgd2hpY2ggaXMgcG90ZW50aWFsbHkgd2FzdGVmdWwuIEV2ZXJ5IGtpbGwgZ2l2ZXMgb25lIHNlY29uZGFyeSBmaXJlIGNoYXJnZS4gVXAgdG8gdGhyZWUgY2hhcmdlcyBjYW4gYmUgc3RvcmVkIGZvciBncmVhdGVyIGRhbWFnZSBhbmQgY3JpdCBjaGFuY2UuIFJlY29tbWVuZCB0byBleHBlbmQgc2Vjb25kYXJ5IGZpcmUgYXMgc29vbiBhcyBwb3NzaWJsZSBhcyBpdCBpcyBhIGZyZWUgc2hvdCBhbmQgd291bGQgaW5jcmVhc2Ugb3ZlcmFsbCBEUFMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ0LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkJhemFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL1RuU01HL1RuU01HV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE2LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk1ha2UgZWFzeSBwcmV5IG9mIGVuZW1pZXMgd2l0aCB0aGlzIHF1aWV0LCBhZ2lsZSwgYW5kIHBpbnBvaW50IGFjY3VyYXRlIFRlbm5vIHN1Ym1hY2hpbmUgZ3VuLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA4MCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiU2lsZW50XCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYmF6YS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTYuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2ZhL0JhemEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MTEyNDA1NDE1NlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQmF6YVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBDb21wbGV0ZWx5IHNpbGVudCBidXQgaGFzIGRhbWFnZSBmYWxsb2ZmIHNpbWlsYXIgdG8gc2hvdGd1bnMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU3LjQsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQm9cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N0YWZmL1N0YWZmXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHR3by1oYW5kZWQsIHJlaW5mb3JjZWQgc3RhZmYgdGhhdCBjYW4gc2VuZCBtdWx0aXBsZSBlbmVtaWVzIGFpcmJvcm5lLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogODMsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjksXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJiby5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTdGFmZlwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjUwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNy83NC9Cb1N0YWZmLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzAyMTAwMDIwNThcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0JvXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQm8gUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N0YWZmL1ByaW1lQm8vUHJpbWVCb1dlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBjbGFzc2ljIE9yb2tpbiB3ZWFwb24sIEJvIFByaW1lIGNyZWF0ZXMgZWxlZ2FudCBmdXJ5IG9uIHRoZSBiYXR0bGVmaWVsZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDEyNSxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDUsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yOSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJvLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN0YWZmXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI3NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xYi9QcmltZUJvLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDA2MTIwMDAyMjVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0JvX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNCAwNiAxMVwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE2IDA1IDE3XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTYgMDUgMTdcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ3LjI0LFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb2RlcmF0ZSBEUFMsIGhpZ2ggYXR0YWNrIHNwZWVkLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2xhc2hpbmcgRm9yZXN0XCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiUmVzb2x1dGUgRmx1cnJ5XCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQm9hclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vU2hvdGd1bi9GdWxsQXV0b1Nob3RndW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTc2LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgc2hvdGd1biB3aXRoIGxvdyBhY2N1cmFjeSBhbmQgc3Ryb25nIHJlY29pbCwgYnV0IGFibGUgdG8gZGVsaXZlciBpdHMgcGF5bG9hZCBpbiBmdWxsLWF1dG8uIFRoZSBCb2FyIGlzIGJlc3QgdXNlZCBhdCBjbG9zZSByYW5nZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM0LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJib2FyLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNob3RndW5cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjE3Ni4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNmYvQm9hci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNDI2MDc0MDEyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Cb2FyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRHJla2FyIFRyb29wZXJzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQm9hciBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vU2hvdGd1bi9QcmltZUJvYXJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzIwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk9uZSBvZiB0aGUgZmluZXN0IGV4YW1wbGVzIG9mIFRlbm5vIGNyYWZ0c21hbnNoaXAsIHRoZSBCb2FyIFByaW1lIG9mZmVycyBhIGhpZ2hlciBGaXJlIFJhdGUsIE1hZ2F6aW5lIENhcGFjaXR5IGFuZCBhIG11Y2ggaGlnaGVyIHBlci1zaG90IGRhbWFnZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTEsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zNCxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYm9hci1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjMyMC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZS9lNy9GaXhlZFByaW1lQm9hci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwOTE0MTAxNjU4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Cb2FyX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxMyAwOSAxM1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE1IDA3IDA3XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTUgMDcgMDdcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBSZXF1aXJlZCB0byBtb2QgZm9yIDEwMCUgc3RhdHVzIGNoYW5jZS4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIjEwMCUgU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDYuNCxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJCb2x0YWNlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Ub25mYS9Cb2x0b25mYS9Cb2x0b25mYVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA4NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQW4gaW50aW1pZGF0aW5nIFRvbmZhIHNldCBkZXNpZ25lZCB0byBtYXRjaCB0aGUgYnJpYXJ5IGRlc2lnbiBvZiB0aGUgQm9sdG9yLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMzQwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYm9sdGFjZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJUb25mYVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjg1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNi82MS9Cb2x0b25mYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwNTEyMjMyOTQ3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Cb2x0YWNlXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkJvbHRvXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9QaXN0b2wvQ3Jvc3NCb3dcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIEJvbHRvIGZpcmVzIHNsb3csIGhlYXZ5IGJvbHRzIHRoYXQgYXJlIGNhcGFibGUgb2YgaW1wYWxpbmcgZW5lbWllcyB0byB3YWxscy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjYuNjY2NjY2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNTEsXG4gICAgICBcIml0ZW1Db3VudFwiOiAxLFxuICAgICAgXCJwYXJlbnRzXCI6IFtcbiAgICAgICAgXCJIeXN0cml4XCJcbiAgICAgIF0sXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYm9sdG8ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MC4wXCIsXG4gICAgICBcImZsaWdodFwiOiA3NSxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYS9hMC9Cb2x0by5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNDI2MDc0NzA4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Cb2x0b1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkJvbHRvclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUmlmbGUvQm9sdG9SaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgQm9sdG9yIGZpcmVzIHNsb3csIGhlYXZ5IGJvbHRzIHRoYXQgYXJlIGNhcGFibGUgb2YgaW1wYWxpbmcgZW5lbWllcyB0byB3YWxscy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjUsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYm9sdG9yLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyNS4wXCIsXG4gICAgICBcImZsaWdodFwiOiA4NSxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYi9iNS9Cb2x0b3IucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDIxMzA2MDQyM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQm9sdG9yXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQm9sdG9yIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9QcmltZUJvbHRvci9QcmltZUJvbHRvclwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA0NS45OTk5OTYsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRmlyZXMgT3Jva2luIGRlc2lnbmVkIGJvbHRzIHRoYXQgYXJlIGZhc3RlciBhbmQgc2hhcnBlci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogNTAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMDUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJvbHRvci1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0Ni4wXCIsXG4gICAgICBcImZsaWdodFwiOiAxMDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzUvNTkvREVQcmltZUJvbHRvci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMzA2MDMwNTIzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Cb2x0b3JfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE0IDAzIDA2XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTYgMDIgMTZcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxNiAwMiAxNlwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjYuOSxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJCcmFra1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9QaXN0b2xzL0dyaW5lZXJIYW5kU2hvdGd1bi9HcmluZWVySGFuZENhbm5vblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyMDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU2ltcGxlIGJ1dCBwb3dlcmZ1bC4gVGhlIHNlbWktYXV0b21hdGljIEJyYWtrIGhhbmQgY2Fubm9uIGRlbGl2ZXJzIGEgbG90IG9mIHB1bmNoIGluIGEgc21hbGwgcGFja2FnZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogNy42OTIzMDc1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJicmFray5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuIFNpZGVhcm1cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwMC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2IvYjUvREVHcmluZWVySGFuZFNob3RndW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDExNjE1MzUwNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQnJha2tcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUaGUgR3J1c3RyYWcgVGhyZWVcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCAgaGl0c2NhbiBtdW5pdGlvbnMuIFJJUCBSYWlkcy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXRpY2FsXCIsXG4gICAgICBcInJhbmtcIjogODUuOCxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJCcmF0b25cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1JpZmxlL1JpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI0LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBCcmF0b24ncyBoaWdoIHJhdGUgb2YgZmlyZSBhbmQgYWNjdXJhY3kgbWFrZSBpdCBhIGZhdm9yaXRlIGFtb25nIHRoZSBUZW5uby5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjguNTcxNDI4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYnJhdG9uLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyNC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzEvMTkvQnJhdG9uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzAyMTAwMDIwNTNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0JyYXRvblwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJCcmF0b24gUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1JpZmxlL0JyYXRvblByaW1lXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgY2xhc3NpYyBPcm9raW4gd2VhcG9uLCBCcmF0b24gUHJpbWUgZmVhdHVyZXMgbW9kaWZpZWQgZGFtYWdlIGxldmVscyBhbmQgYSBsYXJnZXIgbWFnYXppbmUgb3ZlciB0aGUgc3RhbmRhcmQgbW9kZWwuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI4LjU3MTQyOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjIsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJyYXRvbi1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDIvUHJpbWVCcmF0b24ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTEyNTIzMTQzNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQnJhdG9uX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxMyAwNyAxM1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDgxLjEsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQnJhdG9uIFZhbmRhbFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUmlmbGUvVklQUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBzcGVjaWFsIHZlcnNpb24gb2YgdGhlIHN0YW5kYXJkIEJyYXRvbiByaWZsZSB3aXRoIGEgc2xvd2VyIEZpcmUgUmF0ZSBidXQgb2ZmZXJpbmcgaGlnaGVyIGFjY3VyYWN5IGFuZCBkYW1hZ2UgdmFsdWVzLiBUaGUgQnJhdG9uIFZhbmRhbCBoYXMgYmVlbiBjdXN0b21pemVkIGJ5IHRoZSBUZW5ubyB3aXRoIGEgYmx1ZS1ncmVlbiBtZXRhbGxpYyBmaW5pc2ggYW5kIExvdHVzIGJyYW5kaW5nIG9uIHRoZSBncmlwcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMzMuMzMzMzMyLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYnJhdG9uLXZhbmRhbC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvMzAvQnJhdG9uVmFuZGFsLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA0MjgwOTA2NTBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0JyYXRvbl9WYW5kYWxcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJTYW5jdHVhcnkgT25zbGF1Z2h0XCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQnJva2VuIFNjZXB0ZXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTWVsZWUvR3JuUXVlZW5TY2VwdHJlL0dyblF1ZWVuU2NlcHRyZVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBzaGF0dGVyZWQgdGFsaXNtYW4gb2YgdGhlIEdyaW5lZXIgRWxkZXIgUXVlZW4uIEl0IHB1bGxzIGhlYWx0aCBvcmJzIGZyb20gZGVjZWFzZWQgZW5lbWllcyBhbmQgZW5lcmd5IG9yYnMgZnJvbSBkZXN0cm95ZWQgcm9ib3RzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTAwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjE5MDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJicm9rZW4tc2NlcHRlci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTdGFmZlwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjYwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xOC9Hcm5RdWVlblNjZXB0cmUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTExMjA5MjgyOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQnJva2VuX1NjZXB0ZXJcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUaGUgV2FyIFdpdGhpbiAoUXVlc3QpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0OC40NixcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCB2ZXJ5IGhpZ2ggYXR0YWNrIHNwZWVkLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBDYW4gRHJhaW4gZW5lbWllcyB0byBzcGF3biBoZWFsdGgvZW5lcmd5IG9yYi4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNsYXNoaW5nIEZvcmVzdFwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlJlc29sdXRlIEZsdXJyeVwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkJyb2tlbiBXYXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkcy9TdGFsa2VyVHdvL1N0YWxrZXJUd29TbWFsbFN3b3JkXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDkwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGZyYWdtZW50IG9mIFN0YWxrZXIncyBXYXIgc3dvcmQsIGEgc3ltYm9sIG9mIGhpcyBkZWZlYXQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAzNjAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjc5MDAwMDAyLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYnJva2VuLXdhci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTd29yZFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjkwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYi9iMi9TdGFsa2VyVHdvU3dvcmQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MTIwNDAxMzMwN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQnJva2VuX1dhclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBTZWNvbmQgRHJlYW0gKFF1ZXN0KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0OC4zNSxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJTd29vcGluZyBGYWxjb25cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXZpbmcgS2VzdHJlbFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQnJvbmNvXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9QaXN0b2wvSGFuZFNob3RHdW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjgwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBCcm9uY28gaXMgYSBzbWFsbC1zY2FsZSBzaG90Z3VuIHRoYXQgY2FuIGJlIHdpZWxkZWQgd2l0aCBvbmUgaGFuZC4gT25seSBlZmZlY3RpdmUgYXQgY2xvc2UgcmFuZ2UsIGl0IGhhcyBhIGxpbWl0ZWQgTWFnYXppbmUgQ2FwYWNpdHkuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDMuNzAzNzAzNixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJyb25jby5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuIFNpZGVhcm1cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjI4MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvOGUvQnJvbmNvLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA0MjYwNzQ3MTRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Jyb25jb1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkJyb25jbyBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9sL0Jyb25jb1ByaW1lXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM1MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbmZ1c2VkIHdpdGggcmFyZSBPcm9raW4gYWxsb3lzLCB0aGUgQnJvbmNvIFByaW1lIGlzIGEgaGlnaGx5IGVmZmljaWVudCB3ZWFwb24sIHRyYWRpbmcgYW4gaW5jcmVhc2VkIE1hZ2F6aW5lIENhcGFjaXR5IGFuZCBkYW1hZ2UgZm9yIGEgbG93ZXIgcmF0ZSBvZiBmaXJlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAzLjcwMzcwMzYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJicm9uY28tcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1biBTaWRlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2MvYzgvUHJpbWVCcm9uY28ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDcxMzIwNDMzNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQnJvbmNvX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxMyAwNyAxM1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsICBoaXRzY2FuIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIjEwMCUgU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogOTAuMSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkJ1cnN0IExhc2VyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvU2VudGluZWxzL1NlbnRpbmVsV2VhcG9ucy9CdXJzdExhc2VyUGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDcsXG4gICAgICBcInRyaWdnZXJcIjogXCJCdXJzdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZpcmVzIGEgc21hbGwgYnVyc3Qgb2YgbGFzZXJzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJ1cnN0LWxhc2VyLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNy4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2QvZDQvREVTZW50aW5lbEJ1cnN0TGFzZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEyMjE1NDIyN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQnVyc3RfTGFzZXJcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDb21lcyB3aXRoIENvbXBhbmlvblwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkJ1cnN0b25cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1JpZmxlL0J1cnN0UmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJCdXJzdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBCdXJzdG9uIGZpcmVzIDMtcm91bmQgYnVyc3RzLCB3aGljaCBwcm92aWRlcyBhIGJhbGFuY2UgYmV0d2VlbiB0aGUgbGV0aGFsaXR5IG9mIGF1dG9tYXRpYyByaWZsZXMgYW5kIHRoZSBhY2N1cmFjeSBvZiBzZW1pLWF1dG9tYXRpYyByaWZsZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiYnVyc3Rvbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2E4L0J1cnN0b24ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDgyMDA0MDkyNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQnVyc3RvblwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJCdXJzdG9uIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9QcmltZUJ1cnN0b24vUHJpbWVCdXJzdG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM2LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQnVyc3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJPbmNlIHRob3VnaHQgbG9zdCB0byB0aGUgYWdlcywgYXR0ZW1wdHMgdG8gcmVlbmdpbmVlciB0aGUgQnVyc3RvbiBQcmltZSBuZXZlciBmdWxseSByZXBsaWNhdGVkIHRoaXMgd2VhcG9uJ3MgcG93ZXIgYW5kIGFnaWxpdHkuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJ1cnN0b24tcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzYuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84LzgzL1ByaW1lQnVyc3Rvbi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYxMTI2MDAwNTM2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9CdXJzdG9uX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxMyAxMiAxOVwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBHaWxkZWQgVHJ1dGggKEFyYml0ZXJzIG9mIEhleGlzKSBpbmNyZWFzZXMgZmlyZSByYXRlIGFuZCBwcm92aWRlIFRydXRoIGVmZmVjdCAoR2FzLCBoZWFsdGgsIHBhcmtvdXIpLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAxMDIuOCxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJCdXpsb2tcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTG9uZ0d1bnMvR3JuR29yZ1NuaXBlclJpZmxlL0dybkdvcmdTbmlwZXJSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJNYXJrIHlvdXIgdGFyZ2V0cyBhbmQgdW5sZWFzaCBhIGJhcnJhZ2Ugb2YgYnVsbGV0cywgdGhlIEJ1emxvaydzIGhvbWluZyByb3VuZHMgYWx3YXlzIGZpbmQgdGhlIGVuZW15LiBNYXJrZWQgdGFyZ2V0cyBhcmUgbW9yZSBsaWtlbHkgdG8gdGFrZSBjcml0aWNhbCBoaXRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMy4zMzMzMzMsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDExLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImJ1emxvay5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNjAuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIkJlYWNvblwiLFxuICAgICAgICBcInNwZWVkXCI6IDEuNjcsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMCxcbiAgICAgICAgXCJjcml0X211bHRcIjogMSxcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAsXG4gICAgICAgIFwic2hvdF90eXBlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgICBcInNob3Rfc3BlZWRcIjogbnVsbCxcbiAgICAgICAgXCJwdW5jdHVyZVwiOiAzXG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy85LzllL0dybkdvcmdTbmlwZXJSaWZsZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwOTE4MDM1ODEwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9CdXpsb2tcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDaGVtIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gQWx0IGZpcmUgbGF1bmNoZXMgdHJhY2VyIGJlYWNvbiB3aGljaCBnaXZlcyBhZGRpdGl2ZSA1MCUgQ3JpdCBDaGFuY2UgKDIwIHNlY29uZHMpIHRoYXQgcmVtYWluIGFjdGl2ZSBldmVuIHRoZSB0YXJnZXQgaXMgZGVhZC4gSGFzIGluc2FuZSBEUFMgcG90ZW50aWFsIGJ1dCBkaWZmaWN1bHQgdG8gYXR0YWluIGR1ZSB0byBkaWZmaWN1bHR5IGluIGhhbmRsaW5nIGJlYWNvbiBhbmQgcmVsYXRpdmVseSBwb29yIGhhbmRsaW5nLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2MS4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkNhbnRpYyBQcmlzbVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL09wZXJhdG9yQW1wbGlmaWVycy9TZXQxL0JhcnJlbC9Db3JwQW1wU2V0MUJhcnJlbFBhcnRBXCIsXG4gICAgICBcInR5cGVcIjogXCJBbXBcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiY2FudGljLXByaXNtLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJMaXR0bGUgRHVjayAoRm9ydHVuYSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9DYW50aWNfUHJpc21cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFBvd2Vyc3VpdHMvQ2FycmllclBvd2VyU3VpdFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQ2FycmllclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggJ0Fzc2F1bHQgTW9kZScgYW5kICdBbW1vIENhc2UnIGFzIGRlZmF1bHQgUHJlY2VwdHMsIENhcnJpZXIgaXMgYSBzZWVrZXIgU2VudGluZWwuIENhcnJpZXIgYWxzbyBjb21lcyB3aXRoIGEgc2hvdGd1biB3ZWFwb24uTm90ZTogVGhpcyBpdGVtIHJlcXVpcmVzIHR3byBvcGVuIHNsb3RzLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWxcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiY2Fycmllci5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL0NhcnJpZXJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFBvd2Vyc3VpdHMvUHJpbWVDYXJyaWVyUG93ZXJTdWl0XCIsXG4gICAgICBcIm5hbWVcIjogXCJDYXJyaWVyIFByaW1lXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBvcm5hdGUgc2VudGluZWwgaXMgYW4gZXhjZWxsZW50IGV4YW1wbGUgb2YgbGF0ZSBPcm9raW4gY3JhZnRzbWFuc2hpcCBhbmQgc3R5bGluZy5cIixcbiAgICAgIFwidHlwZVwiOiBcIlNlbnRpbmVsXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNhcnJpZXItcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNSAwNyAwN1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE3IDA1IDMwXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTcgMDUgMzBcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9DYXJyaWVyX1ByaW1lXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkNhc3Nvd2FyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Qb2xlYXJtcy9UbkhhbGJlcmRQb2xlYXJtL1RuSGFsYmVyZFBvbGVhcm1XZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxpZ2h0IGFuZCBuaW1ibGUsIHRoZSB0d2luIGJsYWRlcyBvZiB0aGlzIHBvbGVhcm0gd2lsbCBzd29vcCBhbmQgc2xpY2UgdGhyb3VnaCB0aHJvbmdzIG9mIGhhcmRlbmVkIGZvZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMTcsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJjYXNzb3dhci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQb2xlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9iL2IzL0Nhc3Nvd2FyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzExMjQwNTQxNThcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Nhc3Nvd2FyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTUuMzEsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJUd2lybGluZyBTcGlyZVwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlZhdWx0aW5nIEFwZXhcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDYXN0YW5hc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vVGhyb3dpbmdXZWFwb25zL1N0aWNreUJvbWIvU3RpY2t5Qm9tYnNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTYwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQWN0aXZlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHJlbW90ZWx5IHRyaWdnZXJlZCBDYXN0YW5hcyBxdWlldGx5IGRlbGl2ZXIgYSBsZXRoYWwgZG9zZSBvZiBlbGVjdHJpY2l0eSB0byB1bnN1c3BlY3RpbmcgZW5lbWllcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNhc3RhbmFzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRocm93blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTYwLjAgZWxlY3RyaWNpdHlcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDMwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzE3L1Rhc2VyU3Rhci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMjI2MjE0NTMzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9DYXN0YW5hc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDYXRjaG1vb25cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1NvbGFyaXNVbml0ZWQvU2Vjb25kYXJ5L1NVTW9kdWxhclNlY29uZGFyeVNldDEvQmFycmVsL1NVTW9kdWxhclNlY29uZGFyeUJhcnJlbEFQYXJ0XCIsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiY2F0Y2htb29uLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIktpdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSdWRlIFp1dWQgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvQ2F0Y2htb29uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkNhdXN0YWN5c3RcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0luZmVzdGVkL01lbGVlL0luZkVtYm9saXN0U2N5dGhlL0luZmVzdGVkU2N5dGhlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDc1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDaGFyZ2UgYXR0YWNrcyBmcm9tIHRoaXMgc2N5dGhlIHVubGVhc2ggYSB3YXZlIG9mIGFjaWQgdGhhdCBtdXRpbGF0ZXMgZW5lbWllcyBhbmQgbGVhdmVzIGEgdHJhaWwgb2YgY29ycm9zaXZlIHNsdWRnZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE1MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiY2F1c3RhY3lzdC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTY3l0aGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI3NS4wIGNvcnJvc2l2ZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9lL2UxL0VtYm9saXN0U2N5dGhlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjEwMjEwMDQ5NDdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0NhdXN0YWN5c3RcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJCaW8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU4LjU5LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgbG93IGF0dGFjayBzcGVlZC4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gQ2hhcmdlIGF0dGFjayB0aHJvd3Mgd2F2ZSBvZiBDb3Jyb3NpdmUgZGFtYWdlLCBzdGFnZ2VycyBlbmVtaWVzIGFuZCBjYXVzZXMgZ3VhcmFudGVlZCBzbGFzaCBwcm9jIG9uIGRpcmVjdCBjb250YWN0LiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3RhbGtpbmcgRmFuXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiQ2hhcmdlIEF0dGFjayAoZmluaXNoZXIgcHJvYykgb3IgRHlpbmcgTGlnaHRcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDZW50YXVyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9BcmNod2luZy9NZWxlZS9BcmNoc3dvcmRhbmRzaGllbGQvQXJjaFN3b3JkU2hpZWxkXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGFydCBzd29yZCwgcGFydCBzaGllbGQsIHRoZSBDZW50YXVyIGV4Y2VscyBhdCBjaGFyZ2luZyBoZWFkbG9uZyBpbnRvIGVuZW15IGZpcmUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyODAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNlbnRhdXIucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyODAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzJmL0FyY2hzd29yZGFuZHNoaWVsZC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMDI0MTQzNzMyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9DZW50YXVyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcInR5cGVcIjogXCJBcmNod2luZyBNZWxlZVwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDZXJhbWljIERhZ2dlclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvRGFnZ2VyL0NlcmFtaWNEYWdnZXJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgc2hvcnQgYmxhZGUgd2VhcG9uIHdhcyBidWlsdCB1c2luZyBjZXJhbWljLiBJdCBoYXMgbGltaXRlZCByYW5nZSBidXQgY29tZXMgb3V0IGZhc3QuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMDUsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDI5OTk5OSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNlcmFtaWMtZGFnZ2VyLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkRhZ2dlclwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0NlcmFtaWNfRGFnZ2VyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiU3BlZWRcIixcbiAgICAgIFwicmFua1wiOiA0Ny42NyxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3RpbmdpbmcgVGhvcm5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJDYXJ2aW5nIFNwaWtlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQ2VyYXRhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9JbmZlc3RlZC9NZWxlZS9HbGFpdmVzL1B1bmN0dXJlR2xhaXZlL1B1bmN0dXJlR2xhaXZlV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ0LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUd2lzdGVkIGFuZCB0b3J0dXJlZCBmcm9tIGV4cG9zdXJlIHRvIHRoZSBJbmZlc3RhdGlvbiwgdGhpcyBnbGFpdmUgYmVjb21lcyBhbiBhYnNvbHV0ZSBwcmVkYXRvciBpbiB0aGUgaGFuZHMgb2YgdGhlIHJpZ2h0IFRlbm5vLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTMyLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM2LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiY2VyYXRhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkdsYWl2ZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjQ0LjAgdG94aW5cIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlRocm93blwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2NhL1B1bmN0dXJlR2xhaXZlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEwMjgxNTUzMTFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0NlcmF0YVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJpbyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2Mi41OCxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQXN0cmFsIFR3aWxpZ2h0XCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiTW9ybmluZyBTdW5cIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDZXJub3NcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0Jvd3MvQW50bGVyQm93L0FudGxlckJvd1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyMjAsXG4gICAgICBcInRyaWdnZXJcIjogXCJDaGFyZ2VcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFdm9raW5nIHRoZSBkZXNpZ24gb2YgYW5jaWVudCBib3dzLCB0aGUgaGlnaCBpbXBhY3QgQ2Vybm9zIGlzIHBlcmZlY3QgZm9yIGh1bnRpbmcgZG93biBoaWdobHkgc2hpZWxkZWQgZW5lbWllcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTYuNjY2NjY2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjE1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJjZXJub3MucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQm93XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMTAuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAxOCxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYS9hYy9ERUNlcm5vcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwNTAzMjAyMDMzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9DZXJub3NcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDZXJub3MgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0Jvd3MvUHJpbWVDZXJub3MvUHJpbWVDZXJub3NcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzYwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQ2hhcmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBub2JsZSBib3cgdG8gaHVudCBoZWxsaXNoIGJlYXN0cy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTYuNjY2NjY2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiY2Vybm9zLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkJvd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxODAuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAzMCxcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzA2L0Nlcm5vc1ByaW1lLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjExMjMwMjAyMzNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Nlcm5vc19QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTYgMTEgMjJcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxOCAwOSAyNVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE4IDA5IDI1XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBBbHQgZmlyZSB0b2dnbGVzIGZpcmluZyBwYXR0ZXJuIGJldHdlZW4gaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgKCs1MCUgaGVhZHNob3QgZGFtYWdlKS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjMuNSxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDZXN0cmFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9QaXN0b2xzL0NvcnB1c01pbmlndW4vQ29ycHVzTWluaWd1blwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyNi4wMDAwMDIsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ29tcGFjdCBhbmQgZGVhZGx5LCB0aGUgQ2VzdHJhIGRpc2NoYXJnZXMgYm9sdHMgb2YgZW5lcmd5IGF0IGFuIGluY3JlYXNpbmdseSByYXBpZCByYXRlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAzMy4zMzMzMzIsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS41MixcbiAgICAgIFwiaXRlbUNvdW50XCI6IDEsXG4gICAgICBcInBhcmVudHNcIjogW1xuICAgICAgICBcIkR1YWwgQ2VzdHJhXCJcbiAgICAgIF0sXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiY2VzdHJhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjYuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogMTAwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzE2L0NvcnB1c01pbmlndW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDIyMTE5MTkzMVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQ2VzdHJhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL0dhbWUvS3Vicm93UGV0L1JldHJpZXZlckt1YnJvd1BldFBvd2VyU3VpdFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQ2hlc2EgS3Vicm93XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBLdWJyb3cgd2lsbCBkaXNhcm0gYWR2ZXJzYXJpZXMgYW5kIHJldHJpZXZlIHRoZSBzcG9pbHMgb2YgYmF0dGxlLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiQ29tcGFuaW9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNoZXNhLWt1YnJvdy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJLdWJyb3dcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiSW5jdWJhdG9yIFNlZ21lbnQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvQ2hlc2FfS3Vicm93XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0RyYWdvbi9EcmFnb25cIixcbiAgICAgIFwibmFtZVwiOiBcIkNocm9tYVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgbWFzdGVyIG9mIHRoZSBkZWFkbHkgZWxlbWVudHMsIENocm9tYSBjYW4gYWx0ZXIgaGlzIGRhbWFnZSBvdXRwdXQgYnkgY2hhbmdpbmcgaGlzIEVtaXNzaXZlIENvbG9yLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkNob3NlbiBFbWlzc2l2ZSBDb2xvciBkaWN0YXRlcyB0aGUgdHlwZSBvZiBFbGVtZW50YWwgRGFtYWdlIGRlYWx0IGJ5IEFiaWxpdGllcy5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNocm9tYS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDQxNDI2NDMsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIxNlwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzJkL0Nocm9tYU5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDMyNDAyMzQwNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQ2hyb21hXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGhlIE5ldyBTdHJhbmdlIChRdWVzdClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9EcmFnb24vQ2hyb21hUHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIkNocm9tYSBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJpbmQgdGhlIGVsZW1lbnRzIGFuZCB1bmxlYXNoIHVudG9sZCBkZXN0cnVjdGlvbiB3aXRoIENocm9tYSBQcmltZS4gRmVhdHVyaW5nIGFsdGVyZWQgbW9kIHBvbGFyaXRpZXMgZm9yIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJDaG9zZW4gRW1pc3NpdmUgQ29sb3IgZGljdGF0ZXMgdGhlIHR5cGUgb2YgRWxlbWVudGFsIERhbWFnZSBkZWFsdCBieSBBYmlsaXRpZXMuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJjaHJvbWEtcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDIyMzU2NzgsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIyMy45XCIsXG4gICAgICBcInNleFwiOiBcIk1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZjIvQ2hyb21hUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDkyNTE5MzYzNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQ2hyb21hX1ByaW1lXCIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxOCAwOSAyNVwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuL2FcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAyMCAwNyAyMVwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkNvYnJhICYgQ3JhbmVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkc0FuZEJvYXJkcy9QYWNpZmlzdFNoaWVsZEFuZFN3b3JkL1BhY2lmaXN0U2hpZWxkU3dvcmRcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCYXJ1dWsncyBzaWduYXR1cmUgd2VhcG9uczogYSBzd29yZCBmb3IgcmV0cmlidXRpb24sIGEgc2hpZWxkIGZvciByZXN0cmFpbnQuIEluIEJhcnV1aydzIGhhbmRzLCBhbmQgaGlzIGhhbmRzIG9ubHksIENvYnJhJ3MgZmlyc3Qgc3RyaWtlIGluIGEgY29tYm8gcmVuZGVycyBoaXMgZm9lIHVuY29uc2Npb3VzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogNDAwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNvYnJhLSYtY3JhbmUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU3dvcmQgYW5kIFNoaWVsZFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjEwMC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2IvYjEvQ29icmFfJTI2X0NyYW5lLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODEyMTkxNjU0MjdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0NvYnJhXyUyNl9DcmFuZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ3LjkyLFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiRmluYWwgSGFyYmluZ2VyXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiU3lzdGVtaWMgU2hyZWRcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDb252ZWN0cml4XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTG9uZ0d1bnMvQ3JwU3BsaXRMYXNlci9DcnBTcGxpdExhc2VyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI0LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiSGVsZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZW4gaXRzIHR3aW4tbGFzZXJzIGNvbnZlcmdlIG9uIGEgdGFyZ2V0IGEgY2lyY3VpdCBpcyBjcmVhdGVkLCBmcnlpbmcgdGhlIHN1YmplY3QuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDUwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDYsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNvbnZlY3RyaXgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjQuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiRGlzY2hhcmdlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzkvOWYvQ3JwU3BsaXRSaWZsZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUxMDAyMDkwMTQ0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Db252ZWN0cml4XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCBiZWFtIG11bml0aW9ucy4gUHJpbWFyeSBmaXJlIGJyaW5ncyB0aGUgYmVhbSBmcm9tIHdpZGUgdG8gbmFycm93IHdoaWxlIGFsdCBmaXJlIHN3ZWVwcyB0aGUgYmVhbS4gQWx0IGZpcmUgc3dlZXBzIHRoZSBiZWFtIGZyb20gbmFycm93IHRvIHdpZGUgaW5zdGVhZCBhbmQgaXMgdXNlZnVsIGZvciBhcHBseWluZyBzdGF0dXMgZWZmZWN0cyB0byBsYXJnZSBjcm93ZHMuIFtFZmZpY2llbnQgQmVhbXNdIG1ha2VzIDEwMCUgc3RhdHVzIG1vZGRpbmcgZWFzeSB3aGlsZSBjb25zdW1pbmcgbm8gYW1tbyB3aGlsZSBub3QgZGVhbGluZyBkYW1hZ2UuIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8ga2VlcCB0aGUgYmVhbSBuYXJyb3cgZm9yIG1heGltdW0gY29uY2VudHJhdGVkIGRhbWFnZSB3aXRob3V0IGh1cnRpbmcgYW1tbyBlY29ub215LiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1NCxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDb3JpbnRoXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9UbkhlYXZ5U2hvdGd1bi9UbkhlYXZ5U2hvdGd1bkd1blwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA1NDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGVsaXZlciBhIG1hc3NpdmUgcHVuY2ggd2l0aCBlYWNoIGJsYXN0IG9mIHRoaXMgc2hvdGd1biwgb3IgbGF1bmNoIGEgcm91bmQgdGhhdCBleHBsb2RlcyBtaWQtYWlyIGtub2NraW5nIGRvd24gbmVhcmJ5IGVuZW1pZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDkuMDkwOTA5LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuOTQ5OTk5OTksXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNvcmludGgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTQwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQWlyIEJ1cnN0IFByb2plY3RpbGVcIixcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiA0LFxuICAgICAgICBcImNyaXRfbXVsdFwiOiAxLjYsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLjMsXG4gICAgICAgIFwic2hvdF90eXBlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgICBcInNob3Rfc3BlZWRcIjogbnVsbCxcbiAgICAgICAgXCJpbXBhY3RcIjogMTAwXG4gICAgICB9LFxuICAgICAgXCJzZWNvbmRhcnlBcmVhXCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQWlyIEJ1cnN0IEV4cGxvc2lvblwiLFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogMjgsXG4gICAgICAgIFwicmFkaXVzXCI6IDgwMCxcbiAgICAgICAgXCJibGFzdFwiOiA0MDQsXG4gICAgICAgIFwiZGFtYWdlXCI6IFwiNDA0LjAgYmxhc3RcIlxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zMi9UbkhlYXZ5U2hvdGd1bi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcxMjIxMjE0NDMzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Db3JpbnRoXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBBbHQgZmlyZSBpcyB1c2VmdWwgd2hlbiB0aGUgcmVsb2FkIGJ1dHRvbiBpcyBoYXJkZXIgdG8gcmVhY2ggdGhhbiB0aGUgc2Vjb25kYXJ5IGZpcmUgYnV0dG9uLiBSZWxvYWQgc2hvdWxkIGJlIGRvbmUgd2hlbiBjbGlwIGlzIGVtcHR5IGFzIHRoZXJlIGlzIGEgZGVsYXkgYmV0d2VlbiByZWxvYWRpbmcgYW5kIGZpcmluZywgYnV0IHRoZSBnYWlucyBzaG91bGQgYmUgbWluaW1hbC4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXRpY2FsXCIsXG4gICAgICBcInJhbmtcIjogNTUuNSxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDb3J2YXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FyY2h3aW5nL1ByaW1hcnkvTGF1bmNoR3JlbmFkZS9BcmNoQ2Fubm9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDg0MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZW4gZnVsbHkgY2hhcmdlZCwgdGhpcyBmbGFrLWNhbm5vbiBkZWxpdmVycyBhIGRldmFzdGF0aW5nIHNob3QuIFBlcmZlY3QgZm9yIHRha2luZyBkb3duIGZhc3QtbW92aW5nIGludGVyY2VwdG9ycy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogOS4wOTA5MDksXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIkFyY2h3aW5nIEd1blwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJjb3J2YXMucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MjAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJzdGF0dXNDaGFuY2VcIjogMTAsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzIvMjEvQXJjaExhdW5jaEdyZW5hZGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTAyNDE0MzczNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQ29ydmFzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkNyb251c1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvQ3JvbnVzU3dvcmQvQ3JvbnVzTG9uZ1N3b3JkXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHN0cm9uZyBibGFkZSBmb3JnZWQgdXNpbmcgY2VyYW1pYy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE0MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40OCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNyb251cy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTd29yZFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNy83NS9Dcm9udXMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDQyNjA4MDYxNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQ3JvbnVzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ2FwdGFpbiBWb3IgKEJvc3MpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogODMuNzQsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3dvb3BpbmcgRmFsY29uXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQ3JpbXNvbiBEZXJ2aXNoJ3MgQ29pbGluZyBJbXBhbGU6ICtEUFMgLXByb2NcIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXZpbmcgS2VzdHJlbFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkNyeW90cmFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9GcmllbmRseS9QZXRzL01vYVBldHMvTW9hUGV0Q29tcG9uZW50cy9DcnlveGlvbldlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkhlbGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFbWl0cyBhIHJheSBvZiBzdWItemVybyBlbmVyZ3kuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEyLjUsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImNyeW90cmEucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMC4wIGNvbGRcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkRpc2NoYXJnZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2ZhL0NyeW90cmEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MTExMDIyMDYwMFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQ3J5b3RyYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkxlZ3MgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQ3lhbmV4XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvUGlzdG9scy9DcnBTZW50QW1hbGdQaXN0b2wvQ3JwU2VudEFtYWxnUGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDkxLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNlbnRpZW50IHRlY2ggbWVyZ2VzIHdpdGggQ29ycHVzIGRlc2lnbiB0byBkZWxpdmVyIHRoaXMgbGV0aGFsIHNpZGVhcm0uIEZ1bGx5IGF1dG9tYXRpYywgaXQgZmlyZXMgcmljb2NoZXRpbmcsIGhvbWluZyBwcm9qZWN0aWxlcyB0aGF0IHJlbGVhc2Ugc21hbGwgY2xvdWRzIG9mIEdhcyBvbiBpbXBhY3QuIEFsdC1maXJlIHRvIHJlbGVhc2UgdGhlIGVudGlyZSBjbGlwIHdpdGhvdXQgaG9taW5nIGFzIGEgc2luZ2xlIGJ1cnN0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxLjgxODE4MTksXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJjeWFuZXgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MS4wIGdhc1wiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJCdXJzdCBNb2RlXCIsXG4gICAgICAgIFwic3BlZWRcIjogMTAuMDUsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogOCxcbiAgICAgICAgXCJjcml0X211bHRcIjogMS40LFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogMC4zLFxuICAgICAgICBcInNob3RfdHlwZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgICAgXCJpbXBhY3RcIjogMi45LFxuICAgICAgICBcInNsYXNoXCI6IDM4LjksXG4gICAgICAgIFwicHVuY3R1cmVcIjogMzAuMlxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zNi9DeWFuZXgucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE5MDUyMzIzNDkwN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvQ3lhbmV4XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgIHByb2plY3RpbGUgbXVuaXRpb25zLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTQuMyxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJDeWF0aCBTdHJpa2VcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL09zdHJvbi9NZWxlZS9Nb2R1bGFyTWVsZWUwMS9UaXAvVGlwRm91clwiLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiY3lhdGgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiWmF3XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkhvaydzIEFudmlsIChDZXR1cylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9DeWF0aF9TdHJpa2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiQ3ljcm9uXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvUGlzdG9scy9DcnBDaGFyZ2VHdW4vQ3JwQ2hhcmdlR3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIzLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiSGVsZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvcmdvIGFtbXVuaXRpb24gd2l0aCB0aGUgcmVnZW5lcmF0aW5nIGVuZXJneSBkaXNjIGluIHRoaXMgcGxhc21hIHRocm93aW5nIHBpc3RvbC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTUsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiY3ljcm9uLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTAuMCByYWRpYXRpb25cIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkRpc2NoYXJnZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzY2L0N5Y3Jvbi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwNDI2MjIzNzE2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9DeWNyb25cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJFbmVyZ3kgTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vZGVyYXRlIERQUywgIGJlYW0gbXVuaXRpb25zLiBEb2VzIG5vdCBoYXZlIGFuIGFtbW8gcmVzZXJ2ZS4gQW1tbyBpbiBjbGlwIHJlZ2VuZXJhdGVzIG92ZXIgdGltZSB3aGVuIG5vdCBmaXJpbmcuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA3NS45LFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkN5bmdhc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQXJjaHdpbmcvUHJpbWFyeS9BcmNoQnVyc3RHdW4vQXJjaEJ1cnN0R3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkJ1cnN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVW5sb2FkIGRlYWRseSBhY2N1cmF0ZSBidXJzdHMgb2YgbWF5aGVtLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAzMy4zMzMzMzIsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJjeW5nYXMucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyMDAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzJmL0FyY2hCdXJzdEd1bi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwNzEwMTc1MTQ2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9DeW5nYXNcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwidHlwZVwiOiBcIkFyY2h3aW5nIEd1blwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEYWlreXVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0Jvd3MvQXN5bWV0cmljYWxCb3cvQXN5bWV0cmljYWxCb3dcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDYwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQ2hhcmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGFpa3l1IHRha2VzIGdyZWF0IHN0cmVuZ3RoIHRvIGRyYXcgYmFjaywgYnV0IHByb3ZpZGVzIGFkZGVkIHBvd2VyIGFuZCByYW5nZSB0byBldmVyeSBzaG90LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNi42NjY2NjYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIlNpbGVudFwiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImRhaWt5dS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJCb3dcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiA0NjAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiA1MCxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yMy9Bc3ltbWV0cmljQm93LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA1MTIyMzI3MjdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0RhaWt5dVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogODQuMyxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEYWtyYSBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvQ3JvbnVzU3dvcmQvUHJpbWVDcm9udXNMb25nU3dvcmRcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNjAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBEYWtyYSBQcmltZSBpcyBhIFRlbm5vIGZvcmdlZCB3ZWFwb24sIGNyYWZ0ZWQgZHVyaW5nIHRoZSB0aW1lIG9mIHRoZSBPcm9raW4uIEl0IGlzIHJlbm93bmVkIGZvciBzcGVlZCwgcG93ZXIgYW5kIHRoZSBhYmlsaXR5IHRvIGhpdCBtdWx0aXBsZSB0YXJnZXRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjQwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjE1LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZGFrcmEtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU3dvcmRcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjYwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84Lzg2L1N3b3JkUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDkxNDExMTQwNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRGFrcmFfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDEzIDA5IDEzXCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTUgMDcgMDdcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxNSAwNyAwN1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDYwLjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlN3b29waW5nIEZhbGNvblwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIkRpdmluZyBLZXN0cmVsXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGFyayBEYWdnZXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0RhZ2dlci9EYXJrRGFnZ2VyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGlzIHNob3J0IGJsYWRlIHdlYXBvbiBmb3JnZWQgdXNpbmcgZGFyayBtZXRhbHMgaGFzIGxpbWl0ZWQgcmFuZ2UgYnV0IGNvbWVzIG91dCBmYXN0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTA1LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjUxOTk5OTk4LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZGFyay1kYWdnZXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRGFnZ2VyXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzUuMCByYWRpYXRpb25cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wYi9EYXJrRGFnZ2VyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjExMDYwNjA3MTJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0RhcmtfRGFnZ2VyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTmlnaHR3YXZlXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGFyayBTcGxpdC1Td29yZFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU3dvcmRzL0RhcmtTd29yZC9EYXJrU3dvcmREYWdnZXJIeWJyaWRXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVc2UgYXMgYSBkZXZhc3RhdGluZyBoZWF2eSBzd29yZCBvciBhcHBseSBhIER1YWwgTWVsZWUgc3RhbmNlIGFuZCBzcGxpdCB0aGUgd2VhcG9uIGludG8gdHdvIGZlcm9jaW91cyBibGFkZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjIxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZGFyay1zcGxpdC1zd29yZC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJNZWxlZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDM4LjY5LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9uc3Ryb3VzIERQUywgdmVyeSBoaWdoIGF0dGFjayBzcGVlZC4gSGVhdnkgYmxhZGUgbW9kZSBpcyBzZXZlcmVseSB1bmRlcnBvd2VyZWQuIOKcqlwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDYXJ2aW5nIE1hbnRpc1wiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIkFsdCBjb21ibz0gQml0aW5nIE1hbmRpYmxlczsgLURQUywgK2V4ZWN1dGlvblwiLFxuICAgICAgXCJjb21ib1wiOiBcIkRpcmUgQ291cnRzaGlwXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvRGFya19TcGxpdC1Td29yZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEYXJrIFN3b3JkXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvRGFya1N3b3JkL0RhcmtMb25nU3dvcmRcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzcsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgYmxhZGUgZm9yZ2VkIHVzaW5nIGRhcmsgbWV0YWxzLCBjYXBhYmxlIG9mIGRlbGl2ZXJpbmcgaW5uYXRlIDxEVF9SQURJQVRJT04+UmFkaWF0aW9uIERhbWFnZSB3aXRoIGF0dGFja3MuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNDgsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDgsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkYXJrLXN3b3JkLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN3b3JkXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzcuMCByYWRpYXRpb25cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYy9jNi9EYXJrU3dvcmQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTEwNjA2MDkyOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRGFya19Td29yZFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk5pZ2h0d2F2ZVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDg2Ljk5LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgdmVyeSBsb3cgYXR0YWNrIHNwZWVkLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3dvb3BpbmcgRmFsY29uXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQ3JpbXNvbiBEZXJ2aXNoJ3MgQ29pbGluZyBJbXBhbGU6ICtEUFMgLXByb2NcIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXZpbmcgS2VzdHJlbFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkRlY29uc3RydWN0b3JcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9TZW50aW5lbHMvU2VudGluZWxXZWFwb25zL1NlbnRHbGFpdmVXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDYXVzZXMgdGhlIEhlbGlvcyBTZW50aW5lbCB0byBhdHRhY2sgZW5lbXkgdGFyZ2V0cyB1c2luZyBwaWVjZXMgb2YgaXRzZWxmLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImRlY29uc3RydWN0b3IucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI1MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTEvU2VudGluZWxHbGFpdmVXZWFwb24ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDQyMjAwMTQxM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRGVjb25zdHJ1Y3RvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNvbWVzIHdpdGggQ29tcGFuaW9uXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGVjb25zdHJ1Y3RvciBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFdlYXBvbnMvRGVjb25zdHJ1Y3RvclByaW1lL1ByaW1lSGVsaW9zR2xhaXZlV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDc1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQWxsb3dzIHRoZSBIZWxpb3MgUHJpbWUgdG8gdmlvbGVudGx5IGRpc2Fzc2VtYmxlIGFuZCB0dXJuIGl0c2VsZiBpbnRvIGEgZGVhZGx5IHByb2plY3RpbGUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogdHJ1ZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbCBXZWFwb25cIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZGVjb25zdHJ1Y3Rvci1wcmltZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzUuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy85LzlmL0RlY29uc3RydWN0b3JQcmltZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwMjIyMjE0NzE0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EZWNvbnN0cnVjdG9yX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ29tZXMgd2l0aCBDb21wYW5pb25cIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEZWh0YXQgU3RyaWtlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Pc3Ryb24vTWVsZWUvTW9kdWxhck1lbGVlMDEvVGlwL1RpcEZpdmVcIixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImRlaHRhdC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJaYXdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiSG9rJ3MgQW52aWwgKENldHVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL0RlaHRhdF9TdHJpa2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGVyYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ2xhblRlY2gvRW5lcmd5L0VuZXJneVJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBERVJBIGlzIGEgcmVwZWF0ZXIgdGhhdCBmaXJlcyBzdXBlci1oZWF0ZWQgcGxhc21hLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkZXJhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMC4wXCIsXG4gICAgICBcImZsaWdodFwiOiAxMDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTMvQ29ycHVzRW5lcmd5UmlmbGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTEyNTIzNDQ1N1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRGVyYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkVuZXJneSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGVyYSBWYW5kYWxcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NsYW5UZWNoL0VuZXJneS9EZXJhVmFuZGFsXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMyLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgY3VzdG9taXplZCB2ZXJzaW9uIG9mIHRoZSBEZXJhLCBmZWF0dXJpbmcgYSBtZXRhbGxpYyBmaW5pc2ggYW5kIExvdHVzIGRlY2FsLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkZXJhLXZhbmRhbC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMi4wXCIsXG4gICAgICBcImZsaWdodFwiOiAxMDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzIvMjcvRGVyYVZhbmRhbC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYxMTI2MDAwMjQyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EZXJhX1ZhbmRhbFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkludmFzaW9uc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA4Ny4yLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkRlc3BhaXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Rocm93aW5nV2VhcG9ucy9TdGFsa2VyS3VuYWlcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTgsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXNlZCBieSBUaGUgU3RhbGtlciwgRGVzcGFpciB0aHJvd2luZyBibGFkZXMgaGF2ZSBhIG1vbm8tZmlsYW1lbnQgZWRnZSwgc2hhcnAgZW5vdWdoIHRvIHBlbmV0cmF0ZSBhIFdhcmZyYW1lLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIlNpbGVudFwiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkZXNwYWlyLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRocm93blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTguMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzIvMjUvRGVzcGFpci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwMzA0MDYyMjQwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EZXNwYWlyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiU3RhbGtlclwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMTIwLjMsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGVzdHJlemFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkcy9Ubm9SYXBpZXIvVG5vUmFwaWVyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDc1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFbGV2YXRlIG1hcnRpYWwgY29tYmF0IGludG8gYW4gYXJ0IGZvcm0gd2l0aCB0aGlzIFRlbm5vIHJhcGllci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDMwMCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xNCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImRlc3RyZXphLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJhcGllclwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjc1LjFcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNS81Yy9Ubm9SYXBpZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDEyMDEyNDAzNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRGVzdHJlemFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGVzdHJlemEgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkcy9QUmFwaWVyL0Rlc3RyZXphUHJpbWVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzYsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRha2UgbWFzdGVyeSB0byB0aGUgbmV4dCBsZXZlbCB3aXRoIHRoaXMgcHJpbWVkIHJhcGllci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDMwNCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTQsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkZXN0cmV6YS1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSYXBpZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjc2LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xZi9EZXN0cmV6YVByaW1lLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA2MTkxOTE1NDlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Rlc3RyZXphX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxOCAwNiAxOVwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuL2FcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAyMCAwNCAxN1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiAzOC4yMyxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIG1vbnN0cm91cyBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIOKcqlwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJWdWxwaW5lIE1hc2tcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IER1ZWwgU2VjcmV0czogLURQUyArZXhlY3V0aW9uXCIsXG4gICAgICBcImNvbWJvXCI6IFwiSGlkZGVuIEZsb3VyaXNoXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGV0aCBNYWNoaW5lIFJpZmxlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvU2VudGluZWxzL1NlbnRpbmVsV2VhcG9ucy9EZXRoTWFjaGluZVJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3RhbmRhcmQgaXNzdWUgd2VhcG9ucnkgc2lnbmF0dXJlIHRvIERldGhjdWJlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ1NSxcbiAgICAgIFwidHlwZVwiOiBcIlNlbnRpbmVsIFdlYXBvblwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkZXRoLW1hY2hpbmUtcmlmbGUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI1LjFcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZi9mMi9ERVNlbnRpbmVsRGV0aE1hY2hpbmVSaWZsZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMTIyMTU0MjI4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EZXRoX01hY2hpbmVfUmlmbGVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDb21lcyB3aXRoIENvbXBhbmlvblwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9TZW50aW5lbHMvU2VudGluZWxQb3dlcnN1aXRzL0RldGhDdWJlUG93ZXJTdWl0XCIsXG4gICAgICBcIm5hbWVcIjogXCJEZXRoY3ViZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggJ0Fzc2F1bHQgTW9kZScgYW5kICdWYXBvcml6ZScgYXMgZGVmYXVsdCBwcmVjZXB0cywgRGV0aGN1YmUgYWN0cyBleGFjdGx5IGFzIGFkdmVydGlzZWQsIGFzIGEgYmFkYXNzIGN1YmUgb2YgJ2RldGgnLiBDb21lcyBsb2FkZWQgd2l0aCBEZXRoIE1hY2hpbmUgUmlmbGUgd2VhcG9uLk5vdGU6IFRoaXMgaXRlbSByZXF1aXJlcyB0d28gb3BlbiBzbG90cy5cIixcbiAgICAgIFwidHlwZVwiOiBcIlNlbnRpbmVsXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImRldGhjdWJlLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvRGV0aGN1YmVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGV0cm9uXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvUGlzdG9scy9Db3JwdXNIYW5kU2hvdGd1bi9Db3JwdXNIYW5kQ2Fubm9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgc2xlZWsgbGluZXMgb2YgdGhlIERldHJvbiBjb25jZWFsIGl0cyBmZXJvY2lvdXMgbmF0dXJlLiBUaGUgaGFuZCBjYW5ub24ncyBzZW1pLWF1dG9tYXRpYyBhY3Rpb24gdGFrZXMgZG93biBlbmVtaWVzIHdpdGggc3BlZWQgYW5kIGVmZmljaWVuY3kuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDcuMTQyODU3MSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImRldHJvbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuIFNpZGVhcm1cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjI4MC4wIHJhZGlhdGlvblwiLFxuICAgICAgXCJmbGlnaHRcIjogMTUwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2ZkL0RFQ29ycHVzSGFuZENhbm5vbi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMTE2MTUzNTA2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EZXRyb25cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGV4IERha3JhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvRGV4VGhlU2Vjb25kL0RleFRoZVNlY29uZFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBnaWZ0IGZyb20gdGhlIExvdHVzIHRvIGNvbW1lbW9yYXRlIHRoZSBhbm5pdmVyc2FyeSBvZiB0aGUgZmlyc3QgVGVubm8gd2FraW5nIGZyb20gQ3J5byBzdGFzaXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyNjAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkZXgtZGFrcmEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBTd29yZHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI2NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2UvZTkvRGV4RGFrcmEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDQyMzE4NDQ1NVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRGV4X0Rha3JhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQW5uaXZlcnNhcnlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQyLjk3LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2FydmluZyBNYW50aXNcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IEJpdGluZyBNYW5kaWJsZXM7IC1EUFMsICtleGVjdXRpb25cIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXJlIENvdXJ0c2hpcFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkRleCBGdXJpc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9scy9EZXhGdXJpcy9EZXhGdXJpc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxNixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGdpZnQgZnJvbSB0aGUgTG90dXMgdG8gY29tbWVtb3JhdGUgdGhlIGFubml2ZXJzYXJ5IG9mIHRoZSBmaXJzdCBUZW5ubyB3YWtpbmcgZnJvbSBDcnlvIHN0YXNpcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTUuMzg0NjE1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM5LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImRleC1mdXJpcy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjE2LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zMy9EZXhGdXJpcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwNjA2MDExMjE4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EZXhfRnVyaXNcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJBbm5pdmVyc2FyeVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vZGVyYXRlIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBEZXNwaXRlIGJlaW5nIGNhbGxlZCB0aGUgRnVyaXMsIGl0IHVzZXMgdGhlIEFmdXJpcyByaXZlbi4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDc3LjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRGV4IFN5YmFyaXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL0RleFRoZVRoaXJkL0RleFRoZVRoaXJkXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDc1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQnVyc3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGdpZnQgZnJvbSB0aGUgTG90dXMgdG8gY29tbWVtb3JhdGUgdGhlIHRoaXJkIGFubml2ZXJzYXJ5IG9mIHRoZSBmaXJzdCBUZW5ubyB3YWtpbmcgZnJvbSBDcnlvIHN0YXNpcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjguNTcxNDI4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMDUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImRleC1zeWJhcmlzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI3NS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzEvMTIvRGV4U3liYXJpcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMzA3MDIyODU5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EZXhfU3liYXJpc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkFubml2ZXJzYXJ5XCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFBvd2Vyc3VpdHMvQXJjRHJvbmVQb3dlclN1aXRcIixcbiAgICAgIFwibmFtZVwiOiBcIkRpcmlnYVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRpcmlnYSBzaG9ja3MgbmVhcmJ5IGVuZW1pZXMsIGFuZCBwaWNrcyBvZmYgZGlzdGFudCB0aHJlYXRzLCB1dGlsaXppbmcgdGhlIFZ1bGtsb2sgc25pcGVyIHJpZmxlIGFuZCB0aGUgJ0NhbGN1bGF0ZWQgU2hvdCcsICdBcmMgQ29pbCcgYW5kICdFbGVjdHJvIFB1bHNlJyBwcmVjZXB0cy5Ob3RlOiBUaGlzIGl0ZW0gcmVxdWlyZXMgdHdvIG9wZW4gc2xvdHMuXCIsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkaXJpZ2EucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9EaXJpZ2FcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFBvd2Vyc3VpdHMvR3ViYmVyUG93ZXJTdWl0XCIsXG4gICAgICBcIm5hbWVcIjogXCJEamlublwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggJ1RodW1wZXInIGFuZCAnRmF0YWwgQXR0cmFjdGlvbicgYXMgZGVmYXVsdCBQcmVjZXB0cywgRGppbm4gaXMgYSBjb21iYXQgU2VudGluZWwuIERqaW5uIGFsc28gY29tZXMgd2l0aCBhIHBvaXNvbiBkYXJ0IHdlYXBvbi5Ob3RlOiBUaGlzIGl0ZW0gcmVxdWlyZXMgdHdvIG9wZW4gc2xvdHMuXCIsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkamlubi5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmlvIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9EamlublwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEb2tyYWhtIFN0cmlrZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvT3N0cm9uL01lbGVlL01vZHVsYXJNZWxlZTAyL1RpcC9UaXBFbGV2ZW5cIixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImRva3JhaG0ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiWmF3XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkhvaydzIEFudmlsIChDZXR1cylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9Eb2tyYWhtX1N0cmlrZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEcmFnb24gTmlrYW5hXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvS2F0YW5hQW5kV2FraXphc2hpL0xvd0thdGFuYVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA4NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIERyYWdvbiBOaWthbmEgaXMgZm9yZ2VkIGZyb20gYW5jaWVudCBUZW5ubyBzdGVlbC4gVGhpcyBpcyBhIG1hc3RlcidzIHdlYXBvbiwgb25seSB0aGUgbW9zdCB3b3J0aHkgb2YgVGVubm8gbWF5IHdpZWxkIGl0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTgyLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZHJhZ29uLW5pa2FuYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJOaWthbmFcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI4NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvMzkvRHJhZ29uS2F0YW5hLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDA0MTUyMjExMzRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0RyYWdvbl9OaWthbmFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU0LjI4LFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkRlY2lzaXZlIEp1ZGdlbWVudFwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlNpbGVudCBBY3VtZW5cIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEcmFrZ29vblwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9HcmluZWVyRmxha0Nhbm5vbi9GbGFrQ2Fubm9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDcwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBEcmFrZ29vbiBmbGFrIGNhbm5vbiBzZW5kcyB2b2xsZXlzIG9mIGludGVuc2VseSBob3Qgc2hyYXBuZWwgcmljb2NoZXRpbmcgYXJvdW5kIHRoZSByb29tLiBDYW4gYmUgZmlyZWQgaW4gd2lkZSBvciBjb25jZW50cmF0ZWQgYnVyc3RzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxLjQyODU3MTUsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDUsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40OCxcbiAgICAgIFwiaXRlbUNvdW50XCI6IDEsXG4gICAgICBcInBhcmVudHNcIjogW1xuICAgICAgICBcIlphcnJcIlxuICAgICAgXSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZHJha2dvb24ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDAwLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDEwMCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwic3RhdHVzQ2hhbmNlXCI6IDIzLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83Lzc1L0dyaW5lZXJGbGFrQ2Fubm9uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjExMTcwMjMwMzJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0RyYWtnb29uXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiUmF3XCIsXG4gICAgICBcInJhbmtcIjogMTAzLjgsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEcmVhZFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQm93cy9TdGFsa2VyQm93XCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRyZWFkIGlzIHRoZSBjYWxsaW5nIGNhcmQgb2YgVGhlIFN0YWxrZXIuIEl0IGZpcmVzIGFycm93cyB0aGF0IGNhbiBkZWNhcGl0YXRlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNi42NjY2NjYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIlNpbGVudFwiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZHJlYWQucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQm93XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMzAuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAyMCxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yMC9EcmVhZDIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDQxODE1MTM1MlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRHJlYWRcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJTdGFsa2VyXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiA3MSxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEdWFsIENlc3RyYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL1Bpc3RvbHMvQ29ycHVzTWluaWd1bi9EdWFsQ29ycHVzTWluaWd1blwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyNi4wMDAwMDIsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2llbGQgdHdvIENlc3RyYXMgdG8gdW5sZWFzaCBhIGR1YWwgdG9ycmVudCBvZiBoaWdoIGVuZXJneSBib2x0cy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImR1YWwtY2VzdHJhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjYuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogMTAwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzRlL0R1YWxDb3JwdXNNaW5pZ3VuLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDAyMDYwNjE5NThcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0R1YWxfQ2VzdHJhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEdWFsIENsZWF2ZXJzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL01lbGVlL0dyaW5lZXJNYWNoZXR0ZUFuZENsZWF2ZXIvRHVhbENsZWF2ZXJXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJ1dGNoZXIgeW91ciBmb2VzIHdpdGggYnJ1dGFsIGJsYWRlcyBpbiBlYWNoIGhhbmQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkdWFsLWNsZWF2ZXJzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgU3dvcmRzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzQzL0R1YWxfQ2xlYXZlcnMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDgwMzEyMTk0OVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRHVhbF9DbGVhdmVyc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkR1YWwgRGVjdXJpb25cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FyY2h3aW5nL1ByaW1hcnkvQXJjaHdpbmdIZWF2eVBpc3RvbHMvQXJjaEhlYXZ5UGlzdG9sc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZWxpdmVyaW5nIHR3aW4gc3RyZWFtcyBvZiBoaWdobHkgYWNjdXJhdGUsIHJhcGlkLWZpcmUgb3JkbmFuY2UsIHRoZSBEZWN1cmlvbiBhcmUgc3BlY2lmaWNhbGx5IGRlc2lnbmVkIGZvciBjb21iYXQgaW4gdGhlIHZhY3V1bSBvZiBzcGFjZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImR1YWwtZGVjdXJpb24ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI2MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzUvNWYvQXJjaEhlYXZ5UGlzdG9scy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI3MTgxOTI0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EdWFsX0RlY3VyaW9uXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInR5cGVcIjogXCJBcmNod2luZyBHdW5cIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRHVhbCBFdGhlclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvRHVhbFNob3J0U3dvcmQvRHVhbEV0aGVyU3dvcmRcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZhc3QgYW5kIHByZWNpc2UuIFRoZSBEdWFsIEV0aGVyIGN1dHMgc28gY2xlYW5seSB0aGF0IGl0IHdhcyBjb25zaWRlcmVkIGJ5IHRoZSBUZW5ubyB0byBiZSBhIG1vcmUgaHVtYW5lIHdlYXBvbiBmb3Ig4oCYY2xlYW5zaW5n4oCZIGluZmVzdGVkIGFsbGllcy4gQ2FwYWJsZSBvZiBoaXR0aW5nIG11bHRpcGxlIHRhcmdldHMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNjAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkdWFsLWV0aGVyLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgU3dvcmRzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRHVhbF9FdGhlclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1OS4wMixcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDYXJ2aW5nIE1hbnRpc1wiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIkFsdCBjb21ibz0gQml0aW5nIE1hbmRpYmxlczsgLURQUywgK2V4ZWN1dGlvblwiLFxuICAgICAgXCJjb21ib1wiOiBcIkRpcmUgQ291cnRzaGlwXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRHVhbCBIZWF0IFN3b3Jkc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvRHVhbFNob3J0U3dvcmQvRHVhbEhlYXRTd29yZHNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggYSBIZWF0IFN3b3JkIGluIGVhY2ggaGFuZCwgZW5lbWllcyByZWFjaCB0aGVpciBmaWVyeSBkZW1pc2UgdHdpY2UgYXMgZmFzdC4gQ2FuIGNvbm5lY3Qgd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGF0IG9uY2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxODAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDQwMDAwMSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImR1YWwtaGVhdC1zd29yZHMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBTd29yZHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvMzkvRHVhbEhlYXQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDIxMzA2MDQyOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRHVhbF9IZWF0X1N3b3Jkc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU3LjQzLFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb2RlcmF0ZSBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFNsYW0gYXR0YWNrcyBwcm9jcyBIZWF0IGluIGFuIEFPRS4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNhcnZpbmcgTWFudGlzXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQWx0IGNvbWJvPSBCaXRpbmcgTWFuZGlibGVzOyAtRFBTLCArZXhlY3V0aW9uXCIsXG4gICAgICBcImNvbWJvXCI6IFwiRGlyZSBDb3VydHNoaXBcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEdWFsIEljaG9yXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9BeGUvRHVhbEluZmVzdGVkQXhlc1dlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGZhc3QgYW5kIGJydXRhbCBEdWFsIEljaG9yIGF4ZXMgd2lsbCBxdWlja2x5IHRlYXIgdGhyb3VnaCBlbmVtaWVzIHdpdGggYSBoaWdoIHByb2JhYmlsaXR5IG9mIGluZmxpY3RpbmcgQ3JpdGljYWwgRGFtYWdlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTQwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjE2LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZHVhbC1pY2hvci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFN3b3Jkc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1LjAgdG94aW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNS81MS9EdWFsSW5mZXN0ZWRBeGVzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA5MTQxMTE0MDBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0R1YWxfSWNob3JcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJCaW8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAzMS45NyxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgaGlnaCBhdHRhY2sgc3BlZWQuIFRpZXMgd2l0aCBOYW1pIFNreWxhIFByaW1lLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2FydmluZyBNYW50aXNcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IEJpdGluZyBNYW5kaWJsZXM7IC1EUFMsICtleGVjdXRpb25cIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXJlIENvdXJ0c2hpcFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkR1YWwgS2FtYXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0R1YWxLYW1hcy9EdWFsS2FtYXNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDIsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpZWxkaW5nIGEgS2FtYSBpbiBlYWNoIGhhbmQgYnJpbmdzIGEgc2F2YWdlIGFtb3VudCBvZiA8RFRfU0xBU0g+U2xhc2ggRGFtYWdlIHRvIGJlYXIgYWdhaW5zdCB5b3VyIGVuZW1pZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNjgsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODEsXG4gICAgICBcIml0ZW1Db3VudFwiOiAxLFxuICAgICAgXCJwYXJlbnRzXCI6IFtcbiAgICAgICAgXCJEdWFsIFJhemFcIlxuICAgICAgXSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImR1YWwta2FtYXMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBTd29yZHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0Mi4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZjkvREVEdWFsS2FtYXMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEyNDE4MTE1N1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRHVhbF9LYW1hc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkR1YWwgS2FtYXMgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1ByaW1lRHVhbEthbWFzL1ByaW1lRHVhbEthbWFzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDcwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgc2Vuc3VhbCBsaW5lcyBvZiB0aGVzZSBnb2xkZW4gS2FtYXMgaGF2ZSBsb25nIGJlZW4gY2VsZWJyYXRlZCBhcyBhIG1hc3Rlcndvcmsgb2YgVGVubm8gd2VhcG9uIHNtaXRoaW5nLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjgwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjgxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZHVhbC1rYW1hcy1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFN3b3Jkc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzUvNWIvRHVhbEthbWFzUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MTAxNTE1MDkzMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRHVhbF9LYW1hc19QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTUgMTAgMDZcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNyAwOCAyOVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE3IDA4IDI5XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAzNyxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgdmVyeSBoaWdoIGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNhcnZpbmcgTWFudGlzXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQWx0IGNvbWJvPSBCaXRpbmcgTWFuZGlibGVzOyAtRFBTLCArZXhlY3V0aW9uXCIsXG4gICAgICBcImNvbWJvXCI6IFwiRGlyZSBDb3VydHNoaXBcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJEdWFsIEtlcmVzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvUXVpbGxTd29yZC9RdWlsbER1YWxTd29yZHNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDQsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRlYXIgdGhyb3VnaCBhbnkgdGFyZ2V0IHdpdGggdGhlc2UgdmljaW91cywgY2xhdy1saWtlIGJsYWRlcy4gVGhlIHNpZ25hdHVyZSBzd29yZHMgb2YgS2hvcmEuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNzYsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDgsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkdWFsLWtlcmVzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgU3dvcmRzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDQuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzBlL0R1YWxLZXJlcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwNDE3MTg0MzA3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EdWFsX0tlcmVzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiAzMS40NyxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgdmVyeSBoaWdoIGF0dGFjayBzcGVlZC4gR29vZCBiYWxhbmNlIG9mIHNwZWVkIGFuZCBjcml0LiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2FydmluZyBNYW50aXNcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IEJpdGluZyBNYW5kaWJsZXM7IC1EUFMsICtleGVjdXRpb25cIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXJlIENvdXJ0c2hpcFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkR1YWwgUmF6YVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU29tYS9Tb21hRHVhbEthbWFzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ4LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJSYXpvciBzaGFycCBiYXR0bGUtaGF0Y2hldHMsIGRlc2lnbmVkIHRvIGNvbXBsaW1lbnQgdGhlIFNvbWEuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxOTIsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImR1YWwtcmF6YS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFN3b3Jkc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjQ4LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNC80ZC9Tb21hRHVhbEthbWFzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA0MDgyMjM3MjFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0R1YWxfUmF6YVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXRpY2FsXCIsXG4gICAgICBcInJhbmtcIjogNDEuNTcsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vbnN0cm91cyBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIOKcqlwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDYXJ2aW5nIE1hbnRpc1wiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIkFsdCBjb21ibz0gQml0aW5nIE1hbmRpYmxlczsgLURQUywgK2V4ZWN1dGlvblwiLFxuICAgICAgXCJjb21ib1wiOiBcIkRpcmUgQ291cnRzaGlwXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRHVhbCBTa2FuYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvRHVhbFNob3J0U3dvcmQvRHVhbFNob3J0U3dvcmRcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzIsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgc2hvcnRlciBTa2FuYSBpbiBlYWNoIGhhbmQuIENhbiBoaXQgbXVsdGlwbGUgdGFyZ2V0cy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDEyOCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40OCxcbiAgICAgIFwiaXRlbUNvdW50XCI6IDEsXG4gICAgICBcInBhcmVudHNcIjogW1xuICAgICAgICBcIkFramFnYXJhXCIsXG4gICAgICAgIFwiRGFyayBTcGxpdC1Td29yZFwiLFxuICAgICAgICBcIlJlZGVlbWVyXCJcbiAgICAgIF0sXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkdWFsLXNrYW5hLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgU3dvcmRzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzIuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2Y4L0R1YWxTa2FuYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMjIxMTQzODMyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EdWFsX1NrYW5hXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDY1LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgdmVyeSBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2FydmluZyBNYW50aXNcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IEJpdGluZyBNYW5kaWJsZXM7IC1EUFMsICtleGVjdXRpb25cIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXJlIENvdXJ0c2hpcFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRHVhbCBUb3hvY3lzdFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvSW5mZXN0ZWQvUGlzdG9scy9JbmZWb21pdEd1bi9JbmZWb21pdEd1bldlcFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCcmFpbi1zdHJpa2VzIGV4Y2l0ZSB0aGlzIGJpb3dlYXBvbiwgY2F1c2luZyBpdCB0byByYXBpZGx5IHJlbGVhc2UgdG94aWMgbXVuaXRpb25zLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTEsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImR1YWwtdG94b2N5c3QucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBQaXN0b2xzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI3NS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDkvSW5mVm9taXRHdW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDMwNDIxNTU0OVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRHVhbF9Ub3hvY3lzdFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJpbyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBIZWFkc2hvdCBncmFudHMgRnJlbnp5IGJ1ZmYuIEZyZW56eSBsYXN0cyAzIHNlY29uZHMgYW5kIGNhbiBiZSByZWZyZXNoZWQuIEZyZW56eSBncmFudHMgMTAwJSBpbmNyZWFzZSBpbiBUb3hpbiBkYW1hZ2UgKG9uIGJhc2UgZGFtYWdlKSwgMTUlIGluY3JlYXNlIGluIGZpcmUgcmF0ZSwgcmVjb2lsIHJlZHVjdGlvbiwgYW5kIGRvZXNuJ3QgY29uc3VtZSBhbW1vIHdoaWxlIGZpcmluZy4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3BlZWRcIixcbiAgICAgIFwicmFua1wiOiA4NS42LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkR1YWwgWm9yZW5cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0F4ZS9EdWFsQXhlV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTaG9ydCBheGVzIGhlbGQgaW4gZWFjaCBoYW5kLiBIaWdoIGF0dGFjayBzcGVlZCBhbmQgY2FuIGhpdCBtdWx0aXBsZSB0YXJnZXRzLiBEZWxpdmVycyBhIGhpZ2ggcGVyY2VudGFnZSBvZiBjcml0aWNhbCBzdHJpa2VzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTIwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ0MDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJkdWFsLXpvcmVuLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgU3dvcmRzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzQ0L0R1YWxab3Jlbi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwODExMTkwMTI1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9EdWFsX1pvcmVuXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiAzNS4zNSxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgdmVyeSBoaWdoIGF0dGFjayBzcGVlZC4gWm9yZW5jb3B0ZXJpbmcsIGFueW9uZT8g4pyqXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNhcnZpbmcgTWFudGlzXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQWx0IGNvbWJvPSBCaXRpbmcgTWFuZGlibGVzOyAtRFBTLCArZXhlY3V0aW9uXCIsXG4gICAgICBcImNvbWJvXCI6IFwiRGlyZSBDb3VydHNoaXBcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0FyY2h3aW5nL0RlbW9saXRpb25KZXRQYWNrL0RlbW9saXRpb25KZXRQYWNrXCIsXG4gICAgICBcIm5hbWVcIjogXCJFbHl0cm9uXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBoZWF2eSBkdXR5IEFyY2h3aW5nIHdhcyBkZXNpZ25lZCBmb3Igb25lIHB1cnBvc2UsIGRlc3RydWN0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDAuODk5OTk5OTgsXG4gICAgICBcInR5cGVcIjogXCJWZWhpY2xlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImVseXRyb24ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQXJjaHdpbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL0VseXRyb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvRW1iZXIvRW1iZXJcIixcbiAgICAgIFwibmFtZVwiOiBcIkVtYmVyXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRW1iZXIgaXMgYSBuaWdodG1hcmUgZm9yIGxpZ2h0LWFybW9yZWQgdGFyZ2V0cy4gRW1iZXIgY2FuIHN1cGVyLWhlYXQgdGhlIGFpciB3aGljaCBvcGVucyB1cCBzdXJwcmlzaW5nIGNyb3dkLWNvbnRyb2wgcG9zc2liaWxpdGllcy5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIlJlZ2VuZXJhdGVzIHxSRUdFTnwgRW5lcmd5L3MgYW5kIGluY3JlYXNlcyBBYmlsaXR5IFN0cmVuZ3RoIGJ5IHxTVFJFTkdUSHwlIHdoaWxlIG9uIEZpcmUuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJlbWJlci5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDQ2NzAwMTAsXG4gICAgICBcImludHJvZHVjZWRcIjogXCJWYW5pbGxhXCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4xLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2E3L0VtYmVyTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI0MDIzMDEzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FbWJlclwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkdlbmVyYWwgU2FyZ2FzIFJ1ayAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9FbWJlci9FbWJlclByaW1lXCIsXG4gICAgICBcIm5hbWVcIjogXCJFbWJlciBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVtYmVyIFByaW1lIG9mZmVycyB0aGUgc2FtZSBwb3RlbnRpYWwgZm9yIHdhbnRvbiBkZXN0cnVjdGlvbiBhcyBFbWJlciBidXQgcHJvdmlkZXMgdW5pcXVlIG1vZCBwb2xhcml0aWVzLCBhbGxvd2luZyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiUmVnZW5lcmF0ZXMgfFJFR0VOfCBFbmVyZ3kvcyBhbmQgaW5jcmVhc2VzIEFiaWxpdHkgU3RyZW5ndGggYnkgfFNUUkVOR1RIfCUgd2hpbGUgb24gRmlyZS5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImVtYmVyLXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAyOTU5MTI5LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTFcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjEsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zOS9FbWJlclByaW1lTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI0MDIzMDI0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FbWJlcl9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTMgMTEgMjBcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNSAxMCAwNlwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE1IDEwIDA2XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkVtYm9saXN0XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9JbmZlc3RlZC9QaXN0b2xzL0luZmVzdGVkUGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiSGVsZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgbGl2aW5nIHdlYXBvbiwgdGhlIGluZmVzdGVkIEVtYm9saXN0IHBpc3RvbCBraWxscyBpdHMgdmljdGltcyB3aXRoIGFuIGFjaWRpYyB2ZW5vbW91cyBnYXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZW1ib2xpc3QucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNS4wIHRveGluXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84Yy9JbmZlc3RlZFBpc3RvbC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMzE0MTcyODU5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FbWJvbGlzdFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJpbyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgIGJlYW0gbXVuaXRpb25zLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTguNyxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJFbmR1cmFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkcy9UaHJlZUxlYWYvVGhyZWVMZWFmXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDk1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZGVsaWNhdGUgZm9ybSBvZiB0aGlzIFRlbm5vIHJhcGllciBjb25jZWFscyBpdHMgZmVyb2Npb3VzIGFuZCByZXNpbGllbnQgZm9yY2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAzODAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJlbmR1cmEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmFwaWVyXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiOTUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzJhL0VuZHVyYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwNTI0MjE0MjIxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FbmR1cmFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAzOS45LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9uc3Ryb3VzIERQUywgbG93IGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlZ1bHBpbmUgTWFza1wiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIkFsdCBjb21ibz0gRHVlbCBTZWNyZXRzOiAtRFBTICtleGVjdXRpb25cIixcbiAgICAgIFwiY29tYm9cIjogXCJIaWRkZW4gRmxvdXJpc2hcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9ZaW5ZYW5nL1lpbllhbmdcIixcbiAgICAgIFwibmFtZVwiOiBcIkVxdWlub3hcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTcGxpdCBiZXR3ZWVuIGRheSBhbmQgbmlnaHQsIEVxdWlub3ggbWFuaWZlc3RzIGFnZ3Jlc3NpdmUgYW5kIGRlZmVuc2l2ZSBmb3JtcyBhdCB3aWxsLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMTUsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcInxQRVJDRU5UfCUgb2YgSGVhbHRoIE9yYnMgYXJlIGNvbnZlcnRlZCBpbnRvIEVuZXJneSwgYW5kIHxQRVJDRU5UfCUgb2YgRW5lcmd5IE9yYnMgYXJlIGNvbnZlcnRlZCBpbnRvIEhlYWx0aC5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImVxdWlub3gucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibmFyYW1vblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAwLFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTdcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjE1LFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRXF1aW5veFwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlR5bCBSZWdvciAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9ZaW5ZYW5nL0VxdWlub3hQcmltZVwiLFxuICAgICAgXCJuYW1lXCI6IFwiRXF1aW5veCBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk5pZ2h0IGFuZCBEYXkgaW4gZmluYWwgYmFsYW5jZTsgdGhlIGdyYWNlZnVsIHBlcmZlY3Rpb24gb2YgdGhlIG9uZSB0aGF0IHdhbGtzIHRoZSBib3JkZXJzLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDUsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMTUsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcInxQRVJDRU5UfCUgb2YgSGVhbHRoIE9yYnMgYXJlIGNvbnZlcnRlZCBpbnRvIEVuZXJneSwgYW5kIHxQRVJDRU5UfCUgb2YgRW5lcmd5IE9yYnMgYXJlIGNvbnZlcnRlZCBpbnRvIEhlYWx0aC5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImVxdWlub3gtcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJuYXJhbW9uXCIsXG4gICAgICBcImNvbG9yXCI6IDAsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIyNC41LjhcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjE1LFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRXF1aW5veF9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTkgMDMgMjdcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibi9hXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMjEgMDEgMjdcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJFdGhlciBEYWdnZXJzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9EdWFsRGFnZ2VyL0R1YWxFdGhlckRhZ2dlclwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA0NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBzaG9ydGVyIHZlcnNpb24gb2YgdGhlIEV0aGVyIGJsYWRlIHRoYXQgYWxsb3dzIGZvciBhIG1vcmUgZm9jdXNlZCBhdHRhY2sgb24gYSBzaW5nbGUgdGFyZ2V0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTgwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ5LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZXRoZXItZGFnZ2Vycy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIERhZ2dlcnNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0NS4xXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDgvRXRoZXJEYWdnZXJzMi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNDEyMTU1NDUwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FdGhlcl9EYWdnZXJzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiT3BlcmF0aW9uIFBsYWd1ZSBTdGFyIChDZXR1cylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIlNwZWVkXCIsXG4gICAgICBcInJhbmtcIjogNDYuMSxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9uc3Ryb3VzIERQUywgdmVyeSBsb3cgYXR0YWNrIHNwZWVkLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3Bpbm5pbmcgTmVlZGxlXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQWx0IGNvbWJvPSBGZXkgSW50ZXJ2ZW50aW9uIChmb3J3YXJkIG1vdmVzZXQpOyArRFBTLCAtcmFnZG9sbFwiLFxuICAgICAgXCJjb21ib1wiOiBcIkFjY3Vyc2VkIFdoaXNwZXJzXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRXRoZXIgUmVhcGVyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9TY3l0aGUvRXRoZXJTY3l0aGVXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNjUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggYSBibGFkZSBmb3JnZWQgZnJvbSB0aGUgc2FtZSBtYXRlcmlhbCBhcyB0aGUgRXRoZXIgU3dvcmQsIHRoZSBFdGhlciBSZWFwZXIgZGVsaXZlcnMgcXVpY2sgZGVhdGggdG8gaXRzIHZpY3RpbXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMzAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJldGhlci1yZWFwZXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2N5dGhlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNjUuMVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzQ4L0V0aGVyU2N5dGhlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA5MTQxMTE0MDFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0V0aGVyX1JlYXBlclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTMuODEsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJTdGFsa2luZyBGYW5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJEeWluZyBMaWdodFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkV0aGVyIFN3b3JkXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Mb25nU3dvcmQvRXRoZXJTd29yZFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNyxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBzaW5nbGUgYmxhZGUgZm9yIG1vcmUgcHJlY2lzaW9uLiBUaGUgRXRoZXIgU3dvcmQgY3V0cyBzbyBjbGVhbmx5IHRoYXQgaXQgd2FzIGNvbnNpZGVyZWQgYnkgdGhlIFRlbm5vIHRvIGJlIGEgbW9yZSBodW1hbmUgd2VhcG9uIGZvciDigJhjbGVhbnNpbmfigJkgaW5mZXN0ZWQgYWxsaWVzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTQ4LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ0MDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJldGhlci1zd29yZC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTd29yZFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM3LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNS81YS9FdGhlci1Td29yZC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMjIxMTQ0MjIwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FdGhlcl9Td29yZFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA3My41OCxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFNsYW0gYXR0YWNrcyBwcm9jcyBSYWRpYXRpb24gaW4gYW4gQU9FLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3dvb3BpbmcgRmFsY29uXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQ3JpbXNvbiBEZXJ2aXNoJ3MgQ29pbGluZyBJbXBhbGU6ICtEUFMgLXByb2NcIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXZpbmcgS2VzdHJlbFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkV1cGhvbmEgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbHMvQWxsTmV3MWhTRy9BbGxOZXcxaFNHXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMyNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCYW5zaGVlIFByaW1l4oCZcyBzaWduYXR1cmUgc2hvdGd1biBpcyBhbiBpbnN0cnVtZW50IG9mIGRldmFzdGF0aW9uIHRoYXQgZmlyZXMgYm90aCBmb2N1c2VkIGFuZCBicm9hZCBzaG90cy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjY5OTk5OTk5LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImV1cGhvbmEtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1biBTaWRlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjMyNS4wXCIsXG4gICAgICBcImZsaWdodFwiOiAxODAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMixcbiAgICAgICAgXCJjcml0X211bHRcIjogMixcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMyxcbiAgICAgICAgXCJpbXBhY3RcIjogNDQsXG4gICAgICAgIFwic2xhc2hcIjogNjYwLFxuICAgICAgICBcInB1bmN0dXJlXCI6IDE3NlxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzIzL0V1cGhvcmFQcmltZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwMzAxMDgwMTMyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FdXBob25hX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNyAwMiAyOFwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE4IDEyIDEyXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTggMTIgMTJcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gQWx0LWZpcmUgc3dpdGNoZXMgdG8gbXVsdGktcGVsbGV0IG1vZGUgdGhhdCBjYW4gYWNoaWV2ZSAxMDAlIHN0YXR1cyBjaGFuY2Ugd2hlbiBtb2RkZWQgcHJvcGVybHkuIEhvd2V2ZXIsIHNsdWcgbW9kZSBmaXJpbmcgaGFzIHN1cGVyaW9yIERQUyBhbmQgaHlicmlkIG1vZGRpbmcgd2lsbCBnaW1wIGJvdGggYnVpbGRzLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiA1NixcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9FeGNhbGlidXIvRXhjYWxpYnVyXCIsXG4gICAgICBcIm5hbWVcIjogXCJFeGNhbGlidXJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHBlcmZlY3QgYmFsYW5jZSBvZiBtb2JpbGl0eSBhbmQgb2ZmZW5zZSwgRXhjYWxpYnVyIGlzIHRoZSBpZGVhbCBXYXJmcmFtZSBmb3IgbmV3IHBsYXllcnMuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiRXhjYWxpYnVyIGRlYWxzIHxEQU1BR0V8JSBpbmNyZWFzZWQgZGFtYWdlIGFuZCBhdHRhY2tzIHxTUEVFRHwlIGZhc3RlciB3aGVuIHdpZWxkaW5nIHN3b3Jkcy5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImV4Y2FsaWJ1ci5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDc1NjQzOTQsXG4gICAgICBcImludHJvZHVjZWRcIjogXCJWYW5pbGxhXCIsXG4gICAgICBcInNleFwiOiBcIk1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzQvNDAvRXhjYWxpYnVyTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI0MDIzMDQwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FeGNhbGlidXJcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJMaWV1dGVuYW50IExlY2ggS3JpbCAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9FeGNhbGlidXIvRXhjYWxpYnVyUHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIkV4Y2FsaWJ1ciBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkV4Y2FsaWJ1ciBQcmltZSBpcyB0aGUgZXBpdG9tZSBvZiBtb2JpbGl0eSBhbmQgb2ZmZW5zZSwgYW5kIGZlYXR1cmVzIHRoZSBzYW1lIGFiaWxpdGllcyBhcyBFeGNhbGlidXIsIGJ1dCBoYXMgdW5pcXVlIG1vZCBwb2xhcml0aWVzIGluc3RhbGxlZCBhbGxvd2luZyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkV4Y2FsaWJ1ciBQcmltZSBkZWFscyB8REFNQUdFfCUgaW5jcmVhc2VkIGRhbWFnZSBhbmQgYXR0YWNrcyB8U1BFRUR8JSBmYXN0ZXIgd2hlbiB3aWVsZGluZyBzd29yZHMuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJleGNhbGlidXItcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDEyMTY5Mzc2LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiNVwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzJhL0V4Y2FsaWJ1clByaW1lTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwNjI4MjEzNDE4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FeGNhbGlidXJfUHJpbWVcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJVbm9idGFpbmFibGUgKEZvdW5kZXJzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogdHJ1ZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvRXhjYWxpYnVyL0V4Y2FsaWJ1clVtYnJhXCIsXG4gICAgICBcIm5hbWVcIjogXCJFeGNhbGlidXIgVW1icmFcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGcm9tIHRoZSBzaGFkb3cgb2YgdGhlIGxvbmcgbmlnaHQgZW1lcmdlcyBhIG5ldyBFeGNhbGlidXIuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiVW1icmEgZXhoaWJpdHMgc2VudGllbmNlIGluIGNvbWJhdCB3aXRob3V0IFRyYW5zZmVyZW5jZSBjb250cm9sLiBBdHRhY2tzIHxTUEVFRHwlIGZhc3RlciBhbmQgZGVhbHMgfERBTUFHRXwlIG1vcmUgZGFtYWdlIHdoaWxlIHdpZWxkaW5nIHN3b3Jkcy5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImV4Y2FsaWJ1ci11bWJyYS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDQwMTM2MjYsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIyM1wiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy81LzVjL0V4Y2FsaWJ1clVtYnJhLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA5MDgxMjUxMTRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0V4Y2FsaWJ1cl9VbWJyYVwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBTYWNyaWZpY2UgKFF1ZXN0KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcInNwZWNpYWxOb3RlXCI6IFwiSXRlbSBhcmUgZnVsbHkgcmFua2VkIHdoZW4gb2J0YWluZWQuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkV4ZXJnaXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9Mb25nR3Vucy9DcnBTaGFwZUJsYXN0L0NycFNoYXBlQmxhc3RTaG90Z3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE2MjAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRmVlbCB0aGUga2ljayBvZiB0aGlzIENvcnB1cyBzaG90Z3VuIGFzIGl0IHNoYXR0ZXJzIGEgaGlnaC15aWVsZCBjcnlzdGFsIGludG8gYW55b25lIGFuZCBhbnl0aGluZyBzdGFuZGluZyBpbiB5b3VyIHdheS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTUuMzg0NjE1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImV4ZXJnaXMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDIwLjAgcmFkaWF0aW9uXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNmMvRXhlcmdpcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgxMjE4MTYyODQzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9FeGVyZ2lzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIjEwMCUgU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDguNSxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJGYWxjb3JcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9NZWxlZS9HbGFpdmUvQ3JwR2xhaXZlL0NycEdsYWl2ZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3OCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ2FydmUgdGhyb3VnaCBlbmVtaWVzIHdpdGggc3VyZ2ljYWwgcHJlY2lzaW9uIHVzaW5nIHRoaXMgQ29ycHVzLXRlY2ggZ2xhaXZlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjM0LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZmFsY29yLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkdsYWl2ZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjI4LjAgZWxlY3RyaWNpdHlcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZi9mNC9DcnBHbGFpdmUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MTAxMjE0MDM1NFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRmFsY29yXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU3LjQyLFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb2RlcmF0ZSBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJBc3RyYWwgVHdpbGlnaHRcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJNb3JuaW5nIFN1blwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkZhbmdcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0R1YWxEYWdnZXIvRHVhbERhZ2dlclwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlc2UgbWF0Y2hpbmcgc3RpbGV0dG9zIGhhdmUgaW5jcmVhc2VkIGF0dGFjayBzcGVlZCBhbmQgY2FuIHVubGVhc2ggYSBmbHVycnkgb2YgbXVsdGktaGl0IGF0dGFja3MuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMjAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMzYsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJmYW5nLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgRGFnZ2Vyc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjMwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yMy9EdWFsRGFnZ2Vycy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMjIxMTQzOTQ0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9GYW5nXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkZhbmcgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0R1YWxEYWdnZXIvRmFuZ1ByaW1lRGFnZ2VyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM1Ljk5OTk5NixcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBzZXQgb2YgY2VyZW1vbmlhbCBkYWdnZXJzIGZyb20gdGhlIE9yb2tpbiBlcmEsIHRoZSBGYW5nIFByaW1lJ3MgYmxhZGVzIHJlc29uYXRlIHZpb2xlbnRseSBhcyB0aGV5IHN0cmlrZS4gVGhpcyBhbGxvd3MgdGhlbSB0byBwaWVyY2UgaGFyZGVuZWQgbWF0ZXJpYWxzIGxpa2UgYXJtb3Igd2l0aCBlYXNlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTQ0LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM2LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZmFuZy1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIERhZ2dlcnNcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM2LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yYi9QcmltZUZhbmcucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDcxMzIwNTcyN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRmFuZ19QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTMgMDcgMTNcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibmV2ZXJcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwibmV2ZXJcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTcGVlZFwiLFxuICAgICAgXCJyYW5rXCI6IDYxLjU1LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgbG93IGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlNwaW5uaW5nIE5lZWRsZVwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIkFsdCBjb21ibz0gRmV5IEludGVydmVudGlvbiAoZm9yd2FyZCBtb3Zlc2V0KTsgK0RQUywgLXJhZ2RvbGxcIixcbiAgICAgIFwiY29tYm9cIjogXCJBY2N1cnNlZCBXaGlzcGVyc1wiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkZlcnJveFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL0xvbmdHdW5zL1NwZWFycy9SYWlsZ3VuL0NvcnB1c1JhaWxndW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQ2hhcmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGlzY2hhcmdlIGEgcmFpbCBvZiBpb25pemVkIGRlYXRoIG9yIHRocm93IHRoZSBGZXJyb3ggbGlrZSBhIHNwZWFyIGFuZCBjcmVhdGUgYSBsb2NhbGl6ZWQgZmllbGQgb2YgYXR0cmFjdGlvbiBubyBlbmVteSBjYW4gZXNjYXBlIGZyb20uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE2LjY2NjY2NixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZmVycm94LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNwZWFyZ3VuXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogMzUwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJUaHJvdyBTcGVhclwiLFxuICAgICAgICBcInNwZWVkXCI6IDEsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogNCxcbiAgICAgICAgXCJjcml0X211bHRcIjogMixcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMyxcbiAgICAgICAgXCJjaGFyZ2VfdGltZVwiOiAwLjUsXG4gICAgICAgIFwic2hvdF90eXBlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgICBcInNob3Rfc3BlZWRcIjogbnVsbCxcbiAgICAgICAgXCJpbXBhY3RcIjogNDU1LFxuICAgICAgICBcInNsYXNoXCI6IDEyMi41LFxuICAgICAgICBcInB1bmN0dXJlXCI6IDcyLjVcbiAgICAgIH0sXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAxMCxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNS81Ni9GZXJyb3gucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDMwOTIzMDI0MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRmVycm94XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIE11bml0aW9uIHNob3QgdGhlIG1vbWVudCBpdCBpcyBmdWxseSBjaGFyZ2VkLiBBbHQgZmlyZSBzaG91bGQgYmUgdXNlZCB0byByZWR1Y2UgcmVsaWFuY2Ugb24gcHJpbWFyeSB3ZWFwb25zLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiA0Ny4zLFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkZsYXRiZWxseVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1ZlaGljbGVzL0hvdmVyYm9hcmQvSG92ZXJib2FyZFBhcnRzL1BhcnRDb21wb25lbnRzL0hvdmVyYm9hcmRDb3JwdXNBL0hvdmVyYm9hcmRDb3JwdXNBRGVja1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiVmVoaWNsZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJmbGF0YmVsbHkucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiSy1Ecml2ZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSb2t5IChGb3J0dW5hKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL0ZsYXRiZWxseVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJGbHVjdHVzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9BcmNod2luZy9QcmltYXJ5L1JvY2tldEFydGlsbGVyeS9BcmNoUm9ja2V0Q3Jvc3Nib3dcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFuIEFyY2h3aW5nIGVuZXJneSB3ZWFwb24gdGhhdCBzZW5kcyB3YXZlcyBvZiBkZWFkbHkgcGxhc21hIGNyYXNoaW5nIGludG8gZW5lbWllcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODk5OTk5OTgsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImZsdWN0dXMucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyMDAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9kL2RjL0FyY2hSb2NrZXRDcm9zc2Jvdy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMjE5MTgyMTU0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9GbHVjdHVzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcInR5cGVcIjogXCJBcmNod2luZyBHdW5cIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRmx1eCBSaWZsZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ2xhblRlY2gvRW5lcmd5L0NycExhc2VyUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjIsXG4gICAgICBcInRyaWdnZXJcIjogXCJIZWxkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTGFzZXIgUmlmbGUgd2l0aCBDb3JwdXMgc2FmZS1ndWFyZHMgcmVtb3ZlZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNTUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImZsdXgtcmlmbGUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIyLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkRpc2NoYXJnZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzYyL0NvcnB1c0xhc2VyUmlmbGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTEyNjAwMjM1NFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRmx1eF9SaWZsZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkVuZXJneSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCBiZWFtIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDc0LjUsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRnJhZ29yXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9IYW1tZXIvSGFtbWVyV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDExNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBsYXJnZSB0d28taGFuZGVkIGhhbW1lciwgdGhlIEZyYWdvciByZXF1aXJlcyBncmVhdCBzdHJlbmd0aCB0byB3aWVsZCwgYnV0IGltcGFjdHMgd2l0aCBlbm91Z2ggZm9yY2UgdG8gc2VuZCBncm91cHMgb2YgZW5lbWllcyB0dW1ibGluZy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDIzMCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC45NTk5OTk5OCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImZyYWdvci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJIYW1tZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMTUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2E5L0RFRnJhZ29yLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDA0MTYxMjEzNDBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0ZyYWdvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJGcmFnb3IgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1ByaW1lRnJhZ29yL1ByaW1lRnJhZ29yXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEzMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBiZWF1dGlmdWxseSBmb3JnZWQgaW5zdHJ1bWVudCBvZiBkZXZhc3RhdGlvbi5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI2MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC45NTk5OTk5OCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImZyYWdvci1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJIYW1tZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjc1LFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMzAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2QvZDcvUHJpbWVGcmFnb3IucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDUyMDIxMDcxOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRnJhZ29yX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNiAwNSAxN1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE4IDAzIDIwXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTggMDMgMjBcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAxMzAuNDgsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDcnVzaGluZyBSdWluXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiT25seSB1c2UgUmFnaW5nIFdoaXJsd2luZCB0byBwcm9jIEltcGFjdCBvciB0aGUgc2xhbSB3aWxsIHJhZ2RvbGxcIixcbiAgICAgIFwiY29tYm9cIjogXCJUaWRhbCBGb3JjZSAmIFJhZ2luZyBXaGlybHdpbmRcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9Gcm9zdC9Gcm9zdFwiLFxuICAgICAgXCJuYW1lXCI6IFwiRnJvc3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCeSBjaGFubmVsaW5nIG1vaXN0dXJlIGFuZCB2YXBvciBpbiB0aGUgc3Vycm91bmRpbmcgZW52aXJvbm1lbnQsIEZyb3N0IGNyZWF0ZXMgZm9ybWlkYWJsZSBkZWZlbnNlcyBhbmQgbGV0aGFsIGF0dGFja3MgZnJvbSBzdWIgemVybyBjb25kaXRpb25zLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDAuOTQ5OTk5OTksXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIlN0cmlraW5nIEZyb3N0IHdpdGggYSBtZWxlZSBhdHRhY2sgaGFzIGEgfENIQU5DRXwlIGNoYW5jZSB0byBmcmVlemUgdGhlIGF0dGFja2VyIGZvciB8RFVSQVRJT058cy5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImZyb3N0LnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcInZhemFyaW5cIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMjg5Nzk4MSxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjZcIixcbiAgICAgIFwic2V4XCI6IFwiTWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMC45NSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNS81YS9Gcm9zdE5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNDAyMzA1OVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRnJvc3RcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDYXB0YWluIFZvciBhbmQgTGlldXRlbmFudCBMZWNoIEtyaWwgKEJvc3MgRHVvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0Zyb3N0L0Zyb3N0UHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIkZyb3N0IFByaW1lXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRnJvc3QgUHJpbWUgaGFzIHRoZSBzYW1lIGNoaWxsaW5nIGFiaWxpdGllcyBhcyBGcm9zdCBidXQgcHJvdmlkZXMgdW5pcXVlIG1vZCBwb2xhcml0aWVzLCBhbGxvd2luZyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDAuOTQ5OTk5OTksXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIlN0cmlraW5nIEZyb3N0IHdpdGggYSBtZWxlZSBhdHRhY2sgaGFzIGEgfENIQU5DRXwlIGNoYW5jZSB0byBmcmVlemUgdGhlIGF0dGFja2VyIGZvciB8RFVSQVRJT058cy5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImZyb3N0LXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwidmF6YXJpblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAxNzc2NDA4LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiNy4xMFwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAwLjk1LFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2QvZDEvRnJvc3RQcmltZU5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNDAyMzEwNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRnJvc3RfUHJpbWVcIixcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDEzIDA1IDAzXCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTUgMDQgMDFcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxNSAwNCAwMVwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJGdWxtaW5cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL1RuV2lzcFJpZmxlL1RuV2lzcFJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdHJpa2Ugd2l0aCBzaWxlbnQgbGlnaHRuaW5nIG9yIHRoZSBwdW1tZWxpbmcgZHJ1bSBvZiB0aHVuZGVyLiBBbHRlcm5hdGUgYmV0d2VlbiBzdGVhbHRoeSBzaG9ydC1yYW5nZSBlbGVjdHJpY2FsIGRpc2NoYXJnZSwgYW5kIGF1dG9tYXRpYyBsaWdodG5pbmcgZ3VuLiBGYXN0ZXIgbW9kZS1zd2l0Y2ggd2hlbiB1c2VkIGJ5IFdpc3AuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDkuMDkwOTA5LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJmdWxtaW4ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjQwMC4wIGVsZWN0cmljaXR5XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIkZ1bGwgQXV0byBNb2RlXCIsXG4gICAgICAgIFwic3BlZWRcIjogOS4zMyxcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiAyOCxcbiAgICAgICAgXCJjcml0X211bHRcIjogMi40LFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogMC4xLFxuICAgICAgICBcInNob3RfdHlwZVwiOiBcIkhpdC1TY2FuXCIsXG4gICAgICAgIFwicHVuY3R1cmVcIjogOCxcbiAgICAgICAgXCJlbGVjdHJpY2l0eVwiOiAyNSxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCIyNS4wIGVsZWN0cmljaXR5XCJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvMzQvRnVsbWluLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxOTA1MjMyMzQ5MDhcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Z1bG1pblwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgaW5zYW5lIGRwcywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIFByaW1hcnkgZmlyZSBoYXMgYSBzbWFsbCBjb25lLWxpa2UgQW9FLiBTZWNvbmRhcnkgZmlyZSB0b2dnbGVzIGF1dG9tYXRpYyBoaXRzY2FuIGZpcmUgbW9kZS4gU3dpdGNoaW5nIGJldHdlZW4gdGhlIHR3byBpcyBzbG93IGFuZCBjbHVua3kuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDM4LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkZ1cmF4XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9GaXN0L0Zpc3RcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZXNlIHBvd2VyIGdhdW50bGV0cyBsYWNrIHRoZSByYW5nZSBvZiBtb3N0IE1lbGVlIFdlYXBvbnMsIGJ1dCBGdXJheCBpcyBmYXIgbW9yZSBkZXZhc3RhdGluZyB3aGVuIHlvdSBzdHJpa2UgYW4gZW5lbXkgaW4gY2xvc2UgY29tYmF0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTA1LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM4LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZnVyYXgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRmlzdFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yMy9GdXJheC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNDI2MDgwNTUzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9GdXJheFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkZ1cmF4IFdyYWl0aFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvRmlzdC9GdXJheFdyYWl0aFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlc2UgV3JhaXRoIGdhdW50bGV0cyBoYXZlIGJlZW4gYXVnbWVudGVkIGZvciBwb3dlci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDEwNSxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zOCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImZ1cmF4LXdyYWl0aC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJGaXN0XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS43NSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9iL2I4L1dyYWl0aEZ1cmF4LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjA0MzAwMDA5MjZcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Z1cmF4X1dyYWl0aFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNldHVzIEJvdW50eSAoTGV2ZWxzIDQwIC0gNjApXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA3NC40NyxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiR2FpYSdzIFRyYWdlZHlcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJGb3Jlc3QncyBSZW1vcnNlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiRnVyaXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbC9BdXRvUGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBGdXJpcyBkZWxpdmVycyBhIGhpZ2ggZGFtYWdlIG91dHB1dCBpbiBhIHNob3J0IHRpbWUgZnJhbWUgdGhhbmtzIHRvIGl0cyBoaWdoIHJhdGUgb2YgZmlyZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjIuMjIyMjIxLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMzUsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZnVyaXMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyMC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvM2UvRnVyaXMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDYwNjAxMTExNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRnVyaXNcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJGdXNpbGFpXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9UaHJvd2luZ1dlYXBvbnMvR2xhc3NLdW5haS9HbGFzc0t1bmFpV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDc3LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNpbGVudGx5IGxhY2VyYXRlIGVuZW1pZXMgd2l0aCBHYXJhJ3Mgc2lnbmF0dXJlIGdsYXNzIHRocm93aW5nIGtuaXZlcy4gSW5jcmVhc2VkIFByb2plY3RpbGUgU3BlZWQgd2hlbiB3aWVsZGVkIGJ5IEdhcmEuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiU2lsZW50XCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImZ1c2lsYWkucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiVGhyb3duXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI3Ny4wXCIsXG4gICAgICBcImZsaWdodFwiOiBcIj8/P1wiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJTZW1pLUF1dG8gTW9kZVwiLFxuICAgICAgICBcInNwZWVkXCI6IDEuNSxcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiAzLFxuICAgICAgICBcImNyaXRfbXVsdFwiOiAxLjUsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLjQsXG4gICAgICAgIFwic2hvdF90eXBlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgICBcInNob3Rfc3BlZWRcIjogbnVsbCxcbiAgICAgICAgXCJwZWxsZXRcIjoge1xuICAgICAgICAgIFwibmFtZVwiOiBcIlNodXJpa2VuXCIsXG4gICAgICAgICAgXCJjb3VudFwiOiAzXG4gICAgICAgIH0sXG4gICAgICAgIFwic2xhc2hcIjogMTM4LjYsXG4gICAgICAgIFwicHVuY3R1cmVcIjogOTIuNFxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNi82ZC9HbGFzc0t1bmFpLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzEwMTcyMjQyNDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0Z1c2lsYWlcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gQWx0LWZpcmUgbGF1bmNoZXMgdGhyZWUgdGhyb3dpbmcga25pdmVzIGhvcml6b250YWxseSBpbnN0ZWFkLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTkuOSxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHYWxhdGluZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU3dvcmRzL0dyZWF0U3dvcmQvVGVubm9HcmVhdFN3b3JkXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEyNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2l0aCBtYXNzaXZlIGNoYXJnZWQgcG93ZXIgYW5kIHRoZSBhYmlsaXR5IHRvIGhpdCB1cCB0byBmaXZlIGZvZXMgaW4gYSBzaW5nbGUgc3dpbmcsIHRoZSBHYWxhdGluZSBzd29yZCBpcyB0aGUgaGVhdnkgYXJ0aWxsZXJ5IG9mIE1lbGVlIFdlYXBvbnMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyNTAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImdhbGF0aW5lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkhlYXZ5IEJsYWRlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTI1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0dhbGF0aW5lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiR2FsYXRpbmUgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkcy9QcmltZUdhbGF0aW5lL1ByaW1lR2FsYXRpbmVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTY1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJPbmx5IFRlbm5vIHdlcmUgc3Ryb25nIGVub3VnaCB0byB3aWVsZCB0aGlzIG5vYmxlIGJlYXN0IG9mIGEgd2VhcG9uLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMzMwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC41LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ2FsYXRpbmUtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiSGVhdnkgQmxhZGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjE2NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wYy9QcmltZUdhbGF0aW5lMzQyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjA4MjAwMzIxMDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0dhbGF0aW5lX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNiAwOCAyM1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE4IDA2IDE5XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTggMDYgMTlcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDMyLjk3LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBoaXQsIGluc2FuZSBkcHMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2xlYXZpbmcgV2hpcmx3aW5kXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiQnJva2VuIEJ1bGxcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHYWx2YWNvcmRcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9NZWxlZS9XaGlwcy9DcnBTaG9ja0dyaXAvQ3JwU2hvY2tHcmlwV2hpcFdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU2hvY2sgYW5kIG1haW0gd2l0aCB0aGlzIGhlYXZ5d2VpZ2h0IHJldHJhY3RhYmxlIHdoaXAuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAzMjAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJnYWx2YWNvcmQucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiV2hpcFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM4LjAgZWxlY3RyaWNpdHlcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yNy9HYWx2YWNvcmQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE5MDcyNTE3MTY0MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvR2FsdmFjb3JkXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiU2xpZGVcIixcbiAgICAgIFwicmFua1wiOiAzMi4xNixcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIGluc2FuZSBkcHMsIGxvdyBhdHRhY2sgc3BlZWQuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIOKcqlwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJCdXJuaW5nIFdhc3BcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJTbGlkZVwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkdhbW1hY29yXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9TeW5kaWNhdGVzL0NlcGhhbG9uU3VkYS9QaXN0b2xzL0NTRHJvaWRBcnJheVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxNixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkhlbGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZXNpZ25lZCB0byBxdWlja2x5IHZhcG9yaXplIG1pbmVyYWxzIGZvciBjb250ZW50IGFuYWx5c2lzLCB1c2VycyBkaXNjb3ZlcmVkIGl0cyBwb3dlcmZ1bCBiZWFtIHdhcyBlcXVhbGx5IGVmZmljaWVudCBhdCBkaXNwYXRjaGluZyBob3N0aWxlcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODk5OTk5OTgsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ2FtbWFjb3IucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNi4wIG1hZ25ldGljXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yNC9HYW1tYWNvci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI3MTgyMjI4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9HYW1tYWNvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0dsYXNzL0dsYXNzXCIsXG4gICAgICBcIm5hbWVcIjogXCJHYXJhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGJhdHRsZWZpZWxkIHRyZW1ibGVzIGJlZm9yZSBHYXJhJ3MgY3J5c3RhbGxpbmUgcG93ZXIsIGhlciByaW5naW5nIHRvdWNoIHRyYW5zZm9ybWluZyBvcHBvbmVudHMgdG8gdGFyZ2V0cyBvZiBicml0dGxlIGJlYXV0eS5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjE1LFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJBIGNoYW5jZSB0byBjcmVhdGUgYSByYWRpYWwgYmxpbmQgbGFzdGluZyB8RFVSQVRJT058cyB3aGVuIGV4cG9zZWQgdG8gYnJpZ2h0IGxpZ2h0LlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ2FyYS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJ2YXphcmluXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDYzNzk4NjEsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIyMlwiLFxuICAgICAgXCJzZXhcIjogXCJGZW1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEuMTUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzIvMmMvR2FyYU5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MTAyNjEwNDIzNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvR2FyYVwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlNheWEncyBWaWdpbCAoUXVlc3QpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvR2FydWRhL0dhcnVkYVwiLFxuICAgICAgXCJuYW1lXCI6IFwiR2FydWRhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGVhdGgncyBjcmltc29uIG1haWRlbiwgdGhlIGJsb29kIG9mIEdhcnVkYSdzIGZvZXMgaW1idWUgaGVyIHdpdGggc3RyZW5ndGggYW5kIHZpdGFsaXR5LlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkFzIEdhcnVkYSBuZWFycyBkZWF0aCwgaGVyIGRhbWFnZSBpbmNyZWFzZXMgdXAgdG8gYW4gYWRkaXRpb25hbCB8REFNQUdFfCUuU2xhc2hlcyB3aXRoIGhlciB0YWxvbnMgaWYgbm8gbWVsZWUgd2VhcG9uIGlzIGVxdWlwcGVkLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ2FydWRhLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm1hZHVyYWlcIixcbiAgICAgIFwiY29uY2xhdmVcIjogZmFsc2UsXG4gICAgICBcImNvbG9yXCI6IDEyOTYwNDQwLFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMjRcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83Lzc4L0dhcnVkYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgxMjI1MjE1MzI3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9HYXJ1ZGFcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJWb3ggU29sYXJpcyAoUXVlc3QpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiR2F6YWwgTWFjaGV0ZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvUGVyc2lhbk1hY2hldGUvRGppbm5NYWNoZXRlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUyLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFYWNoIGtpbGwgd2l0aCB0aGlzIHN3b29waW5nIGJsYWRlIGFkZHMgYm9udXMgZGFtYWdlIHRvIHRoZSBEamlubiBTZW50aW5lbOKAmXMgbmV4dCBGYXRhbCBBdHRyYWN0aW9uIGFiaWxpdHkuIEluIHR1cm4sIEZhdGFsIEF0dHJhY3Rpb24gYmVzdG93cyB0aGUgd2VhcG9uIHdpdGggYSBwZXJpb2Qgb2YgPERUX0NPUlJPU0lWRT5Db3Jyb3NpdmUgRGFtYWdlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjA4LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ2F6YWwtbWFjaGV0ZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJNYWNoZXRlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTIuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzJiL0RqaW5uTWFjaGV0ZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwMjA2MDg0NjM4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9HYXphbF9NYWNoZXRlXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMzcuNzEsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIGluc2FuZSBkcHMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBDYW4gYmUgcGFpcmVkIHdpdGggRGppbm4ncyBGYXRhbCBBdHRyYWN0aW9uIGZvciBhcHByb3hpbWF0ZWx5IDE2LjYlIHVwdGltZS4g4pyqXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkN5Y2xvbmUgS3Jha2VuXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiTGlnaHRuaW5nIFNpcmVuXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiR2F6ZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU29sYXJpc1VuaXRlZC9TZWNvbmRhcnkvU1VNb2R1bGFyU2Vjb25kYXJ5U2V0MS9CYXJyZWwvU1VNb2R1bGFyU2Vjb25kYXJ5QmFycmVsRFBhcnRcIixcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJnYXplLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIktpdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSdWRlIFp1dWQgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvR2F6ZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHbGFpdmVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0dsYWl2ZXMvTGlnaHRHbGFpdmUvTGlnaHRHbGFpdmVXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRhdGluZyBiYWNrIHRvIHRoZSB0aW1lIG9mIHRoZSBmaXJzdCBUZW5ubywgdGhlIEdsYWl2ZSBpcyBhIHVuaXF1ZWx5IGRlYWRseSB3ZWFwb24uIFRoaXMgbXVsdGktYmxhZGVkIGRpc2MgaXMgbm90IG9ubHkgZWZmZWN0aXZlIGZvciBtZWxlZSBjb21iYXQ7IGl0IGNhbiBhbHNvIGJlIHRocm93biBsaWtlIGEgYm9vbWVyYW5nIHRvIGN1dCBkb3duIGVuZW1pZXMgYXQgYSBkaXN0YW5jZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDEzNSxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yMixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImdsYWl2ZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJHbGFpdmVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJUaHJvd25cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZC9kNC9ERUdsYWl2ZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwNDA3MDM1ODU2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9HbGFpdmVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiR2xhaXZlIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9HbGFpdmVzL1ByaW1lR2xhaXZlL1ByaW1lR2xhaXZlV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgR2xhaXZlIFByaW1lIGlzIGEgZGVhZGx5IGFuZCBiZWF1dGlmdWwgd2VhcG9uIGZyb20gdGhlIE9yb2tpbiBlcmEuIFRoZSBibGFkZXMgYXJlIGFzIGVmZmVjdGl2ZSBpbiBjbG9zZSBxdWFydGVycyBhcyB0aGV5IGFyZSB3aGVuIHRocm93biBhdCBkaXN0YW50IGVuZW1pZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNTAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjIyLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ2xhaXZlLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkdsYWl2ZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiVGhyb3duXCIsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNy83My9QcmltZUdsYWl2ZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMzE0MTc0NTA2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9HbGFpdmVfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDEzIDExIDIwXCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTUgMTAgMDZcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxNSAxMCAwNlwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQzLjk3LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCB2ZXJ5IGhpZ2ggYXR0YWNrIHNwZWVkLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQXN0cmFsIFR3aWxpZ2h0XCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiTW9ybmluZyBTdW5cIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHbGF4aW9uXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTG9uZ0d1bnMvQ3JwRnJlZXplUmF5L0NycEZyZWV6ZVJheVJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI2LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiSGVsZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZpcmVzIGEgcGhvdG9uIGJlYW0gdGhhdCBoYWx0cyBtb2xlY3VsYXIgdmlicmF0aW9ucywgY2F1c2luZyBpbnN0YW50IGFuZCBwYWluZnVsIGZyZWV6aW5nLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ2xheGlvbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjYuMCBjb2xkXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yNi9DcnBGcmVlemVSYXlSaWZsZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwODI4MTcwNTE4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9HbGF4aW9uXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHbGF4aW9uIFZhbmRhbFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL0xvbmdHdW5zL0NycEZyZWV6ZVJheS9WYW5kYWwvQ3JwRnJlZXplUmF5VmFuZGFsUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjksXG4gICAgICBcInRyaWdnZXJcIjogXCJIZWxkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBjdXR0aW5nLWVkZ2UsIGhhbG9nZW4tY29vbGVkIGVsZWN0cm9uIGFjY2VsZXJhdG9yIGNhcGFibGUgb2Ygc25hcC1mcmVlemluZyBhIHRhcmdldCBpbiBtb21lbnRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImdsYXhpb24tdmFuZGFsLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjI5LjAgY29sZFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzFhL0dsYXhpb25WYW5kYWwucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE5MDUyMzIzNDkwOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvR2xheGlvbl9WYW5kYWxcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJPcGVyYXRpb246IEhvc3RpbGUgTWVyZ2Vyc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIGluc2FuZSBkcHMsIGJlYW0gbXVuaXRpb25zLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0MC4yLFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkdvcmdvblwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUmlmbGUvSGVhdnlSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgR29yZ29uIHNwb3J0cyBhIGxhcmdlIGNsaXAgdGhhdCBhbGxvd3MgaXQgdG8gcHJvdmlkZSBzdXBwcmVzc2luZyBmaXJlIGFuZCBzdXN0YWluIGEgaGlnaCBkYW1hZ2UgcmF0ZSBvdmVyIGEgbG9uZyB0aW1lLiBJdHMgaGlnaCBGaXJlIFJhdGUgaXMgb25seSBhY2hpZXZlZCBmb2xsb3dpbmcgYSBzaG9ydCB3aW5kLXVwIGN5Y2xlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMi41LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ29yZ29uLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyNS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDMvR29yZ29uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjExMjYwMDUyMzJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0dvcmdvblwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkhlYXZ5IEd1bm5lcnNcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHb3Jnb24gV3JhaXRoXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL0xvbmdHdW5zL1dyYWl0aEdvcmdvbi9XcmFpdGhHb3Jnb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjcsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIEdvcmdvbiBXcmFpdGggaXMgYSBwb3dlcmZ1bCB2YXJpYW50IG9mIGl0cyBwcmVjdXJzb3IgdGhhdCBmZWF0dXJlcyB1bmlxdWUgc3R5bGluZy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTYuNjY2NjY2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ29yZ29uLXdyYWl0aC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyNy4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNjAvV3JhaXRoR29yZ29uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDAzMTMyMzE1MThcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0dvcmdvbl9XcmFpdGhcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSYXpvcmJhY2sgQXJtYWRhXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiR3Jha2F0YVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9HcmluZWVyQXNzYXVsdFJpZmxlL0dybkFzc2F1bHRSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFcXVpcHBlZCB3aXRoIGEgaHVnZSBNYWdhemluZSBhbmQgaW1wcmVzc2l2ZSBGaXJlIFJhdGUsIHRoZSBHcmFrYXRhIGlzIHRoZSBwcmVmZXJyZWQgd2VhcG9uIG9mIEdyaW5lZXIgTGFuY2Vycy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjguNTcxNDI4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwiaXRlbUNvdW50XCI6IDEsXG4gICAgICBcInBhcmVudHNcIjogW1xuICAgICAgICBcIlR3aW4gR3Jha2F0YXNcIlxuICAgICAgXSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ3Jha2F0YS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTEuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzJlL0dyaW5lZXJBc3NhdWx0UmlmbGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTEyNjAwMzUzOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvR3Jha2F0YVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkdyYW1cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0dyZWF0U3dvcmQvR3JlYXRTd29yZFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBoZWF2eSB0d28taGFuZGVkIHN3b3JkIGtub3duIGFzIEdyYW0gcmVxdWlyZXMgZ3JlYXQgc3RyZW5ndGggdG8gd2llbGQsIGJ1dCBpdCBpcyBub3RvcmlvdXMgZm9yIGl0cyBzcGxpdHRpbmcgcG93ZXIuIENhbiBoaXQgbXVsdGlwbGUgdGFyZ2V0cyB3aXRoIGVhY2ggc3RyaWtlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjAwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ0MDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJncmFtLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkhlYXZ5IEJsYWRlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTAwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNS81NS9ERUdyYW0ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEwMTA1MzMzN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvR3JhbVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHcmFtIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvUHJpbWVHcmFtL1ByaW1lR3JhbVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxODAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJvcm4gYW5ldywgdGhlIGZhdGhlciBvZiBzd29yZHMgcmV0dXJucy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDM2MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDE0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDQwMDAwMSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImdyYW0tcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiSGVhdnkgQmxhZGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjE4MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYWQvR3JhbVByaW1lLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA5MjUxOTM2MjRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0dyYW1fUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE4IDA5IDI1XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIm4vYVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDIwIDA3IDIxXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDI3LjczLFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgbG93IGF0dGFjayBzcGVlZC4g4pyqXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNsZWF2aW5nIFdoaXJsd2luZFwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIkJyb2tlbiBCdWxsXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiR3Jhbm11IFByaXNtXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9TZW50aWVudHMvT3BlcmF0b3JBbXBsaWZpZXJzL1NldDEvQmFycmVsL1NlbnRBbXBTZXQxQmFycmVsUGFydENcIixcbiAgICAgIFwidHlwZVwiOiBcIkFtcFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJncmFubXUtcHJpc20ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBRdWlsbHMgKENldHVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL0dyYW5tdV9QcmlzbVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHcmF0dGxlclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQXJjaHdpbmcvUHJpbWFyeS9SZXB1cnBvc2VkR3JpbmVlckFudGlBaXJjcmFmdEd1bi9BcmNoR1JOQUFHdW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjc1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNoYXR0ZXIgeW91ciB0YXJnZXRzIHdpdGggZXhwbG9zaXZlIHNoZWxscyBmcm9tIHRoaXMgZGV2YXN0YXRpbmcgQXJjaHdpbmcgY2Fubm9uLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjk0OTk5OTk5LFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJncmF0dGxlci5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjE3NS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvNzAvR3JuQW50aUFpckd1bi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwNzMxMTc0OTQxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9HcmF0dGxlclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJ0eXBlXCI6IFwiQXJjaHdpbmcgR3VuXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ2hlbSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiR3Jpbmxva1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9HcmluZWVyTGV2ZXJBY3Rpb25SaWZsZS9HTEFSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxODcsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2l0aCBwaW5wb2ludCBhY2N1cmFjeSwgdGhlIEdyaW5sb2sgbGV2ZXItYWN0aW9uIHJlcGVhdGluZyByaWZsZSBjYW4gZWFzaWx5IGZpbmQgdGhlIHNvZnQgc3BvdCBvbiBhbnkgdGFyZ2V0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA0NC40NDQ0NDMsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNDUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImdyaW5sb2sucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjE4Ny4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvOGMvREVHcmlubG9rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDAyMTQyMTUxMTFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0dyaW5sb2tcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDaGVtIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHdWFuZGFvXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Qb2xlYXJtcy9Ubkd1YW5kYW9Qb2xlYXJtL1RuR3VhbmRhb1BvbGVhcm1XZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogOTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhhcnZlc3QgdGhlIGVuZW15IHdpdGggdGhpcyB0b3dlcmluZyBwb2xlYXJtLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTUwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiZ3VhbmRhby5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQb2xlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiOTAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzA1L0d1YW5kYW8ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDcyMDE3MDI1MVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvR3VhbmRhb1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTbGlkZVwiLFxuICAgICAgXCJyYW5rXCI6IDYwLjMsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgbG93IGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlR3aXJsaW5nIFNwaXJlXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiU2xpZGVcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHdW5zZW5cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1dhcmZhbi9XYXJmYW5XZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxhY2VyYXRlIGF0dGFja2VycyB3aXRoIHR3byByYXpvciBzaGFycCB3YXJmYW5zLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjAwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImd1bnNlbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJXYXJmYW5cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI1MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzQvNDUvV2FyZmFuV2VhcG9uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzEyMjEyMTQ0MzRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0d1bnNlblwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMzkuNTksXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vbnN0cm91cyBEUFMsIHZlcnkgaGlnaCBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJTbGljaW5nIEZlYXRoZXJzXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQWx0IGNvbWJvPSBSYXpvciBGaW46IC1EUFMgK3Byb2NzXCIsXG4gICAgICBcImNvbWJvXCI6IFwiU2NhdGhpbmcgUGx1bWVcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJIYWxpa2FyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL01lbGVlL0dybkJvb21lcmFuZy9Hcm5Cb29tZXJhbmdcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgamV0IHBvd2VyZWQgR3JpbmVlciB0aHJvd2luZyBtYWNlIGFsd2F5cyBjb21lcyBiYWNrIHRvIGl0cyBtYXN0ZXIgYW5kIGlzIGV2ZW4gY2FwYWJsZSBvZiBkaXNhcm1pbmcgdGFyZ2V0cy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDEzNSxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40NDAwMDAxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiaGFsaWthci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJHbGFpdmVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0NS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJUaHJvd25cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wMS9Hcm5Cb29tZXJhbmcucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTAyNDE0MzQxM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvSGFsaWthclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTYuODksXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIFRocm93biBhdHRhY2tzIGNhbiBkaXNhcm0gb3Bwb25lbnRzLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQXN0cmFsIFR3aWxpZ2h0XCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiTW9ybmluZyBTdW5cIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJIYXJwYWtcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTG9uZ0d1bnMvR3JuSGFycG9vbkd1bi9Hcm5IYXJwb29uR3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQnVyc3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTcGlrZSBlbmVtaWVzIHRvIHRoZSB3YWxsIG9yIHJlZWwgdGhlbSBpbiB3aXRoIHRoaXMgYnVyc3QgaGFycG9vbiBndW4uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE4LjE4MTgxOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjU1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJoYXJwYWsucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjUwLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IFwiPz8/XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIkhhcnBvb25cIixcbiAgICAgICAgXCJzcGVlZFwiOiAxLjUsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMjUsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDIuMyxcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMSxcbiAgICAgICAgXCJzaG90X3R5cGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICAgIFwic2hvdF9zcGVlZFwiOiBudWxsLFxuICAgICAgICBcImltcGFjdFwiOiA0MCxcbiAgICAgICAgXCJzbGFzaFwiOiAxMCxcbiAgICAgICAgXCJwdW5jdHVyZVwiOiA1MFxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wZC9Hcm5IYXJwb29uR3VuLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA3MzExNzQ5NDFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0hhcnBha1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gVGhyZWUtcm91bmQgYnVyc3QgaXMgd2FzdGVmdWwgYXQgdGltZXMuIEFsdCBmaXJlIGxhdW5jaGVzIGEgaGFycG9vbiBjYW4gYmUgdXNlZCB0byBkcmFnIGVuZW1pZXMgY2xvc2VyIGFuZCB3aXRoIEV4cG9zaW5nIEhhcnBvb24gZ3JhbnRzIGFuIGFkZGl0aW9uYWwgMzAwJSBjcml0IGNoYW5jZS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjksXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvUHJpZXN0L1ByaWVzdFwiLFxuICAgICAgXCJuYW1lXCI6IFwiSGFycm93XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQWx3YXlzIHByZXBhcmVkIHRvIHNhY3JpZmljZS4gVGhpcyBtb25hc3RpYyBXYXJmcmFtZSB1c2VzIHRoZSBWb2lkIHRvIGJvbHN0ZXIgYWxsaWVzJyBkZWZlbnNlcyBhbmQgYW1wbGlmeSB0aGVpciBsZXRoYWxpdHkuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiT3ZlcnNoaWVsZCBjYXAgZG91YmxlZC5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImhhcnJvdy5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJuYXJhbW9uXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDM4NzQ4NTIsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIyMVwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzRkL0hhcnJvdy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwMTIxMTczNzQyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9IYXJyb3dcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDaGFpbnMgb2YgSGFycm93IChRdWVzdClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJIYXRlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9TY3l0aGUvU3RhbGtlclNjeXRoZVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSGF0ZSBpcyBhIHNjeXRoZSB3aXRoIGEgY3J1ZWwgYmxhZGUsIHdpZWxkZWQgYnkgVGhlIFN0YWxrZXIuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMzYsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJoYXRlLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNjeXRoZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjcwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOS85OS9ERVN0YWxrZXJTY3l0aGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDExNjE1MzUwOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvSGF0ZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlN0YWxrZXJcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTQuMDcsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgaGl0LCBtb2RlcmF0ZSBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJTdGFsa2luZyBGYW5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJEeWluZyBMaWdodFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkhlYXQgRGFnZ2VyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9EYWdnZXIvRGFnZ2VyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGlzIHNob3J0IGJsYWRlIHdlYXBvbiBoYXMgbGltaXRlZCByYW5nZSBidXQgY29tZXMgb3V0IGZhc3QgYW5kIGNhbiBpbmZsaWN0IGZpcmUgZGFtYWdlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTM1LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ0MDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJoZWF0LWRhZ2dlci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEYWdnZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvM2MvSGVhdERhZ2dlci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMjIxMTQ0MjM3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9IZWF0X0RhZ2dlclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIlNwZWVkXCIsXG4gICAgICBcInJhbmtcIjogNTQuNTksXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgdmVyeSBsb3cgYXR0YWNrIHNwZWVkLiBTbGFtIGF0dGFja3MgZGVhbCBIZWF0IGRhbWFnZSBhbmQgaGF2ZSBoaWdoIGNoYW5jZSBvZiBwcm9jY2luZyBIZWF0LiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3RpbmdpbmcgVGhvcm5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJDYXJ2aW5nIFNwaWtlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiSGVhdCBTd29yZFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU3dvcmRzL0hlYXRTd29yZC9IZWF0TG9uZ1N3b3JkXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ0LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHN0cm9uZyBibGFkZSBjYXBhYmxlIG9mIGluZmxpY3RpbmcgPERUX1NMQVNIPlNsYXNoIERhbWFnZSB0byBpdHMgZm9lcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE3NixcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40OCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImhlYXQtc3dvcmQucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU3dvcmRcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0NC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2MvYzQvSGVhdC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNDI2MDgwNjI1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9IZWF0X1N3b3JkXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTEuNDUsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgbG93IGF0dGFjayBzcGVlZC4g4pyqXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlN3b29waW5nIEZhbGNvblwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIkNyaW1zb24gRGVydmlzaCdzIENvaWxpbmcgSW1wYWxlOiArRFBTIC1wcm9jXCIsXG4gICAgICBcImNvbWJvXCI6IFwiRGl2aW5nIEtlc3RyZWxcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJIZWtcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Nob3RndW4vUXVhZFNob3RndW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTI1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBIZWsgaXMgYSBwb3dlcmZ1bCBzaG90Z3VuIHRoYXQgZmlyZXMgaXRzIHNob3RzIHdpdGggYSB0aWdodCBzcHJlYWQsIG1ha2luZyBpdCBlZmZpY2llbnQgYXQgbWVkaXVtIHJhbmdlIGFzIGxvbmcgYXMgaXRzIHN0cm9uZyByZWNvaWwgaXMgcHJvcGVybHkgbWFuYWdlZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogOS4wOTA5MDksXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC45NDk5OTk5OSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiaGVrLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNob3RndW5cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjUyNS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTYvSGVrLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA0MjYwNzQwMjVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0hla1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJIZWxpb2NvclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ2VwaGFsb24vTWVsZWUvSGFtbWVyL0NlcGhIYW1tZXJXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTQwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJPYnRhaW4gZW5saWdodGVubWVudCB3aXRoIHRoaXMgbWFzc2l2ZSBoYW1tZXIgdGhhdCBwZXJmb3JtcyBhIENvZGV4IHNjYW4gb24gZWFjaCBmYXRhbCBzdHJpa2UuIFNjYW5zIHJlcXVpcmUgYW4gZXF1aXBwZWQgQ29kZXggU2Nhbm5lciBhbmQgYW4gYXZhaWxhYmxlIGNoYXJnZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI4MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDksXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC45NCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImhlbGlvY29yLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkhhbW1lclwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjE0MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYWUvQ2VwaEhhbW1lci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwNzI4MTU0MDExXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9IZWxpb2NvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJDcml0aWNhbFwiLFxuICAgICAgXCJyYW5rXCI6IDEzOS44NixcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgbG93IGF0dGFjayBzcGVlZC4gR2l2ZXMgb25lIGNvZGV4IHNjYW4gdXBvbiBraWxsLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ3J1c2hpbmcgUnVpblwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIk9ubHkgdXNlIFJhZ2luZyBXaGlybHdpbmQgdG8gcHJvYyBJbXBhY3Qgb3IgdGhlIHNsYW0gd2lsbCByYWdkb2xsXCIsXG4gICAgICBcImNvbWJvXCI6IFwiVGlkYWwgRm9yY2UgJiBSYWdpbmcgV2hpcmx3aW5kXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFBvd2Vyc3VpdHMvTWVsZWVQZXRQb3dlclN1aXRcIixcbiAgICAgIFwibmFtZVwiOiBcIkhlbGlvc1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggJ0ludmVzdGlnYXRvcicgYXMgaXRzIHVuaXF1ZSBQcmVjZXB0IGFuZCAnRGVjb25zdHJ1Y3RvcicgYXMgaXRzIHdlYXBvbiwgdGhlIHZlcnNhdGlsZSBIZWxpb3MgU2VudGluZWwgYWN0cyBhcyBib3RoIGEgbGV0aGFsIGd1YXJkaWFuIGFuZCBhbiBhdXRvbWF0aWMgY29kZXggc2Nhbm5lci4gU2NhbnMgcmVxdWlyZSBhbiBlcXVpcHBlZCBDb2RleCBTY2FubmVyIGFuZCBhbiBhdmFpbGFibGUgY2hhcmdlLk5vdGU6IFRoaXMgaXRlbSByZXF1aXJlcyB0d28gb3BlbiBzbG90cy5cIixcbiAgICAgIFwidHlwZVwiOiBcIlNlbnRpbmVsXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImhlbGlvcy5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9IZWxpb3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFBvd2Vyc3VpdHMvUHJpbWVIZWxpb3NQb3dlclN1aXRcIixcbiAgICAgIFwibmFtZVwiOiBcIkhlbGlvcyBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMga25vd2xlZGdlIGh1bmdyeSBwcm90ZWN0b3IgZGVmZW5kcyBpdHMgbWFzdGVyIHdpdGggRGVjb25zdHJ1Y3RvciBQcmltZS5cIixcbiAgICAgIFwidHlwZVwiOiBcIlNlbnRpbmVsXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImhlbGlvcy1wcmltZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE3IDAyIDI4XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTggMTIgMTJcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxOCAxMiAxMlwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL0hlbGlvc19QcmltZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvR2FtZS9LdWJyb3dQZXQvQ2hhcmdlckt1YnJvd1BldFBvd2VyU3VpdFwiLFxuICAgICAgXCJuYW1lXCI6IFwiSGVsbWludGggQ2hhcmdlclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFuIEluZmVzdGVkIHBldCBicmVkIGZyb20gdGhlIEhlbG1pbnRoIEN5c3RcIixcbiAgICAgIFwidHlwZVwiOiBcIkNvbXBhbmlvblwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJoZWxtaW50aC1jaGFyZ2VyLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkt1YnJvd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJJbmN1YmF0b3IgU2VnbWVudCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9IZWxtaW50aF9DaGFyZ2VyXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkhlbWFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0luZmVzdGVkL0xvbmdHdW5zL0luZldGQWNjb21wYW55aW5nUHJpL0luZmVzdGVkQnVyc3RSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA0NyxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkJ1cnN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBibG9vZHN1Y2tlci4gVGhpcyBzeW1iaW90aWMgYnVyc3QtcmlmbGUgbGVlY2hlcyBoZWFsdGggdG8gZm9yZ2UgaXRzIGFtbW8gYW5kIHRoZW4gcmVzdG9yZXMgaGVhbHRoIHdpdGggZWFjaCBoZWFkc2hvdC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiaGVtYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDcuMCB2aXJhbFwiLFxuICAgICAgXCJmbGlnaHRcIjogXCI/Pz9cIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNS81Zi9JbmZlc3RlZEJ1cnN0UmlmbGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTIyMjE0MzQxMVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvSGVtYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJpbyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBIZWFscyB3YXJmcmFtZSBvbiBoZWFkc2hvdHMuIFRocmVlLXJvdW5kIGJ1cnN0IGlzIHdhc3RlZnVsIGF0IHRpbWVzLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1Mi43LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkhpa291XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9UaHJvd2luZ1dlYXBvbnMvVGVubm9TdGFyc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyNixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBcyBhbiBhbHRlcm5hdGl2ZSB0byBLdW5haSwgdGhlc2UgVGVubm8gdGhyb3dpbmcgc3RhcnMgZG8gY2F1c2UgbGVzcyBEYW1hZ2UgYnV0IHRoZXkgY29tZSB3aXRoIGV4cGFuZGVkIEFtbW8gQ2FwYWNpdHkgYW5kIGEgaGlnaGVyIEZpcmUgUmF0ZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjA1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImhpa291LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRocm93blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjYuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2QvZDkvSGlrb3UucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MTIxOTE0MjkxMFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvSGlrb3VcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJIaWtvdSBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vVGhyb3dpbmdXZWFwb25zL1ByaW1lVGhyb3dpbmdTdGFyL1ByaW1lSGlrb3VcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzYsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXMgZGVhZGx5IGFzIGFueSBidWxsZXQgd2l0aG91dCB0aGUgYXNzb2NpYXRlZCBub2lzZSBvciBjb21tb3Rpb24uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiU2lsZW50XCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJoaWtvdS1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJUaHJvd25cIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzYuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2IvYjQvUHJpbWVIaWtvdS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwOTIzMTk1ODE4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9IaWtvdV9QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTQgMDkgMjNcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNiAwOCAyM1wiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE2IDA4IDIzXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCAgcHJvamVjdGlsZSBtdW5pdGlvbnMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA3NCxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9Jcm9uRnJhbWUvSXJvbkZyYW1lXCIsXG4gICAgICBcIm5hbWVcIjogXCJIaWxkcnluXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGJlc3QgZGVmZW5zZSBpcyBhIGdvb2Qgb2ZmZW5zZS4gSGlsZHJ5biBkcmF3cyBmcm9tIGhlciBTaGllbGRzIHRvIGZ1ZWwgaGVyIEFiaWxpdGllcywgd2hpbGUgRW5lcmd5IHJlY2hhcmdlcyBoZXIgU2hpZWxkcy5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJCZWNvbWUgaW52dWxuZXJhYmxlIGZvciBhIGJyaWVmIG1vbWVudCBhZnRlciBzaGllbGRzIGFyZSBkZXBsZXRlZC4gVGhpcyBhYmlsaXR5IGlzIHJlc3RvcmVkIHdoZW4gc2hpZWxkcyBmdWxseSByZWNoYXJnZS5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImhpbGRyeW4ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibmFyYW1vblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiBmYWxzZSxcbiAgICAgIFwiY29sb3JcIjogMzE2MDM4NyxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjI0LjRcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzE5L0hpbGRyeW5JY29uMjcyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxOTAzMDgwNTQxNDJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0hpbGRyeW5cIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiSGluZFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9CdXJzdFJpZmxlL0dybkJ1cnN0UmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJCdXJzdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgcG93ZXJmdWwgbWlkLXJhbmdlIHJpZmxlIHVzZWQgYnkgR3JpbmVlciBzaG9jayB0cm9vcHMsIHRoZSBIaW5kIGZpcmVzIGluIGZpdmUgcm91bmQgYnVyc3RzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAzMy4zMzMzMzIsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40MixcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiaGluZC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJTZW1pLUF1dG8gTW9kZVwiLFxuICAgICAgICBcInNwZWVkXCI6IDIuNSxcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiAxNSxcbiAgICAgICAgXCJjcml0X211bHRcIjogMixcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMSxcbiAgICAgICAgXCJpbXBhY3RcIjogMTIsXG4gICAgICAgIFwic2xhc2hcIjogMzYsXG4gICAgICAgIFwicHVuY3R1cmVcIjogMTJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNmQvSGluZC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwODE2MjAzMTI4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9IaW5kXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIEFsdCBmaXJlIGhhcyBiZXR0ZXIgRFBTIG9uIHBhcGVyIGJ1dCBkdWUgdG8gbG93IGZpcmUgcmF0ZSBpdCBzdGlsbCBkb2Vzbid0IGRvIGVub3VnaC4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMTkzLjgsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiSGlydWRvXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9JbmZlc3RlZC9NZWxlZS9JbmZXRkFjY29tcGFueWluZ1NwYXJyaW5nL0luZmVzdGVkS29nYWtlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDU0Ljk5OTk5NixcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmlwIGludG8gdGhlIGVuZW15IHdpdGggZmlzdHMgb2YgcmF6b3Igc2hhcnAgY2FydGlsYWdlLiBTdGVhbHMgaGVhbHRoIHdpdGggZWFjaCBjcml0aWNhbCBoaXQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNjUsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImhpcnVkby5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTcGFycmluZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjU1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yYS9JbmZlc3RlZEtvZ2FrZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYxMjIyMDAyMTM1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9IaXJ1ZG9cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1OC4wMixcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBVcG9uIGNyaXQsIGhlYWwgeW91IGZvciA1JSBvZiBkYW1hZ2UgZGVhbHQsIGFuZCBnaXZlcyB1cCB0byA1IHN0YWNrcyBvZiBJbnZpZ29yYXRlICgrNSUgbWF4IGhlYWx0aCwgMTVzKS4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkdyaW0gRnVyeVwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIkJyaWdodCBCbGF6ZSAmIENoYXJnZWQgQXR0YWNrc1wiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9HYW1lL0t1YnJvd1BldC9GdXJ0aXZlS3Vicm93UGV0UG93ZXJTdWl0XCIsXG4gICAgICBcIm5hbWVcIjogXCJIdXJhcyBLdWJyb3dcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQcml6ZWQgZm9yIGl0cyBhYmlsaXR5IHRvIHNuZWFrIHVwIG9uIHVuc3VzcGVjdGluZyBwcmV5LCB0aGUgSHVyYXMgS3Vicm93IHdlcmUgZmlyc3QgdXNlZCBhcyBodW50aW5nIGNvbXBhbmlvbnMgYnkgdGhlIE9yb2tpbiBlbGl0ZS4gT3Jva2luIEVyYSBUZW5ubyBzb29uIGFkYXB0ZWQgdGhlIHN0cmFpbiBmb3IgdXNlIGluIGNvdmVydCBtaXNzaW9ucyBhbmQgYXNzYXNzaW5hdGlvbnMuXCIsXG4gICAgICBcInR5cGVcIjogXCJDb21wYW5pb25cIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiaHVyYXMta3Vicm93LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkt1YnJvd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJJbmN1YmF0b3IgU2VnbWVudCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9IdXJhc19LdWJyb3dcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvUGlyYXRlL1BpcmF0ZVwiLFxuICAgICAgXCJuYW1lXCI6IFwiSHlkcm9pZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJpc2luZyBmcm9tIHRoZSBvY2VhbiBkZXB0aHMsIEh5ZHJvaWQgaGFybmVzc2VzIHRoZSBwb3dlciBvZiB3YXRlciB0byBhIGRldmFzdGF0aW5nIGVmZmVjdC5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjA1LFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJTbGFtIEF0dGFja3MgaGF2ZSBhIHxDSEFOQ0V8JSBjaGFuY2UgdG8gc3VtbW9uIGEgdGVudGFjbGUgZm9yIHxEVVJBVElPTnxzLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiaHlkcm9pZC5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJuYXJhbW9uXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDM3NTEyMjksXG4gICAgICBcImludHJvZHVjZWRcIjogXCIxM1wiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjA1LFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy85LzlmL0h5ZHJvaWROZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjMxMTNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0h5ZHJvaWRcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDb3VuY2lsb3IgVmF5IEhlayAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9QaXJhdGUvSHlkcm9pZFByaW1lXCIsXG4gICAgICBcIm5hbWVcIjogXCJIeWRyb2lkIFByaW1lXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ29tbWFuZCB0aGUgb2NlYW7igJlzIGZ1cnkgd2l0aCB0aGlzIGtpbmcgb2YgZ29sZCBhbmQgc2lsdmVyLiBGZWF0dXJpbmcgYWx0ZXJlZCBtb2QgcG9sYXJpdGllcyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDUsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMDUsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIlNsYW0gQXR0YWNrcyBoYXZlIGEgfENIQU5DRXwlIGNoYW5jZSB0byBzdW1tb24gYSB0ZW50YWNsZSBmb3IgfERVUkFUSU9OfHMuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJoeWRyb2lkLXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwibmFyYW1vblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAyNTY1NjY2LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMjEuNlwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjA1LFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNmYvSHlkcm9pZFByaW1lQnVzdC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwOTAzMTYzNjEwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9IeWRyb2lkX1ByaW1lXCIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNyAwOCAyOVwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE5IDA3IDA3XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTkgMDcgMDdcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiSHlzdHJpeFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9scy9RdWlsbERhcnRndW4vUXVpbGxEYXJ0R3VuV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM2LjAwMDAwNCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIZWF0LCBjb2xkLCBlbGVjdHJpY2l0eSwgb3IgdG94aW46IGNob29zZSBhbiBlbGVtZW50IGFuZCBsYXVuY2ggYSBmbHVycnkgb2YgZGVhZGx5IHF1aWxscy4gVGhpcyB2ZXJzYXRpbGUgc2lkZWFybSBpcyBLaG9yYeKAmXMgc2lnbmF0dXJlIHdlYXBvbi5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTQuMjg1NzE0LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJoeXN0cml4LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzYuMVwiLFxuICAgICAgXCJmbGlnaHRcIjogXCI/Pz9cIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiRmlyZSAvIEVsZWN0cmljIFF1aWxsXCIsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMjQsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDIuMixcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMSxcbiAgICAgICAgXCJzaG90X3R5cGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICAgIFwiaW1wYWN0XCI6IDIuNCxcbiAgICAgICAgXCJzbGFzaFwiOiAzLjIsXG4gICAgICAgIFwicHVuY3R1cmVcIjogMzQuNFxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYS9hNy9IeXN0cml4LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA0MTcxODQxMTZcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0h5c3RyaXhcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gQm9sdHMgbXVuaXRpb25zIGhhdmUgcHJvcyBhbmQgY29ucy4gQ2xpcCBpcyBzbWFsbCBmb3IgZmlyZSByYXRlIGFuZCBkZXNwaXRlIHF1aWNrIHJlbG9hZCB3aWxsIGVuZCB1cCBiZWluZyBhbm5veWluZy4gQWx0LWZpcmUgY2hhbmdlcyBlbGVtZW50YWwgZGFtYWdlIHRvIG9uZSBvZiBmb3VyIGJhc2ljIHR5cGVzIChGaXJlLCBJY2UsIFBvaXNvbiwgRWxlY3RyaWNpdHkpIHdpdGggZ3VhcmFudGVlZCBwcm9jcyB3aGljaCBzY2FsZXMgbW9yZSBpZiBjb3JyZXNwb25kaW5nIGVsZW1lbnRhbCBtb2QgaXMgaW5zdGFsbGVkLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1OC4zLFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIklnbmlzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9DbGFuVGVjaC9DaGVtaWNhbC9GbGFtZVRocm93ZXJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkhlbGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJZ25pcyBwcm9kdWNlcyBhIHN0cmVhbSBvZiBpbnRlbnNlIGhlYXQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjU1MDAwMDAxLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJpZ25pcy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzMuMCBoZWF0XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOS85OS9HcmluZWVyRmxhbWVUaHJvd2VyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEwMjgxODEwMzhcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0lnbmlzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ2hlbSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiSWduaXMgV3JhaXRoXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9DbGFuVGVjaC9DaGVtaWNhbC9GbGFtZVRocm93ZXJXcmFpdGhcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkhlbGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGJsb29kLXJlZCB2YXJpYW50IG9mIHRoaXMgZGVzdHJ1Y3RpdmUgZmxhbWV0aHJvd2VyLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDksXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC41NTAwMDAwMSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiaWduaXMtd3JhaXRoLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1LjAgaGVhdFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiRGlzY2hhcmdlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTAvSWduaXNXcmFpdGgucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDMwMzEyMzA0M1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvSWduaXNfV3JhaXRoXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ2hlbSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsIGJlYW0gbXVuaXRpb25zLiBBT0Ugd29ya3MgbGlrZSBob3cgeW91J2QgaW1hZ2luZSBhbiBhY3R1YWwgZmxhbWV0aHJvd2VyIHdvdWxkLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0NS42LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcInNwZWNpYWxOb3RlXCI6IFwiSXRlbSBhcmUgbGltaXRlZC5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiSW1wZXJhdG9yXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9BcmNod2luZy9QcmltYXJ5L0ZvbGRpbmdNYWNoaW5lR3VuL0FyY2hNYWNoaW5lR3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgbG9uZyByYW5nZSByaWZsZSBjYXBhYmxlIG9mIGZpcmluZyBpbiBzcGFjZSwgdGhlIEltcGVyYXRvcidzIHZlcnNhdGlsaXR5IG1ha2VzIGl0IGFuIGlkZWFsIHdlYXBvbiBmb3Igc3BhY2UgY29tYmF0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjg1MDAwMDAyLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJpbXBlcmF0b3IucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzQvNGEvQXJjaHdpbmdNYWNoaW5lZ3VuLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDEwMjQxNDM3MzNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0ltcGVyYXRvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJ0eXBlXCI6IFwiQXJjaHdpbmcgR3VuXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGhlIEFyY2h3aW5nIChRdWVzdClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJJbXBlcmF0b3IgVmFuZGFsXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9BcmNod2luZy9QcmltYXJ5L0ZvbGRpbmdNYWNoaW5lR3VuL0FyY2hNYWNoaW5lR3VuVmFuZGFsXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBJbXBlcmF0b3IgVmFuZGFsIGhhcyBiZWVuIGN1c3RvbWl6ZWQgYnkgdGhlIFRlbm5vIHdpdGggYSBibHVlLWdyZWVuIG1ldGFsbGljIGZpbmlzaCBhbmQgTG90dXMgYnJhbmRpbmcgb24gdGhlIGJhcnJlbC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjUsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDUsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44NTAwMDAwMixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiaW1wZXJhdG9yLXZhbmRhbC5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9lL2VkL0ltcGVyYXRvclZhbmRhbC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMjE0MTc0NzIwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9JbXBlcmF0b3JfVmFuZGFsXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDIsXG4gICAgICBcInR5cGVcIjogXCJBcmNod2luZyBHdW5cIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJGb21vcmlhbiBTYWJvdGFnZVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL1NhbmRtYW4vU2FuZG1hblwiLFxuICAgICAgXCJuYW1lXCI6IFwiSW5hcm9zXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmlzZW4gZnJvbSB0aGUgc2FuZHMsIEluYXJvcyBjb21tYW5kcyB0aGUgZGVzZXJ0J3MgZmVhcnNvbWUgcG93ZXIuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiV2hpbGUgYmxlZWRpbmctb3V0LCBJbmFyb3MgYmVjb21lcyBlbnRvbWJlZCBpbiBhIHByb3RlY3RpdmUgU2FyY29waGFndXMuIEhlIGNhbiByZXZpdmUgaGltc2VsZiBieSBkcmFpbmluZyB0aGUgbGlmZS1mb3JjZSBmcm9tIG5lYXJieSBlbmVtaWVzIGFuZCBhbGxpZXMuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJpbmFyb3MucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibmFyYW1vblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAyNjk2MjI0LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTguNVwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8zLzNhL0luYXJvc05ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDMwODAyNTIxOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvSW5hcm9zXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiU2FuZHMgb2YgSW5hcm9zIChRdWVzdClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9BcmNod2luZy9TdGVhbHRoSmV0UGFjay9TdGVhbHRoSmV0UGFja1wiLFxuICAgICAgXCJuYW1lXCI6IFwiSXR6YWxcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZXNpZ25lZCBmb3IgcXVpY2sgY2xhbmRlc3RpbmUgYXR0YWNrcywgdGhlIEl0emFsIEFyY2h3aW5nIGV4Y2VscyBhdCBzdHJpa2luZyBmcm9tIHRoZSBkYXJrbmVzcyBvZiBzcGFjZS5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjIsXG4gICAgICBcInR5cGVcIjogXCJWZWhpY2xlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIml0emFsLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkFyY2h3aW5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9JdHphbFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9SYW5nZXIvUmFuZ2VyXCIsXG4gICAgICBcIm5hbWVcIjogXCJJdmFyYVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggaGVyIHF1aXZlciBvZiB0YWN0aWNhbCBhcnJvd3MsIHRoaXMgaHVudHJlc3MgcHJvd2xzIHVuc2VlbiBhbmQgc3RyaWtlcyB3aXRob3V0IHdhcm5pbmcuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4xNSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiU2Vuc2VzIG5lYXJieSBlbmVtaWVzIHdpdGhpbiB8UkFESVVTfG0uXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJpdmFyYS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJuYXJhbW9uXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDM4MTI5MDIsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIxOFwiLFxuICAgICAgXCJzZXhcIjogXCJGZW1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEuMTUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvOGMvSXZhcmFOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEyMDQwNjU2MjZcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0l2YXJhXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiU3B5IE1pc3Npb25zXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiSmF0IEtpdHRhZ1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9NZWxlZS9HcmluZWVySmV0UG93ZXJlZFBvbGVhcm0vR3JpbmVlckpldFBvbGVhcm1cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTMwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZWxpdmVyIGNydXNoaW5nIGJsb3dzIHdpdGggdGhpcyBHcmluZWVyIGJ1aWx0LCBqZXQgcG93ZXJlZCBtYWNlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjYwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjc1LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiamF0LWtpdHRhZy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJIYW1tZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMzAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzAxL0dybkpldFB3clBvbGVhcm0ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDQwNjA0MzQxMVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvSmF0X0tpdHRhZ1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAxLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNoZW0gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcImRtZ1wiOiBcIlNsaWRlXCIsXG4gICAgICBcInJhbmtcIjogNjMuNTEsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBWdWxjYW4gQmxpdHogY2F1c2Uga2lsbHMgdG8gZXhwbG9kZSBkZWFsaW5nIDMwMCAoKzYwJSBvZiBlbmVteSBoZWFsdGgpIEJsYXN0IGRhbWFnZSBpbiA2bSByYWRpdXMuIFBhcnQgb2YgdGhlIFRlbm5vIFNwYWNlIFByb2dyYW0uIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDcnVzaGluZyBSdWluXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiT25seSB1c2UgUmFnaW5nIFdoaXJsd2luZCB0byBwcm9jIEltcGFjdCBvciB0aGUgc2xhbSB3aWxsIHJhZ2RvbGxcIixcbiAgICAgIFwiY29tYm9cIjogXCJTbGlkZVwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkphdCBLdXNhclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9NZWxlZS9Hcm5LdXNhcmlnYW1hL0dybkt1c2FyaWdhbWFXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogODAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk92ZXJ3aGVsbSBob3N0aWxlcyB3aXRoIHRoaXMgamV0LXBvd2VyZWQgc2lja2xlIGFuZCByYXpvci1jaGFpbiB3ZWFwb24uIENoYXJnZWQgc3RyaWtlcyBpZ25pdGUgYW4gZXhwbG9zaXZlIGJsYXN0IGF0IHJhbmdlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMzIwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44MSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImphdC1rdXNhci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJCbGFkZSBhbmQgV2hpcFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjgwLjAgaGVhdFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9iL2IyL0phdEt1c2FyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzA3MjgyMDU3MTlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0phdF9LdXNhclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNoZW0gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiA0MS4yMSxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIG1vbnN0cm91cyBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJEZWZpbGVkIFNuYXBkcmFnb25cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IEhlYXJ0IG9mIHRoZSBOYWdhOyArRFBTLCAtZXhlY3V0aW9uLCAtcmFnZG9sbHNcIixcbiAgICAgIFwiY29tYm9cIjogXCJTb3VsIG9mIHRoZSBMZXZpYXRoYW5cIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJKYXZsb2tcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTG9uZ0d1bnMvR3JuRmxhbWVTcGVhci9Hcm5GbGFtZVNwZWFyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEsXG4gICAgICBcInRyaWdnZXJcIjogXCJDaGFyZ2VcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJMYXVuY2ggc3VwZXItaGVhdGVkIHNsdWdzIGF0IGluZGl2aWR1YWwgZm9lcywgb3IgaHVybCB0aGUgZW50aXJlIHdlYXBvbiBhbmQgaWduaXRlIGdyb3VwcyBvZiBlbmVtaWVzIGluIGEgZmxhc2ggaW5mZXJuby5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiamF2bG9rLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNwZWFyZ3VuXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogMjMwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJUaHJvdyBTcGVhclwiLFxuICAgICAgICBcInNwZWVkXCI6IDEsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMjAsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDIsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLjMsXG4gICAgICAgIFwiY2hhcmdlX3RpbWVcIjogMC41LFxuICAgICAgICBcInNob3RfdHlwZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgICAgXCJzaG90X3NwZWVkXCI6IG51bGwsXG4gICAgICAgIFwiaW1wYWN0XCI6IDQ1LFxuICAgICAgICBcInNsYXNoXCI6IDMwLFxuICAgICAgICBcInB1bmN0dXJlXCI6IDc1XG4gICAgICB9LFxuICAgICAgXCJzZWNvbmRhcnlBcmVhXCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiU3BlYXIgRXhwbG9zaW9uXCIsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAyNSxcbiAgICAgICAgXCJyYWRpdXNcIjogNzAwLFxuICAgICAgICBcImhlYXRcIjogMzAwLFxuICAgICAgICBcImRhbWFnZVwiOiBcIjMwMC4wIGhlYXRcIlxuICAgICAgfSxcbiAgICAgIFwic3RhdHVzQ2hhbmNlXCI6IDI1LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzFkL0dybkZsYW1lU3BlYXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTIxNzAxNDgzNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvSmF2bG9rXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ2hlbSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBBbHQgZmlyZSBjcmVhdHMgYSBsb2NhbGl6ZWQgZXhwbG9zaW9uLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2OS45LFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkphdyBTd29yZFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU3dvcmRzL0phd1N3b3JkL0phd0xvbmdTd29yZFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA0NCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBibGFkZSB3aXRoIGEgc2VycmF0ZWQgZWRnZSB0aGF0IGRlbGl2ZXJzIHN0cm9uZyBxdWljayBhdHRhY2tzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTc2LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ3LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiamF3LXN3b3JkLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN3b3JkXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDQuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2YzL0phdy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNDI2MDgwNjI5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9KYXdfU3dvcmRcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJOaWdodHdhdmVcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA4NC42MyxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIEJsYWRlIG9mIFRydXRoIGluY3JlYXNlcyBkYW1hZ2UgYnkgMTAwJSBhbmQgZ2l2ZXMgVHJ1dGggKEdhcywgaGVhbHRoLCBwYXJrb3VyKSBlZmZlY3RzLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3dvb3BpbmcgRmFsY29uXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQ3JpbXNvbiBEZXJ2aXNoJ3MgQ29pbGluZyBJbXBhbGU6ICtEUFMgLXByb2NcIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXZpbmcgS2VzdHJlbFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkthbWFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0R1YWxLYW1hcy9TaW5nbGVLYW1hXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgS2FtYSBpcyBhIFRlbm5vIHN0eWxlIGhhdGNoZXQsIGNhcGFibGUgb2YgbWFraW5nIHNob3J0IHdvcmsgb2YgYW55IGZvZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE4MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40NyxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImthbWEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiTWFjaGV0ZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjQ1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZi9mMC9LYW1hLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA5MTQxMTE0MDJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0thbWFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjcuNjksXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkN5Y2xvbmUgS3Jha2VuXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiTGlnaHRuaW5nIFNpcmVuXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJLYXJha1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9HcmluZWVyTTE2SG9tYWdlL0dyaW5lZXJNMTZSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyOSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTb2xpZCwgZGVwZW5kYWJsZSBhbmQgZGVhZGx5LiBUaGUgS2FyYWsgaXMgYSBzdGFuZGFyZCBpc3N1ZSByaWZsZSBpbiBtYW55IEdyaW5lZXIgcGxhdG9vbnMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI4LjU3MTQyOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI4LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJrYXJhay5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjkuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9lL2VhL0dyaW5lZXJNMTZSaWZsZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMxMjMxMTg0NzM0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9LYXJha1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJLYXJhayBXcmFpdGhcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTG9uZ0d1bnMvR3JpbmVlck0xNkhvbWFnZS9LYXJha1dyYWl0aFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzMSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGRpZmZlcmVudCB0YWtlIG9uIHRoZSBHcmluZWVyIGFzc2F1bHQgcmlmbGUsIHRoZSBLYXJhayBXcmFpdGggZmVhdHVyZXMgdW5pcXVlIHN0eWxpbmcuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI4LjU3MTQyOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI4LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJrYXJhay13cmFpdGgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzEuMlwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2M3L0thcmFrV3JhaXRoLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA1MTIyMzMxMTdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0thcmFrX1dyYWl0aFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkludmFzaW9uc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDk1LjMsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS2FyeXN0XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvS3Jpc0RhZ2dlci9LcmlzRGFnZ2VyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJPbmNlIHRoZSBibGFkZSB3ZWFwb24gb2YgY2hvaWNlIGZvciBhbiBleGNsdXNpdmUgb3JkZXIgb2YgVGVubm8gYXNzYXNzaW5zLCB0aGUgS2FyeXN0IGRhZ2dlciBncmV3IHRvIGJlY29tZSBhIHN5bWJvbCBvZiBob25vciBhbmQgZHV0eSBmb3IgYWxsIFRlbm5vLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTUwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI5LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwia2FyeXN0LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkRhZ2dlclwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjUwLjAgdG94aW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84MC9LYXJ5c3REYWdnZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDgxODIzNTUwNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS2FyeXN0XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiU3BlZWRcIixcbiAgICAgIFwicmFua1wiOiA1MS44NyxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCB2ZXJ5IGxvdyBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJTdGluZ2luZyBUaG9yblwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIkNhcnZpbmcgU3Bpa2VcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJLYXN6YXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FyY2h3aW5nL01lbGVlL0FyY2hTY3l0aGUvQXJjaFNjeXRoZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzMjUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJlY29tZSBhbiBhbmdlbCBvZiBkZWF0aCwgd2l0aCB0aGlzIEFyY2h3aW5nIHNjeXRoZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDMyNSxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwia2FzemFzLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzI1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yNi9BcmNoU2N5dGhlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEwMDIwOTAxNDFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0thc3phc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJ0eXBlXCI6IFwiQXJjaHdpbmcgTWVsZWVcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS2VzaGVnXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL01lbGVlL0dyaW5lZXJIYWxiZXJkL0dybkhhbGJlcmRcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTA1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTbGljZSB0aHJvdWdoIG1vYnMgb2YgdW5ydWx5IGVuZW1pZXMgd2l0aCB0aGlzIGZpZXJjZSBoYWxiZXJkOyB0aGUgc2lnbmF0dXJlIHdlYXBvbiBvZiB0aGUgS3V2YSBHdWFyZGlhbnMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNzUsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjQsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJrZXNoZWcucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUG9sZWFybVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjEwNS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNjQvR3JuSGFsYmVyZC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYxMTEzMDAwNDIwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9LZXNoZWdcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDaGVtIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIlNsaWRlXCIsXG4gICAgICBcInJhbmtcIjogNDYuMjgsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiVHdpcmxpbmcgU3BpcmVcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJWYXVsdGluZyBBcGV4XCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS2VzdHJlbFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvR2xhaXZlcy9Cb29tZXJhbmcvQm9vbWVyYW5nV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgS2VzdHJlbCBib29tZXJhbmcgaXMgYSBoZWF2eSB0aHJvd2luZyB3ZWFwb24gdGhhdCBjYW4ga25vY2sgZG93biBlbmVtaWVzIGF0IGEgZGlzdGFuY2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMDUsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJrZXN0cmVsLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkdsYWl2ZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlRocm93blwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83LzcwL0tlc3RyZWwucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDYwNzIxNTU0OVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS2VzdHJlbFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA5Mi45OCxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBFbnRyb3B5IEZsaWdodCBncmFudHMgKzE0MCUgZmxpZ2h0IHNwZWVkIGFuZCBFbnRyb3B5IChNYWduZXRpYywgRW5lcmd5KSBlZmZlY3RzLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQXN0cmFsIFR3aWxpZ2h0XCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiTW9ybmluZyBTdW5cIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9LaG9yYS9LaG9yYVwiLFxuICAgICAgXCJuYW1lXCI6IFwiS2hvcmFcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUZW5ubyBhbmQgYmVhc3QsIHJlZCBpbiB3aGlwIGFuZCBjbGF3LiBLaG9yYSBhbmQgaGVyIEthdmF0IGNvbXBhbmlvbiwgVmVuYXJpLCBlbWJvZHkgbGV0aGFsIHZlcnNhdGlsaXR5LiBUd28gYm9kaWVzLCBvbmUgd2lsbC5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjA1LFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJUaGUgZmVyb2Npb3VzIGthdmF0LCBWZW5hcmksIGZpZ2h0cyBieSBLaG9yYSdzIHNpZGUgYW5kIHByb3ZpZGVzIGhlciB3aXRoIGEgfFNQRUVEfCUgc3BlZWQgYm9vc3Qgd2hpbGUgYWN0aXZlLiBJZiBraWxsZWQsIFZlbmFyaSB3aWxsIHJlYXBwZWFyIGFmdGVyIHxSRVNQQVdOfHMuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJraG9yYS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJ2YXphcmluXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDI4OTM2MDksXG4gICAgICBcImludHJvZHVjZWRcIjogXCIyMi4xOC4wXCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4wNSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wOC9LaG9yYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwOTEwMTQwMDA5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9LaG9yYVwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlNhbmN0dWFyeSBPbnNsYXVnaHRcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJLbGFtb3JhIFByaXNtXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvT3BlcmF0b3JBbXBsaWZpZXJzL1NldDEvQmFycmVsL0NvcnBBbXBTZXQxQmFycmVsUGFydENcIixcbiAgICAgIFwidHlwZVwiOiBcIkFtcFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJrbGFtb3JhLXByaXNtLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJMaXR0bGUgRHVjayAoRm9ydHVuYSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9LbGFtb3JhX1ByaXNtXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIktuZWxsXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9QaXN0b2xzL1RuUHJpZXN0UGlzdG9sU2NvcGUvVG5Qcmllc3RQaXN0b2xXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJpbmcgdGhlIGRlYXRoIGtuZWxsLiBIZWFkc2hvdHMgYnJpZWZseSB0dXJuIHRoaXMgc2NvcGVkIHBpc3RvbCBpbnRvIGEgcmFwaWQtZmlyZSwgQ3JpdGljYWwgRGFtYWdlIGZpZW5kIHRoYXQgdXNlcyBubyBhbW1vLiBXaGVuIHVzZWQgYnkgSGFycm93LCBLbmVsbCBoYXMgYSAyLXJvdW5kIG1hZy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMzIsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTUsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwia25lbGwucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNTAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84LzhhL1ByaWVzdFBpc3RvbC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwNjI5MDM0MzE2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9LbmVsbFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIHNob3QsIGluc2FuZSBkcHMsICBoaXRzY2FuIG11bml0aW9ucy4gSGVhZHNob3QgZ3JhbnRzIERlYXRoIEtuZWxsIGJ1ZmYuIERlYXRoIEtuZWxsIGNhbiBzdGFjayB1cCB0byAzIHRpbWVzLCBsYXN0aW5nIDMgc2Vjb25kcyBwZXIgc3RhY2suIFN0YWNrLWNvdW50IHJlZ2FyZGxlc3MsIDIwJSBzdGF0dXMgY2hhbmNlIGFuZCBpbmZpbml0ZSBhbW1vIGlzIGdyYW50ZWQuIENyaXRpY2FsIE11bHRpcGxpZXIgaW5jcmVhc2VzICh4MS41LCB4Mi4sIHgyLjUpIHBlciBzdGFjay4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3BlZWRcIixcbiAgICAgIFwicmFua1wiOiAyOS4zLFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIktudXhcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FyY2h3aW5nL01lbGVlL0dybkFyY2hIYW5kL0dybkFyY2hIYW5kV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMyNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2FsbGl1bS1hbGxveSBnYXVudGxldHMgZm9yIGNsb3NlLXJhbmdlIEFyY2h3aW5nIGNvbWJhdC4gRGVzaWduZWQgYnkgdGhlIGluZmFtb3VzIFR5bCBSZWdvci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDMyNSxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwia251eC5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjMyNS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzQvNDkvR3JuQXJjaEhhbmQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDgyMDAwNDExMVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS251eFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJ0eXBlXCI6IFwiQXJjaHdpbmcgTWVsZWVcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDaGVtIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJLb2dha2VcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0JyYXNzS251Y2tsZXMvQnJhc3NLbnVja2xlc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlc2UgY292ZXJpbmdzIGZvciB0aGUgaGFuZHMgYW5kIGZlZXQgYWxsb3cgZGV2YXN0YXRpbmcgaGlnaCBmbHlpbmcgaGFuZC10by1oYW5kIGNvbWJhdCBhdHRhY2tzIHdpdGhvdXQgcmlza2luZyBoYXJtIHRvIHRoZSB1c2VyLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTA1LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ2LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwia29nYWtlLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNwYXJyaW5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8zLzMxL0tvZ2FrZTAucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDIyMTE0NDI1NFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS29nYWtlXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS29nYWtlIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9QcmltZUtvZ2FrZS9Lb2dha2VQcmltZUtudWNrbGVzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDcwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZWxpdmVyIGEgZ29sZGVuIGtub2Nrb3V0IHdpdGggdGhlc2UgcHJpbWUgTWVsZWUgV2VhcG9ucy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDIxMCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDYsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJrb2dha2UtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU3BhcnJpbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjcwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNC80Yy9NaXJhZ2VLb2dha2VQcmltZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcxMjEzMDk1MzM3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Lb2dha2VfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE3IDEyIDEyXCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIm4vYVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE5IDEwIDEwXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1OS4yMyxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIEluY3JlYXNlcyBtb3ZlbWVudCBzcGVlZCBieSA1JSB3aGVuIGVxdWlwcGVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiR3JpbSBGdXJ5XCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiQnJpZ2h0IEJsYXplICYgQ2hhcmdlZCBBdHRhY2tzXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS29obVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9Hcm5TcGFyay9Hcm5TcGFya1JpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvciBldmVyeSBzaG90IGZpcmVkIGluIHJhcGlkIHN1Y2Nlc3Npb24gdGhlIEtvaG0gcmVsZWFzZXMgYW4gYWRkaXRpb25hbCBib2x0IGFuZCBncm93cyBtb3JlIGxldGhhbC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImtvaG0ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9iL2IwL0dyaW5lZXJTcGFya0d1bi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMjExMjIxMzAxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Lb2htXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBpbnNhbmUgZHBzLCBoaXRzY2FuIG11bml0aW9ucy4gU3Bvb2wgdXAgaW5jcmVhc2VzIGJ1bGxldHMgc2hvdCBhbmQgZmlyZSByYXRlIHRvIHRoZSBwb2ludCB3aGVyZSBzdGF0dXMgZWZmZWN0cyBhcmUgc3RpbGwgcmVsaWFibHkgcHJvYydkIGRlc3BpdGUgdXNpbmcgc2hvdGd1biBjYWxjcyBhcyB3ZWxsIGFzIGhhdmluZyBpbnNhbmUgaW5uYXRlIHB1bmNodGhyb3VnaC4gUml2ZW4gZGlzcG9zaXRpb24gaXMgcmVsYXRpdmVseSBoaWdoIGZvciBEUFMgcG90ZW50aWFsIGFuZCBjYW4gaGVscCByZWFjaCAxMDAlIHN0YXR1cyBjaGFuY2UuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCIxMDAlIFN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQyLjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS29obWFrXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL1Bpc3RvbHMvR3JuS29obVBpc3RvbC9Hcm5Lb2htUGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxpa2UgdGhlIGxhcmdlciBLb2htLCB0aGlzIGhhbmQtc2hvdGd1biBkb3VibGVzIGl0cyB2b2xsZXkgd2l0aCBlYWNoIHN1Y2Nlc3NpdmUgc2hvdC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImtvaG1hay5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuIFNpZGVhcm1cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjMwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84MS9Hcm5XaW5kVXBQaXN0b2wucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDMyMDAyMjYyNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS29obWFrXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ2hlbSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJLb21vcmV4XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTG9uZ0d1bnMvQ3JwU2VudEFtbGdTbmlwZXIvQ3JwU2VudEFtbGdTbmlwZXJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogODcsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ29ycHVzIGluZ2VudWl0eSBsZXZlcmFnaW5nIFRhdS10ZWNoIHRvIGNyZWF0ZSBhIGhpZ2gtY2FwYWNpdHkgYmktbW9kYWwgc25pcGVyIHdlYXBvbiBvZiB0ZXJyaWZ5aW5nIGNhcGFiaWxpdHkuIFpvb20gaW4gdG8gcmVkdWNlIHJlY29pbCBhbmQgYWRkIHB1bmNoIHRocm91Z2guIFpvb20gYWdhaW4gdG8gZmlyZSBhIGJ1cnN0aW5nIHZpcmFsIHJvdW5kLCBidXQgd2l0aCBhIGxvd2VyIHJhdGUgb2YgZmlyZS4gS29tb3JleCBmZWF0dXJlcyBidWlsdC1pbiBhbW1vIGNvbnZlcnNpb24uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDIwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImtvbW9yZXgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU25pcGVyIFJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI4Ny4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIjMuNXggWm9vbSBNb2RlXCIsXG4gICAgICAgIFwic3BlZWRcIjogMS41LFxuICAgICAgICBcImltcGFjdFwiOiAxNy40LFxuICAgICAgICBcInNsYXNoXCI6IDgzLjYsXG4gICAgICAgIFwicHVuY3R1cmVcIjogNzNcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzEvMTQvS29tb3JleC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTkwNTIzMjM0OTA5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Lb21vcmV4XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgaW5zYW5lIGRwcywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQxLjksXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS29ycnVkb1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9NZWxlZS9Hcm5TcGFycmluZy9Hcm5TcGlkZXJTcGFycmluZy9Hcm5TcGlkZXJTcGFycmluZ1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2MSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hlbiB0aGV5IGdvIGhpZ2gsIGdvIGxvdy4gUG93ZXJmdWwgcG5ldW1hdGljIGdyaXBzIGFuZCB0b2VjYXBzIGFtcGxpZnkgZXZlcnkgYmxvdy4gRm91ciB3YXlzIHRvIGRlYWwgdHdpY2UgdGhlIHBhaW4uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxODMsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA5LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJrb3JydWRvLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNwYXJyaW5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNjEuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2Y2L0tvcnJ1ZG8ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE5MDQwNTE3NTMzMVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS29ycnVkb1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlR1c2sgVGh1bXBlciAoUGxhaW5zIG9mIEVpZG9sb24pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiA2Ny43MyxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQnJ1dGFsIFRpZGVcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJDaGFyZ2UgQXR0YWNrXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS3Jha2VuXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL0dyaW5lZXJQaXN0b2wvR3JuSGVhdnlQaXN0b2xcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDksXG4gICAgICBcInRyaWdnZXJcIjogXCJCdXJzdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBLcmFrZW4gaXMgYSBoZWF2eSBwaXN0b2wgb2YgR3JpbmVlciBkZXNpZ24gdGhhdCBmaXJlcyB0d28gcXVpY2sgc2hvdHMgd2l0aCBhIHNpbmdsZSBwdWxsIG9mIHRoZSB0cmlnZ2VyLiBTa2lsbGVkIG1hcmtzbWVuIHdpbGwgYXBwcmVjaWF0ZSB0aGUgdmFsdWUgaW4gdGhpcyBkZWFkbHkgYWNjdXJhdGUgd2VhcG9uLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjUzLFxuICAgICAgXCJpdGVtQ291bnRcIjogMSxcbiAgICAgIFwicGFyZW50c1wiOiBbXG4gICAgICAgIFwiS3Vsc3RhclwiXG4gICAgICBdLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImtyYWtlbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjQ5LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZC9kMy9LcmFrZW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDQwNjA0MzQxNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS3Jha2VuXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsICBoaXRzY2FuIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDE4NS43LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS3Jlc2thXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTWVsZWUvQ3JwVmVudXNIYXRjaGV0L0NycFZlbnVzSGF0Y2hldFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyB1bnNvcGhpc3RpY2F0ZWQgQ29ycHVzIHN1cnZpdmFsIHRvb2wgZG9lcyB3aGF0IGl0IHdhcyBkZXNpZ25lZCBmb3I6IGhhY2tpbmcgYW5kIHNwbGl0dGluZyB3aGF0ZXZlciBpdCBzdHJpa2VzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjgwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwia3Jlc2thLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIk1hY2hldGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MC4wIGhlYXRcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYi9iYS9LcmVza2EucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MTExMDIwMDUzNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS3Jlc2thXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQyLjI0LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ3ljbG9uZSBLcmFrZW5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJMaWdodG5pbmcgU2lyZW5cIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJLcm9oa3VyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL01lbGVlL0dybkVneXB0U3dkL0dybkVneXB0U3dkV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDcwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGlzIGhvb2tlZCBibGFkZSByZXdhcmRzIGNyaXRpY2FsIGhpdHMgdG8gdGhvc2Ugc2tpbGxlZCBlbm91Z2ggdG8gc3RyaWtlIHdpdGggZmluZXNzZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI4MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDUsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yMixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImtyb2hrdXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU3dvcmRcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI3MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDkvR3JuRWd5cHRTd29yZC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcxMDE1MDE0MDIwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Lcm9oa3VyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0OC4yNCxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3dvb3BpbmcgRmFsY29uXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiRGl2aW5nIEtlc3RyZWxcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIktyb25lblwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvVG9uZmEvVG9uZmFDb250ZXN0V2lubmVyL1Rlbm5vVG9uZmFcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNjUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBLcm9uZW4gcmVzdXJyZWN0cyBhIGxldGhhbCBmaWdodGluZyBzdHlsZSBvbmNlIHRob3VnaHQgbG9zdCB0byB0aGUgYWdlcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI2MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40Mjk5OTk5LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwia3JvbmVuLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRvbmZhXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNjUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9kL2RhL1Rlbm5vVG9uZmEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDgyODE3MDUyMVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS3JvbmVuXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS3JvbmVuIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Ub25mYS9Ub25mYUNvbnRlc3RXaW5uZXJQcmltZS9Ub25mYUNvbnRlc3RXaW5uZXJQcmltZVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2NixcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQW5jaWVudCBibGFkZXMsIHBlcmZlY3RlZCBmb3IgdG9kYXnigJlzIGNvbWJhdC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI2NCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40Mjk5OTk5LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwia3JvbmVuLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRvbmZhXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI2Ni4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZjYvS3JvbmVuUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDMxMzIwMDc1NlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvS3JvbmVuX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxOCAwMyAyMFwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuL2FcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAyMCAwMSAxM1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0NC40OCxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9uc3Ryb3VzIERQUywgdmVyeSBoaWdoIGF0dGFjayBzcGVlZC4g4pyqXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkdlbWluaSBDcm9zc1wiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIkJhbGVmdWwgU2luXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS3JvbnNoIFN0cmlrZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvT3N0cm9uL01lbGVlL01vZHVsYXJNZWxlZTAxL1RpcC9UaXBTaXhcIixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImtyb25zaC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJaYXdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiSG9rJ3MgQW52aWwgKENldHVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL0tyb25zaF9TdHJpa2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS3Vsc3RhclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9QaXN0b2xzL0dyblRvcnBlZG9QaXN0b2wvR3JuVG9ycGVkb1Bpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA1MDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBY3RpdmVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJSYWluIGhlbGwgb24gdGhlIGVuZW15IHdpdGggdGhpcyBoYW5kaGVsZCBjbHVzdGVyLXJvY2tldCBsYXVuY2hlci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjYuNjY2NjY2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwia3Vsc3Rhci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwMC4wXCIsXG4gICAgICBcImZsaWdodFwiOiBcIj8/P1wiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlBcmVhXCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQ2x1c3RlciBCb21ic1wiLFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogMTksXG4gICAgICAgIFwicGVsbGV0XCI6IHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJCb21iXCIsXG4gICAgICAgICAgXCJjb3VudFwiOiAzXG4gICAgICAgIH0sXG4gICAgICAgIFwiYmxhc3RcIjogMjI1LFxuICAgICAgICBcImRhbWFnZVwiOiBcIjIyNS4wIGJsYXN0XCJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZjAvR3JuVG9ycGVkb1Bpc3RvbC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwNzMxMTc0OTQyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9LdWxzdGFyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gUm9ja2V0IGltcGFjdCB3aWxsIHJlbGVhc2UgMyBhZGRpdGlvbmFsIGJvbWJsZXRzLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiUmF3XCIsXG4gICAgICBcInJhbmtcIjogMTAyLjMsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiS3VuYWlcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Rocm93aW5nV2VhcG9ucy9LdW5haVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA0NS45OTk5OTYsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiS3VuYWkgdGhyb3dpbmcgZGFnZ2VycyBvZmZlciBhIHNpbGVudCBhbHRlcm5hdGl2ZSB0byB0aGUgdHJhZGl0aW9uYWwgc2lkZSBhcm0uIFBlcmZlY3QgZm9yIGFzc2Fzc2lucy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjUxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImt1bmFpLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRocm93blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDYuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvMzUvS3VuYWkyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzAyMTAwMDIxMjlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0t1bmFpXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gR29vZCBsdWNrIGxhbmRpbmcgYSBwcmVjaXNlIHNob3QuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAxNzguNixcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkxhY2VyYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU3dvcmRzL1N0YWxrZXJNaW9zL1N0YWxrZXJNaW9zXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDgwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbiB0aGUgcHJhY3RpY2VkIGhhbmRzIG9mIGEgbWFzdGVyLCB0aGlzIGJsYWRlIGFuZCB3aGlwIGJlY29tZXMgZXhjZWVkaW5nbHkgZGV2YXN0YXRpbmcuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAzMjAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMzA5OTk5OSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImxhY2VyYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJCbGFkZSBhbmQgV2hpcFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjgwLjAgZWxlY3RyaWNpdHlcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZS9lOC9TdGFsa2VyTWlvcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUxMjA0MDEzMzA2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9MYWNlcmFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAzOS4zOSxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9uc3Ryb3VzIERQUywgdmVyeSBsb3cgYXR0YWNrIHNwZWVkLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiRGVmaWxlZCBTbmFwZHJhZ29uXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiQWx0IGNvbWJvPSBIZWFydCBvZiB0aGUgTmFnYTsgK0RQUywgLWV4ZWN1dGlvbiwgLXJhZ2RvbGxzXCIsXG4gICAgICBcImNvbWJvXCI6IFwiU291bCBvZiB0aGUgTGV2aWF0aGFuXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTGFtYmVvIE1vYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL0ZyaWVuZGx5L1BldHMvTW9hUGV0cy9Nb2FQZXRQYXJ0cy9Nb2FQZXRIZWFkTGFtYmVvXCIsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJsYW1iZW8tbW9hLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJMZWdzIChGb3J0dW5hKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL0xhbWJlb19Nb2FcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTGFua2FcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NsYW5UZWNoL0VuZXJneS9SYWlsZ3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUyNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBMYW5rYSBmaXJlcyBhIGhpZ2ggdmVsb2NpdHkgcHJvamVjdGlsZSB0aHJvdWdoIG1hZ25ldGljIGluZHVjdGlvbi5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjgwMDAwMDAxLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJsYW5rYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTbmlwZXIgUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwMC4wIGVsZWN0cmljaXR5XCIsXG4gICAgICBcImZsaWdodFwiOiAyMDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAyNSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xYS9Db3JwdXNTbmlwZXJSaWZsZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwNDE4MTIzMTUyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9MYW5rYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkVuZXJneSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIHNob3QsIG1vZGVyYXRlIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIFNuaXBlciBjb21ibyBjb3VudGVyIHJhbXB1cCBpcyB2ZXJ5IGdvb2QgKG1pbi4gMiksIHpvb21pbmcgaW4gZ2l2ZXMgYWRkaXRpdmUgYm9udXMgdG8gQ3JpdCBDaGFuY2UgKDIwJS8zMCUvNTAlKS4gSW5uYXRlIEVsZWN0cmljIGRhbWFnZSBhbmQgaGlnaCBkaXJlY3QgZGFtYWdlIHBvdGVudGlhbCBtYWtlcyB0aGUgTGFua2EgdGhlIGNob2ljZSB3ZWFwb24gZm9yIEVpZG9sb24gaHVudGluZy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjcuOCxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJMYXJrc3B1clwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQXJjaHdpbmcvUHJpbWFyeS9UblNoaWVsZGZyYW1lQXJjaEd1bi9UblNoaWVsZEZyYW1lQXJjaEd1blwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA5MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkhlbGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGcm9tIGRlYXRoIGJsb29tcyB0aGUgTGFya3NwdXIuIEEgdW5pcXVlIGFuZCBtZW5hY2luZyBBcmNoZ3VuIHdpdGggYSB3aWxkIGluaXRpYWwgYXR0YWNrIHRoYXQgbG9ja3Mgb250byBhIHRhcmdldCB0aGVuIGNoYWlucyBvdGhlciB0YXJnZXRzIGNsb3NlIHRvIHRoZSBmaXJzdC4gSXQgYWxzbyBzcG9ydHMgYW4gZXhwbG9zaXZlIHByb2plY3RpbGUgbW9kZS4gSW4gSGlsZHJ5bidzIGdyaXAgdGhlIExhcmtzcHVyIGNhcnJpZXMgbW9yZSByZXNlcnZlIGFtbW8uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDguMzMzMzMzLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODAwMDAwMDEsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImxhcmtzcHVyLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiODAuMCByYWRpYXRpb25cIixcbiAgICAgIFwic3RhdHVzQ2hhbmNlXCI6IDM0LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2M0L0xhcmtzcHVyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxOTAzMDkwMDA3MDdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0xhcmtzcHVyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDIsXG4gICAgICBcInR5cGVcIjogXCJBcmNod2luZyBHdW5cIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTGFzZXIgUmlmbGVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9TZW50aW5lbHMvU2VudGluZWxXZWFwb25zL0xhc2VyUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogOCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGxhc2VyIHJpZmxlIGRldmVsb3BlZCBieSByZXZlcnNlLWVuZ2luZWVyaW5nIENvcnB1cyB0ZWNobm9sb2d5LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjIxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImxhc2VyLXJpZmxlLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiOC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2QvZDQvREVTZW50aW5lbExhc2VyUmlmbGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEyMjE1NDIyOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTGFzZXJfUmlmbGVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDb21lcyB3aXRoIENvbXBhbmlvblwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkxhdG9cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbC9QaXN0b2xcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIExhdG8gaXMgYSBoaWdobHkgYWNjdXJhdGUgcGlzdG9sIHVzZWQgYnkgdGhlIFRlbm5vIGV2ZXJ5d2hlcmUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE4LjE4MTgxOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImxhdG8ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzIvMjYvTGF0by5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwMjEwMDAyMDU2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9MYXRvXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTGF0byBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9sL0xhdG9QcmltZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA0OCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgTGF0byBpcyBhIGhpZ2hseSBhY2N1cmF0ZSBwaXN0b2wgdXNlZCBieSB0aGUgVGVubm8gZXZlcnl3aGVyZS4gUHJpbWUgbW9kZWwgb2ZmZXJzIHNsaWdodGx5IGluY3JlYXNlZCBkYW1hZ2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE4LjE4MTgxOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJsYXRvLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0OC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDMvTGF0b1ByaW1lLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjEwMjkwMzAzNDBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0xhdG9fUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJVbm9idGFpbmFibGUgKEZvdW5kZXJzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogdHJ1ZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTGF0byBWYW5kYWxcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbC9MYXRvVmFuZGFsXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ2LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgc3BlY2lhbCB2ZXJzaW9uIG9mIHRoZSBzdGFuZGFyZCBMYXRvIHBpc3RvbCB3aXRoIGEgc2xvd2VyIEZpcmUgUmF0ZSBidXQgb2ZmZXJpbmcgaGlnaGVyIEFjY3VyYWN5IGFuZCBEYW1hZ2UgdmFsdWVzLiBUaGUgTGF0byBWYW5kYWwgaGFzIGJlZW4gY3VzdG9taXplZCBieSB0aGUgVGVubm8gd2l0aCBhIGJsdWUtZ3JlZW4gbWV0YWxsaWMgZmluaXNoIGFuZCBMb3R1cyBicmFuZGluZyBvbiB0aGUgZ3JpcHMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDIyLjk4ODUwNixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImxhdG8tdmFuZGFsLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0Ni4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzUvNTkvREVMYXRvVmFuZGFsLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA0MjIyMzQ2NTVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0xhdG9fVmFuZGFsXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiU2FuY3R1YXJ5IE9uc2xhdWdodFwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsICBoaXRzY2FuIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNzUsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTGF0cm9uXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9SaWZsZS9TZW1pQXV0b1JpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDU1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBMYXRyb24gaXMgYSBoaWdobHkgZWZmaWNpZW50IHJpZmxlIHRoYXQgcGVyZm9ybXMgd2VsbCBhdCBtZWRpdW0gYW5kIGF0IGxvbmcgcmFuZ2UsIGl0cyBhY2N1cmFjeSBtYWtpbmcgaXQgYSBkZWFkbHkgd2VhcG9uIGluIHRoZSBoYW5kcyBvZiBza2lsbGVkIG1hcmtzbWVuLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyOC41NzE0MjgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibGF0cm9uLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI1NS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNmUvTGF0cm9uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA0MjYwNzM4MzZcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0xhdHJvblwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkxhdHJvbiBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUmlmbGUvTGF0cm9uUHJpbWVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogOTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIG9ybmFtZW50YWwgTGF0cm9uIFByaW1lIGV4cGxvaXRzIGFuY2llbnQgT3Jva2luIHRlY2hub2xvZ3kgdG8gZ2V0IGEgc2xpZ2h0IGRhbWFnZSBpbmNyZWFzZSBvdmVyIHRoZSBzdGFuZGFyZCBMYXRyb24uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI4LjU3MTQyOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibGF0cm9uLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjkwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2MxL0RFTGF0cm9uUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEyNDE3MTY0NFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTGF0cm9uX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxMyAwNSAwM1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE1IDA0IDAxXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTUgMDQgMDFcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA3MC4yLFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkxhdHJvbiBXcmFpdGhcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL1dyYWl0aExhdHJvbi9XcmFpdGhMYXRyb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNjAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIExhdHJvbiBXcmFpdGggaXMgYSBwb3dlcmZ1bCB2YXJpYXRpb24gb2YgdGhlIHN0YW5kYXJkLCBzZW1pLWF1dG9tYXRpYyByaWZsZSB0aGF0IGZlYXR1cmVzIHVuaXF1ZSBzdHlsaW5nLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyOC41NzE0MjgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibGF0cm9uLXdyYWl0aC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI2MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDkvV3JhaXRoTGF0cm9uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDA4MjgxNzA1MjFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0xhdHJvbl9XcmFpdGhcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJJbnZhc2lvbnNcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDg5LjIsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTGVjdGFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9NZWxlZS9XaGlwL0NvcnB1c1doaXBXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhhbGYgdGFzZXIsIGhhbGYgd2hpcC4gVGhlIENvcnB1cyBMZWN0YSBkZWxpdmVycyBhIGRlYWRseSBzaG9jayB0byBhbnl0aGluZyBpdCB0b3VjaGVzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTgwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJsZWN0YS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJXaGlwXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDUuMCBlbGVjdHJpY2l0eVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2FiL0xlY3RhLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzExMTMxNTU0MDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0xlY3RhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkxlZ2EgUHJpc21cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9PcGVyYXRvckFtcGxpZmllcnMvU2V0MS9CYXJyZWwvQ29ycEFtcFNldDFCYXJyZWxQYXJ0QlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiQW1wXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImxlZ2EtcHJpc20ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkxpdHRsZSBEdWNrIChGb3J0dW5hKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL0xlZ2FfUHJpc21cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTGVuelwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL0Jvdy9Mb25nYm93L0NycEJvd1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJvbHRzIGZyb20gdGhpcyBDb3JwdXMgYm93IGRlbGl2ZXIgYSBvbmUtdHdvIHB1bmNoIG9mIGFuIGljeSBwdWxzZSwgZm9sbG93ZWQgYnkgYSBjb252ZW50aW9uYWwgZXhwbG9zaW9uLiBFeGNlc3MgYW1tbyBwaWNrZWQgdXAgZm9yIG90aGVyIHdlYXBvbnMgd2lsbCBiZSBjb252ZXJ0ZWQgaW50byBjaGFyZ2VzIGZvciB0aGUgTGVuei4gV2FybmluZzogU2FmZXR5LXByb3RvY29scyBkbyBub3QgZXhpc3Qgb24gdGhpcyBwcm90b3R5cGUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE2LjY2NjY2NixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjg5OTk5OTk4LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJsZW56LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkJvd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IDUwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlBcmVhXCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQnViYmxlIENvbGxhcHNlXCIsXG4gICAgICAgIFwicmFkaXVzXCI6IDYwMCxcbiAgICAgICAgXCJibGFzdFwiOiA2NjAsXG4gICAgICAgIFwiZGFtYWdlXCI6IFwiNjYwLjAgYmxhc3RcIlxuICAgICAgfSxcbiAgICAgIFwic3RhdHVzQ2hhbmNlXCI6IDUsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvODkvTGVuei5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwODAzMjE1NDA0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9MZW56XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIEVhY2ggYXJyb3cgcHJvY3MgcHJvY3MgSW1wYWN0IG9uIGRpcmVjdCBoaXQsIENvbGQgQU9FIGltbWVkaWF0ZWx5IGFmdGVyd2FyZHMsIGFuZCBmaW5hbGx5IEJsYXN0IEFPRSBleHBsb3Npb24uIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ1LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkxlc2lvblwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvSW5mZXN0ZWQvTWVsZWUvVGlwZWRvU3RhZmYvSW5mVGlwZWRvU3RhZmZcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBbiBpbnN0cnVtZW50IG9mIHVucmVsZW50aW5nIGhhcm0uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNjcsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImxlc2lvbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQb2xlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTAwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xMC9JbmZUaXBlZG8ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDMwNDIxNTU0OVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTGVzaW9uXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDIuNTcsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBDYXVzaW5nIHN0YXR1cyBwcm9jIGJ1ZmZzIHRoZSB3ZWFwb24gdG8gZ2l2ZSBpdCAxNSUgbW9yZSBpbm5hdGUgYXR0YWNrIHNwZWVkIGFuZCB0b3hpbiBkYW1hZ2UuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJUd2lybGluZyBTcGlyZVwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlZhdWx0aW5nIEFwZXhcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJMZXhcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbC9IZWF2eVBpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIExleCBpcyBhIHBvd2VyZnVsLCBhY2N1cmF0ZSBwaXN0b2wgdGhhdCBoYXMgYSBsb3cgRmlyZSBSYXRlIGFuZCBNYWdhemluZSBDYXBhY2l0eS4gVmVyeSBlZmZpY2llbnQgYXQgbG9uZyByYW5nZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44OTk5OTk5OCxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJsZXgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMzAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzZmL0xleC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNDI2MDc0NzM3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9MZXhcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJMZXggUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbHMvUHJpbWVMZXgvUHJpbWVMZXhcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBMZXggUHJpbWUgaXMgYSBwb3dlcmZ1bCwgYWNjdXJhdGUgcGlzdG9sIHRoYXQgaGFzIGEgbG93IEZpcmUgUmF0ZSBhbmQgTWFnYXppbmUgQ2FwYWNpdHkuIFZlcnkgZWZmaWNpZW50IGF0IGxvbmcgcmFuZ2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODk5OTk5OTgsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibGV4LXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNTAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy85LzllL1ByaW1lTGV4LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDA0MTAwNTU3MDdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0xleF9QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTQgMDYgMDlcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibmV2ZXJcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwibmV2ZXJcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBNYXNzaXZlIHJlY29pbCBodXJ0cyBvdmVyYWxsIERQUy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogOTMuOSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL01hZ2ljaWFuL01hZ2ljaWFuXCIsXG4gICAgICBcIm5hbWVcIjogXCJMaW1ib1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxpbWJvIG1hbmlwdWxhdGVzIHRoZSB2ZXJ5IHBsYW5lcyBvZiBleGlzdGVuY2UgdG8gZGl2aWRlIGhpcyBlbmVtaWVzIGFuZCBjb25xdWVyIHRoZW0gaW4gdGhlIHJpZnQuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4xNSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiRG9kZ2UgdG8gZW50ZXIgYW5kIGV4aXQgdGhlIFJpZnQuIEVudGVyaW5nIGxlYXZlcyBiZWhpbmQgYSBzbWFsbCBSaWZ0IHBvcnRhbCBsYXN0aW5nIHxEVVJBVElPTnxzLiBFbmVyZ3kgc2xvd2x5IHJlY2hhcmdlcyBpbiB0aGUgUmlmdCwgYW5kIGVhY2ggZW5lbXkga2lsbGVkIGluIHRoZXJlIGFsc28gZ2l2ZXMgfEVORVJHWXwgRW5lcmd5LlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibGltYm8ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibmFyYW1vblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAyMzcwMzQ2LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTVcIixcbiAgICAgIFwic2V4XCI6IFwiTWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4xNSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xNC9MaW1ib05ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNDAyMzEyNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTGltYm9cIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUaGUgTGltYm8gVGhlb3JlbSAoUXVlc3QpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvTWFnaWNpYW4vTGltYm9QcmltZVwiLFxuICAgICAgXCJuYW1lXCI6IFwiTGltYm8gUHJpbWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEYW5jZSBiZXR3ZWVuIHJlYWxtcyB3aXRoIHRoaXMgZ29sZGVuIHJpZnQgd2Fsa2VyLiBGZWF0dXJpbmcgYWx0ZXJlZCBtb2QgcG9sYXJpdGllcyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMTUsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkRvZGdlIHRvIGVudGVyIGFuZCBleGl0IHRoZSBSaWZ0LiBFbnRlcmluZyBsZWF2ZXMgYmVoaW5kIGEgc21hbGwgUmlmdCBwb3J0YWwgbGFzdGluZyB8RFVSQVRJT058cy4gRW5lcmd5IHNsb3dseSByZWNoYXJnZXMgaW4gdGhlIFJpZnQsIGFuZCBlYWNoIGVuZW15IGtpbGxlZCBpbiB0aGVyZSBhbHNvIGdpdmVzIHxFTkVSR1l8IEVuZXJneS5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcImxpbWJvLXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwibmFyYW1vblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAzNjE4MzUzLFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMjMuMC4zXCIsXG4gICAgICBcInNleFwiOiBcIk1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEuMTUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTgvTGltYm9fUHJpbWVJY29uMjcyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA3MDMxMTIyNDRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0xpbWJvX1ByaW1lXCIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxOCAwNiAxOVwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuL2FcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAyMCAwNCAxN1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0xva2kvTG9raVwiLFxuICAgICAgXCJuYW1lXCI6IFwiTG9raVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRlc2lyZWQgYnkgYWR2YW5jZWQgcGxheWVycywgTG9raSBvZmZlcnMgYSB2YXJpZXR5IG9mIHNwZWNpYWxpemVkIHJlY29uZmlndXJpbmcgYWJpbGl0aWVzLiBUaGUgY3JlYXRpdml0eSBvZiBMb2tpJ3MgcG93ZXJzIGFsbG93cyBwbGF5ZXJzIHRvIG1hc3RlciB0aGUgYmF0dGxlZmllbGQgdGhyb3VnaCBtYW5pcHVsYXRpb24uXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4yNSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiQWJsZSB0byBoYW5nIGZyb20gd2FsbHMgfE1VTFR8eCBsb25nZXIgdGhhbiBub3JtYWwuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJsb2tpLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm5hcmFtb25cIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMzU1NTY0OSxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIlZhbmlsbGFcIixcbiAgICAgIFwic2V4XCI6IFwiTWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4yNSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xYy9Mb2tpTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI0MDIzMTMyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Mb2tpXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiSHllbmEgUGFjayAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9Mb2tpL0xva2lQcmltZVwiLFxuICAgICAgXCJuYW1lXCI6IFwiTG9raSBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkNvbmZ1c2UsIGRlY2VpdmUgYW5kIGRlc3Ryb3kgd2l0aCBMb2tpIFByaW1lLiBGZWF0dXJpbmcgYWx0ZXJlZCBtb2QgcG9sYXJpdGllcyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMjUsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkFibGUgdG8gaGFuZyBmcm9tIHdhbGxzIHxNVUxUfHggbG9uZ2VyIHRoYW4gbm9ybWFsLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibG9raS1wcmltZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiYXVyYVwiOiBcIm5hcmFtb25cIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMzQ4Njc2NCxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjEzLjdcIixcbiAgICAgIFwic2V4XCI6IFwiTWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4yNSxcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83Lzc4L0xva2lQcmltZU5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNDAyMzEzOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTG9raV9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTQgMDYgMTFcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNiAwNSAxN1wiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE2IDA1IDE3XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1hY2hldGVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTWVsZWUvR3JpbmVlck1hY2hldHRlQW5kQ2xlYXZlci9NYWNoZXRlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGZlcm9jaW91cyBNZWxlZSBXZWFwb24gY3JhZnRlZCBieSB0aGUgR3JpbmVlciBhbmQgY2FycmllZCBieSB0aGVpciBlbGl0ZSBtZWxlZSBmb3JjZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtYWNoZXRlLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIk1hY2hldGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIyNS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMGMvTWFjaGV0ZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwOTAzMTgwNTQwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9NYWNoZXRlXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTG9naW4gUmV3YXJkXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTWFjaGV0ZSBXcmFpdGhcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTWVsZWUvR3JpbmVlck1hY2hldHRlQW5kQ2xlYXZlci9XcmFpdGhNYWNoZXRlV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGRpZmZlcmVudCB0YWtlIG9uIGEgZmFtaWxpYXIgY29tYmF0IGtuaWZlLCB0aGUgTWFjaGV0ZSBXcmFpdGggZmVhdHVyZXMgdW5pcXVlIHN0eWxpbmcuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxODAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtYWNoZXRlLXdyYWl0aC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJNYWNoZXRlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2UvZWYvREVXcmFpdGhNYWNoZXRlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzAxMjcyMTEzNDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL01hY2hldGVfV3JhaXRoXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ1LjkyLFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4g4pyqXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkN5Y2xvbmUgS3Jha2VuXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiTGlnaHRuaW5nIFNpcmVuXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvTWFnL01hZ1wiLFxuICAgICAgXCJuYW1lXCI6IFwiTWFnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2l0aCBmdWxsIGNvbW1hbmQgb2Ygc3Vycm91bmRpbmcgbWFnbmV0aWMgZW5lcmd5LCBNYWcgaXMgYW4gZXhwZXJ0IGF0IGVuZW15IG1hbmlwdWxhdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJCdWxsZXQganVtcGluZyBwdWxscy1pbiBuZWFyYnkgaXRlbXMgZm9yIGVhc3kgY29sbGVjdGlvbi5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm1hZy5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDMwOTYzOTQsXG4gICAgICBcImludHJvZHVjZWRcIjogXCJWYW5pbGxhXCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYi9iZi9NYWdOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjMxNDdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL01hZ1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBTZXJnZWFudCAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9NYWcvTWFnUHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIk1hZyBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBleHF1aXNpdGUgTWFnIFByaW1lIG9mZmVycyB0aGUgc2FtZSBhYmlsaXRpZXMgYXMgTWFnIGJ1dCB3aXRoIHVuaXF1ZSBtb2QgcG9sYXJpdGllcyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkJ1bGxldCBqdW1waW5nIHB1bGxzLWluIG5lYXJieSBpdGVtcyBmb3IgZWFzeSBjb2xsZWN0aW9uLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibWFnLXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiA3NzYxNzU2LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTBcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvMzEvTWFnUHJpbWVOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjMxNTRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL01hZ19QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTMgMDkgMTNcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNSAwNyAwN1wiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE1IDA3IDA3XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1hZ2lzdGFyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9NYWNlcy9QYWxhZGluTWFjZS9QYWxhZGluTWFjZVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIE1hZ2lzdGFyIG1hY2Ugd2llbGRzIGp1c3RpY2UgYW5kIHRydXRoIGluIHRoZSBmb3JtIG9mIGJvbmUtY3J1c2hpbmcgYmxvd3MuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNjAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMDksXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtYWdpc3Rhci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJIYW1tZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI4MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvM2UvUGFsYWRpbk1hY2UucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEyNDE4MDIzM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTWFnaXN0YXJcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJNYWdudXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbHMvTWFnbnVtL01hZ251bVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3NixcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdmVyc2F0aWxlIE1hZ251cyByZXZvbHZlciBpcyBhIGxldGhhbCBzaWRlYXJtIGZvciBhbnkgVGVubm8uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjUzLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm1hZ251cy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjc2LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yNi9UZW5ub01hZ251bS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMTIzMDA1NDE0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9NYWdudXNcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJNYXJhIERldHJvblwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVm9pZFRyYWRlci9WVERldHJvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyODAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRm9yIE9yb2tpbi1lcmEgc211Z2dsZXJzLCB0aGlzIGZlYXJzb21lIGhhbmRoZWxkIHNob3RndW4gd2FzIGEgZmF2b3JlZCB0b29sIGZvciAnZGlzcHV0ZSByZXNvbHV0aW9uJy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTMuMzMzMzMzLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA5LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibWFyYS1kZXRyb24ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1biBTaWRlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyODAuMCByYWRpYXRpb25cIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYy9jNS9NYXJhRGV0cm9uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDEyMTIxODMxMDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL01hcmFfRGV0cm9uXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgIHByb2plY3RpbGUgbXVuaXRpb25zLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiMTAwJSBTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1NC4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1hcmVsb2tcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvUGlzdG9scy9HcmluZWVyTGV2ZXJBY3Rpb25QaXN0b2wvR0xBUGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgTWFyZWxvayBjb21iaW5lcyB0aGUgc3RvcHBpbmcgcG93ZXIgb2YgYSByaWZsZSB3aXRoIHRoZSBwb3J0YWJpbGl0eSBvZiBhIHBpc3RvbC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44OTk5OTk5OCxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtYXJlbG9rLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTYwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNy83ZS9HcmluZWVyTGV2ZXJBY3Rpb25QaXN0b2wucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDIyNzA1NTcyOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTWFyZWxva1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9Db3dnaXJsL0Nvd2dpcmxcIixcbiAgICAgIFwibmFtZVwiOiBcIk1lc2FcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaXRoIGEgc3RlYWR5IGhhbmQgYW5kIHF1aWNrIHJlZmxleGVzLCBNZXNhIGlzIGEgdHJ1ZSBndW5maWdodGVyLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiU2hvb3QgZHVhbC13aWVsZGVkIHNpZGVhcm1zIHxTUEVFRHwlIGZhc3RlciBhbmQgcmVsb2FkIHNpbmdsZS1oYW5kZWQgc2lkZWFybXMgfFJFTE9BRHwlIG1vcmUgcmFwaWRseS4gR2FpbiB8SEVBTFRIfCBCb251cyBIZWFsdGggd2hlbiBub3QgdXNpbmcgTWVsZWUgV2VhcG9ucy5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm1lc2EucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAxMzIxOTQ1MSxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjE1LjVcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjEsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTYvTWVzYUxhcmdlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDEyMTExNzE5MjdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL01lc2FcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNdXRhbGlzdCBBbGFkIFYgKEJvc3MpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvQ293Z2lybC9NZXNhUHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIk1lc2EgUHJpbWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDYXN0IGEgbG9uZyBzaGFkb3cgd2l0aCB0aGlzIGxldGhhbCBlbmZvcmNlci4gRmVhdHVyaW5nIGFsdGVyZWQgbW9kIHBvbGFyaXRpZXMgZm9yIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIlNob290IGR1YWwtd2llbGRlZCBzaWRlYXJtcyB8U1BFRUR8JSBmYXN0ZXIgYW5kIHJlbG9hZCBzaW5nbGUtaGFuZGVkIHNpZGVhcm1zIHxSRUxPQUR8JSBtb3JlIHJhcGlkbHkuIEdhaW4gfEhFQUxUSHwgQm9udXMgSGVhbHRoIHdoZW4gbm90IHVzaW5nIE1lbGVlIFdlYXBvbnMuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtZXNhLXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiBmYWxzZSxcbiAgICAgIFwiY29sb3JcIjogMzM1Mzg5MSxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjI0LjIuMlwiLFxuICAgICAgXCJzZXhcIjogXCJGZW1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEuMSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84MS9NZXNhUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MTIxODIyNDE0NVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTWVzYV9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTggMTIgMTJcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibi9hXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMjAgMTAgMjRcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJNZXdhbiBTdHJpa2VcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL09zdHJvbi9NZWxlZS9Nb2R1bGFyTWVsZWUwMS9UaXAvVGlwVGhyZWVcIixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm1ld2FuLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlphd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJIb2sncyBBbnZpbCAoQ2V0dXMpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvTWV3YW5fU3RyaWtlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1pb3NcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0luZmVzdGVkL01lbGVlL1N3b3Jkcy9NaW9zL01pb3NcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogODAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgYm9uZS1mb3JnZWQgc3dvcmQgaW5jbHVkZXMgYSB0ZW5kb24td2hpcCB0byBkaXN0cmFjdCBhbmQgbWFpbSB0aGUgZW5lbXkuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAzMjAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuOTQ5OTk5OTksXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtaW9zLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkJsYWRlIGFuZCBXaGlwXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiODAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzZlL0RFTWlvcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUxMTEzMDI1NTU2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9NaW9zXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmlvIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMzUuNDcsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgaGl0LCBpbnNhbmUgZHBzLCBoaWdoIGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkRlZmlsZWQgU25hcGRyYWdvblwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIkFsdCBjb21ibz0gSGVhcnQgb2YgdGhlIE5hZ2E7ICtEUFMsIC1leGVjdXRpb24sIC1yYWdkb2xsc1wiLFxuICAgICAgXCJjb21ib1wiOiBcIlNvdWwgb2YgdGhlIExldmlhdGhhblwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0hhcmxlcXVpbi9IYXJsZXF1aW5cIixcbiAgICAgIFwibmFtZVwiOiBcIk1pcmFnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgbWFzdGVyIG9mIGlsbHVzaW9uLCBNaXJhZ2UgY29uZm91bmRzIHRoZSBlbmVteSBpbiBhIHNwZWN0YWNsZSBvZiBzdHlsZSBhbmQgcG93ZXIuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4yLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJTbGlkaW5nIGxhc3RzIHxEVVJBVElPTnwlIGxvbmdlciBhbmQgYWNyb2JhdGljIG1hbmV1dmVycyBhcmUgfFNQRUVEfCUgZmFzdGVyLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibWlyYWdlLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm5hcmFtb25cIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogNzQyOTk4MixcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjE0XCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4yLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8zLzMxL01pcmFnZU5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNDAyMzIwM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTWlyYWdlXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiSGlkZGVuIE1lc3NhZ2VzIChRdWVzdClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9IYXJsZXF1aW4vTWlyYWdlUHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIk1pcmFnZSBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRhenpsZSB0aGUgb3Bwb3NpdGlvbiB3aXRoIHRoaXMgZ29sZGVuIG1hc3RlciBvZiBpbGx1c2lvbiBhbmQgbWF5aGVtLiBGZWF0dXJpbmcgYWx0ZXJlZCBtb2QgcG9sYXJpdGllcyBhbGxvdyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMixcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiU2xpZGluZyBsYXN0cyB8RFVSQVRJT058JSBsb25nZXIgYW5kIGFjcm9iYXRpYyBtYW5ldXZlcnMgYXJlIHxTUEVFRHwlIGZhc3Rlci5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm1pcmFnZS1wcmltZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiYXVyYVwiOiBcIm5hcmFtb25cIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogNDIwOTIwNSxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjIyLjdcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjIsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZmYvTWlyYWdlUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MTIyMDIxMTUzOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTWlyYWdlX1ByaW1lXCIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNyAxMiAxMlwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuL2FcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxOSAxMCAxMFwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1pcmVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0luZmVzdGVkL01lbGVlL1N3b3Jkcy9NaXJlL01pcmVTd29yZFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzOC41LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHJlbGljIGZyb20gdGhlIEdyZWF0IFBsYWd1ZSwgdGhlIE1pcmUgSW5mZXN0ZWQgU3dvcmQgaXMgYSBicnV0YWwgd2VhcG9uLiBJdCBub3Qgb25seSBjdXRzIGludG8gdGhlIGVuZW15LCBpdCBpbmZlY3RzIHRoZSB3b3VuZHMgb2YgaXRzIHZpY3RpbSB3aXRoIGEgdG94aWMgbmVydmUgcG9pc29uLiBEZWFscyA8RFRfUE9JU09OPlRveGluIERhbWFnZSBvbiBHcm91bmQgU2xhbSBhdHRhY2tzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTU0LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQyOTk5OTksXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtaXJlLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN3b3JkXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzJhL01pcmVJbmZlc3RlZFN3b3JkLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA0MzAwNTA0MTdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL01pcmVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjUuMDUsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gSW5uYXRlICsxMCUgdG94aW4gZGFtYWdlIGJvb3N0LiBUb3hpYyBCbGlnaHQgaW5jcmVhc2VzIHRveGluIGRhbWFnZSBieSAxMDAlIGFuZCBjYXVzZXMgRW50cm9weSAoTWFnbmV0aWMsIEVuZXJneSkgZWZmZWN0cy4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlN3b29waW5nIEZhbGNvblwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIkNyaW1zb24gRGVydmlzaCdzIENvaWxpbmcgSW1wYWxlOiArRFBTIC1wcm9jXCIsXG4gICAgICBcImNvbWJvXCI6IFwiRGl2aW5nIEtlc3RyZWxcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJNaXRlclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9HcmluZWVyU2F3YmxhZGVHdW4vU2F3QmxhZGVHdW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQ2hhcmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIE1JVEVSIGxhdW5jaGVzIGhpZ2ggdmVsb2NpdHkgc2F3IGJsYWRlcywgdGVhcmluZyBhcGFydCBhbnlvbmUgdW5mb3J0dW5hdGUgZW5vdWdoIHRvIGJlIGluIHRoZWlyIHBhdGguXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjU1LFxuICAgICAgXCJpdGVtQ291bnRcIjogMSxcbiAgICAgIFwicGFyZW50c1wiOiBbXG4gICAgICAgIFwiUGFudGhlcmFcIlxuICAgICAgXSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibWl0ZXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjEwMC4wXCIsXG4gICAgICBcImZsaWdodFwiOiA2MCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwic3RhdHVzQ2hhbmNlXCI6IDUwLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTWl0ZXJcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDYXB0YWluIFZvciBhbmQgTGlldXRlbmFudCBMZWNoIEtyaWwgKEJvc3MgRHVvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gTmV1dHJhbGl6aW5nIEp1c3RpY2UgY2FuIGluc3RhbnRseSBkZXN0cm95IG51bGxpZmllciBidWJibGVzIGFuZCBoYXMgSnVzdGljZSAoQmxhc3QsIEhlYWx0aCwgQXJtb3IpIGVmZmVjdHMuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA5NixcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1rMS1Cb1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvTUsxU2VyaWVzL01LMUJvXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgTUsxLUJvIGlzIHRoZSBzdGFuZGFyZCBpc3N1ZSBzdGFmZiB3ZWFwb24gZm9yIGFsbCBUZW5uby5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDc1LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI5LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibWsxLWJvLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN0YWZmXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83Lzc0L0JvU3RhZmYucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDIxMDAwMjA1OFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTUsxLUJvXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1rMS1CcmF0b25cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1JpZmxlL1N0YXJ0aW5nUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTgsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIE1LMS1CcmF0b24gaXMgdGhlIHN0YW5kYXJkIGlzc3VlIHJpZmxlIGZvciBhbGwgVGVubm8uIEEgdmVyc2F0aWxlIHdlYXBvbiB0aGF0IGNhbiBiZSBjdXN0b21pemVkIHRvIHN1cHBvcnQgYSB3aWRlIHZhcmlldHkgb2YgcGxheSBzdHlsZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDQwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibWsxLWJyYXRvbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTguMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzE5L0JyYXRvbi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwMjEwMDAyMDUzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9NSzEtQnJhdG9uXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1rMS1GdXJheFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvTUsxU2VyaWVzL01LMUZ1cmF4XCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgTUsxLUZ1cmF4IGlzIHRoZSBzdGFuZGFyZCBpc3N1ZSBmaXN0IHdlYXBvbiBmb3IgYWxsIFRlbm5vLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogOTAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMzgsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtazEtZnVyYXgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRmlzdFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjMwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yMy9GdXJheC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNDI2MDgwNTUzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9NSzEtRnVyYXhcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTWsxLUZ1cmlzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9NSzFTZXJpZXMvTUsxRnVyaXNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTIuOTk5OTk5LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBNSzEtRnVyaXMgYXJlIHRoZSBzdGFuZGFyZCBpc3N1ZSBhdXRvbWF0aWMgcGlzdG9sIGZvciBhbGwgVGVubm8uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDIyLjIyMjIyMSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm1rMS1mdXJpcy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjEzLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zZS9GdXJpcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwNjA2MDExMTE0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9NSzEtRnVyaXNcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTWsxLUt1bmFpXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9NSzFTZXJpZXMvTUsxS3VuYWlcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIE1LMS1LdW5haSBpcyB0aGUgc3RhbmRhcmQgaXNzdWUgdGhyb3dpbmcga25pdmVzIGZvciBhbGwgVGVubm8uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiU2lsZW50XCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS41MSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtazEta3VuYWkucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiVGhyb3duXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MC4wXCIsXG4gICAgICBcImZsaWdodFwiOiA3MCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zNS9LdW5haTIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDIxMDAwMjEyOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTUsxLUt1bmFpXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1rMS1QYXJpc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvTUsxU2VyaWVzL01LMVBhcmlzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEyMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBNSzEtUGFyaXMgaXMgdGhlIHN0YW5kYXJkIGlzc3VlIGJvdyBmb3IgYWxsIFRlbm5vLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNi42NjY2NjYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIlNpbGVudFwiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibWsxLXBhcmlzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkJvd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTAwLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDcwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzdGF0dXNDaGFuY2VcIjogMTUsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvN2QvUGFyaXMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDIxMDAwMjA1NFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTUsxLVBhcmlzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1rMS1TdHJ1blwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvTUsxU2VyaWVzL01LMVN0cnVuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgU3RydW4gaXMgYSBzdGFuZGFyZCBzaG90Z3VuLiBSZWxpYWJsZSwgdmVyc2F0aWxlIGFuZCBkZWFkbHkuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDQsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibWsxLXN0cnVuLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNob3RndW5cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjE4MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzIvMjYvU3RydW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTEyNTIyNTUwMFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTUsxLVN0cnVuXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk1vdGUgUHJpc21cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1NlbnRpZW50cy9PcGVyYXRvckFtcGxpZmllcnMvU2VudFRyYWluaW5nQW1wbGlmaWVyL1NlbnRBbXBUcmFpbmluZ0JhcnJlbFwiLFxuICAgICAgXCJ0eXBlXCI6IFwiQW1wXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm1vdGUtcHJpc20ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBRdWlsbHMgKENldHVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL01vdGVfUHJpc21cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTXVsdHJvblwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL0ZyaWVuZGx5L1BldHMvTW9hUGV0cy9Nb2FQZXRDb21wb25lbnRzL0hleHRyYVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZpcmVzIGEgYnVyc3Qgb2YgYXJtb3ItcGllcmNpbmcgcm91bmRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxOC4xODE4MTgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm11bHRyb24ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI1LjFcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOS85Ny9NdWx0cm9uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODExMTAyMjA1MjNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL011bHRyb25cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDb21lcyB3aXRoIENvbXBhbmlvbiAoRm9ydHVuYSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJNdXRhbGlzdCBDZXJub3NcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0luZmVzdGVkL0Jvdy9JbmZDZXJub3NCb3cvSW5mQ2Vybm9zXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk92ZXJjb21lIHdpdGggSW5mZXN0YXRpb24sIHRoaXMgYm93J3MgYXJyb3dzIG5vdyBzcHJlYWQgcG9pc29ub3VzIGNvbnRhZ2lvbiB0byBhbnkgc3VyZmFjZSB0aGV5IGhpdC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTYuNjY2NjY2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJtdXRhbGlzdC1jZXJub3MucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQm93XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMjAuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiA0OSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84Mi9JbmZDZXJub3MucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDMwNDIxNTU0OVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTXV0YWxpc3RfQ2Vybm9zXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gRnVsbHkgY2hhcmdlZCBhcnJvd3MgbGVhdmUgYSBnYXMgdHJhaWwgdGhhdCBjb250aW51ZXMgdG8gcHJvYyBzdGF0dXMgZWZmZWN0cy4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDEwMC4zLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk11dGFsaXN0IFF1YW50YVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvSW5mZXN0ZWQvTG9uZ0d1bnMvSW5mQ3JwU2hvY2tTd2FybS9JbmZDcnBTaG9ja1N3YXJtUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjUsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBiaXphcnJlIHVuaW9uIG9mIENvcnB1cyB0ZWNobm9sb2d5IGFuZCBJbmZlc3RlZCBiaW9sb2d5LCB0aGlzIGF1dG9tYXRpYyByaWZsZSBjYW4gYWxzbyBkZXBsb3kgYW4gaXJyYWRpYXRlZCBhaXJib3JuZSBpbmZlc3RlZCBtYXNzLiBGdXJ0aGVyIGZpZWxkIHRlc3RpbmcgaXMgcmVxdWlyZWQgdG8gZnVsbHkgdW5kZXJzdGFuZCB0aGUgcG90ZW50aWFsIG9mIHRoaXMgd2VhcG9uLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS41NSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibXV0YWxpc3QtcXVhbnRhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyNS4wXCIsXG4gICAgICBcImZsaWdodFwiOiAxMDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIk9yYiBFeHBsb3Npb25cIixcbiAgICAgICAgXCJzcGVlZFwiOiAxMCxcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiA1LFxuICAgICAgICBcImNyaXRfbXVsdFwiOiAxLjUsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLFxuICAgICAgICBcInRveGluXCI6IDEwMCxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCIxMDAuMCB0b3hpblwiXG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzI2L0luZkNycFNob2NrU3dhcm0ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDYyMDAxMDEzOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTXV0YWxpc3RfUXVhbnRhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmlvIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBBbHQgZmlyZSBjcmVhdHMgYSBidWJibGUgdGhhdCBjYW4gYmUgY29tYmluZWQgdXAgdG8gdGhyZWUgdGltZXMuIEZpcmluZyB0aHJvdWdoIHRoZSBidWJibGUgaW5jcmVhc2UgZGFtYWdlIGFuZCBjcml0aWNhbCBjaGFuY2UuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA3Ny4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk5hZ2FudGFrYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTG9uZ0d1bnMvR2FydWRhQ3Jvc3Nib3cvR2FydWRhQ3Jvc3Nib3dcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTU4Ljk5OTk4LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNsYXNoIHRhcmdldHMgd2l0aCBhIHNpbmdsZSBwcmVjaXNlIGJvbHQgZnJvbSBHYXJ1ZGEncyBzaWduYXR1cmUgY3Jvc3Nib3cuIEFsdC1maXJlIHRvIGxldCBsb29zZSBhIGJhcnJhZ2Ugb2YgYm9sdHMuIEFsbCBib2x0cyBoYXZlIGEgY2hhbmNlIHRvIGNhdXNlIEJsZWVkaW5nIGFuZCBIZWFkc2hvdHMgaGF2ZSBhIGNoYW5jZSB0byBpbmNyZWFzZSBSZWxvYWQgU3BlZWQuIFdoZW4gd2llbGRlZCBieSBHYXJ1ZGEgTmFnYW50YWthIGdhaW5zIGEgc2xpZ2h0IFB1bmNoIFRocm91Z2guXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDQwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm5hZ2FudGFrYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJDcm9zc2Jvd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTU5LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQnVyc3QgU2hvdFwiLFxuICAgICAgICBcInNwZWVkXCI6IDUuODEsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMTUsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDIuMyxcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuNCxcbiAgICAgICAgXCJzaG90X3R5cGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICAgIFwic2hvdF9zcGVlZFwiOiAxMDAsXG4gICAgICAgIFwiaW1wYWN0XCI6IDEuNixcbiAgICAgICAgXCJzbGFzaFwiOiAxNDMuMSxcbiAgICAgICAgXCJwdW5jdHVyZVwiOiAxNC4zXG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9kL2Q4L05hZ2FudGFrYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgxMTEwMDAwNTE0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9OYWdhbnRha2FcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBIZWFkc2hvdHMgaGF2ZSBhIGNoYW5jZSB0byBpbmNyZWFzZSByZWxvYWQgc3BlZWQuIFNlY29uZGFyeSBmaXJlIGVtcHRpZXMgY2xpcCB3aXRoIGxpdHRsZSBhZGRpdGlvbmFsIHJlY29pbCBhbmQgaXMgaGlnaGx5IHJlY29tbWVuZGVkLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1NS43LFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk5hbWkgU2t5bGFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkcy9DdXRsYXNzQW5kUG9pZ25hcmQvQ3V0bGFzc1BvaWduYXJkU3dvcmRzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJMaWtlIHRoZSBzdXJnZSBhbmQgY3Jhc2ggb2Ygc3Rvcm0gd2F2ZXMsIGEgbWFzdGVyIG9mIHRoZSBOYW1pIGN1dGxhc3MgYW5kIFNreWxhIGRhZ2dlciB0dXJucyB0aGVzZSB0d28gc2VwYXJhdGUgd2VhcG9ucyBpbnRvIG9uZSBmbHVpZCBhdHRhY2suXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyMDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTc1LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibmFtaS1za3lsYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFN3b3Jkc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjUwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYS9hZC9Ubm9DdXRsYXNzQW5kUG9pZ25hcmQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDQxMDA1NTcwN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTmFtaV9Ta3lsYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJOYW1pIFNreWxhIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvUHJpbWVOYW1pU2t5bGEvUHJpbWVOYW1pU2t5bGFcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNjAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvcmdlZCBieSBhIGZvcmdvdHRlbiBtYXN0ZXIsIHRoZXNlIGV4cXVpc2l0ZSBibGFkZXMgYXJlIGJvdW50eSBmcm9tIGEgZ29sZGVuLWFnZSBsb25nIGdvbmUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjE3NSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm5hbWktc2t5bGEtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBTd29yZHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjYwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzY4L1ByaW1lTmFtaVNreWxhLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzA4MjkyMTU0NDBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL05hbWlfU2t5bGFfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE3IDA4IDI5XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTkgMDcgMDdcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxOSAwNyAwN1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMzEuOTcsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIGluc2FuZSBkcHMsIHZlcnkgaGlnaCBhdHRhY2sgc3BlZWQuIFRpZXMgd2l0aCBEdWFsIEljaG9yLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2FydmluZyBNYW50aXNcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IEJpdGluZyBNYW5kaWJsZXM7IC1EUFMsICtleGVjdXRpb25cIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXJlIENvdXJ0c2hpcFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk5hbWkgU29sb1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU3dvcmRzL0N1dGxhc3NBbmRQb2lnbmFyZC9UZW5ub0N1dGxhc3NcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkV2b2tpbmcgdGhlIG9jZWFucyBvZiBlYXJ0aCwgdGhpcyBleHF1aXNpdGUgY3V0bGFzcyBpcyBhIGRlYWRseSB3b3JrIG9mIGFydC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE0MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40Mjk5OTk5LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibmFtaS1zb2xvLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIk1hY2hldGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2QvZGQvREVOYW1pU29sby5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwNTI5MTkwNzE4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9OYW1pX1NvbG9cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDM3LjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIGluc2FuZSBkcHMsIGhpZ2ggYXR0YWNrIHNwZWVkLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ3ljbG9uZSBLcmFrZW5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJMaWdodG5pbmcgU2lyZW5cIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJOZWVkbGVub3NlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvVmVoaWNsZXMvSG92ZXJib2FyZC9Ib3ZlcmJvYXJkUGFydHMvUGFydENvbXBvbmVudHMvSG92ZXJib2FyZENvcnB1c0IvSG92ZXJib2FyZENvcnB1c0JEZWNrXCIsXG4gICAgICBcInR5cGVcIjogXCJWZWhpY2xlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm5lZWRsZW5vc2UucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiSy1Ecml2ZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSb2t5IChGb3J0dW5hKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL05lZWRsZW5vc2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvTmVjcm8vTmVjcm9cIixcbiAgICAgIFwibmFtZVwiOiBcIk5la3Jvc1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk5la3JvcyB1c2VzIGhpcyBkYXJrIHBvd2VycyB0byBtYW5pcHVsYXRlIGhpcyBlbmVtaWVzLCBib3RoIGxpdmluZyBhbmQgZGVhZC5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIlJlc3RvcmUgfEhFQUxUSHwgSGVhbHRoIHdpdGggZXZlcnkgZW5lbXkgZGVhdGggd2l0aGluIHxSQURJVVN8bS5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm5la3Jvcy5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDM2ODU0NDQsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIxMFwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjEsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2MvY2MvTmVrcm9zTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI0MDIzMjEwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9OZWtyb3NcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJMZXBoYW50aXMgKEJvc3MpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvTmVjcm8vTmVrcm9zUHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIk5la3JvcyBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRlYXRoJ3MgbmV3IG1hc3Rlci4gRmVhdHVyaW5nIGFsdGVyZWQgbW9kIHBvbGFyaXRpZXMgYWxsb3cgZm9yIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIlJlc3RvcmUgfEhFQUxUSHwgSGVhbHRoIHdpdGggZXZlcnkgZW5lbXkgZGVhdGggd2l0aGluIHxSQURJVVN8bS5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm5la3Jvcy1wcmltZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMTk3MzAxOCxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIlRoZSBTaWx2ZXIgR3JvdmUgM1wiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjEsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84Ni9OZWtyb3NQcmltZU5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDQxOTIwMTEzMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTmVrcm9zX1ByaW1lXCIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNiAwOCAyM1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE4IDA2IDE5XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTggMDYgMTlcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvTmV6aGEvTmV6aGFcIixcbiAgICAgIFwibmFtZVwiOiBcIk5lemhhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBwZXRpdGUgYW5kIHBsYXlmdWwgZmFjYWRlIGNvbmNlYWxzIHRoaXMgZnJhbWUncyBpbW1lbnNlIHBvd2VyLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMTUsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIlNsaWRlIHxTUEVFRHwlIGZhc3RlciBhbmQgZ28gfFJBTkdFfCUgZmFydGhlci5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm5lemhhLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm5hcmFtb25cIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMTMzNDE4MjEsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIxOC4xXCIsXG4gICAgICBcInNleFwiOiBcIk1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEuMTUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzQvNDUvTmV6aGFOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEyMTcwMTAyNTFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL05lemhhXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0luZmVzdGF0aW9uL0luZmVzdGF0aW9uXCIsXG4gICAgICBcIm5hbWVcIjogXCJOaWR1c1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkNvbW1hbmQgdGhlIEluZmVzdGF0aW9uIHRvIG11dGF0ZSBhbmQgZ3JvdyBldmVyIG1vcmUgZGVzdHJ1Y3RpdmUuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiSWYgTmlkdXMgaXMga2lsbGVkIHdpdGggYXQgbGVhc3QgfFNUQUNLU3wgc3RhY2tzIG9mIE11dGF0aW9uLCB0aG9zZSB8U1RBQ0tTfCBzdGFja3MgYXJlIGNvbnN1bWVkOyB0aGlzIGdyYW50cyB8RFVSQVRJT058cyBvZiBpbnZ1bG5lcmFiaWxpdHkgYW5kIHJlc3RvcmVzIEhlYWx0aCB0byB8SEVBTHwlLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibmlkdXMucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiA0MTQxNjE4LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTkuNVwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzRjL05pZHVzTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYxMjIzMDUzMTIxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9OaWR1c1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBHbGFzdCBHYW1iaXQgKFF1ZXN0KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk5pa2FuYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU3dvcmRzL0thdGFuYUFuZFdha2l6YXNoaS9LYXRhbmFcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBOaWthbmEgcmVpbnRyb2R1Y2VzIGEgbG9zdCBUZW5ubyBibGFkZSBhbmQgd2l0aCBpdCBhbm90aGVyIGZyYWdtZW50IG9mIHRoZSBvbGQgd2F5cy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDk2LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjUsXG4gICAgICBcIml0ZW1Db3VudFwiOiAxLFxuICAgICAgXCJwYXJlbnRzXCI6IFtcbiAgICAgICAgXCJEcmFnb24gTmlrYW5hXCJcbiAgICAgIF0sXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJuaWthbmEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiTmlrYW5hXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9lL2U5L0thdGFuYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwNDEwMDU1NzA2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9OaWthbmFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJOaWthbmEgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkcy9QcmltZUthdGFuYS9QcmltZU5pa2FuYVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA5NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQW4gYW5jaWVudCBibGFkZSBwcmVkYXRpbmcgdGhlIGZhbGwgb2YgdGhlIE9yb2tpbiBFbXBpcmUuIEZvcmdlZCB1c2luZyB0ZWNobmlxdWVzIGxvc3Qgb3ZlciB0aGUgY2VudHVyaWVzLCB0aGUgZWRnZSByZW1haW5zIHNoYXJwZXIgdGhhbiB0aGF0IG9mIGFueSBtb2Rlcm4gTmlrYW5hLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjA0LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJuaWthbmEtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiTmlrYW5hXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI5NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zMS9QcmltZU5pa2FuYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMjA1MjMzMTMxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9OaWthbmFfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMSxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE2IDAyIDE2XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTcgMTIgMTJcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxNyAxMiAxMlwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDIuNjQsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkRlY2lzaXZlIEp1ZGdlbWVudFwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlNpbGVudCBBY3VtZW5cIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJOaW5rb25kaVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvTnVuY2hha3UvTnVuY2hha3UvTnVuY2hha3VcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggaXRzIGxpZ2h0bmluZy1mYXN0IHN0cmlrZXMsIHRoZSBOaW5rb25kaSBwYXlzIHJlc3BlY3QgdG8gdGhlIG9sZCB3YXlzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTgwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQxLFxuICAgICAgXCJpdGVtQ291bnRcIjogMSxcbiAgICAgIFwicGFyZW50c1wiOiBbXG4gICAgICAgIFwiU2hha3VcIlxuICAgICAgXSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm5pbmtvbmRpLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIk51bmNoYWt1XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDUuMCBlbGVjdHJpY2l0eVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83LzdkL051bmNoYWt1LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA5MTExNjIwMzVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL05pbmtvbmRpXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTmlua29uZGkgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1ByaW1lTmlua29uZGkvUHJpbWVOaWtvbmRpXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDU0LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBbiBhbmNpZW50IHdlYXBvbiBpbWJ1ZWQgd2l0aCBhIG5ldyB0cnV0aC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDIxNixcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJuaW5rb25kaS1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJOdW5jaGFrdVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjQuMCBlbGVjdHJpY2l0eVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9kL2Q2L05pbmtvbmRpUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE5MDcwNzExNTYzMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTmlua29uZGlfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE5IDA3IDA3XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIm4vYVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDIxIDA1IDAyXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAzNS4xMixcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgaGlnaCBhdHRhY2sgc3BlZWQuIOKcqlwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJBdGxhbnRpcyBWdWxjYW5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJNb2x0ZW4gV2hpcmxwb29sXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvQW50aU1hdHRlci9BbnRpXCIsXG4gICAgICBcIm5hbWVcIjogXCJOb3ZhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTm92YSB1c2VzIGVsZWN0cm9tYWduZXRpYyBlbmVyZ3kgdG8gY29udGFpbiBhbmQgY29udHJvbCBoaWdobHkgdm9sYXRpbGUgYW50aW1hdHRlciB0aGF0IGZ1ZWxzIGhlciBhYmlsaXRpZXMuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4yLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJXaGVuIGtub2NrZWQtb3ZlciwgZW1pdCBhIHxSQURJVVN8bSBkZWZlbnNpdmUgYnVyc3QgdGhhdCB0b3BwbGVzIGF0dGFja2luZyBlbmVtaWVzIGFuZCBkZWFscyB8REFNQUdFfCBEYW1hZ2UuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJub3ZhLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm5hcmFtb25cIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogNTEzMjExMixcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjlcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjIsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzUvNTIvTm92YU5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNDAyMzIxN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTm92YVwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBSYXB0b3JzIChCb3NzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0FudGlNYXR0ZXIvTm92YVByaW1lXCIsXG4gICAgICBcIm5hbWVcIjogXCJOb3ZhIFByaW1lXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTm92YSBQcmltZSB3cmVha3MgZGV2YXN0YXRpb24gb24gaGVyIGVuZW1pZXMgdXNpbmcgdm9sYXRpbGUgYW50aW1hdHRlci4gRmVhdHVyaW5nIGFsdGVyZWQgbW9kIHBvbGFyaXRpZXMgZm9yIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjIsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIldoZW4ga25vY2tlZC1vdmVyLCBlbWl0IGEgfFJBRElVU3xtIGRlZmVuc2l2ZSBidXJzdCB0aGF0IHRvcHBsZXMgYXR0YWNraW5nIGVuZW1pZXMgYW5kIGRlYWxzIHxEQU1BR0V8IERhbWFnZS5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm5vdmEtcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJuYXJhbW9uXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDE5NzQwNTEsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIxNS43XCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4yLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvMzgvTm92YVByaW1lTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwMjA0MDM1ODI1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Ob3ZhX1ByaW1lXCIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNCAxMiAxNlwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE2IDExIDIyXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTYgMTEgMjJcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTnVrb3JcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvUGlzdG9scy9HcmluZWVyTWljcm93YXZlZ3VuL0dybk1pY3Jvd2F2ZVBpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyMixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkhlbGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDcmVhdGVzIGFuZCBmb2N1c2VzIGEgaGlnaC1mcmVxdWVuY3kgZmllbGQgb2YgbWljcm93YXZlcywgbGl0ZXJhbGx5IGNvb2tpbmcgdGhlIHRhcmdldCBmcm9tIHdpdGhpbi5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDUsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwibnVrb3IucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyMi4wIHJhZGlhdGlvblwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiRGlzY2hhcmdlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2QvZDMvR3JpbmVlck1pY3Jvd2F2ZUd1bi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwODI4MTcwNTIwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9OdWtvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNoZW0gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vZGVyYXRlIERQUywgIGJlYW0gbXVuaXRpb25zLiBIaXR0aW5nIGEgc3BlY2lmaWMgcGFydCBtdWx0aXBsZSB0aW1lcyBpbmNyZWFzZXMgZGFtYWdlIGRlYWx0IHRvIHRoYXQgcGFydCBieSA1JS4gVW51c3VhbGx5LCBOdWtvciBoYXMgdmVyeSBoaWdoIENyaXRpY2FsIE11bHRpcGxpZXIgYnV0IHBvb3IgQ3JpdGljYWwgQ2hhbmNlLCBoZW5jZSBpdCdzIERQUyBpbmNyZWFzZSBmcm9tIGZsYXQgQ3JpdCBDaGFuY2UgbW9kaWZpZXJzIGlzIHJlbGF0aXZlbHkgaGlnaGVyIHRoYW4gb3RoZXIgd2VhcG9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDc4LjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvSmFkZS9KYWRlXCIsXG4gICAgICBcIm5hbWVcIjogXCJOeXhcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJNaW5kIGNvbnRyb2wgYW5kIHBzeWNoaWMgYXR0YWNrcyBtYWtlIE55eCBhIHZlcnkgZGFuZ2Vyb3VzIGZvZS4gSGVyIGFiaWxpdHkgdG8gcmVhY2ggaW50byBlbmVteSBjb25zY2lvdXNuZXNzIGFuZCBtYW5pcHVsYXRlIHRoZWlyIGJlaGF2aW9yIGNhbiB0dXJuIHRoZSB0aWRlIG9mIGJhdHRsZS5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkVuZW1pZXMgYXJlIHxQRVJDRU5UfCUgbGVzcyBhY2N1cmF0ZSB3aGVuIHRhcmdldGluZyBOeXguXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJueXgucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibmFyYW1vblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiA0MDE0NjU0LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiNlwiLFxuICAgICAgXCJzZXhcIjogXCJGZW1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEuMSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYy9jYi9OeXhOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjMyMjNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL055eFwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlBob3JpZCAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9KYWRlL055eFByaW1lXCIsXG4gICAgICBcIm5hbWVcIjogXCJOeXggUHJpbWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbmZpbHRyYXRlIHRoZSBtaW5kcyBvZiB5b3VyIGVuZW1pZXMgd2l0aCBOeXggUHJpbWUuIEZlYXR1cmluZyBhbHRlcmVkIG1vZCBwb2xhcml0aWVzIGZvciBncmVhdGVyIGN1c3RvbWl6YXRpb24uXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4xMjUsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkVuZW1pZXMgYXJlIHxQRVJDRU5UfCUgbGVzcyBhY2N1cmF0ZSB3aGVuIHRhcmdldGluZyBOeXggUHJpbWUuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJueXgtcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJuYXJhbW9uXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDEwODU0NTMyLFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTQuOFwiLFxuICAgICAgXCJzZXhcIjogXCJGZW1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEuMTI1LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2FhL055eFByaW1lTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI0MDIzMjMyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9OeXhfUHJpbWVcIixcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE0IDA5IDIzXCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTYgMDggMjNcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxNiAwOCAyM1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL1BhbGFkaW4vUGFsYWRpblwiLFxuICAgICAgXCJuYW1lXCI6IFwiT2Jlcm9uXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRXF1YWxseSBhZGVwdCBhdCBoZWFsaW5nIGZyaWVuZHMgb3Igc3RyaWtpbmcgZG93biB0aGUgZW5lbXkuIE9iZXJvbiBlbWJvZGllcyB0aGUgYmFsYW5jZSBUZW5ubyBhcmUgc3dvcm4gdG8gdXBob2xkLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkFsbGllZCBwZXRzIHJlY2VpdmUgfEhFQUxUSHwlIEhlYWx0aCwgQXJtb3IgYW5kIFNoaWVsZCBidWZmcy4gSW4gYWRkaXRpb24sIHlvdXIgcGV0IHJlY2VpdmVzIGFuIGluc3RhbnQgcmV2aXZlIHBlciBtaXNzaW9uLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwib2Jlcm9uLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm1hZHVyYWlcIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMjg5NTY1OSxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjExLjVcIixcbiAgICAgIFwic2V4XCI6IFwiTWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84Yy9PYmVyb25OZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTAyMjMwMjI1MDdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL09iZXJvblwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkV4aW11cyBFbmVtaWVzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvUGFsYWRpbi9QYWxhZGluUHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIk9iZXJvbiBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlByb3RlY3QgdGhlIGJhbGFuY2Ugd2l0aCB0aGlzIHJlZ2FsIGZvcmVzdCBndWFyZGlhbi4gRmVhdHVyaW5nIGFsdGVyZWQgbW9kIHBvbGFyaXRpZXMgZm9yIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJBbGxpZWQgcGV0cyByZWNlaXZlIHxIRUFMVEh8JSBIZWFsdGgsIEFybW9yIGFuZCBTaGllbGQgYnVmZnMuIEluIGFkZGl0aW9uLCB5b3VyIHBldCByZWNlaXZlcyBhbiBpbnN0YW50IHJldml2ZSBwZXIgbWlzc2lvbi5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm9iZXJvbi1wcmltZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiYXVyYVwiOiBcIm1hZHVyYWlcIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogNDY3MTMwMSxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjIwLjYuMlwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDgvT2Jlcm9uUHJpbWVCdXN0LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzA1MTgwMzQxNDJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL09iZXJvbl9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTcgMDUgMzBcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxOSAwMyAyN1wiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE5IDAzIDI3XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk9iZXhcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9NZWxlZS9LaWNrQW5kUHVuY2gvS2lja1B1bmNoV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgT2JleCBzeXN0ZW0gbXVsdGlwbGllcyB0aGUga2luZXRpYyBlbmVyZ3kgb2YgYSBUZW5ubydzIGtpY2tzIGFuZCBwdW5jaGVzLCBkZWxpdmVyaW5nIGRldmFzdGF0aW5nIGJsb3dzIHRvIGFueSB0YXJnZXQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiA3NSxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwib2JleC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTcGFycmluZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjI1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZi9mNS9Db3JwdXNLaWNrTlB1bmNoLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDAzMTQxNzM2MTdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL09iZXhcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvQmFyZC9CYXJkXCIsXG4gICAgICBcIm5hbWVcIjogXCJPY3RhdmlhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ29tcG9zZSBoZXIgc29uZyBhbmQgdGhlbiBjb25kdWN0IHRoZSBtaWdodHkgTWFuZGFjaG9yZCwgdHVybmluZyBiYXNzLCBiZWF0IGFuZCBtZWxvZHkgaW50byBhbiBhbnRoZW0gb2YgZGV2YXN0YXRpb24uXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4wNSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiUmVwbGVuaXNoIHxFTkVSR1l8IGVuZXJneSBvdmVyIHxEVVJBVElPTnxzIGZvciBPY3RhdmlhIGFuZCBhbGxpZXMgd2l0aGluIHxSQU5HRXxtIHdoZW4gYWJpbGl0aWVzIGFyZSBhY3RpdmF0ZWQuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJvY3RhdmlhLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm5hcmFtb25cIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMjE3MTE3OSxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjIwXCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4wNSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYS9hOS9PY3RhdmlhLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxOTA3MjIxNzMzMDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL09jdGF2aWFcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJPY3RhdmlhJ3MgQW50aGVtIChRdWVzdClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJPY3Vjb3JcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9QaXN0b2xzL0NycFNlbnRFeHBlcmltZW50UGlzdG9sL0NycFNlbnRFeHBlcmltZW50UGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIyLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiSGVsZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgd2VhcG9uIHRoYXQgcmVhY2hlcyBmb3IgaXRzIG5leHQgdmljdGltIGV2ZW4gYXMgaXQga2lsbHMuIFdpdGggZWFjaCB0YWtlZG93biwgdGhpcyBwaXN0b2wgc3Bhd25zIGFuIGVuZXJneSB0ZW5kcmlsIHRoYXQgcmVhY2hlcyBmb3IgYSBuZWFyYnkgdGFyZ2V0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm9jdWNvci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwLjAgcmFkaWF0aW9uXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84My9PY3Vjb3IucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MTExMDIwMTA0MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvT2N1Y29yXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCAgYmVhbSBtdW5pdGlvbnMuIEVhY2ggZW5lbXkga2lsbGVkIHdpbGwgY3JlYXRlIGFuIGFkZGl0aW9uYWwgdGVuZHJpbCB0aGF0IGRhbWFnZXMgb3RoZXIgdGFyZ2V0dGFibGUgZW5lbWllcyBpbiBzaWdodC4gVGVuZHJpbHMgcmVzZXQgdXBvbiByZWxvYWRpbmcuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU0LjUsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvQXJjaHdpbmcvU3RhbmRhcmRKZXRQYWNrL1N0YW5kYXJkSmV0UGFja1wiLFxuICAgICAgXCJuYW1lXCI6IFwiT2RvbmF0YVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBzeXN0ZW1zIGJ1aWx0IGludG8gdGhpcyBBcmNod2luZyBiYWxhbmNlIG9mZmVuc2l2ZSBjYXBhYmlsaXRpZXMgd2l0aCBkZWZlbnNpdmUgY291bnRlcm1lYXN1cmVzLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJWZWhpY2xlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm9kb25hdGEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQXJjaHdpbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGhlIEFyY2h3aW5nIChRdWVzdClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9PZG9uYXRhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0FyY2h3aW5nL1ByaW1lSmV0UGFjay9QcmltZUpldFBhY2tcIixcbiAgICAgIFwibmFtZVwiOiBcIk9kb25hdGEgUHJpbWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGlzIGVuaGFuY2VkIHZlcnNpb24gb2YgdGhlIGZpcnN0IEFyY2h3aW5nIHByb3RvdHlwZSB0YWtlcyB0aGUgZGVzaWduIHRvIGl0cyB0aGVvcmV0aWNhbCBsaW1pdHMuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIlZlaGljbGVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwib2RvbmF0YS1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJBcmNod2luZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTUgMDMgMjRcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNyAwMiAyOFwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE3IDAyIDI4XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvT2RvbmF0YV9QcmltZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJPZ3Jpc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ2xhblRlY2gvQ2hlbWljYWwvUm9ja2V0TGF1bmNoZXJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk9ncmlzIGZpcmVzIGRldG9uaXRlLWluZnVzZWQgY2FzaW5ncy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA5LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwib2dyaXMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiTGF1bmNoZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiAxMDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAzNSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yNC9PZ3Jpc05ldy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwMzI0MjAwNzM5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9PZ3Jpc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNoZW0gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBOaWdodHdhdGNoIE5hcGFsbSB0dXJucyB0aGUgT2dyaXMgaW50byBhbiBhcmVhIGRlbmlhbCB3ZWFwb24uIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAxMDMuNSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJPaG1hXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTWVsZWUvQ3JwVG9uZmEvQ3JwVG9uZmFcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCcmluZyB0aGUgZW5lbXkgdG8gaXRzIGtuZWVzIHdpdGggdGhlc2UgdHdpbiBlbGVjdHJpZmllZCB0b25mYXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiA0MDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJvaG1hLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRvbmZhXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTAwLjAgZWxlY3RyaWNpdHlcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYi9iYy9Db3JwdXNUb25mYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwMTE5MDAyNzAzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9PaG1hXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0My4xMixcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIG1vbnN0cm91cyBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFNsYW1zIGhhdmUgZ3VhcmFudGVlZCBFbGVjdHJpY2l0eSBwcm9jIGluIDguNW0gcmFkaXVzLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU292ZXJlaWduIE91dGNhc3RcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJSb2d1ZSBFZGljdFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk9raW5hXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvVGVubm9TYWkvVGVubm9TYWlzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQZXJmb3JhdGUgZW5lbWllcyB3aXRoIHRoZXNlIHR3byBuZWVkbGUtc2hhcnAgc2FpLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTYwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMwOTk5OTksXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJva2luYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIERhZ2dlcnNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzQvNDkvVGVubm9TYWlzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjA3MTAxNzQyNDJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL09raW5hXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwiZG1nXCI6IFwiU3BlZWRcIixcbiAgICAgIFwicmFua1wiOiA0NS44MSxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9uc3Ryb3VzIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIOKcqlwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJTcGlubmluZyBOZWVkbGVcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IEZleSBJbnRlcnZlbnRpb24gKGZvcndhcmQgbW92ZXNldCk7ICtEUFMsIC1yYWdkb2xsXCIsXG4gICAgICBcImNvbWJvXCI6IFwiQWNjdXJzZWQgV2hpc3BlcnNcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJPbG9ybyBNb2FcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9GcmllbmRseS9QZXRzL01vYVBldHMvTW9hUGV0UGFydHMvTW9hUGV0SGVhZE9sb3JvXCIsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJvbG9yby1tb2EucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkxlZ3MgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvT2xvcm9fTW9hXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk9ub3JpeFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQXJjaHdpbmcvTWVsZWUvQXJjaGF4ZS9BcmNoQXhlV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI5MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBsYXNlciBibGFkZWQgYmF0dGxlLWF4ZSBlYXNpbHkgaGFja3MgdGhyb3VnaCBhIHNoaXAncyBkZWZlbnNlcyBhbmQgdGhlIGZvcmNlcyBwcm90ZWN0aW5nIGl0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjkwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJvbm9yaXgucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyOTAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzIyL0FyY2hheGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTAyODIyMTIwNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvT25vcml4XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcInR5cGVcIjogXCJBcmNod2luZyBNZWxlZVwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJPb2x0aGEgU3RyaWtlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Pc3Ryb24vTWVsZWUvTW9kdWxhck1lbGVlMDEvVGlwL1RpcFR3b1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwib29sdGhhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlphd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJIb2sncyBBbnZpbCAoQ2V0dXMpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvT29sdGhhX1N0cmlrZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJPcHRpY29yXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTG9uZ0d1bnMvQ3JwQkZHL0NycEJGR1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQ2hhcmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiT25jZSBjaGFyZ2VkIHRoaXMgQ29ycHVzIGxhc2VyIGNhbm5vbiBkaXNwYXRjaGVzIGEgZGV2YXN0YXRpbmcgYmxhc3Qgb2YgbGlnaHQgZW5lcmd5LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDE0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMDUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm9wdGljb3IucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiAxMDAwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJzdGF0dXNDaGFuY2VcIjogMjAsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTcvQ3JwQkZHLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDEwMjQxNDM0MTJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL09wdGljb3JcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJFbmVyZ3kgTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBEbyBub3Qgc3RhcmUgZGlyZWN0bHkgaW50byBiZWFtLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiA3NC4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk9wdGljb3IgVmFuZGFsXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTG9uZ0d1bnMvQ3JwQkZHL1ZhbmRhbC9WYW5kYWxDcnBCRkdcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggYSBwcmVjaXNpb24gY3JhZnRlZCBsZW5zLCB0aGlzIGN1c3RvbWl6ZWQgT3B0aWNvciBhY2hpZXZlcyBhIGxldmVsIG9mIHBlcmZvcm1hbmNlIHByZXZpb3VzbHkgdGhvdWdodCBpbXBvc3NpYmxlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDE0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMDUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm9wdGljb3ItdmFuZGFsLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiA0MDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAzMCxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNy83ZS9PcHRpY29yVmFuZGFsLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxOTAzMDgxNjMyMTlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL09wdGljb3JfVmFuZGFsXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQnVyaWVkIERlYnRzIChRdWVzdClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDcsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiT3J0aG9zXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Qb2xlYXJtcy9Qb2xlYXJtV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgVGVubm8gZm9yZ2VkIE9ydGhvcyBpcyBhIHJhcmUgZG91YmxlIGJsYWRlZCBwb2xlYXJtLiBUaG9zZSB3aG8gdGFrZSB0aGUgdGltZSB0byBtYXN0ZXIgaXQgc3BlYWsgb2YgaXRzIGltcHJlc3NpdmUgc3RyaWtpbmcgZGlzdGFuY2UgYW5kIGFiaWxpdHkgdG8gaGl0IG11bHRpcGxlIHRhcmdldHMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiA4MyxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC41LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwib3J0aG9zLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBvbGVhcm1cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI1MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvNzQvREVPcnRob3MucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDQwNzA0MTgyMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvT3J0aG9zXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIk9ydGhvcyBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvUG9sZWFybXMvUHJpbWVQb2xlYXJtV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDY1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJPcnRob3MgUHJpbWUgaXMgYW4gYW5jaWVudCBPcm9raW4gbWFydGlhbCB3ZWFwb24sIGZvcmdlZCBmcm9tIHRoZSBwdXJlc3QgcnViaWRpdW0gbWFraW5nIGl0IGV4dHJlbWVseSBsaWdodC13ZWlnaHQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMDgsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm9ydGhvcy1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQb2xlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI2NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzIvMmEvUHJpbWVQb2xlYXJtLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA3MTMyMDM2MThcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL09ydGhvc19QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAxLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTMgMDcgMTNcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibmV2ZXJcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwibmV2ZXJcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIlNsaWRlXCIsXG4gICAgICBcInJhbmtcIjogNDcuMjYsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJUd2lybGluZyBTcGlyZVwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlNsaWRlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiT3J2aXVzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9HbGFpdmVzL1Rlc2hpbkdsYWl2ZS9UblRlc2hpbkdsYWl2ZVdlcFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVHVybiBmb2VzIGludG8gcHVwcGV0cyB3aXRoIFRlc2hpbuKAmXMgdmVyc2F0aWxlIHRocm93aW5nIGRpc2MuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyMTAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJvcnZpdXMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiR2xhaXZlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiVGhyb3duXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNmIvVGVzaGluR2xhaXZlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODAzMTQwMzM2MzNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL09ydml1c1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBXYXIgV2l0aGluIChRdWVzdClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA3MC4zLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgdmVyeSBsb3cgYXR0YWNrIHNwZWVkLiBDaGFubmVsZWQgdGhyb3cgc3VzcGVuZHMgZW5lbWllcyBpbiBtaWRhaXIuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJBc3RyYWwgVHdpbGlnaHRcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJNb3JuaW5nIFN1blwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9TZW50aW5lbHMvU2VudGluZWxQb3dlcnN1aXRzL1JhZGFyUG93ZXJTdWl0XCIsXG4gICAgICBcIm5hbWVcIjogXCJPeHlsdXNcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaXRoICdTY2FuIEFxdWF0aWMgTGlmZWZvcm1zJyBhbmQgJ1NjYW4gTWF0dGVyJyBhcyBkZWZhdWx0IFByZWNlcHRzLCBPeHlsdXMgd2FzIGRlc2lnbmVkIHRvIGFzc2lzdCBpbiBTZWFyY2gtYW5kLVJlc2N1ZSBvcGVyYXRpb25zIHRocm91Z2ggdGhlIGhhcnNoIGxhbmRzY2FwZSBhcm91bmQgVGhlIE9yYiBWYWxsaXMuIE94eWx1cyBhbHNvIGNvbWVzIHdpdGggYSBNdWx0cm9uIHJpZmxlLk5vdGU6IFRoaXMgaXRlbSByZXF1aXJlcyB0d28gb3BlbiBzbG90cy5cIixcbiAgICAgIFwidHlwZVwiOiBcIlNlbnRpbmVsXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIm94eWx1cy5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGhlIEJ1c2luZXNzIChGb3J0dW5hKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL094eWx1c1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQYW5kZXJvXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9QaXN0b2xzL1RuQmFyZFBpc3RvbC9UbkJhcmRQaXN0b2xHdW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzIsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiT2N0YXZpYSdzIHBpc3RvbCBoYW1tZXJzIGZvZXMgd2l0aCBzaW5nbGUgc2hvdHMgb3IgYSByYXBpZCB2b2xsZXkgb2YgYnVsbGV0cy4gV2hlbiB3aWVsZGVkIGJ5IE9jdGF2aWEsIGFsdC1maXJlIEhlYWRzaG90IEtpbGxzIGluY3JlYXNlIFJlbG9hZCBTcGVlZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwYW5kZXJvLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzIuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcInNwZWVkXCI6IDcuNjksXG4gICAgICAgIFwiaW1wYWN0XCI6IDE4LFxuICAgICAgICBcInNsYXNoXCI6IDM2LFxuICAgICAgICBcInB1bmN0dXJlXCI6IDE4XG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2NiL1RuQmFyZFBpc3RvbC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwMzI0MjMwMjA4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9QYW5kZXJvXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBBbHQtZmlyZSBlbXB0aWVzIGNsaXAgb250byBlbmVteSB3aXRoIHNvbWUgd29ycnlpbmcgcmVjb2lsLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1OS44LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlBhbmdvbGluIFN3b3JkXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvUGFuZ29saW5Td29yZC9QYW5nb2xpbkxvbmdTd29yZFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNyxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSB1bmlxdWUgYmxhZGUgdXNlZCBieSBhbiBvbGQgVGVubm8gY2xhbi5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE0OCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40NyxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInBhbmdvbGluLXN3b3JkLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN3b3JkXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzcuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzI4L1BhbmdvbGluLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA0MjYwODA2MzdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1BhbmdvbGluX1N3b3JkXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTmlnaHR3YXZlXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjYuMTEsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBKdW1wIGF0dGFja3MgYWx3YXlzIHByb2MgRWxlY3RyaWNpdHkuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJTd29vcGluZyBGYWxjb25cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJDcmltc29uIERlcnZpc2gncyBDb2lsaW5nIEltcGFsZTogK0RQUyAtcHJvY1wiLFxuICAgICAgXCJjb21ib1wiOiBcIkRpdmluZyBLZXN0cmVsXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUGFudGhlcmFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL01pdGVyL1Rub01pdGVyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGaXJpbmcgaGlnaC12ZWxvY2l0eSBibGFkZXMsIHRoaXMgd2VhcG9uIGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBiYXR0bGUtc2F3LCBzaHJlZGRpbmcgYW55dGhpbmcgdW5mb3J0dW5hdGUgZW5vdWdoIHRvIGdldCB3aXRoaW4gcmFuZ2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInBhbnRoZXJhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMDAuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwic3BlZWRcIjogMixcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiAyNSxcbiAgICAgICAgXCJjcml0X211bHRcIjogMixcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMyxcbiAgICAgICAgXCJzaG90X3R5cGVcIjogXCJDb250aW51b3VzXCIsXG4gICAgICAgIFwiaW1wYWN0XCI6IDEwLFxuICAgICAgICBcInNsYXNoXCI6IDgwLFxuICAgICAgICBcInB1bmN0dXJlXCI6IDEwXG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzZmL1Rlbm5vTWl0ZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDExNTAwNDAyM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUGFudGhlcmFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vZGVyYXRlIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIEFsdC1maXJlIHB1dHMgYSBzcGlubmluZyBibGFkZSBhIGZldyBtZXRlcnMgaW4gZnJvbSBvZiB0aGUgd2VhcG9uIHRoYXQgY29uc3RhbnRseSBzcGluIGFuZCBkZWFsIGRhbWFnZS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjUuNixcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQYXJhIE1vYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL0ZyaWVuZGx5L1BldHMvTW9hUGV0cy9Nb2FQZXRQYXJ0cy9Nb2FQZXRIZWFkUGFyYVwiLFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWxcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicGFyYS1tb2EucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkxlZ3MgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvUGFyYV9Nb2FcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUGFyYWNlc2lzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Pcm9raW4vQmFsbGFzU3dvcmQvQmFsbGFzU3dvcmRXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTQ0LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgU2VudGllbnQgc2xheWVyLiBBbiBvZmZlcmluZyBmcm9tIEJhbGxhcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI4OCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwYXJhY2VzaXMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiSGVhdnkgQmxhZGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNDQuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9iL2I3L0JhbGxhc1N3b3JkLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODEwMTIxNTE3MTVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1BhcmFjZXNpc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNoaW1lcmEgUHJvbG9ndWUgKFF1ZXN0KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAzNi43LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgbG93IGF0dGFjayBzcGVlZC4gSGFzIG1heCBtb2RzbG90IG9mIDkwIGluY2x1ZGluZyBzdGFuY2UuIFVzaW5nIGZvcm1hIG9uIHRoaXMgd2VhcG9uIHdpbGwgaW5jcmVhc2UgZGFtYWdlIHRvIFRhdSBmYWN0aW9uICh1cCB0byA2MCUgYWZ0ZXIgNSBmb3JtYSkuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDbGVhdmluZyBXaGlybHdpbmRcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJCcm9rZW4gQnVsbFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlBhcmFjeXN0XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9JbmZlc3RlZC9Mb25nR3Vucy9RdWFudGFGdWxseUluZmVzdGVkL0luZlF1YW50YVJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMzLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQnVyc3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDb21wbGV0ZWx5IG92ZXJ3aGVsbWVkIGJ5IEluZmVzdGVkIGJpb2xvZ3ksIHRoaXMgZm9ybWVyIFF1YW50YSBub3cgZmlyZXMgb3JnYW5pYyBvcmRuYW5jZSBhbmQgYSBoYXJwb29uIGxpa2UgYXBwZW5kYWdlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA1MCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMxNTAwMDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInBhcmFjeXN0LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMy4wIHRveGluXCIsXG4gICAgICBcImZsaWdodFwiOiBcIj8/P1wiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJJbmZlc3RlZCBIYXJwb29uXCIsXG4gICAgICAgIFwic3BlZWRcIjogMTEuMTEsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMTAsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDIsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLjMsXG4gICAgICAgIFwic2hvdF90eXBlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgICBcInNob3Rfc3BlZWRcIjogbnVsbCxcbiAgICAgICAgXCJ0b3hpblwiOiAzMyxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCIzMy4wIHRveGluXCJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2MvY2EvSW5mUXVhbnRhUmlmbGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNzE4MjU1MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUGFyYWN5c3RcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJCaW8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIFRocmVlLXJvdW5kIGJ1cnN0IGlzIHdhc3RlZnVsIGF0IHRpbWVzLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogOTMuOCxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQYXJpc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQm93cy9IdW50aW5nQm93XCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJhc2VkIG9uIG9uZSBvZiB0aGUgd29ybGQncyBvbGRlc3Qgd2VhcG9uIGRlc2lnbnMsIHRoaXMgVGVubm8tY3JhZnRlZCB3ZWFwb24gY2FuIGJlIHVzZWQgYm90aCBpbiBzdGVhbHRoIGFuZCBpbiBvcGVuIGNvbWJhdC4gVGhlIFBhcmlzIHVzZXMgYSBjaGFyZ2VhYmxlIG1hZ25ldGljIGZpZWxkIHRvIGxhdW5jaCBhcnJvd3MgY2FwYWJsZSBvZiBpbXBhbGluZyBlbmVtaWVzIHRvIHdhbGxzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNi42NjY2NjYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIlNpbGVudFwiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicGFyaXMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQm93XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMjAuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogNzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAxMCxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNy83ZC9QYXJpcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwMjEwMDAyMDU0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9QYXJpc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQYXJpcyBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQm93cy9QcmltZUh1bnRpbmdCb3dcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjYwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQ2hhcmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGlzY292ZXJlZCBkZWVwIGluc2lkZSBhbiBhbmNpZW50IE9yb2tpbiBkZXJlbGljdCwgdGhlIFBhcmlzIFByaW1lIGluY3JlYXNlcyB0aGUga2luZXRpYyBlbmVyZ3kgb2YgYW55IGJvbHQgaXQgZmlyZXMsIGRlYWxpbmcgbW9yZSBkYW1hZ2UgdGhhbiBpdHMgbW9yZSBjb21tb24gY291bnRlcnBhcnQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE2LjY2NjY2NixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiU2lsZW50XCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDgsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwYXJpcy1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJCb3dcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTMwLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDcwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzdGF0dXNDaGFuY2VcIjogMjAsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvNzUvUHJpbWVCb3dNLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA3MTMyMTM3MzNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1BhcmlzX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxMyAwNyAxM1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCJuZXZlclwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogODMuNixcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQZW50YVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL0xvbmdHdW5zL0dyZW5hZGVMYXVuY2hlci9HcmVuYWRlTGF1bmNoZXJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkFjdGl2ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBQZW50YSBMYXVuY2hlciBmaXJlcyB1cCB0byBmaXZlIGdyZW5hZGVzIHRoYXQgY2FuIGJlIHJlbW90ZWx5IHRyaWdnZXJlZCBhdCBqdXN0IHRoZSByaWdodCBtb21lbnQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInBlbnRhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkxhdW5jaGVyXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNTAuMCBibGFzdFwiLFxuICAgICAgXCJmbGlnaHRcIjogMjAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIkdyZW5hZGUgRGV0b25hdGlvblwiLFxuICAgICAgICBcImJsYXN0XCI6IDM1MCxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCIzNTAuMCBibGFzdFwiXG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2FkL0RFUGVudGEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDIxNTA5MTM0OFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUGVudGFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUGhhZWRyYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQXJjaHdpbmcvUHJpbWFyeS9BcmNoTG9uZ1JpZmxlL0FyY2hMb25nUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGV2YXN0YXRlIGZyZWUtc3BhY2UgZW5lbWllcyB3aXRoIFBoYWVkcmEsIHRoZSBTb21hJ3MgYmlnLXNpc3Rlci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAuNTI2MzE2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTUsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInBoYWVkcmEucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0NS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvMzUvQXJjaExvbmdSaWZsZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUxMDAyMDkwMTQwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9QaGFlZHJhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInR5cGVcIjogXCJBcmNod2luZyBHdW5cIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUGhhZ2VcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0luZmVzdGVkL0xvbmdHdW5zL1RlbnRhY2x1c3Rlci9JbmZlc3RlZFNob3RndW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJIZWxkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRmlyZXMgc2V2ZW4gYmVhbXMgb2YgY29udGludW91cyBiaW9jaGVtaWNhbCBlbmVyZ3kgd2hpY2ggZGVwbGV0ZXMgdGhlIGxpZmUgb2YgYW55IHN1cmZhY2UgdGhleSBjb250YWN0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA1MCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTEsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40NixcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicGhhZ2UucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzUuMCB2aXJhbFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiRGlzY2hhcmdlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzkvOWUvSW5mZXN0ZWRMb25nR3VuVHdvLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDAyMDYwNjE5NTdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1BoYWdlXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmlvIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCBiZWFtIG11bml0aW9ucy4gU2NvcGluZyBuYXJyb3dzIGRvd24gdGhlIGJlYW0gdG8gYSBzaW5nbGUgcG9pbnQuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCIxMDAlIFN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ5LjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUGhhbnRhc21hXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9SZXZlbmFudFNob3RndW4vUmV2ZW5hbnRTaG90Z3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDc1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiSGVsZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIklycmFkaWF0ZSBlbmVtaWVzIHdpdGggYSBjb250aW51b3VzIHN0cmVhbSBvZiBkZWFkbHkgcGxhc21hLiBDaGFyZ2luZyBzZWNvbmRhcnkgZmlyZSByZWxlYXNlcyBhIGdsb2Igb2YgcGxhc21hIHRoYXQgZXJ1cHRzIHdpdGggaG9taW5nIGJvbWJsZXRzIG9uIGltcGFjdC4gSW5jcmVhc2VkIE1hZ2F6aW5lIENhcGFjaXR5IHdoZW4gd2llbGRlZCBieSBSZXZlbmFudC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA5LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInBoYW50YXNtYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI1MC4wIHJhZGlhdGlvblwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9kL2Q2L1JldmVuYW50U2hvdGd1bi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwODI1MDUzODM5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9QaGFudGFzbWFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIGluc2FuZSBkcHMsIGJlYW0gbXVuaXRpb25zLiBQcmltYXJ5IGZpcmUgaGFzIHVzYWJsZSBBT0UuIEFsdCBmaXJlIGNoYXJnZXMgdGhlIHdlYXBvbiB0byBmaXJlIGFuIGV4cGxvZGluZyBnbG9iIHRoYXQgYWxzbyByZWxlYXNlcyBzZWVraW5nIHByb2plY3RpbGVzLiBMb25nZXIgY2hhcmdlIGltcGFydHMgbW9yZSBkYW1hZ2UuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCIxMDAlIFN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDM2LjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUGxhZ3VlIEtlZXdhciBTdHJpa2VcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL09zdHJvbi9NZWxlZS9Nb2R1bGFyTWVsZWVJbmZlc3RlZC9UaXBzL0luZmVzdGVkVGlwVHdvXCIsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwbGFndWUta2Vld2FyLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlphd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJPcGVyYXRpb24gUGxhZ3VlIFN0YXIgKENldHVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL1BsYWd1ZV9LZWV3YXJfU3RyaWtlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlBsYWd1ZSBLcmlwYXRoIFN0cmlrZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvT3N0cm9uL01lbGVlL01vZHVsYXJNZWxlZUluZmVzdGVkL1RpcHMvSW5mZXN0ZWRUaXBPbmVcIixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInBsYWd1ZS1rcmlwYXRoLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlphd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJPcGVyYXRpb24gUGxhZ3VlIFN0YXIgKENldHVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL1BsYWd1ZV9LcmlwYXRoX1N0cmlrZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQbGFzbWEgU3dvcmRcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkcy9QbGFzbWFTd29yZC9QbGFzbWFMb25nU3dvcmRcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFuIGFkdmFuY2VkIGJsYWRlIHRoYXQgZGVsaXZlcnMgaGlnaC1kYW1hZ2UgYXR0YWNrcy4gRGVsaXZlcnMgYSBoaWdoIHBlcmNlbnRhZ2Ugb2YgY3JpdGljYWwgc3RyaWtlcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE0MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40OCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInBsYXNtYS1zd29yZC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTd29yZFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1LjAgZWxlY3RyaWNpdHlcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOS85MC9QbGFzbWEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDQyNjA4MDY0MlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUGxhc21hX1N3b3JkXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogODYuMTIsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCB2ZXJ5IGxvdyBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJTd29vcGluZyBGYWxjb25cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXZpbmcgS2VzdHJlbFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlBsaW54XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvUGlzdG9scy9DcnBTb25pZmljQmxhc3Rvci9DcnBCbGFzdG9yV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQ2LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkN1bHRpdmF0ZSBhIG1lYW5pbmdmdWwgcmVsYXRpb25zaGlwIHdpdGggdGhpcyBkZWNlcHRpdmVseSBzaW1wbGUgYmF0dGVyeS1wb3dlcmVkIHBpc3RvbC4gVGhlIFBsaW54IHJld2FyZHMgYXR0ZW50aW9uIGFuZCBpbnZlc3RtZW50IGZyb20gdGhlIHdpc2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDUwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwbGlueC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwLjAgaGVhdFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9lL2U1L1BsaW54LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODEyMTgxNjI4NDJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1BsaW54XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2Mi42LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlBveFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvSW5mZXN0ZWQvUGlzdG9scy9JbmZQcm94aW1pdHlTdGFycy9JbmZQcm94aW1pdHlTdGFyc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxNzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlc2UgZmVzdGVyaW5nIHNhY3Mgb2YgcHVzIGFuZCBnYXMgYnVyc3QgdmlvbGVudGx5IG9uIGltcGFjdC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjA1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInBveC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJUaHJvd25cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjUwLjAgdG94aW5cIixcbiAgICAgIFwiZmxpZ2h0XCI6IFwiPz8/XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2IvYmMvSW5mUHJveGltaXR5U3RhcnMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDgxOTIzNDQyOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUG94XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmlvIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgIHByb2plY3RpbGUgbXVuaXRpb25zLiBGaXJpbmcgbGF1bmNoZXMgZ2FzIGRhcnRzIHRoYXQgd2lsbCBmaWxsIGEgbW9kZXJhdGUgQU9FIHdpdGggZ2FzLiBNb2RkaW5nIDEwMCUgc3RhdHVzIGlzIGhpZ2hseSByZWNvbW1lbmRlZC4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU3LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlByaW1lIExhc2VyIFJpZmxlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvU2VudGluZWxzL1NlbnRpbmVsV2VhcG9ucy9QcmltZUxhc2VyUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTEuOTk5OTk5LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgUHJpbWUgTGFzZXIgUmlmbGUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogdHJ1ZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjEsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbCBXZWFwb25cIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicHJpbWUtbGFzZXItcmlmbGUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjEyLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOS85My9TZW50aW5lbEJ1cnN0TGFzZXJQcmltZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwNzE4MDQxMDA5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9QcmltZV9MYXNlcl9SaWZsZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNvbWVzIHdpdGggQ29tcGFuaW9uXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUHJpc21hIEFuZ3N0cnVtXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvUGlzdG9scy9DcnBIYW5kUkwvUHJpc21hQW5nc3RydW1cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTM1MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYnVlZCB3aXRoIHRoZSBmaW5lc3QgUHJpc21hIGNyeXN0YWwsIHRoaXMgcmVmaW5lZCBBbmdzdHJ1bSBmZWF0dXJlcyBib29zdGVkIGNoYXJnZSBhbmQgcmVsb2FkIHNwZWVkcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjYuNjY2NjY2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwcmlzbWEtYW5nc3RydW0ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogMjAwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCIzLVJvY2tldCBCYXJyYWdlIEV4cGxvc2lvblwiLFxuICAgICAgICBcInBlbGxldFwiOiB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiUm9ja2V0XCIsXG4gICAgICAgICAgXCJjb3VudFwiOiAzXG4gICAgICAgIH0sXG4gICAgICAgIFwiYmxhc3RcIjogNzUwLFxuICAgICAgICBcImRhbWFnZVwiOiBcIjc1MC4wIGJsYXN0XCJcbiAgICAgIH0sXG4gICAgICBcInNlY29uZGFyeUFyZWFcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCIzLVJvY2tldCBCYXJyYWdlIEltcGFjdFwiLFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogNTkuNSxcbiAgICAgICAgXCJwZWxsZXRcIjoge1xuICAgICAgICAgIFwibmFtZVwiOiBcIlJvY2tldFwiLFxuICAgICAgICAgIFwiY291bnRcIjogM1xuICAgICAgICB9LFxuICAgICAgICBcImJsYXN0XCI6IDYwMCxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCI2MDAuMCBibGFzdFwiXG4gICAgICB9LFxuICAgICAgXCJzdGF0dXNDaGFuY2VcIjogMjYsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzUvNWYvUHJpc21hQW5nc3RydW0ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDkwODE0MTQzMFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUHJpc21hX0FuZ3N0cnVtXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCAgcHJvamVjdGlsZSBtdW5pdGlvbnMuIE11bHRpc2hvdCBjYXVzZXMgdGhlIHJvY2tldCB0byBzcHJlYWQgb3V0IGZ1cnRoZXIuIENhbiBiZSBjaGFyZ2VkIHRvIGxhdW5jaCBtb3JlIHJvY2tldHMgYXQgb25jZS4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogOTcuMixcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQcmlzbWEgQnVyc3QgTGFzZXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9TZW50aW5lbHMvU2VudGluZWxXZWFwb25zL1ByaXNtYUJ1cnN0TGFzZXJQaXN0b2xcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJCdXJzdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZpcmVzIGEgc21hbGwgYnVyc3Qgb2YgbGFzZXJzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInByaXNtYS1idXJzdC1sYXNlci5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjEwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNy83OC9QcmlzbWFTZW50aW5lbEJ1cnN0TGFzZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDIxNjIyMzgzMVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUHJpc21hX0J1cnN0X0xhc2VyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ29tZXMgd2l0aCBDb21wYW5pb25cIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQcmlzbWEgRHVhbCBDbGVhdmVyc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9NZWxlZS9HcmluZWVyTWFjaGV0dGVBbmRDbGVhdmVyL1ByaXNtYUR1YWxDbGVhdmVyc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQmxhZGVzIG9mIGVuZXJnaXplZCBwcmlzbWEgY3J5c3RhbCBtYWtlIHRoZXNlIG9ybmFtZW50YWwgY2xlYXZlcnMgY3V0IGFzIHNoYXJwbHkgYXMgdGhleSBsb29rLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTQwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicHJpc21hLWR1YWwtY2xlYXZlcnMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBTd29yZHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzUvNTcvUHJpc21hRHVhbENsZWF2ZXJzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA3MTAxNzE4MThcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1ByaXNtYV9EdWFsX0NsZWF2ZXJzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXRpY2FsXCIsXG4gICAgICBcInJhbmtcIjogMzUuMjIsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIGluc2FuZSBkcHMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBBdWdtZW50IGFkZHMgSnVzdGljZSAoQmxhc3QsIEhlYWx0aCwgQXJtb3IpIGVmZmVjdHMgYW5kICsxMDAlIHRvIGJhc2UgZGFtYWdlLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2FydmluZyBNYW50aXNcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IEJpdGluZyBNYW5kaWJsZXM7IC1EUFMsICtleGVjdXRpb25cIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXJlIENvdXJ0c2hpcFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlByaXNtYSBHb3Jnb25cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTG9uZ0d1bnMvVm9pZFRyYWRlckdvcmdvbi9WVEdvcmdvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyMy4wMDAwMDIsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQWRvcm5lZCB3aXRoIHZvaWQgaGFyZGVuZWQgcHJpc21hIGNyeXN0YWwsIHRoaXMgR29yZ29uIHZhcmlhbnQgaXMgcHJpemVkIGZvciBpdHMgYmVhdXR5IGFuZCBlbmhhbmNlZCBtZWNoYW5pY3MuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDIwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInByaXNtYS1nb3Jnb24ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIzLjFcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNS81NC9QcmlzbWFHb3Jnb24ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDYxMjIwNDg1MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUHJpc21hX0dvcmdvblwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJhcm8gS2knVGVlciAoUmVsYXkpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIGluc2FuZSBkcHMsIGhpdHNjYW4gbXVuaXRpb25zLiBSb2xsIGZvciByZWNvaWwgcmVkdWN0aW9uIGluIHJpdmVuLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0My40LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlByaXNtYSBHcmFrYXRhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Wb2lkVHJhZGVyL1ByaXNtYUdyYWthdGFcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTUsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRW5jYXNlZCBpbiBwbGF0ZXMgcmVmaW5lZCBmcm9tIHB1cmUgcHJpc21hIGNyeXN0YWxzLCB0aGlzIHJhcmUgZWxlbWVudCBnaXZlcyB0aGlzIGFzc2F1bHQgcmlmbGUgYSByYWRpYW50IGx1c3Rlci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjguNTcxNDI4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjIsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInByaXNtYS1ncmFrYXRhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvODAvUHJpc21hR3Jha2F0YS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwNjEyMjA0ODQ5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9QcmlzbWFfR3Jha2F0YVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJhcm8gS2knVGVlciAoUmVsYXkpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ4LjYsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUHJpc21hIEdyaW5sb2tcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTG9uZ0d1bnMvR3JpbmVlckxldmVyQWN0aW9uUmlmbGUvUHJpc21hR3Jpbmxva1dlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxODcsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUHJpc21hLWNyeXN0YWwgZW5oYW5jZW1lbnQgY3JlYXRlcyBoZXJlIGEgcHJlc3RpZ2UgaW5zdHJ1bWVudDsgYSB3ZWFwb24gY2FwYWJsZSBvZiB0YWtpbmcgbGlmZSBhdCBhc3RvbmlzaGluZyByYW5nZSB3aXRoIGJ1dCBhIHNpbmdsZSBwdWxsIG9mIGl0cyBleHF1aXNpdGVseS10b29sZWQgdHJpZ2dlci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMzIsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDExLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjQ1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwcmlzbWEtZ3Jpbmxvay5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTg3LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNC80Ny9QcmlzbWFHcmlubG9rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxOTAzMDkwMDA0MTNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1ByaXNtYV9HcmlubG9rXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCBoaXRzY2FuIG11bml0aW9ucy4gQXVnbWVudCBhZGRzIDIwMCUgQ0MgYW5kIFNlcXVlbmNlIChSYWRpYXRpb24sIFNoaWVsZHMsIE1heCBTaGllbGRzKSBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1Ny45LFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlByaXNtYSBPYmV4XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTWVsZWUvS2lja0FuZFB1bmNoL1ByaXNtYU9iZXhcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRhenpsZSwgZGlzdHJhY3QgYW5kIGRlc3Ryb3kgd2l0aCB0aGVzZSBzcGFycmluZyB3ZWFwb25zIG9mIGltcG9zc2libHkgaGFyZCBwcmlzbWEgY3J5c3RhbC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDc1LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwcmlzbWEtb2JleC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTcGFycmluZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjI1LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wMy9QcmlzbWFPYmV4LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzA1MDYwNjEwMzhcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1ByaXNtYV9PYmV4XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDY3LjI3LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgdmVyeSBoaWdoIGF0dGFjayBzcGVlZC4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gRW50cm9weSBEZXRvbmF0aW9uIGNhdXNlIGdyb3VuZCBmaW5pc2hlciBraWxscyB0byBleHBsb2RlIGZvciAxLDAwMCAoKzIwJSBlbmVteSBtYXggaGVhbHRoKSBCbGFzdCBkYW1hZ2UgYW5kIEVudHJvcHkgKE1hZ25ldGljLCBFbmVyZ3kpIGVmZmVjdHMuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJHcmltIEZ1cnlcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJCcmlnaHQgQmxhemUgJiBDaGFyZ2VkIEF0dGFja3NcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvU2VudGluZWxzL1NlbnRpbmVsUG93ZXJzdWl0cy9QcmlzbWFTaGFkZVBvd2VyU3VpdFwiLFxuICAgICAgXCJuYW1lXCI6IFwiUHJpc21hIFNoYWRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSByYXJlIGpld2VsIG9mIHRoZSB2b2lkLiBIb3cgY291bGQgYW55dGhpbmcgc28gYmVhdXRpZnVsIGJlIGNyYWZ0ZWQgZm9yIHN0ZWFsdGg/XCIsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwcmlzbWEtc2hhZGUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJhcm8gS2knVGVlciAoUmVsYXkpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvUHJpc21hX1NoYWRlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlByaXNtYSBTa2FuYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVm9pZFRyYWRlci9QcmlzbWFTa2FuYVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRm9yZ2VkIGZyb20gcmF3IHByaXNtYSBjcnlzdGFscyBhbmQgaW5mdXNlZCB3aXRoIFZvaWQgZW5lcmd5LCB0aGlzIGJsYWRlJ3MgcHJpc3RpbmUgZWRnZSBpcyBob25lZCByYXpvci1zaGFycCB0byBldmlzY2VyYXRlIGV2ZW4gdGhlIG1vc3QgZGVhZGx5IG9mIGZvZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjIsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwcmlzbWEtc2thbmEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU3dvcmRcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZjAvUHJpc21hU2thbmEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDYxMjIwNDg1MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUHJpc21hX1NrYW5hXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDYzLjQ3LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIEJyaWdodCBQdXJpdHkgYWRkcyAxMDAlIG1lbGVlIGRhbWFnZSBhbmQgUHVyaXR5IChDb3Jyb3NpdmUsIGhlYWx0aCkgZWZmZWN0cy4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlN3b29waW5nIEZhbGNvblwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIkRpdmluZyBLZXN0cmVsXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUHJpc21hIFRldHJhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTG9uZ0d1bnMvQ29ycHVzVU1QL1ByaXNtYUNvcnB1c1VNUFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzOCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGVuIGJhdGhlZCBpbiBWb2lkIGVuZXJneSBhbmQgcHJpc21hIGNyeXN0YWwsIHRoZSBzaW1wbGUgVGV0cmEgYmVjb21lcyBhIGJlYWNvbiBvZiBzdHlsZSBhbmQgaW50aW1pZGF0aW9uLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxOC4xODE4MTgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40NSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicHJpc21hLXRldHJhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzOC4wXCIsXG4gICAgICBcImZsaWdodFwiOiAxMDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvNzUvUHJpc21hVGV0cmEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDgwODIzMjA1OVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUHJpc21hX1RldHJhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMTAwLjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUHJpc21hIFR3aW4gR3JlbWxpbnNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvUGlzdG9scy9HcmluZWVyQnVsYm91c1NNRy9QcmlzbWEvUHJpc21hVHdpbkdyZW1saW5zV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI3LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZ1c2VkIHdpdGggcHJpc21hIGNyeXN0YWxzLCB0aGVzZSBwcmlzdGluZSBHcmluZWVyIHNpZGVhcm1zIGFyZSBzdXJlIHRvIGludGltaWRhdGUgYW55IGZvZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMzYuMzYzNjM2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjIsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicHJpc21hLXR3aW4tZ3JlbWxpbnMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBQaXN0b2xzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyNy4wXCIsXG4gICAgICBcImZsaWdodFwiOiA2NSxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zYS9QcmlzbWFUd2luR3JlbWxpbnMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDgyNTIzNTUxOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUHJpc21hX1R3aW5fR3JlbWxpbnNcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJCYXJvIEtpJ1RlZXIgKFJlbGF5KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIGluc2FuZSBkcHMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDcuNSxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQcmlzbWEgVmVyaXR1eFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQXJjaHdpbmcvTWVsZWUvVm9pZFRyYWRlckFyY2hzd29yZC9WVEFyY2hTd29yZFdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzMDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgcmFyZSBvYmplY3Qgb2YgYmVhdXR5LCB0aGlzIEFyY2h3aW5nIHN3b3JkIGhhcyBiZWVuIHNoZWF0aGVkIGluIHByaXNtYSBjcnlzdGFsIGFuZCBiYXB0aXplZCBpbiB0aGUgVm9pZOKAmXMgZW5lcmd5LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMzAwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwcmlzbWEtdmVyaXR1eC5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjMwMC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2UvZWQvUHJpc21hVmVyaXR1eEZpeC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwMTIzMDU1OTQ1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9QcmlzbWFfVmVyaXR1eFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJ0eXBlXCI6IFwiQXJjaHdpbmcgTWVsZWVcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJCYXJvIEtpJ1RlZXIgKFJlbGF5KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlByb3ZhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9DbGFuVGVjaC9FbmVyZ3kvRWxlY3Ryb1Byb2RcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBQcm92YSBpcyBhIE1lbGVlIFdlYXBvbiB0aGF0IGRlbGl2ZXJzIGEgaGlnaC1pbnRlbnNpdHkgc2hvY2sgdG8gaXRzIHRhcmdldC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE0MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yOSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInByb3ZhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIk1hY2hldGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNS4wIGVsZWN0cmljaXR5XCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzkvOTIvUHJvdmE4cG9pbnQyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzEwMDYxMzExMTVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1Byb3ZhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQcm92YSBWYW5kYWxcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NsYW5UZWNoL0VuZXJneS9WYW5kYWxFbGVjdHJvUHJvZFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA0OCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBjdXN0b21pemVkIHZlcnNpb24gb2YgdGhlIHZpY2lvdXMgUHJvdmEsIHdpdGggbWV0YWxsaWMgZmluaXNoIGFuZCBMb3R1cyBkZWNhbC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE5MixcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yOSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInByb3ZhLXZhbmRhbC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJNYWNoZXRlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0OC4wIGVsZWN0cmljaXR5XCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNjEvVmFuZGFsRWxlY3Ryb1Byb2QucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDYxOTIxMzUyMFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUHJvdmFfVmFuZGFsXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU3LjMsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgbG93IGF0dGFjayBzcGVlZC4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gU2xhbSBhdHRhY2tzIGFsd2F5cyBwcm9jIEVsZWN0cmljaXR5LiBTdGF0aWMgRGlzY2hhcmdlIGRlYWxzIDgwJSBvZiB3ZWFwb24gZGFtYWdlIGFzIEVsZWN0cmljaXR5IGRhbWFnZSB0byBuZWFyYnkgZW5lbWllcy4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkN5Y2xvbmUgS3Jha2VuXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiTGlnaHRuaW5nIFNpcmVuXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUHVwYWN5c3RcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0luZmVzdGVkL01lbGVlL1N0YWZmL0luZlN0YWZmL0luZlN0YWZmXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDkwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHR3by1wcm9uZ2VkIGF0dGFjazsgdGhlIGJvbmUtZ3JhZnRlZCBjb2Nvb24gYXQgdGhlIHRpcCBvZiB0aGlzIHN0YWZmIHJlbmRzIGZsZXNoLCB3aGlsZSB0aGUgdmlyYWwgbWFzcyBsaXZpbmcgd2l0aGluIHNwcmVhZHMgaXRzZWxmIGludG8gdGhlIHdvdW5kcyBvZiBlYWNoIG5ldyB2aWN0aW0uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNTAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJwdXBhY3lzdC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQb2xlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDMuMCB2aXJhbFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzFmL0luZlN0YWZmLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODEwMTMxMzQ1NTRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1B1cGFjeXN0XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmlvIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU5LjM0LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJUd2lybGluZyBTcGlyZVwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlZhdWx0aW5nIEFwZXggb3IgU2xpZGVcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQeXJhbmFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbHMvU2F3bk9mZlNob3RndW4vVGVubm9IYW5kU2hvdGd1blwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyNjQsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ2hldyB0aHJvdWdoIHRoZSBlbmVteSB3aXRoIHRoaXMgdmljaW91cyBhdXRvbWF0aWMgaGFuZCBzaG90Z3VuLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjY5OTk5OTk5LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInB5cmFuYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuIFNpZGVhcm1cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjI2NC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYWQvU2F3bk9mZlNob3RndW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDYwNDIyNDEyNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUHlyYW5hXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlB5cmFuYSBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9scy9QcmltZVB5cmFuYS9QcmltZVB5cmFuYVBpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyNDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhyZWUga2lsbHMgaW4gcmFwaWQgc3VjY2Vzc2lvbiB0byBzdW1tb24gYSBzZWNvbmQgZXRoZXJlYWwgUHlyYW5hIGZvciB0d2ljZSB0aGUgZGVhZGx5IHB1bmNoLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA2LjA2MDYwNixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC42OTk5OTk5OSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJweXJhbmEtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1biBTaWRlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjI0MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2UvZTMvUHlyYW5hUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDYxOTE5MTkwOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUHlyYW5hX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxOCAwNiAxOVwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuL2FcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAyMCAwNCAxN1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBpbnNhbmUgZHBzLCAgaGl0c2NhbiBtdW5pdGlvbnMuIEtpbGxpbmcgMyBlbmVtaWVzIHdpdGhpbiAzIHNlY29uZHMgc3VtbW9ucyBhbm90aGVyIFB5cmFuYSBQcmltZSBmb3IgNSBzZWNvbmRzLCB3aGljaCBkb3VibGVzIHlvdXIgZmlyZSByYXRlIGFuZCBjdXJyZW50IGFtbW8gKG9mIHdoaWNoIHVwIHRvIDEyIHJlbWFpbnMgYWZ0ZXIgaXQgaXMgZ29uZSkuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0aWNhbFwiLFxuICAgICAgXCJyYW5rXCI6IDQzLjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUXVhbnRhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTG9uZ0d1bnMvQ3JwU2hvY2tSaWZsZS9DcnBTaG9ja1JpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiSGVsZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgd2VhcG9uIHdhcyBkZXNpZ25lZCB0byBhc3Npc3Qgd2l0aCB0aGUgZXhjYXZhdGlvbiBvZiBtaW5lcmFsIGRlcG9zaXRzIGZyb20gbGFyZ2UgYXN0ZXJvaWRzLCBidXQgaGFzIGJlZW4gYWRhcHRlZCBmb3IgbWlsaXRhcnkgcHVycG9zZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJxdWFudGEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwLjAgZWxlY3RyaWNpdHlcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkRpc2NoYXJnZVwiLFxuICAgICAgXCJzZWNvbmRhcnlBcmVhXCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQ3ViZSAoU2hvdCBieSBwbGF5ZXIpXCIsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAyNixcbiAgICAgICAgXCJzcGVlZFwiOiA0LFxuICAgICAgICBcImJsYXN0XCI6IDYwMCxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCI2MDAuMCBibGFzdFwiXG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83Lzc1L0NycFNob2NrUmlmbGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDczMTIyMzUyMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUXVhbnRhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiRW5lcmd5IExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJRdWFudGEgVmFuZGFsXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvTG9uZ0d1bnMvQ3JwU2hvY2tSaWZsZS9RdWFudGFWYW5kYWxcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjYsXG4gICAgICBcInRyaWdnZXJcIjogXCJIZWxkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBjdXN0b21pemVkIHZlcnNpb24gb2YgdGhlIFF1YW50YSwgd2l0aCBtZXRhbGxpYyBmaW5pc2ggYW5kIExvdHVzIGRlY2FsLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInF1YW50YS12YW5kYWwucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjYuMCBlbGVjdHJpY2l0eVwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiRGlzY2hhcmdlXCIsXG4gICAgICBcInNlY29uZGFyeUFyZWFcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJDdWJlIChTaG90IGJ5IHBsYXllcilcIixcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDI2LFxuICAgICAgICBcInNwZWVkXCI6IDQsXG4gICAgICAgIFwiYmxhc3RcIjogNjAwLFxuICAgICAgICBcImRhbWFnZVwiOiBcIjYwMC4wIGJsYXN0XCJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzkvOTEvUXVhbnRhVmFuZGFsLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA1MTkyMTI0NDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1F1YW50YV9WYW5kYWxcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJCYXJvIEtpJ1RlZXIgKFJlbGF5KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCBiZWFtIG11bml0aW9ucy4gQ291bGQgZG8gd2l0aCBwdW5jaHRocm91Z2ggYnV0IGJ1aWxkIGlzIHRpZ2h0IGFzIGl0IGlzLiBBbHQgZmlyZSB1c2VmdWwgdG8gbGVhcm4gRXVjbGlkZWFuIGdlb21ldHJ5LiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0OS4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlF1YXJ0YWtrXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL0xvbmdHdW5zL0dybkZvdXJCYXJyZWxSaWZsZS9Hcm5Gb3VyQmFycmVsUmlmbGVXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDksXG4gICAgICBcInRyaWdnZXJcIjogXCJCdXJzdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFubmloaWxhdGUgdGFyZ2V0cyB3aXRoIGZvdXIgc2ltdWx0YW5lb3VzIHNob3RzIGZyb20gdGhpcyBoaWdoLWNhbGliZXIgR3JpbmVlciByaWZsZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogOTAuOTA5MDg4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJxdWFydGFray5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDkuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84LzhkL0dybkZvdXJCYXJyZWxSaWZsZVdlYXBvbi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcxMjIxMjE0NDMyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9RdWFydGFra1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNldHVzIEJvdW50eSAoR2hvdWwpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vZGVyYXRlIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIEZvdXItc2hvdCBidXJzdCBpcyB3YXN0ZWZ1bCBhdCB0aW1lcy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjcuNixcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJRdWF0elwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9QaXN0b2xzL0dybkFtcGhpc1Bpc3RvbC9Hcm5BbXBoaXNQaXN0b2xcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjksXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBjb21wYWN0IGZvdXItYmFycmVsZWQgZGVzaWduIHBhY2tpbmcgYSBzZWxmLWNoYXJnaW5nIGNhcGFjaXRvciB0aGF0IGRpc2NoYXJnZXMgdXBvbiBldmVyeSByZWxvYWQgZnJvbSBlbXB0eS4gRmVhdHVyZXMgYXV0byBoaXAtZmlyZSBhbmQgYWltZWQgZmlyZSBpcyBzZW1pLWF1dG8sIGZvdXItc2hvdCBpbnN0YW50IGJ1cnN0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA0MCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInF1YXR6LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTEuMCBlbGVjdHJpY2l0eVwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJCdXJzdFwiLFxuICAgICAgICBcInNwZWVkXCI6IDEwLFxuICAgICAgICBcImNyaXRfY2hhbmNlXCI6IDI3LFxuICAgICAgICBcImNyaXRfbXVsdFwiOiAyLjUsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLjIsXG4gICAgICAgIFwiaW1wYWN0XCI6IDksXG4gICAgICAgIFwic2xhc2hcIjogNyxcbiAgICAgICAgXCJwdW5jdHVyZVwiOiAyLFxuICAgICAgICBcImVsZWN0cmljaXR5XCI6IDExLFxuICAgICAgICBcImRhbWFnZVwiOiBcIjExLjAgZWxlY3RyaWNpdHlcIlxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xNC9RdWF0ei5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTkwNzE4MjA0ODM2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9RdWF0elwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgaW5zYW5lIGRwcywgIGhpdHNjYW4gbXVuaXRpb25zLiBSZWxvYWRpbmcgd2hlbiB0aGUgY2xpcCBpcyBlbXB0aWVkIGNhdXNlcyBhbiBFbGVjdHJpYyBkYW1hZ2UgcHJvYyAod2l0aCAxMDAlIHN0YXR1cyBjaGFuY2UpIGFyb3VuZCB5b3UuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0aWNhbFwiLFxuICAgICAgXCJyYW5rXCI6IDUxLjEsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUmFidmVlIFN0cmlrZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvT3N0cm9uL01lbGVlL01vZHVsYXJNZWxlZTAyL1RpcC9UaXBUZW5cIixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInJhYnZlZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJaYXdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiSG9rJ3MgQW52aWwgKENldHVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL1JhYnZlZV9TdHJpa2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUmFobiBQcmlzbVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU2VudGllbnRzL09wZXJhdG9yQW1wbGlmaWVycy9TZXQyL0JhcnJlbC9TZW50QW1wU2V0MkJhcnJlbFBhcnRBXCIsXG4gICAgICBcInR5cGVcIjogXCJBbXBcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicmFobi1wcmlzbS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGhlIFF1aWxscyAoQ2V0dXMpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvUmFobl9QcmlzbVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvR2FtZS9LdWJyb3dQZXQvR3VhcmRLdWJyb3dQZXRQb3dlclN1aXRcIixcbiAgICAgIFwibmFtZVwiOiBcIlJha3NhIEt1YnJvd1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRlc2lnbmVkIGJ5IHRoZSBPcm9raW4gdG8gYmUgdGhlIHBlcmZlY3QgY29tcGFuaW9uLCBhIEt1YnJvdyB3YXMgbmV2ZXIgZmFyIGZyb20gaXRzIG1hc3RlcidzIHNpZGUuIExveWFsIGFuZCBvYmVkaWVudCwgdGhlc2UgY3JlYXR1cmVzIG1hZGUgaWRlYWwgYm9keWd1YXJkcy4gRXF1aXBwZWQgd2l0aCBzaGllbGQgZ2VuZXJhdG9ycyBmb3IgYWRkZWQgcHJvdGVjdGlvbiwgdGhlaXIgZmllcmNlIGdyb3dsIGNvdWxkIHBhcmFseXplIGFueSBhdHRhY2tlciB3aXRoIGZlYXIuXCIsXG4gICAgICBcInR5cGVcIjogXCJDb21wYW5pb25cIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicmFrc2Eta3Vicm93LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkt1YnJvd1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJJbmN1YmF0b3IgU2VnbWVudCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9SYWtzYV9LdWJyb3dcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUmFrdGEgQmFsbGlzdGljYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU3luZGljYXRlcy9SZWRWZWlsL1Bpc3RvbHMvUlZCYWxsaXN0aWNhXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgbW9kaWZpZWQgYmFsbGlzdGljYSBpcyB0aGUgd2VhcG9uIG9mIGNob2ljZSB1c2VkIGJ5IFJlZCBWZWlsIEFzc2Fzc2lucyB0byB0YWtlIG91dCBoaWdoLXByaW9yaXR5IG1hcmtzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA0LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjA1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInJha3RhLWJhbGxpc3RpY2EucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQ3Jvc3Nib3dcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IDMwMCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQnVyc3QgU2hvdFwiLFxuICAgICAgICBcInNwZWVkXCI6IDExLjQzLFxuICAgICAgICBcImNyaXRfY2hhbmNlXCI6IDUsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDEuNSxcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAsXG4gICAgICAgIFwic2hvdF90eXBlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgICBcInNob3Rfc3BlZWRcIjogMTAwLFxuICAgICAgICBcImltcGFjdFwiOiAzLjc1LFxuICAgICAgICBcInNsYXNoXCI6IDMuNzUsXG4gICAgICAgIFwicHVuY3R1cmVcIjogNjcuNVxuICAgICAgfSxcbiAgICAgIFwic3RhdHVzQ2hhbmNlXCI6IDEwLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzJhL1JWQmFsbGlzdGljYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI3MTgzMTAxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9SYWt0YV9CYWxsaXN0aWNhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVkIFZlaWwgKEV4YWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIHByb2plY3RpbGUgbXVuaXRpb25zLiBCbGlnaHQgKFZpcmFsLCBlbmVyZ3ksIG1vdmVtZW50IHNwZWVkKSBpcyB1c2VmdWwgYXQgdGltZXMuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDEzNS43LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlJha3RhIENlcm5vc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU3luZGljYXRlcy9SZWRWZWlsL0Jvd3MvUlZDZXJub3NcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQ2hhcmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBmaW5lbHkgdHVuZWQgaW5zdHJ1bWVudCBvZiBhc3Nhc3NpbmF0aW9uLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNi42NjY2NjYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIlNpbGVudFwiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjE1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJyYWt0YS1jZXJub3MucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQm93XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjE1MC4wXCIsXG4gICAgICBcImZsaWdodFwiOiAxMDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInN0YXR1c0NoYW5jZVwiOiAxNSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOS85Yy9TeW5kaWNhdGVSVkNlcm5vcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwOTAyMjE1MTM1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9SYWt0YV9DZXJub3NcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWQgVmVpbCAoRXhhbHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gR29vZCBzeW5kaWNhdGUgcHJvYyAoVmlyYWwgKyBlbmVyZ3kgcmVzdG9yZSkgYnV0IGRvZXNuJ3QgZG8gbXVjaCBmb3IgRFBTIHNpbmNlIGVmZmVjdGl2ZSBmaXJlLXJhdGUgZm9yIGJvd3MgYXJlIGxvdy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjYsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUmFrdGEgRGFyayBEYWdnZXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1N5bmRpY2F0ZXMvUmVkVmVpbC9NZWxlZS9SVkRhcmtEYWdnZXJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkluZmlsdHJhdGUgdW5kZXRlY3RlZDsgcmVkdWNlZCB2aXNpYmlsaXR5IHdoZW4gaGVsZC4gVGhlbiBzdHJpa2Ugd2l0aCBjb25maWRlbmNlOyBoaXRzIHRvIGlycmFkaWF0ZWQgdGFyZ2V0cyByZXN0b3JlcyBzaGllbGRzIGFuZCBjcmVhdGVzIG92ZXJzaGllbGRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTUwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjUxOTk5OTk4LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicmFrdGEtZGFyay1kYWdnZXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRGFnZ2VyXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI1MC4wIHJhZGlhdGlvblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzQ2L1JWRGFya0RhZ2dlci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwOTE2MDMwMjQ1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9SYWt0YV9EYXJrX0RhZ2dlclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAxLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlZCBWZWlsIChFeGFsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiU3BlZWRcIixcbiAgICAgIFwicmFua1wiOiA1NC41MyxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBDYW4gdXNlIHRoZSBHbGVhbWluZyBCbGlnaHQgYXVnbWVudC4gQmxpZ2h0IChWaXJhbCwgZW5lcmd5LCBtb3ZlbWVudCBzcGVlZCkgZWZmZWN0cy4gV2hpbGUgd2llbGRlZCwgZW5lbWllcyBoYXZlIHJlZHVjZWQgZGV0ZWN0aW9uIHJhZGl1cy4gUmFkaWF0aW9uIHByb2NzIHJlc3RvcmUgc2hpZWxkcyBhbmQgbWF5IGdyYW50IG92ZXJzaGllbGRzLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiU3RpbmdpbmcgVGhvcm5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJDYXJ2aW5nIFNwaWtlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUmFwbGFrIFByaXNtXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9TZW50aWVudHMvT3BlcmF0b3JBbXBsaWZpZXJzL1NldDEvQmFycmVsL1NlbnRBbXBTZXQxQmFycmVsUGFydEFcIixcbiAgICAgIFwidHlwZVwiOiBcIkFtcFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJyYXBsYWstcHJpc20ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBRdWlsbHMgKENldHVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL1JhcGxha19QcmlzbVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJSYXRoYm9uZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQXJjaHdpbmcvTWVsZWUvQXJjaEhhbW1lci9BcmNoSGFtbWVyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXNpbmcgQXJjaHdpbmfigJlzIGpldHMgZm9yIHRocnVzdCwgdGhpcyBtYXNzaXZlIGhhbW1lciBjcnVzaGVzIGFueXRoaW5nIGluIGl0cyBwYXRoLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjgwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJyYXRoYm9uZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjI4MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvOGEvQXJjaEhhbW1lci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMDI0MTQzNzM0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9SYXRoYm9uZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJ0eXBlXCI6IFwiQXJjaHdpbmcgTWVsZWVcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUmF0dGxlZ3V0c1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU29sYXJpc1VuaXRlZC9TZWNvbmRhcnkvU1VNb2R1bGFyU2Vjb25kYXJ5U2V0MS9CYXJyZWwvU1VNb2R1bGFyU2Vjb25kYXJ5QmFycmVsQ1BhcnRcIixcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJyYXR0bGVndXRzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIktpdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSdWRlIFp1dWQgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvUmF0dGxlZ3V0c1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJSZWFwZXIgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1NjeXRoZS9SZWFwZXJXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJlYXBlciBQcmltZSBpcyBhbiBvcm5hbWVudGFsIHNjeXRoZSwgd2l0aCBhIGJsYWRlIGZvcmdlZCBmcm9tIHRlbXBlcmVkIHJ1YmlkaXVtLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTUwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI5LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicmVhcGVyLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNjeXRoZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzUuMVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNjcvUmVhcGVyUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDMxNDA3MTc0NFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUmVhcGVyX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxMyAwNSAwM1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE1IDA0IDAxXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTUgMDQgMDFcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2Mi4xMyxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlN0YWxraW5nIEZhblwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIkR5aW5nIExpZ2h0XCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUmVkZWVtZXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0d1bmJsYWRlL1Rub0d1bmJsYWRlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDYwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdHJpa2luZyB3aXRoIG1hc3NpdmUgdHdpbiBibGFkZXMsIHRoZSBSZWRlZW1lciBmaXJlcyB0aGUga2lsbGluZyBibG93IHdpdGggaXRzIGJ1aWx0LWluIHNob3RndW4uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTcsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJyZWRlZW1lci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJHdW5ibGFkZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjYwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZC9kNi9Ubm9HdW5ibGFkZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI3MTgzMTAzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9SZWRlZW1lclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJSZWRlZW1lciBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvR3VuYmxhZGUvUmVkZWVtZXJQcmltZS9SZWRlZW1lclByaW1lV2VwXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDgwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZWFsIGRvdWJsZS1ibGFkZWQsIGRvdWJsZS1iYXJyZWxlZCBkZWF0aCB3aXRoIHRoaXMgcHJpbWVkIGd1bmJsYWRlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMzIwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xNyxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInJlZGVlbWVyLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkd1bmJsYWRlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI4MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2IvYjkvUmVkZWVtZXJQcmltZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgxMjE4MjI0MzA0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9SZWRlZW1lcl9QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTggMTIgMTJcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibi9hXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMjAgMTAgMjRcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVG9wXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMzYuOTksXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIGluc2FuZSBkcHMsIGxvdyBhdHRhY2sgc3BlZWQuIOKcqlwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJCdWxsZXQgRGFuY2VcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJMZWFkIFRhbmdvIG9yIEF1dG9tYXRpYyBSaHVtYmFcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9SZXZlbmFudC9SZXZlbmFudFwiLFxuICAgICAgXCJuYW1lXCI6IFwiUmV2ZW5hbnRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJSaXNlIGZyb20gdGhlIGJyb2tlbiByZW1haW5zIG9mIHRoZSBFaWRvbG9uIHRvIHNlZHVjZSBhbiBhcm15IG9mIHplYWxvdXMgdGhyYWxscy5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJTaGllbGQgZGVwbGV0aW9uIHNtYXNoZXMgZW5lbWllcyB3aXRoaW4gfFJBRElVU3xtIHdpdGggYSB8REFNQUdFfCBEYW1hZ2Uga25vY2tkb3duIHNob2Nrd2F2ZS5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInJldmVuYW50LnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm5hcmFtb25cIixcbiAgICAgIFwiY29uY2xhdmVcIjogZmFsc2UsXG4gICAgICBcImNvbG9yXCI6IDMyMjg3NDMsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIyMy41XCIsXG4gICAgICBcInNleFwiOiBcIk1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDcvUmV2ZW5hbnQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDgyNzAxNTgwMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUmV2ZW5hbnRcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXNrIG9mIHRoZSBMb3N0IE9uZSAoUXVlc3QpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvUmhpbm8vUmhpbm9cIixcbiAgICAgIFwibmFtZVwiOiBcIlJoaW5vXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmhpbm8gaXMgdGhlIGhlYXZpZXN0IFdhcmZyYW1lLCBjb21iaW5pbmcgb2ZmZW5zaXZlIGFuZCBkZWZlbnNpdmUgY2FwYWJpbGl0aWVzLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDAuOTQ5OTk5OTksXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkVtaXQgYSBzaG9ja3dhdmUgZGVhbGluZyB8REFNQUdFfCBkYW1hZ2UgYWZ0ZXIgbGFuZGluZyBmcm9tIGEgZ3JlYXQgaGVpZ2h0LlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicmhpbm8ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAzNDE3NjM2LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiVmFuaWxsYVwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAwLjk1LFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzQwL1JoaW5vTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI0MDIzMzAyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9SaGlub1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkphY2thbCAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9SaGluby9SaGlub1ByaW1lXCIsXG4gICAgICBcIm5hbWVcIjogXCJSaGlubyBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRha2VzIFJoaW5vJ3MgZ3JvdW5kLXNoYWtpbmcgYWJpbGl0aWVzIHRvIHRoZSBuZXh0IGxldmVsIHdpdGggYWx0ZXJlZCBtb2QgcG9sYXJpdGllcyB0aGF0IG9mZmVyIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJFbWl0IGEgc2hvY2t3YXZlIGRlYWxpbmcgfERBTUFHRXwgZGFtYWdlIGFmdGVyIGxhbmRpbmcgZnJvbSBhIGdyZWF0IGhlaWdodC5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInJoaW5vLXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAyMDM5MDY0LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTIuNFwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy81LzU0L1JoaW5vUHJpbWVOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjMzMTJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1JoaW5vX1ByaW1lXCIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNCAwMyAwNlwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE2IDAyIDE2XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTYgMDIgMTZcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJSaXBrYXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTWVsZWUvR3JpbmVlckNsYXdzL0dybkNsYXdzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDU1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJNb3Rvcml6ZWQgc2F3IGNsYXcgd2VhcG9uLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTY1LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM4LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwicmlwa2FzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkNsYXdzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTUuMVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8zLzM4L0dybkNsYXdzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTAzMjAwMjI2MjNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1JpcGthc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTcGVlZFwiLFxuICAgICAgXCJyYW5rXCI6IDYwLjY2LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgbG93IGF0dGFjayBzcGVlZC4gSHVudGVyJ3MgQm9uZXNhdyBpbmNyZWFzZXMgZGFtYWdlIGJ5IDkwJSBhbmQgc3RhdHVzIGNoYW5jZSBieSA2MCUgb24gZ3JvdW5kZWQgZW5lbWllcy4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIk1hbGljaW91cyBSYXB0b3JcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJWZW5naW5nIFRocmFzaFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlJ1Ymljb1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTG9uZ0d1bnMvRml2ZVNob3RTbmlwZXIvRml2ZVNob3RTbmlwZXJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTc5Ljk5OTk4LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNjb3BlIG91dCB0aGUgZW5lbXkgd2l0aCB0aGlzIGxvbmctcmFuZ2UgcmV2b2x2ZXIgc3R5bGUgcmlmbGUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEzLjMzMzMzMyxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjY5OTk5OTk5LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJydWJpY28ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU25pcGVyIFJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxODAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzBjL0ZpdmVTaG90U25pcGVyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEyMDQwMTMxMzVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1J1Ymljb1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAxLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJSdWJpY28gUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL1J1Ymljb1ByaW1lL1J1Ymljb1ByaW1lV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE4NyxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGb3IgdGhlIGh1bnRlciwgdGhlIGFwZXggb2YgdGhlIHNuaXBlcidzIGFydC4gRm9yIHRoZSBodW50ZWQsIGEgZ2F0ZXdheSB0byB0aGUgbmV4dCBsaWZlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMy4zMzMzMzMsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNjk5OTk5OTksXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInJ1Ymljby1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTbmlwZXIgUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTg3LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZS9lNi9SdWJpY29QcmltZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwOTI5MDIzMzU3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9SdWJpY29fUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMSxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE4IDA5IDI1XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIm4vYVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDIwIDA3IDIxXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIHNob3QsIGluc2FuZSBkcHMsIGhpdHNjYW4gbXVuaXRpb25zLiBTbmlwZXIgY29tYm8gY291bnRlciByYW1wdXAgaXMgYW1hemluZyAobWluLiAxKSwgem9vbWluZyBpbiBnaXZlcyBhZGRpdGl2ZSBib251cyB0byBDcml0IE11bHRpcGxpZXIgKDM1JS81MCUpLiBIaWdoIGRpcmVjdCBkYW1hZ2UgcG90ZW50aWFsIGFuZCBzbW9vdGggaGFuZGxpbmcgbWFrZXMgUnViaWNvIFByaW1lIGEgcG9wdWxhciBjaG9pY2UgZm9yIEVpZG9sb24gSHVudGluZy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDMsXG4gICAgICBcInRpZXJSYW5rXCI6IDMsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiUnVud2F5XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvVmVoaWNsZXMvSG92ZXJib2FyZC9Ib3ZlcmJvYXJkUGFydHMvUGFydENvbXBvbmVudHMvSG92ZXJib2FyZENvcnB1c0MvSG92ZXJib2FyZENvcnB1c0NEZWNrXCIsXG4gICAgICBcInR5cGVcIjogXCJWZWhpY2xlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInJ1bndheS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJLLURyaXZlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJva3kgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvUnVud2F5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9HYW1lL0t1YnJvd1BldC9BZHZlbnR1cmVyS3Vicm93UGV0UG93ZXJTdWl0XCIsXG4gICAgICBcIm5hbWVcIjogXCJTYWhhc2EgS3Vicm93XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRW50ZXJwcmlzaW5nIE9yb2tpbiBnZW5ldGljIGRlc2lnbmVycyByZWNvZ25pemVkIHRoYXQgdGhlIEt1YnJvdydzIGFmZmluaXR5IGZvciBnYW1lcyBvZiBmZXRjaCBjb3VsZCBiZSB1c2VkIGZvciBtb3JlIHNlcmlvdXMgZW5kZWF2b3JzLiBUaGV5IHNvb24gZGV2ZWxvcGVkIGEgc3RyYWluIGFkZXB0IGF0IHJlY29ubmFpc3NhbmNlIGFuZCBjb250cmFiYW5kIHJlY292ZXJ5LiBUZW5ubyBvZnRlbiB1c2VkIHRoZSBjcmVhdHVyZXMgdG8gaGVscCByZXN1cHBseSB3aGlsZSBpbiB0aGUgZmllbGQuXCIsXG4gICAgICBcInR5cGVcIjogXCJDb21wYW5pb25cIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2FoYXNhLWt1YnJvdy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJLdWJyb3dcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiSW5jdWJhdG9yIFNlZ21lbnQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvU2FoYXNhX0t1YnJvd1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTYW5jdGkgQ2FzdGFuYXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1N5bmRpY2F0ZXMvTmV3TG9rYS9QaXN0b2xzL05MQ2FzdGFuYXNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQWN0aXZlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyByZW1vdGVseSBkZXRvbmF0ZWQgZWxlY3RyaWNhbCB0cmFwIGlzIHVzZWQgYnkgZGV2b3RlZXMgb2YgTmV3IExva2EgdG8gcHJvdGVjdCB0aGVpciB0ZW1wbGVzIGFuZCBzaHJpbmVzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIlNpbGVudFwiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNhbmN0aS1jYXN0YW5hcy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJUaHJvd25cIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzAwLjAgZWxlY3RyaWNpdHlcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDMwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2NhL05MQ2FzdGFuYXMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNzE4Mjk1NVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2FuY3RpX0Nhc3RhbmFzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTmV3IExva2EgKEZsYXdsZXNzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gUHVyaXR5IChDb3Jyb3NpdmUsIGhlYWx0aCkgY2FuIGJlIHVzZWZ1bCBhdCB0aW1lcy4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogODIuNSxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTYW5jdGkgTWFnaXN0YXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1N5bmRpY2F0ZXMvTmV3TG9rYS9NZWxlZS9OTE1hZ2lzdGFyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDExOS45OTk5OSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRWFjaCBjaGFyZ2VkIGF0dGFjayB0dXJucyB0aGUgZW5lbXnigJlzIHBhaW4gaW50byBhIGhlYWxpbmcgcHVsc2UgdGhhdCB3YXNoZXMgb3ZlciBhbGxpZXMuIEFsc28sIGNyZWF0ZXMgcmVzaXN0YW5jZSB0byBTdGF0dXMgRWZmZWN0cyB3aGVuIGhlbGQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMDksXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzYW5jdGktbWFnaXN0YXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiSGFtbWVyXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMjAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzE1L05MTWFnaXN0YXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDkxNjAzMDI0NFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2FuY3RpX01hZ2lzdGFyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTmV3IExva2EgKEZsYXdsZXNzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMTIzLjI5LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgcG9vciBEUFMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBJbm5hdGUgMTAlIEJsYXN0IGVmZmVjdCBwcm9jLiBSZWR1Y2VzIGRhbWFnZSBmcm9tIHN0YXR1cyBlZmZlY3RzIGJ5IDc1JS4gQ2hhcmdlIGF0dGFja3MgaGVhbHMgbmVhcmJ5IGFsbGllcyBiYXNlZCBvbiBkYW1hZ2UgZGVhbHQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDcnVzaGluZyBSdWluXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiT25seSB1c2UgUmFnaW5nIFdoaXJsd2luZCB0byBwcm9jIEltcGFjdCBvciB0aGUgc2xhbSB3aWxsIHJhZ2RvbGxcIixcbiAgICAgIFwiY29tYm9cIjogXCJUaWRhbCBGb3JjZSAmIFJhZ2luZyBXaGlybHdpbmRcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTYW5jdGkgVGlncmlzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9TeW5kaWNhdGVzL05ld0xva2EvTG9uZ0d1bnMvTkxUaWdyaXNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTI2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkR1cGxleFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVjaG8gbmF0dXJlJ3MgdmlvbGVudCBiZWF1dHkgd2l0aCB0aGlzIHNwZWNpYWwgVGlncmlzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA2LjQ1MTYxMjksXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNTUwMDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNhbmN0aS10aWdyaXMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMjYwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOS85NC9TeW5kaWNhdGVOTFRpZ3Jpcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwOTAyMjE1MTM0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TYW5jdGlfVGlncmlzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTmV3IExva2EgKEZsYXdsZXNzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBEdXBsZXggdHJpZ2dlciBtaWdodCB0YWtlIGEgd2hpbGUgdG8gZ2V0IHVzZWQgdG8uIFB1cml0eSAoQ29ycm9zaXZlLCBoZWFsdGgpIGVmZmVjdCBjYW4gYmUgdXNlZnVsLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdGljYWxcIixcbiAgICAgIFwicmFua1wiOiA3My4yLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNhcnBhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9HdW5ibGFkZS9HdW5ibGFkZUF1dG9tYXRpYy9Ubm9HdW5ibGFkZUF1dG9tYXRpY1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTWFrZXMgc3dlZXBpbmcgY3V0cyBwdW5jdHVhdGVkIGJ5IGJ1cnN0cyBvZiBoZWF2eSBndW5maXJlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjgwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI0LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2FycGEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiR3VuYmxhZGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI3MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2MvYzIvVG5vR3VuYmxhZGVBdXRvLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjA4MTkyMzQ0MzNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1NhcnBhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDQuMzcsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIG1vbnN0cm91cyBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIOKcqlwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJCdWxsZXQgRGFuY2VcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJDaGFyZ2UgQXR0YWNrXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvU2FyeW4vU2FyeW5cIixcbiAgICAgIFwibmFtZVwiOiBcIlNhcnluXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU2FyeW4ncyB2ZW5vbW91cyBhdHRhY2tzIGFyZSBob3JyaWZ5aW5nbHkgZWZmZWN0aXZlIGFnYWluc3Qgb3JnYW5pYyBhbmQgc3ludGhldGljIGVuZW1pZXMsIGFuZCBoZXIgYWJpbGl0eSB0byAnc2hlZCcgaGVyIHNraW4gbWFrZXMgaGVyIHZlcnkgZWx1c2l2ZS5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAwLjk0OTk5OTk5LFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJTdGF0dXMgRWZmZWN0cyBpbmZsaWN0ZWQgdXBvbiBlbmVtaWVzIGxhc3QgfERVUkFUSU9OfCUgbG9uZ2VyLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2FyeW4ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwidmF6YXJpblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAzOTQ3NTg0LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiN1wiLFxuICAgICAgXCJzZXhcIjogXCJGZW1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDAuOTUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2QvZDkvU2FyeW5OZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjMzMzFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1NhcnluXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiS2VsYSBEZSBUaGF5bSAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9TYXJ5bi9TYXJ5blByaW1lXCIsXG4gICAgICBcIm5hbWVcIjogXCJTYXJ5biBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgZ29sZGVuIGJsb3Nzb20gY29uY2VhbHMgZGVhZGx5IG5lY3Rhci4gRmVhdHVyaW5nIGFsdGVyZWQgbW9kIHBvbGFyaXRpZXMgZm9yIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJTdGF0dXMgRWZmZWN0cyBpbmZsaWN0ZWQgdXBvbiBlbmVtaWVzIGxhc3QgfERVUkFUSU9OfCUgbG9uZ2VyLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2FyeW4tcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJ2YXphcmluXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDMyMjM2MDUsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIxOC40LjEyXCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMSxcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzA4L1NhcnluUHJpbWVMYXJnZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMjE3MjM1NjAzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TYXJ5bl9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTYgMDIgMTZcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNyAxMiAxMlwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE3IDEyIDEyXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNjaW5kb1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvQXhlL0F4ZVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBTY2luZG8gaXMgYSBoZWF2eSB3YXIgYXhlIGNyYWZ0ZWQgYnkgdGhlIFRlbm5vLiBSZWR1Y2VkIHNwZWVkIGFuZCBhZ2lsaXR5IGlzIGJhbGFuY2VkIGJ5IGhlYXZ5LCBkZXZhc3RhdGluZyBzdHJpa2VzIGNhcGFibGUgb2YgY29ubmVjdGluZyB3aXRoIG11bHRpcGxlIHRhcmdldHMgYXQgb25jZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDIwMCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNjaW5kby5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJIZWF2eSBCbGFkZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjEwMC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2IvYjYvREVTY2luZG8ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDQxNjEyMTM0MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2NpbmRvXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNjaW5kbyBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvQXhlL1ByaW1lU2NpbmRvL1ByaW1lU2NpbmRvV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEzMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQW4gYW5jaWVudCBleGVjdXRpb25lcnMgd2VhcG9uLCB0aGUgaG9ub3Igb2YgZGVjYXBpdGF0aW9uIGJ5IHRoZSBTY2luZG8gUHJpbWUgd2FzIHJlc2VydmVkIGZvciB0aGUgT3Jva2luJ3MgbW9zdCByZXNwZWN0ZWQgZW5lbWllcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI2MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNjaW5kby1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJIZWF2eSBCbGFkZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTMwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zOC9QcmltZVNjaW5kby5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwOTIzMTk1ODE4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TY2luZG9fUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE0IDA5IDIzXCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTYgMDggMjNcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxNiAwOCAyM1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0MS44MSxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNsZWF2aW5nIFdoaXJsd2luZFwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIkJyb2tlbiBCdWxsXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU2NvbGlhY1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvSW5mZXN0ZWQvTWVsZWUvV2hpcC9JbmZlc3RlZFdoaXAvSW5mZXN0ZWRXaGlwV2VhcG9uXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDU1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgU2NvbGlhYyBXaGlwIGlzIGEgbmFzdHkgcGFyYXNpdGljIGdyb3d0aCBvZiBzaW5ldyBhbmQgYm9uZSB0aGF0IGNhbiBpbmZsaWN0IGhlYXJ0IHN0b3BwaW5nIDxEVF9QT0lTT04+VG94aW4gRGFtYWdlIHdpdGggYXR0YWNrcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDIyMCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDYsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2NvbGlhYy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJXaGlwXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8zLzM0L0RFU2NvbGlhYzIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDQwNzAzNTg1N1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2NvbGlhY1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJpbyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJkbWdcIjogXCJTbGlkZVwiLFxuICAgICAgXCJyYW5rXCI6IDM1LjgxLFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBpbnNhbmUgZHBzLCBoaWdoIGF0dGFjayBzcGVlZC4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4g4pyqXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkJ1cm5pbmcgV2FzcFwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlNsaWRlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU2NvdXJnZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTG9uZ0d1bnMvVG5Qcmllc3RTcGVhci9UblByaWVzdFNwZWFyR3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM0LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJsYXN0IHRhcmdldHMgd2l0aCBjb3Jyb3NpdmUgcGxhc21hIHByb2plY3RpbGVzLCBvciB0b3NzIHRoZSBzY2VwdGVyIHRvIGluZmxpY3QgYW4gZW5lcmd5IGZpZWxkIHVwb24gbmVhcmJ5IGVuZW1pZXMgdGhhdCBhbXBsaWZpZXMgdGhlaXIgYnJhaW4gd2F2ZXMgdG8gYXR0cmFjdCBidWxsZXRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDYsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2NvdXJnZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTcGVhcmd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzAuMCBjb3Jyb3NpdmVcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiVGhyb3cgU3BlYXJcIixcbiAgICAgICAgXCJzcGVlZFwiOiAxLFxuICAgICAgICBcImNyaXRfY2hhbmNlXCI6IDQsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDIsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLjMsXG4gICAgICAgIFwiY2hhcmdlX3RpbWVcIjogMC41LFxuICAgICAgICBcImltcGFjdFwiOiA0NTUsXG4gICAgICAgIFwic2xhc2hcIjogMTIyLjUsXG4gICAgICAgIFwicHVuY3R1cmVcIjogNzIuNSxcbiAgICAgICAgXCJjb3Jyb3NpdmVcIjogNTAsXG4gICAgICAgIFwiZGFtYWdlXCI6IFwiNTAuMCBjb3Jyb3NpdmVcIlxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYy9jOC9Qcmllc3RTcGVhckd1bi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwNjI5MDM0MzE2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TY291cmdlXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBpbnNhbmUgZHBzLCBwcm9qZWN0aWxlIG11bml0aW9ucy4gQWx0IGZpcmUgY3JlYXRlcyBhIGxvY2FsaXplZCBidWxsZXQgYXR0cmFjdG9yIGZpZWxkIG9uIG5lYXJieSBlbmVtaWVzJyBoZWFkLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMzguNyxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTZWN1cmEgRHVhbCBDZXN0cmFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1N5bmRpY2F0ZXMvUGVycmluU2VxdWVuY2UvUGlzdG9scy9QU0R1YWxDZXN0cmFcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMjgsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGZhdm9yZWQgc2lkZS1hcm1zIG9mIFBlcnJpbiBTZXF1ZW5jZSBleGVjdXRpdmVzLCB0aGVzZSBwaXN0b2xzIGhhdmUgYmVlbiBtb2RpZmllZCB0byBpbXByb3ZlIGVmZmljaWVuY3kgYW5kIGtpbGxpbmcgcG90ZW50aWFsLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNlY3VyYS1kdWFsLWNlc3RyYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjguMFwiLFxuICAgICAgXCJmbGlnaHRcIjogMTAwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84LzhmL1BTRHVhbENlc3RyYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI3MTgyOTU2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TZWN1cmFfRHVhbF9DZXN0cmFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUaGUgUGVycmluIFNlcXVlbmNlIChQYXJ0bmVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gU2VxdWVuY2UgKFJhZGlhdGlvbiwgc2hpZWxkcykgY2FuIGJlIHVzZWZ1bCBhdCB0aW1lcy4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTcuNCxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTZWN1cmEgTGVjdGFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1N5bmRpY2F0ZXMvUGVycmluU2VxdWVuY2UvTWVsZWUvUFNMZWN0YVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hpcCB0aGUgZW5lbXkgb3V0IG9mIHRoZWlyIGlsbC1nb3R0ZW4gZ2FpbnM7IGRvdWJsZSBjcmVkaXQgZHJvcHMgb24ga2lsbHMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAzMDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNlY3VyYS1sZWN0YS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJXaGlwXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI3NS4wIGVsZWN0cmljaXR5XCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMGMvUFNMZWN0YS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwOTE2MDMwMjQ0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TZWN1cmFfTGVjdGFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUaGUgUGVycmluIFNlcXVlbmNlIChQYXJ0bmVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiU2xpZGVcIixcbiAgICAgIFwicmFua1wiOiAzNi4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBpbnNhbmUgZHBzLCBoaWdoIGF0dGFjayBzcGVlZC4gS2lsbGluZyBhbiBlbmVteSB3aXRoIHRoaXMgd2VhcG9uIGVxdWlwcGVkIGdpdmVzIGJvbnVzIGNyZWRpdHMuXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkJ1cm5pbmcgV2FzcFwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlNsaWRlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU2VjdXJhIFBlbnRhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9TeW5kaWNhdGVzL1BlcnJpblNlcXVlbmNlL0xvbmdHdW5zL1BTUGVudGFcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDgsXG4gICAgICBcInRyaWdnZXJcIjogXCJBY3RpdmVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJSdXRobGVzcyBhbmQgZWZmaWNpZW50LCBqdXN0IGxpa2UgdGhlIGZyZWUtbWFya2V0LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2VjdXJhLXBlbnRhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkxhdW5jaGVyXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjMwMC4wIGJsYXN0XCIsXG4gICAgICBcImZsaWdodFwiOiAyNSxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiR3JlbmFkZSBEZXRvbmF0aW9uXCIsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMjYsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDIsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLjMsXG4gICAgICAgIFwiYmxhc3RcIjogMzAwLFxuICAgICAgICBcImRhbWFnZVwiOiBcIjMwMC4wIGJsYXN0XCJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNjkvU3luZGljYXRlUFNQZW50YS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwOTAyMjE1MTM1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TZWN1cmFfUGVudGFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUaGUgUGVycmluIFNlcXVlbmNlIChQYXJ0bmVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBOYXBhbG0gR3JlbmFkZXMgYWRkcyAzMCUgU3RhdHVzIENoYW5jZSAobm90IGFmZmVjdGVkIGJ5IG1vZHMpIGFuZCBjYXVzZXMgaW5zdGFudCBleHBsb3Npb25zIHdoaWxlIGxlYXZpbmcgYSBidXJuaW5nIHBhdGNoIG9uIHRoZSBncm91bmQuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU1LjYsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU2VlclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9HcmluZWVyUGlzdG9sL0dyblNjb3BlZFBpc3RvbFBsYXllclwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMDEsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ2FwdGFpbiBWb3IncyBwcml6ZWQgT3Jva2luLUdyaW5lZXIgaHlicmlkIHBpc3RvbCBoYXMgYW4gYXZlcmFnZSByYXRlIG9mIGZpcmUsIGJ1dCBpdCBoYXMgaGlnaCBkYW1hZ2UgYW5kIHN1cGVyaW9yIHpvb20gY2FwYWJpbGl0aWVzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjUsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2Vlci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjEwMS4wMVwiLFxuICAgICAgXCJmbGlnaHRcIjogMjAwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83Lzc1L0NhcHRhaW5Wb3JQaXN0b2wucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDcxMzIwMzAwOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2VlclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNhcHRhaW4gVm9yIChCb3NzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDIyMy4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNlcGZhaG4gU3RyaWtlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Pc3Ryb24vTWVsZWUvTW9kdWxhck1lbGVlMDIvVGlwL1RpcE5pbmVcIixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNlcGZhaG4ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiWmF3XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkhvaydzIEFudmlsIChDZXR1cylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9TZXBmYWhuX1N0cmlrZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTZXJyb1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL01lbGVlL1BvbGVhcm0vQ29ycHVzUG9sZWFybTAxL0NvcnB1c1BvbGVhcm1XZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRldmVsb3BlZCBhcyBhbiBlbmVyZ3kgc2F3IHRvIHNjcmFwIG9ic29sZXRlIHNoaXBzLCB0aGlzIHRvb2wgd2FzIHF1aWNrbHkgYmFubmVkIHdoZW4gcmViZWxzIGluIHRoZSBTZWRuYSByZWdpb24gZGlzY292ZXJlZCBpdCBhbHNvIG1hZGUgYW4gZXhjZWxsZW50IHdlYXBvbi5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDEyNSxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zOCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNlcnJvLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBvbGVhcm1cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI3NS4wIGVsZWN0cmljaXR5XCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzkvOWYvQ29ycHVzcG9sZWFybS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwNTI2MTY1NjM0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TZXJyb1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkVuZXJneSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNjQuMzMsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiVHdpcmxpbmcgU3BpcmVcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJWYXVsdGluZyBBcGV4XCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFBvd2Vyc3VpdHMvU2hhZGVQb3dlclN1aXRcIixcbiAgICAgIFwibmFtZVwiOiBcIlNoYWRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2l0aCAnUmV2ZW5nZScgYW5kICdHaG9zdCcgYXMgZGVmYXVsdCBQcmVjZXB0cywgU2hhZGUgaXMgd2VsbCBzdWl0ZWQgZm9yIHN0ZWFsdGggZ2FtZXBsYXkuIFNoYWRlIGFsc28gY29tZXMgd2l0aCBhIGJ1cnN0IGxhc2VyIHBpc3RvbC5Ob3RlOiBUaGlzIGl0ZW0gcmVxdWlyZXMgdHdvIG9wZW4gc2xvdHMuXCIsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzaGFkZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL1NoYWRlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNoYWt1XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9OdW5jaGFrdS9Ubm9OdW5jaGFrdS9Ubm9OdW5jaGFrdVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA1NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2l0aCB0aGVzZSBibGF6aW5nIGZhc3QgbnVuY2hha3UsIHRoZSBlbmVteSB3aWxsIG5ldmVyIGtub3cgd2hhdCBoaXQgdGhlbS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDIyMCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNoYWt1LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIk51bmNoYWt1XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9iL2I2L1Rub051bmNoYWt1LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEyMTAwMzI4NTlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1NoYWt1XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDY2LjczLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJBdGxhbnRpcyBWdWxjYW5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJNb2x0ZW4gV2hpcmxwb29sXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU2hlZXZcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTWVsZWUvR3JpbmVlckNvbWJhdEtuaWZlL0dyaW5lZXJDb21iYXRLbmlmZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA0NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQnVpbHQgZm9yIGNsb3NlIGNvbWJhdCwgdGhlIFNoZWV2J3MgcGxhc21hIGJsYWRlIHNsaWNlcyB0aHJvdWdoIGZsZXNoIGFuZCBhcm1vciB3aXRoIGVxdWFsIGVhc2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMzUsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzaGVldi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEYWdnZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI0NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2UvZWQvR3JpbmVlckNvbWJhdEtuaWZlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDA5MTgwMzU4MDdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1NoZWV2XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiU3BlZWRcIixcbiAgICAgIFwicmFua1wiOiA1Ny41OCxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCB2ZXJ5IGxvdyBhdHRhY2sgc3BlZWQuIFNsYW0gYXR0YWNrcyBndWFyYW50ZWVzIGhlYXQgcHJvYy4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlN0aW5naW5nIFRob3JuXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiQ2FydmluZyBTcGlrZVwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNod2FhayBQcmlzbVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU2VudGllbnRzL09wZXJhdG9yQW1wbGlmaWVycy9TZXQxL0JhcnJlbC9TZW50QW1wU2V0MUJhcnJlbFBhcnRCXCIsXG4gICAgICBcInR5cGVcIjogXCJBbXBcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2h3YWFrLXByaXNtLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUaGUgUXVpbGxzIChDZXR1cylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9TaHdhYWtfUHJpc21cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU2liZWFyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9IYW1tZXIvSWNlSGFtbWVyL0ljZUhhbW1lclwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkljZSBpbiBtb3Rpb24gY2FuIGNydXNoIG1vdW50YWlucywgdGhpcyBmcm96ZW4gaGFtbWVyIGlzIG5vIGRpZmZlcmVudC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI2MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDYsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNpYmVhci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJIYW1tZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMzAuMCBjb2xkXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvNzgvSWNlSGFtbWVyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjA0MDcwMDU0MjlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1NpYmVhclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA5OS4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gQ2hhcmdlIGF0dGFja3MgZ2l2ZXMgKzUwJSBzdGF0dXMgY2hhbmNlIGZvciA0cy4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNydXNoaW5nIFJ1aW5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJPbmx5IHVzZSBSYWdpbmcgV2hpcmx3aW5kIHRvIHByb2MgSW1wYWN0IG9yIHRoZSBzbGFtIHdpbGwgcmFnZG9sbFwiLFxuICAgICAgXCJjb21ib1wiOiBcIlRpZGFsIEZvcmNlICYgUmFnaW5nIFdoaXJsd2luZFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNpY2FydXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbC9CdXJzdFBpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkJ1cnN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIFNpY2FydXMgZmlyZXMgMy1yb3VuZCBidXJzdHMsIHdoaWNoIHByb3ZpZGVzIGEgYmFsYW5jZSBiZXR3ZWVuIHRoZSBsZXRoYWxpdHkgb2YgYXV0by1waXN0b2xzIGFuZCB0aGUgYWNjdXJhY3kgb2Ygc2VtaS1hdXRvbWF0aWMgcGlzdG9scy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNpY2FydXMucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzUvNTkvU2ljYXJ1cy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNDI2MDc0NzQxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TaWNhcnVzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNpY2FydXMgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbHMvUHJpbWVTaWNhcnVzL1ByaW1lU2ljYXJ1c1Bpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA1MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkJ1cnN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIFNpY2FydXMgUHJpbWUgaXMgYW4gb3JuYW1lbnRhbCBmaXJlYXJtIHRoYXQgZmlyZXMgcm91bmRzIGluIHJhcGlkIGJ1cnN0cywgcHJvdmlkaW5nIGEgYmFsYW5jZSBiZXR3ZWVuIHRoZSBsZXRoYWxpdHkgb2YgYXV0by1waXN0b2xzIGFuZCB0aGUgYWNjdXJhY3kgb2Ygc2VtaS1hdXRvbWF0aWMgcGlzdG9scy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjUsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDE0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzaWNhcnVzLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI1MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZC9kNy9ERVNpY2FydXNfUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEyNDE3MjkzM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2ljYXJ1c19QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTMgMTEgMjBcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNSAxMCAwNlwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE1IDEwIDA2XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCAgaGl0c2NhbiBtdW5pdGlvbnMuIFRocmVlLXJvdW5kIGJ1cnN0IGlzIHdhc3RlZnVsIGF0IHRpbWVzLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1Ni43LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNpZ21hICYgT2N0YW50aXNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkc0FuZEJvYXJkcy9TdW5kaWFsU3dvcmRCb2FyZC9TdW5kaWFsQm9hcmRTd29yZFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGVhZGx5IHNsYXNoZXMgZnJvbSB0aGUgU2lnbWEgc3dvcmQgYXJlIG1hdGNoZWQgb25seSBieSB0aGUgZm9yY2Ugb2YgdGhlIE9jdGFudGlzIHNoaWVsZCB3aGVuIHRocm93biBmcm9tIHRoZSBhaXIuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzaWdtYS0mLW9jdGFudGlzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN3b3JkIGFuZCBTaGllbGRcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI2MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzUvNWEvU3VuZGlhbFN3b3JkQW5kQm9hcmQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MTAzMTE0NTMyOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2lnbWFfJTI2X09jdGFudGlzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTG9naW4gUmV3YXJkXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDUzLjY3LFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb2RlcmF0ZSBEUFMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiRmluYWwgSGFyYmluZ2VyXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiU3lzdGVtaWMgU2hyZWRcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTaWx2YSAmIEFlZ2lzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHNBbmRCb2FyZHMvTWVsZWVDb250ZXN0V2lubmVyT25lL1Rlbm5vU3dvcmRTaGllbGRcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgZmllcnkgc3dvcmQgYW5kIHNoaWVsZCBjb21iaW5hdGlvbiBwZXJmZWN0cyB0aGUgYmFsYW5jZSBvZiBUZW5ubyBvZmZlbnNlIGFuZCBkZWZlbnNlIHByb3dlc3MuIEluIHRoZSBoYW5kcyBvZiBhIE1hc3RlciwgZXZlbiBhIGRlZmVuc2l2ZSB0b29sIGxpa2UgYSBzaGllbGQgY2FuIGJlIHVzZWQgYXMgYSB3ZWFwb24uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzaWx2YS0mLWFlZ2lzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN3b3JkIGFuZCBTaGllbGRcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNS4wIGhlYXRcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xMC9UZW5ub1N3b3JkU2hpZWxkLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDA3MTgwOTQ2NTlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1NpbHZhXyUyNl9BZWdpc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTaWx2YSAmIEFlZ2lzIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9QcmltZVNpbHZhQWVnaXMvUHJpbWVTaWx2YUFlZ2lzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEyMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBwZXJmZWN0bHkgY3JhZnRlZCBwYWlyaW5nLCB0aGlzIG1hY2UgYW5kIHNoaWVsZCBjb21iaW5hdGlvbiBpcyBzY3VscHRlZCBmb3IgZXhoaWJpdGlvbiBidXQgYmFsYW5jZWQgZm9yIHRoZSBiYXR0bGVmaWVsZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDQ4MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzaWx2YS0mLWFlZ2lzLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN3b3JkIGFuZCBTaGllbGRcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjEyMC4wIGhlYXRcIixcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2Y3L1NpbHZhQWVnaXNQcmltZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwNTMwMTkxODU2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TaWx2YV8lMjZfQWVnaXNfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE3IDA1IDMwXCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTkgMDMgMjdcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxOSAwMyAyN1wiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNDAuNjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCB2ZXJ5IGxvdyBhdHRhY2sgc3BlZWQuIEJsb2NraW5nIGFkZHMgdXAgdG8gNCBjaGFyZ2VzIHRoYXQgaW5jcmVhc2VzIGNyaXRpY2FsIGFuZCBzdGF0dXMgY2hhbmNlIGJ5IDE1JSBhZGRpdGl2ZWx5LiBBdmVuZ2luZyBUcnV0aCBhYnNvcmJzIDUwJSBvZiBpbmNvbWluZyBkYW1hZ2UgYW5kIHJlbGVhc2VzIGl0IG9uIHRoZSBuZXh0IGNoYXJnZSBhdHRhY2sgYW5kIFRydXRoIChHYXMsIGhlYWx0aCwgcGFya291cikgZWZmZWN0cy4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkZpbmFsIEhhcmJpbmdlclwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlN5c3RlbWljIFNocmVkXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU2ltdWxvclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ2VwaGFsb24vUHJpbWFyeS9DZXBoUHJpbWFyeS9DZXBoUHJpbWFyeVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3NSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkFjdGl2ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkNyZWF0ZXMgbWluaWF0dXJlIGdyYXZpdGF0aW9uYWwgc2luZ3VsYXJpdGllcyB0aGF0IGNhbiBiZSB1c2VkIGZvciBzY2llbnRpZmljIHN0dWR5IG9yIHNlbGYtZGVmZW5zZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjguNTcxNDI4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNpbXVsb3IucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjUwLjAgbWFnbmV0aWNcIixcbiAgICAgIFwiZmxpZ2h0XCI6IFwiPz8/XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIk9yYiBFeHBsb3Npb25cIixcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiAxMixcbiAgICAgICAgXCJjcml0X211bHRcIjogMixcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMyxcbiAgICAgICAgXCJlbGVjdHJpY2l0eVwiOiA3NSxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCI3NS4wIGVsZWN0cmljaXR5XCJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzkvOWEvQ2VwaFByaW1hcnkucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDYyNTIyMDIyNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2ltdWxvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNlcGhhbG9uIFNpbWFyaXMgKFJlbGF5KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNrYW5hXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Mb25nU3dvcmQvTG9uZ1N3b3JkXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCZWZvcmUgYWxsIG90aGVyIHdlYXBvbnMsIFRlbm5vIG1hc3RlciB0aGUgU2thbmEuIFRoaXMgc2ltcGxlIGJsYWRlIGJlY29tZXMgaW1tZW5zZWx5IHBvd2VyZnVsIGluIHRoZSBoYW5kcyBvZiBhIG1hc3Rlci4gRm9yIFRlbm5vLCBpdCBpcyB0aGUgZm91bmRhdGlvbiBvZiB0aGVpciBmaWdodGluZyBzdHlsZSBhbmQgYSBwaWxsYXIgb2YgdGhlaXIgY3VsdHVyZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDE0MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yMixcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNrYW5hLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlN3b3JkXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2NmL0RFU2thbmEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDQwNzAzNTg1NVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2thbmFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU2thbmEgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0xvbmdTd29yZC9Ta2FuYVByaW1lXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQyLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGJhc2ljIGJsYWRlIGtub3duIGFzIGEgU2thbmEuIEl0IGlzIHdpZGVseSB1c2VkIGJ5IHRoZSBUZW5uby4gUHJpbWUgbW9kZWwgb2ZmZXJzIHNsaWdodGx5IGluY3JlYXNlZCBkYW1hZ2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNjgsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjIsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJza2FuYS1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTd29yZFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDIuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzA1L1NrYW5hUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDQyNjA4MDY1MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2thbmFfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJVbm9idGFpbmFibGUgKEZvdW5kZXJzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogdHJ1ZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU2tpYWphdGlcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N3b3Jkcy9VbWJyYUthdGFuYS9VbWJyYUthdGFuYVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3NyxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRm9yZ2VkIG9mIHN0ZWVsIGdyYWZ0ZWQgZnJvbSBVbWJyYSdzIGZsZXNoLCB0aGlzIGVsZWdhbnQgTmlrYW5hIHVuaXRlcyB3aXRoIGl0cyBXYXJmcmFtZSB0byBmb3JtIGEgc2luZ2xlIGJlaW5nIG9mIHNlZXRoaW5nIHB1cnBvc2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNjUsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic2tpYWphdGkucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiTmlrYW5hXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzcuMVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2FjL1NraWFqYXRpLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA2MTUyMjE2MDRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1NraWFqYXRpXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGhlIFNhY3JpZmljZSAoUXVlc3QpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ0LjU3LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9uc3Ryb3VzIERQUywgdmVyeSBoaWdoIGF0dGFjayBzcGVlZC4gR3JhbnRzIGludmlzaWJpbGl0eSB1cG9uIGZpbmlzaGVyLCB3aGljaCB3aWxsIGV4cGlyZSB3aGVuIGF0dGFja2luZywgdXNpbmcgYW4gYWJpbGl0eSwgb3IgYWZ0ZXIgNXMuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJEZWNpc2l2ZSBKdWRnZW1lbnRcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJTaWxlbnQgQWN1bWVuXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwic3BlY2lhbE5vdGVcIjogXCJJdGVtIGFyZSBmdWxseSByYW5rZWQgd2hlbiBvYnRhaW5lZC5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL0dhbWUvQ2F0YnJvd1BldC9DaGVzaGlyZUNhdGJyb3dQZXRQb3dlclN1aXRcIixcbiAgICAgIFwibmFtZVwiOiBcIlNtZWV0YSBLYXZhdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgc2x5IGZlbGluZSBpcyBwbGF5ZnVsIHlldCBkZXZpb3VzLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiQ29tcGFuaW9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNtZWV0YS1rYXZhdC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJLYXZhdFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJLYXZhdCBJbmN1YmF0b3IgVXBncmFkZSBTZWdtZW50IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL1NtZWV0YV9LYXZhdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTbmlwZXRyb25cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1JpZmxlL1NuaXBlclJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJNYW51ZmFjdHVyZWQgYnkgdGhlIENvcnB1cywgdGhlIFNuaXBldHJvbiBpcyBhIHBvd2VyZnVsIGFuZCBhY2N1cmF0ZSByaWZsZSB0aGF0IHNwb3J0cyBvcHRpY2FsIHpvb20gY2FwYWJpbGl0aWVzLiBQZXJmZWN0IGZvciBsb25nIHJhbmdlIGVuZ2FnZW1lbnRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMy4zMzMzMzMsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic25pcGV0cm9uLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNuaXBlciBSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTgwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xYS9Db3JwdXNTbmlwZXJSaWZsZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwNDE4MTIzMTUyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TbmlwZXRyb25cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJPcGVyYXRpb24gUGxhZ3VlIFN0YXIgKENldHVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNuaXBldHJvbiBWYW5kYWxcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1JpZmxlL1ZhbmRhbFNuaXBlclJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGN1c3RvbWl6ZWQgdmVyc2lvbiBvZiB0aGUgZWx1c2l2ZSBTbmlwZXRyb24sIHdpdGggbWV0YWxsaWMgZmluaXNoIGFuZCBMb3R1cyBkZWNhbC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTMuMzMzMzMzLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNuaXBldHJvbi12YW5kYWwucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU25pcGVyIFJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwMC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvNzYvREVTbmlwZXJ0cm9uVmFuZGFsLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA0MTgxMjMyMzFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1NuaXBldHJvbl9WYW5kYWxcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJJbnZhc2lvbnNcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBTbmlwZXIgY29tYm8gY291bnRlciByYW1wdXAgaXMgYXZlcmFnZSAobWluLiAzKSwgem9vbWluZyBpbiBnaXZlcyBhZGRpdGl2ZSBib251cyB0byBoZWFkc2hvdHMgKDMwJS81MCUpLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1My40LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNvYmVrXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9TaG90Z3VuL0RvdWJsZUJhcnJlbFNob3RndW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzUwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNvYmVrIGlzIGEgcmFwaWQtZmlyaW5nIEdyaW5lZXIgc2hvdGd1biB0aGF0IGhhcyByZWR1Y2VkIGRhbWFnZSBwZXIgc2hvdCBidXQgYm9hc3RzIGV4dHJhIGxhcmdlIGNsaXAgY2FwYWNpdHkuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDkuMDkwOTA5LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMzMsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNvYmVrLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNob3RndW5cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjM1MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZjUvR3JuREJTRy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwNzEzMjE0MDA1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Tb2Jla1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCBoaXRzY2FuIG11bml0aW9ucy4gU2hhdHRlcmluZyBKdXN0aWNlIChCbGFzdCwgSGVhbHRoLCBBcm1vcikgY2FuIG1ha2UgaXQgcmVhY2ggMTAwJSBzdGF0dXMgY2hhbmNlIHdoaWxlIEFjaWQgU2hlbGxzIGNhbiBiZSB1c2VkIHRvIHByb3ZpZGUgc29tZSBBT0UgZGFtYWdlLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiMTAwJSBTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2My4yLFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNvbWFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1JpZmxlL1Rlbm5vQVJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTIsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQWNjdXJhY3kgY291cGxlZCB3aXRoIGEgbWFzc2l2ZSBjbGlwIG1ha2VzIHRoZSBTb21hIGFzc2F1bHQgcmlmbGUgYSBmb3JtaWRhYmxlIHdlYXBvbi5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjguNTcxNDI4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODUwMDAwMDIsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNvbWEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjEyLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYS9hNS9VMTBEZXNpZ25Db3VuY2lsVGVubm9BUi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTMwOTE0MTExNDA1XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Tb21hXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNvbWEgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL1ByaW1lU29tYS9QcmltZVNvbWFSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJLbm93biBmb3IgdGFraW5nIGRvd24gd2hvbGUgc3F1YWRzIHdpdGggaXRzIHNpbmdsZSBtYXNzaXZlIGNsaXAsIGZldyB3ZWFwb25zIHdlcmUgYXMgZmVhcmVkIGFzIHRoZSBQcmltZSBTb21hLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyOC41NzE0MjgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44NTAwMDAwMixcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic29tYS1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMi4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYS9hNi9QcmltZVNvbWEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTIxNzAzMDk0N1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU29tYV9QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTQgMTIgMTZcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNiAxMSAyMlwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE2IDExIDIyXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vZGVyYXRlIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIEJlc3QgcGFpcmVkIHdpdGggRnJvc3QgUHJpbWUgYW5kIFNjaW5kbyBQcmltZS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTcuNSxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTb25pY29yXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9Db3JwdXMvUGlzdG9scy9DcnBBaXJQaXN0b2wvQ3JwQWlyUGlzdG9sQXJyYXlcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQmxhc3RzIHRhcmdldHMgd2l0aCBhIG1hc3NpdmUgd2F2ZSBvZiBzb25pYyBlbmVyZ3kuIFJlc3VsdHMgcmVwb3J0ZWQgdG8gYmU6ICdWZXJ5IFNhdGlzZnlpbmcnLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44OTk5OTk5OCxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzb25pY29yLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTUwLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDgwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2E4L0NycEFpclBpc3RvbEFycmF5LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEwMDIwOTAxNDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1Nvbmljb3JcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwibm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4gVGhlIHRlbm5vIHNwYWNlIHByb2dyYW0gaGFzIGJlZW4gcmVwbGFjZWQgYnkgdGhlIHRlbm5vIHJhZ2RvbGwgc2ltdWxhdG9yLiBFeHBsb3Npb25zIG1heSBjYXVzZSBzdGF0dXMgZWZmZWN0cy4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIlJhdy9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA5NS4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNwZWN0cmFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NsYW5UZWNoL0VuZXJneS9DcnBMYXNlclBpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxOCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkhlbGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGlsZSBpdHMgaW50ZW5kZWQgZGVzaWduIGlzIGZvciBkZWVwIHNwYWNlIGNvbnN0cnVjdGlvbiwgdGhlIGNvbmNlbnRyYXRlZCBsYXNlciBiZWFtIG9mIHRoZSBTcGVjdHJhIGlzIGhpZ2hseSBlZmZlY3RpdmUgYWdhaW5zdCBvcmdhbmljIGFuZCBzeW50aGV0aWMgZW5lbWllcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDksXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic3BlY3RyYS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjE4LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkRpc2NoYXJnZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83LzdhL1NwZWN0cmEucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMTAwNjEzMDExN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU3BlY3RyYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkVuZXJneSBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU3BlY3RyYSBWYW5kYWxcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9QaXN0b2xzL0NvcnB1c01vZHVsYXJQaXN0b2wvVmFuZGFsL0NycExhc2VyUGlzdG9sVmFuZGFsXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIyLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiSGVsZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgc3BlY2lhbC1vcmRlciBDb3JwdXMgY3V0dGluZyB0b29sIGZvciBtYXN0ZXIgY3JhZnRlcnMgb25seS4gRmVhdHVyZXMgZGlzdGluY3RpdmUgYXp1cml0ZSBwbGF0aW5nIGFuZCBhIGZvY3VzaW5nIGNyeXN0YWwgb2YgcHJlY2lzaW9uIGNsYXJpdHkgYW5kIGN1dC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ5LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNwZWN0cmEtdmFuZGFsLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyMi4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvODIvU3BlY3RyYVZhbmRhbC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTkwNTIzMjM0OTExXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TcGVjdHJhX1ZhbmRhbFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk9wZXJhdGlvbjogSG9zdGlsZSBNZXJnZXJzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgaW5zYW5lIGRwcywgIGJlYW0gbXVuaXRpb25zLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0NS4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNwaXJhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9UaHJvd2luZ1dlYXBvbnMvTGlEYWdnZXIvTGlEYWdnZXJcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogODIsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBmbGFzaCBvZiByZWQgcmliYm9uIGlzIHRoZSBsYXN0IHRoaW5nIG1vc3QgdmljdGltcyBvZiB0aGVzZSB0aHJvd2luZy1kYWdnZXJzIHNlZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjEsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic3BpcmEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiVGhyb3duXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI4Mi4wXCIsXG4gICAgICBcImZsaWdodFwiOiBcIj8/P1wiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2M1L0xpRGFnZ2VyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA5MjQwMTQzMzZcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1NwaXJhXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlNwaXJhIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9UaHJvd2luZ1dlYXBvbnMvUHJpbWVMaURhZ2dlci9QcmltZUxpRGFnZ2VyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDYwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZXNlIHJhcmUsIGJyYWlkZWQgdGhyb3dpbmcgZGFnZ2VycyB3ZXJlIGEgZmF2b3JpdGUgdG9vbCBvZiBoaWdoIHJhbmtpbmcgT3Jva2luIGFzc2Fzc2lucy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInNwaXJhLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRocm93blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI2MC4wXCIsXG4gICAgICBcImZsaWdodFwiOiA3MCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzAyL1ByaW1lTGlEYWdnZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDIwNzEyMTI1MlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU3BpcmFfUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE2IDAyIDE2XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTcgMTIgMTJcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxNyAxMiAxMlwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsICBwcm9qZWN0aWxlIG11bml0aW9ucy4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTMuNCxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTdGF0aWNvclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL1Bpc3RvbHMvQ3JwRWxlY3Ryb01hZy9DcnBFbGVjdHJvTWFnXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEzMixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNlbmQgYSBtYXNzaXZlIGNoYXJnZSBvZiBwb3RlbnRpYWwgZW5lcmd5IGh1cmxpbmcgdG93YXJkIHVuZm9ydHVuYXRlIHRhcmdldHMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE2LjY2NjY2NixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC41Mjk5OTk5NyxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzdGF0aWNvci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFBpc3RvbHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjQ0LjAgcmFkaWF0aW9uXCIsXG4gICAgICBcImZsaWdodFwiOiA1MCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwic2Vjb25kYXJ5QXJlYVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIkZ1bGx5IENoYXJnZWQgRXhwbG9zaW9uXCIsXG4gICAgICAgIFwicmFkaXVzXCI6IDgwMCxcbiAgICAgICAgXCJyYWRpYXRpb25cIjogMzUyLFxuICAgICAgICBcImRhbWFnZVwiOiBcIjM1Mi4wIHJhZGlhdGlvblwiXG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzY0L0NycEVsZWN0cm9NYWcucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDIwNTAxMzczNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU3RhdGljb3JcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJFbmVyZ3kgTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBpbnNhbmUgZHBzLCAgcHJvamVjdGlsZSBtdW5pdGlvbnMuIEJvbHQgYW5kIHJlc3VsdGluZyBleHBsb3Npb24gaGFzIGluZGVwZW5kZW50IGNoYW5jZSB0byBwcm9jIHN0YXR1cyBlZmZlY3RzLCBtYWtpbmcgaXQgaGlnaGx5IGNhcGFibGUgb2Ygc3RyaXBwaW5nIGFybW9yLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAzOC41LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlN0aW5nZXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9TZW50aW5lbHMvU2VudGluZWxXZWFwb25zL1NlbnRCaW9XZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTUsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3RhbmRhcmQgaXNzdWUgd2VhcG9uIGZvciBEamlubiBTZW50aW5lbC4gRmlyZXMgcG9pc29ub3VzIHByb2plY3RpbGVzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMxNTAwMDEsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbCBXZWFwb25cIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic3Rpbmdlci5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjE1LjAgdG94aW5cIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xMi9ERVNlbnRpbmVsU3Rpbmdlci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMTIyMTU0MjI4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TdGluZ2VyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ29tZXMgd2l0aCBDb21wYW5pb25cIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTdHJhZGF2YXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL1Rlbm5vVG9tbXlHdW4vVGVubm9Ub21teUd1blJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI4LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgaGlnaC1jYXBhY2l0eSwgaGlnaC1kYW1hZ2UgZW5mb3JjZXIsIHRoaXMgd2VhcG9uIGNhbiBzd2l0Y2ggYmV0d2VlbiB0aGUgaGlnaCBjcml0IHNlbWktYXV0b21hdGljIGFuZCBmdWxsIGF1dG9tYXRpYyBmaXJpbmcgbW9kZXMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE0LjI4NTcxNCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzdHJhZGF2YXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjI4LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiU2VtaS1BdXRvIE1vZGVcIixcbiAgICAgICAgXCJzcGVlZFwiOiA1LFxuICAgICAgICBcImNyaXRfY2hhbmNlXCI6IDI4LFxuICAgICAgICBcImNyaXRfbXVsdFwiOiAyLFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogMC4yLFxuICAgICAgICBcInNob3RfdHlwZVwiOiBcIkhpdC1TY2FuXCIsXG4gICAgICAgIFwiaW1wYWN0XCI6IDcuNSxcbiAgICAgICAgXCJzbGFzaFwiOiAxMi41LFxuICAgICAgICBcInB1bmN0dXJlXCI6IDMwXG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84LzhlL1Rlbm5vVG9tbXlHdW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDUxMjAxMDI0NlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU3RyYWRhdmFyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlN0cmFkYXZhciBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTG9uZ0d1bnMvUHJpbWVTdHJhZGF2YXIvUHJpbWVTdHJhZGF2YXJHdW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQmV0d2VlbiBtZWFzdXJlZCBzdGFjY2F0byBhbmQgc3RhZ2dlcmluZyBjcmVzY2VuZG8sIFN0cmFkYXZhciBQcmltZSBuZXZlciBmYWlscyB0byBjYWxsIGRvd24gYSBkZXZhc3RhdGluZyBmaW5hbGUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzdHJhZGF2YXItcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJTZW1pLUF1dG8gTW9kZVwiLFxuICAgICAgICBcInNwZWVkXCI6IDMuMzMsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMzAsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDIuOCxcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMixcbiAgICAgICAgXCJzaG90X3R5cGVcIjogXCJIaXQtU2NhblwiLFxuICAgICAgICBcImltcGFjdFwiOiA4LFxuICAgICAgICBcInNsYXNoXCI6IDQ4LFxuICAgICAgICBcInB1bmN0dXJlXCI6IDI0XG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9kL2QyL1N0cmFkYXZhclByaW1lLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxOTA0MDMwMjE0MzZcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1N0cmFkYXZhcl9QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTkgMDMgMjdcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibi9hXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMjEgMDEgMjdcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIENhbiBhbHRlcm5hdGUgYmV0d2VlbiBzZW1pLWF1dG8gKGJldHRlciBEUFMpIGFuZCBmdWxsLWF1dG8gKHVzZWZ1bCBmb3IgYnJlYWtpbmcgbnVsbGlmaWVyIGJ1YmJsZXMpLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1My44LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlN0cnVuXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9TaG90Z3VuL1Nob3RndW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBTdHJ1biBpcyBhIHN0YW5kYXJkIHNob3RndW4uIFJlbGlhYmxlLCB2ZXJzYXRpbGUgYW5kIGRlYWRseS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogNCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzdHJ1bi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMDAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8yLzI2L1N0cnVuLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjExMjUyMjU1MDBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1N0cnVuXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlN0cnVuIFdyYWl0aFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vU2hvdGd1bi9TaG90Z3VuVmFuZGFsXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGRpZmZlcmVudCB0YWtlIG9uIGEgZmFtaWxpYXIgc2hvdGd1biwgdGhlIFN0cnVuIFdyYWl0aCBmZWF0dXJlcyB1bmlxdWUgc3R5bGluZy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogNi42NjY2NjY1LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzdHJ1bi13cmFpdGgucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MDAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8zLzNiL1dyYWl0aFN0cnVuLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjExMjUyMjUzMjNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1N0cnVuX1dyYWl0aFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkludmFzaW9uc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBSZXF1aXJlZCB0byBtb2QgZm9yIDEwMCUgc3RhdHVzIGNoYW5jZS4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIjEwMCUgU3RhdHVzIC8gQ3JpdFwiLFxuICAgICAgXCJyYW5rXCI6IDU2LjEsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU3R1YmJhXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL1Bpc3RvbHMvR3JuVXppL0dyblV6aVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzMyxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbmZsaWN0IHJhcGlkLWZpcmUgYnVyc3RzIG9mIHBhaW4gd2l0aCB0aGlzIEdyaW5lZXIgc3VibWFjaGluZSBndW4uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMyxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzdHViYmEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMy4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzEvMTcvR3JuVXppV2VhcG9uLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzEyMjEyMTQ0MzNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1N0dWJiYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNldHVzIEJvdW50eSAoR2hvdWwpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsICBoaXRzY2FuIG11bml0aW9ucy4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTUuMSxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTdHVnXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL1Bpc3RvbHMvR3JpbmVlckNyb3NzYm93L0dyaW5lZXJHb29HdW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogODUsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRmlyaW5nIGEgc3RpY2t5LCB0b3hpYywgZXhwbG9zaXZlIGNvbXBvdW5kLCB0aGUgU3R1ZyBHZWwgR3VuIG9mZmVycyBtdWx0aXBsZSBlamVjdGlvbiBtb2RlcywgZGVsaXZlcmluZyBtYXhpbXVtIGRhbWFnZSBpbiBhbGwgc2l0dWF0aW9ucy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDgsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic3R1Zy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjE1Ni4wIGNvcnJvc2l2ZVwiLFxuICAgICAgXCJmbGlnaHRcIjogMzUsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZmMvR3JpbmVlckNyb3NzYm93R29vR3VuLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDAxMjQxNzI1MjlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1N0dWdcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIHByb2plY3RpbGUgbXVuaXRpb25zLiBFYWNoIHNob3QgbGF1bmNoZXMgYSBibG9iLiBVcCB0byBzaXggYmxvYnMgY2FuIGFjY3VtdWxhdGUgYXQgYSBzaW5nbGUgc2l0ZSBvbiB0aGUgdGFyZ2V0LiBBbHQtZmlyZSBjaGFyZ2VzIHRoZSB3ZWFwb24gdG8gbGF1bmNoIGEgc2luZ2xlLCBsYXJnZXIgYmxvYi4gV2hpbGUgdGhlIHNob3RzIGl0c2VsZiBkb2VzIG5vdCBjYXVzZSBzdGF0dXMgZWZmZWN0cywgdGhlIGJsb2JzIGRvLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMTk5LjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL0dhbWUvS3Vicm93UGV0L0h1bnRlckt1YnJvd1BldFBvd2VyU3VpdFwiLFxuICAgICAgXCJuYW1lXCI6IFwiU3VuaWthIEt1YnJvd1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk9uY2UgdGhlIHZhbHVlIG9mIE9yb2tpbiBndWFyZC1wZXRzIGhhZCBiZWVuIHJlYWxpemVkLCBPcm9raW4gc2NpZW50aXN0cyBiZWdhbiBleHBlcmltZW50aW5nIHdpdGggc3RyYWlucyBkZXNpZ25lZCBmb3IgY29tYmF0LiBUaGVzZSB3ZXJlIG5vIGxvbmdlciBob3VzZWhvbGQgcGV0cyBidXQgc3VwZXJpb3Igd2FyIGFuaW1hbHMgYnJlZCBmb3IgZmVyb2NpdHkgYW5kIGFnZ3Jlc3Npb24uXCIsXG4gICAgICBcInR5cGVcIjogXCJDb21wYW5pb25cIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic3VuaWthLWt1YnJvdy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJLdWJyb3dcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiSW5jdWJhdG9yIFNlZ21lbnQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvU3VuaWthX0t1YnJvd1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTdXByYVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ2xhblRlY2gvRW5lcmd5L0NycEhlYXZ5UmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIFNVUFJBIGlzIGEgaGVhdnkgbGFzZXIgZ3VuIHdpdGggYSBzaG9ydCB3aW5kIHVwIHRpbWUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE0LjI4NTcxNCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44MDAwMDAwMSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic3VwcmEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjQwLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDgwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzZkL0NvcnB1c01hY2hpbmVHdW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MDMwMzA2MjQ1OVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU3VwcmFcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJFbmVyZ3kgTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlN1cHJhIFZhbmRhbFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ29ycHVzL0xvbmdHdW5zL01hY2hpbmVndW4vU3VwcmFWYW5kYWxcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBjdXN0b21pemVkIHZlcnNpb24gb2YgdGhlIHBvd2VyZnVsIFN1cHJhLCBmZWF0dXJpbmcgYSBtZXRhbGxpYyBmaW5pc2ggYW5kIExvdHVzIGRlY2FsLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyOC41NzE0MjgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDE0LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODAwMDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInN1cHJhLXZhbmRhbC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0MC4wXCIsXG4gICAgICBcImZsaWdodFwiOiA4MCxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xNS9TdXByYVZhbmRhbC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcwNTA0MTg0NzQwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TdXByYV9WYW5kYWxcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJCYXJvIEtpJ1RlZXIgKFJlbGF5KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBFbnRyb3B5IEJ1cnN0IChNYWduZXRpYywgRW5lcmd5KSBjYW4gZ3JlYXRseSBpbmNyZWFzZSBzdGF0dXMgY2hhbmNlLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1Ni4zLFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlN3ZWVwZXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9TZW50aW5lbHMvU2VudGluZWxXZWFwb25zL1NlbnRTaG90Z3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDQxLjk5OTk5NixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdGFuZGFyZCBpc3N1ZSB3ZWFwb24gZm9yIENhcnJpZXIgU2VudGluZWwuIEZpcmVzIHNob3RndW4gcm91bmRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAzLjMzMzMzMzMsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInN3ZWVwZXIucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0Mi4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzIvMjUvREVTZW50aW5lbFN3ZWVwZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDEyMjE1NDIyOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU3dlZXBlclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNvbWVzIHdpdGggQ29tcGFuaW9uXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiU3dlZXBlciBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFdlYXBvbnMvUHJpbWVTZW50U2hvdGd1blwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdGFuZGFyZCBpc3N1ZSB3ZWFwb24gZm9yIENhcnJpZXIgUHJpbWUgU2VudGluZWwuIEZpcmVzIHNob3RndW4gcm91bmRzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAzLjMzMzMzMzMsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInN3ZWVwZXItcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjYwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84MS9TZW50aW5lbFN3ZWVwZXJQcmltZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwNzA3MjAwOTA3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Td2VlcGVyX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ29tZXMgd2l0aCBDb21wYW5pb25cIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTeWJhcmlzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9Ubm9MZXZlckFjdGlvbi9Ubm9MZXZlckFjdGlvblJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDgwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQnVyc3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGlzIFRlbm5vIGNyYWZ0ZWQsIGxldmVyIGFjdGlvbiByaWZsZSwgaXMgZXF1YWwgcGFydHMgZWxlZ2FuY2UgYW5kIGV4ZWN1dGlvbmVyLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyOC41NzE0MjgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDUsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic3liYXJpcy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiODAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzAzL1Rub0xldmVyQWN0aW9uUmlmbGUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDUxNTE4NDIxMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU3liYXJpc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTeWJhcmlzIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9QcmltZVN5YmFyaXMvUHJpbWVTeWJhcmlzUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogODgsXG4gICAgICBcInRyaWdnZXJcIjogXCJCdXJzdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNsZWVrIGFuZCBzbGVuZGVyLCBhIGdvbGRlbiBzeW1ib2wgb2YgVGVubm8gcGVyZmVjdGlvbi5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjUsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMDUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInN5YmFyaXMtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiODcuOVwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TeWJhcmlzX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNyAwNSAzMFwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE5IDAzIDI3XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTkgMDMgMjdcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBUd28tcm91bmQgYnVyc3QgaXMgd2FzdGVmdWwgYXQgdGltZXMgYW5kIHRoZSBtYWdhemluZSBpcyByZWxhdGl2ZWx5IHNtYWxsIGZvciBob3cgZmFzdCBpdCBmaXJlcy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTcuMyxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTeWRvblwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9NZWxlZS9Hcm5UcmlkZW50L0dyblRyaWRlbnRXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkluZmxpY3QgbWF4aW11bSBkZXZhc3RhdGlvbiB3aXRoIHRoaXMgbWFzc2l2ZSBHcmluZWVyIHRyaWRlbnQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMjUsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODM5OTk5OTcsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJzeWRvbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQb2xlYXJtXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzUuMVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9iL2JkL0dyblRyaWRlbnRXZWFwb24ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDEyMDEyNDAzNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU3lkb25cIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDaGVtIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTeW5hcHNlXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9JbmZlc3RlZC9Mb25nR3Vucy9JbmZlc3RlZFJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDIwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiSGVsZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvd2VyZWQgYnkgYSBiaW8tY2hlbWljYWwgcmVhY3Rpb24sIHRoZSBpbmZlc3RlZCBTeW5hcHNlIHJpZmxlIGZyaWVzIGl0cyB0YXJnZXRzIHdpdGggYSBzdGVhZHkgc3RyZWFtIG9mIDxEVF9DT1JST1NJVkU+Q29ycm9zaXZlIGVuZXJneS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMxNTAwMDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInN5bmFwc2UucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwLjAgY29ycm9zaXZlXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYy9jMC9VMTBJbmZQcmltYXJ5LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA5MTQxMTE0MDVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1N5bmFwc2VcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJCaW8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBpbnNhbmUgZHBzLCBiZWFtIG11bml0aW9ucy4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMzkuMyxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJTeW5vaWQgR2FtbWFjb3JcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1N5bmRpY2F0ZXMvQ2VwaGFsb25TdWRhL1Bpc3RvbHMvQ1NTeW5vaWRHYW1tYWNvclwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyMSxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkhlbGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZXBsb3llZCBieSB0aGUgQ2VwaGFsb24gU3VkYSwgb25jZSBhIGRhdGEtYW5hbHl6aW5nIGluc3RydW1lbnQgdGhlIEdhbW1hY29yIG1haW4gZm9jdXMgaXMgZGVmZW5zZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODk5OTk5OTgsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic3lub2lkLWdhbW1hY29yLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyMC4wIG1hZ25ldGljXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJEaXNjaGFyZ2VcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zYi9TeW5vaWRHYW1tYWNvci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI3MTgzMTAyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TeW5vaWRfR2FtbWFjb3JcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDZXBoYWxvbiBTdWRhIChHZW5pdXMpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgc2hvdCwgaW5zYW5lIGRwcywgIGJlYW0gbXVuaXRpb25zLiBJbm5hdGUgRW50cm9weSAoTWFnbmV0aWMsIEVuZXJneSkgaXMgdXNlZnVsIGF0IHRpbWVzLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0MS40LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlN5bm9pZCBIZWxpb2NvclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU3luZGljYXRlcy9DZXBoYWxvblN1ZGEvTWVsZWUvQ1NIZWxpb2NvclwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMTkuOTk5OTksXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgaW50ZWxsaWdlbnQgaGFtbWVyIHRha2VzIGFuIGVuZW15IGtpbGxlZCBieSBhIGNoYW5uZWxsZWQgYXR0YWNrIGFuZCByZWNvbXBvc2VzIHRoZW0gYXMgYW4gYWxseS4gQW55IGZhdGFsIHN0cmlrZSB3aXRoIHRoaXMgd2VhcG9uIGFsc28gcGVyZm9ybXMgYSBjb2RleCBzY2FuLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjQwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjk0LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwic3lub2lkLWhlbGlvY29yLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkhhbW1lclwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNzUsXG4gICAgICBcImRhbWFnZVwiOiBcIjEyMC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzEvMTMvQ1NIZWxpb2Nvci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwOTE2MDMwMjQzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9TeW5vaWRfSGVsaW9jb3JcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJDZXBoYWxvbiBTdWRhIChHZW5pdXMpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogODIuMjQsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIFNjYW5zIGtpbGxzIGludG8gY29kZXgsIGFuZCBpZiB0aGUgdGFyZ2V0J3MgQ29kZXggZW50cnkgaXMgY29tcGxldGUgaXQgd2lsbCBjcmVhdGUgYSBmcmllbmRseSBTcGVjdHJlIG9mIHNhaWQgdGFyZ2V0LiBTcGVjdHJlIGxhc3RzIDMwcy4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNydXNoaW5nIFJ1aW5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJPbmx5IHVzZSBSYWdpbmcgV2hpcmx3aW5kIHRvIHByb2MgSW1wYWN0IG9yIHRoZSBzbGFtIHdpbGwgcmFnZG9sbFwiLFxuICAgICAgXCJjb21ib1wiOiBcIlRpZGFsIEZvcmNlICYgUmFnaW5nIFdoaXJsd2luZFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlN5bm9pZCBTaW11bG9yXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9TeW5kaWNhdGVzL0NlcGhhbG9uU3VkYS9Mb25nR3Vucy9DU1NpbXVsb3JcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzUsXG4gICAgICBcInRyaWdnZXJcIjogXCJBY3RpdmVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDZXBoYWxvbiBTdWRh4oCZcyBjdXN0b20gaXNzdWUgU2ltdWxvciB3YXMgYnVpbHQgdG8gc2F0aXNmeSBoZXIgY3VyaW9zaXR5LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyOC41NzE0MjgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInN5bm9pZC1zaW11bG9yLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjIwLjAgbWFnbmV0aWNcIixcbiAgICAgIFwiZmxpZ2h0XCI6IFwiPz8/XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIk9yYiBFeHBsb3Npb25cIixcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiAxNCxcbiAgICAgICAgXCJjcml0X211bHRcIjogMixcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMyxcbiAgICAgICAgXCJlbGVjdHJpY2l0eVwiOiA3NSxcbiAgICAgICAgXCJkYW1hZ2VcIjogXCI3NS4wIGVsZWN0cmljaXR5XCJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzAvMDkvU3luZGljYXRlQ1NTaW11bG9yLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA5MDIyMTUxMzRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1N5bm9pZF9TaW11bG9yXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQ2VwaGFsb24gU3VkYSAoR2VuaXVzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAxMzcuNyxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUYWxvbnNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Rocm93aW5nV2VhcG9ucy9VMThUaHJvd2luZ0tuaXZlcy9VMTh0aHJvd2luZ2tuaXZlc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMjAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBY3RpdmVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgY2xhd3Mgb2YgdGhlc2UgdGFjdGljYWwgYm9tYnMgZGlnIGludG8gdGhlIHRhcmdldCBhbmQgZGV0b25hdGUgb24gY29tbWFuZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQ0MDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidGFsb25zLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRocm93blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTIwLjAgYmxhc3RcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDUwLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2MyL1UxOHRocm93aW5na25pdmVzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEyMDQwMTMzMTBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1RhbG9uc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIHByb2plY3RpbGUgbXVuaXRpb25zLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA5MyxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUYXRzdVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvU3dvcmRzL1RuVHdvSGFuZGVkS2F0YW5hL1RuVHdvSGFuZGVkS2F0YW5hXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDk2LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGZWFyc29tZSBhbmQgbm9ibGUsIHRoZSBlbGVnYW50IHR3by1oYW5kZWQgTmlrYW5hIGlzIHRoZSBwcmlkZSBvZiBhbnkgQXJzZW5hbC4gS2lsbHMgYnVpbGQgY2hhcmdlcyBhbmQgc2Vla2luZyBwcm9qZWN0aWxlcyBhcmUgdW5sZWFzaGVkIHdpdGggYSBTbGlkZSBBdHRhY2sgdG8gZmluZCBhbmQgc3R1biB1bndpdHRpbmcgZW5lbWllcy4gV2hlbiBSZXZlbmFudCB3aWVsZHMgdGhpcyBibGFkZSwgVGF0c3XigJlzIGNoYXJnZSBjYXAgaXMgaW5jcmVhc2VkLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTkyLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidGF0c3UucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiVHdvLUhhbmRlZCBOaWthbmFcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMS4wIHJhZGlhdGlvblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy81LzU4L1RhdHN1LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxOTAzMDgyMzU4MTJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1RhdHN1XCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0MS4zNCxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIG1vbnN0cm91cyBEUFMsIGhpZ2ggYXR0YWNrIHNwZWVkLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiV2lzZSBSYXpvclwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlNsaWRlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL1NlbnRpbmVscy9TZW50aW5lbFBvd2Vyc3VpdHMvVG5TZW50aW5lbENyb3NzUG93ZXJTdWl0XCIsXG4gICAgICBcIm5hbWVcIjogXCJUYXhvblwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggJ0Fzc2F1bHQgTW9kZScgYW5kICdNb2xlY3VsYXIgQ29udmVyc2lvbicgYXMgZGVmYXVsdCBQcmVjZXB0cywgVGF4b24gcHJvdGVjdHMgaXRzIG93bmVyIHdpdGggc2hpZWxkIHJlc3RvcmF0aW9uLiBFcXVpcHBlZCB3aXRoIHRoZSBBcnRheCBpY2UtYmVhbS5Ob3RlOiBUaGlzIGl0ZW0gcmVxdWlyZXMgdHdvIG9wZW4gc2xvdHMuXCIsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0YXhvbi5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLndpa2lhLmNvbS93aWtpL1RheG9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlRhemljb3JcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9GcmllbmRseS9QZXRzL01vYVBldHMvTW9hUGV0Q29tcG9uZW50cy9UYXpyb25XZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNixcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCdXJzdCByaWZsZSB0aGF0IGZpcmVzIGVsZWN0cmlmaWVkIHJvdW5kcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjUsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IHRydWUsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInRhemljb3IucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI2LjAgZWxlY3RyaWNpdHlcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkRpc2NoYXJnZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2FkL1RheGljb3IucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MTExMDIyMDYxNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVGF6aWNvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkxlZ3MgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVGVra29cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL0dhdW50bGV0L0JyYXdsZXJLbnVja2xlcy9CcmF3bGVyS251Y2tsZXNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZXNlIGlyb24gZmlzdHMgdGhhdCByaXAgdGhyb3VnaCBmb2VzIGFyZSBBdGxhcycgc2lnbmF0dXJlIHdlYXBvbnMuIFdoZW4gd2llbGRlZCBieSBBdGxhcyB0aGV5IHJlY2VpdmUgYSBTdGF0dXMgQ2hhbmNlIGluY3JlYXNlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMTM1LFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMixcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0ZWtrby5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJGaXN0XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDUuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9jL2MxL0JyYXdsZXJLbnVja2xlcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUxMDAyMDkwMTQyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9UZWtrb1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDYyLjgsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcIndlYXBvbk5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBoaXQsIHBvb3IgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiR2FpYSdzIFRyYWdlZHlcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJGb3Jlc3QncyBSZW1vcnNlXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVGVsb3MgQWtib2x0b1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU3luZGljYXRlcy9BcmJpdGVyc09mSGV4aXMvUGlzdG9scy9BSEFrYm9sdG9cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDcsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRm9yIHRoZSBBcmJpdGVycyBvZiBIZXhpcyB0aGVzZSBwaXN0b2xzIGFyZSBtb3JlIHRoYW4gc2ltcGxlIHdlYXBvbnMsIHRoZXkgYXJlIHN5bWJvbHMgb2YgdHJ1dGggYW5kIGRpc2NpcGxpbmUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI2LjY2NjY2NixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTEsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44MDAwMDAwMSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0ZWxvcy1ha2JvbHRvLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI0Ny4wXCIsXG4gICAgICBcImZsaWdodFwiOiA3NSxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZS9lYy9BSEFrYm9sdG8ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNzE4MTkyNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVGVsb3NfQWtib2x0b1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAyLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkFyYml0ZXJzIG9mIEhleGlzIChNYXhpbSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCAgcHJvamVjdGlsZSBtdW5pdGlvbnMuIFRydXRoIChHYXMsIGhlYWx0aCwgcGFya291cikgaXMgdXNlZnVsIGF0IHRpbWVzLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMTE3LjYsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVGVsb3MgQm9sdGFjZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU3luZGljYXRlcy9BcmJpdGVyc09mSGV4aXMvTWVsZWUvQUhCb2x0YWNlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDg1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTcGlubmluZyBhdHRhY2tzIHVubGVhc2ggdGhlIFN0b3JtcGF0aCwgYSB0ZW1wZXN0IG9mIG1heWhlbSB0aGF0IGh1cmxzIGFueSBmb2VzIGluIGl0cyB3YXkuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAzNDAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0ZWxvcy1ib2x0YWNlLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlRvbmZhXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI4NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvM2MvQUhCb2x0YWNlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjA5MTYwMzAyNDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1RlbG9zX0JvbHRhY2VcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMyxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJBcmJpdGVycyBvZiBIZXhpcyAoTWF4aW0pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDU1LjM1LFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gU2xpZGUgYXR0YWNrIHRyaWdnZXJzIFN0b3JtcGF0aCwgd2hpY2ggdmFjdXVtcyBlbmVtaWVzIGluIGEgMTRtIHJhZGl1cy4gUmV0cmlnZ2VyaW5nIFN0b3JtcGF0aCB3aXRoaW4gOHMgcHV0cyBpdCBpbnRvIGEgNnMgY29vbGRvd24gYW5kIHJhZ2RvbGwgZW5lbWllcy4gQWxzbyBnaXZlcyAyMCUgYm9vc3QgdG8gcGFya291ci4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlNvdmVyZWlnbiBPdXRjYXN0XCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiUm9ndWUgRWRpY3RcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUZWxvcyBCb2x0b3JcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1N5bmRpY2F0ZXMvQXJiaXRlcnNPZkhleGlzL0xvbmdHdW5zL0FIQm9sdG9yXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJyaW5nIGRvd24ganVkZ2VtZW50LCB3aXRoIHRoaXMgYm9sdG9yIGNyYWZ0ZWQgYnkgdGhlIEFyYml0ZXJzIG9mIEhleGlzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidGVsb3MtYm9sdG9yLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjMwLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDY1LFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83LzdjL1N5bmRpY2F0ZUFIQm9sdG9yLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA5MDIyMTUxMzRcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1RlbG9zX0JvbHRvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkFyYml0ZXJzIG9mIEhleGlzIChNYXhpbSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIFRydXRoIChHYXMsIGhlYWx0aCwgcGFya291cikgc3luZGljYXRlIHByb2MgaXMgaGVscGZ1bCBhdCB0aW1lcy4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTIuOSxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUZW5vcmFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL1RuQmFyZFJpZmxlL1RuQmFyZFJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI0LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVubG9hZCBwZXJjdXNzaXZlIG1hY2hpbmUgZ3VuIGZpcmUsIG9yIHN0cmlrZSBhIGhlYXZ5IGNob3JkIHdpdGggYSBzaW5nbGUgY2hhcmdlIHNob3QuIFdoZW4gT2N0YXZpYSB3aWVsZHMgaGVyIHNpZ25hdHVyZSByaWZsZSBhbHQtZmlyZSBIZWFkc2hvdCBLaWxscyBoYXZlIGEgY2hhbmNlIHRvIGluc3RhbnRseSByZWZpbGwgdGhlIG1hZ2F6aW5lLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMi41LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjA1LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0ZW5vcmEucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjI0LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJzcGVlZFwiOiAxMCxcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiAzNCxcbiAgICAgICAgXCJjcml0X211bHRcIjogMyxcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMSxcbiAgICAgICAgXCJjaGFyZ2VfdGltZVwiOiAwLjgsXG4gICAgICAgIFwic2hvdF90eXBlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgICBcInNob3Rfc3BlZWRcIjogbnVsbCxcbiAgICAgICAgXCJpbXBhY3RcIjogNDgsXG4gICAgICAgIFwic2xhc2hcIjogNDgsXG4gICAgICAgIFwicHVuY3R1cmVcIjogMTQ0XG4gICAgICB9LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9kL2Q2L1RuQmFyZFJpZmxlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzAzMjQyMzAyMDZcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1Rlbm9yYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgaGl0c2NhbiBtdW5pdGlvbnMuIEhhcyBhIGRlY2VudCBhbHQtZmlyZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHRha2UgZG93biBtZWRpdW0gdW5pdHMgcXVpY2tseS4gTGlnaHQgdW5pdHMgYW5kIGhlYXZ5IHVuaXRzIHNob3VsZCBzdGlsbCBiZSBkZWFsdCB3aXRoIHVzaW5nIHByaW1hcnkgZmlyZS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXQvU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTIsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVGV0cmFcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0NvcnB1cy9Mb25nR3Vucy9Db3JwdXNVTVAvQ29ycHVzVU1QXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMyLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRyYXdpbmcgZnJvbSBpdHMgaHVnZSBxdWFkLWNoYW1iZXJlZCBjbGlwLCB0aGUgVGV0cmEgaXMgY2FwYWJsZSBvZiB1bmxlYXNoaW5nIGEgc3VzdGFpbmVkIGJhcnJhZ2Ugb2YgbGV0aGFsIGVuZXJneSBib2x0cy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTguMTgxODE4LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInRldHJhLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMi4wXCIsXG4gICAgICBcImZsaWdodFwiOiAxMDAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZjcvREVUZXRyYS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMTIyMjIzMTMxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9UZXRyYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUaWJlcm9uXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9EcmFrZVJpZmxlL0RyYWtlUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDQsXG4gICAgICBcInRyaWdnZXJcIjogXCJCdXJzdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvcmdlZCBieSBhIG1hc3RlciBndW5zbWl0aCwgdGhpcyBUZW5ubyBidXJzdCByaWZsZSB3aWxsIHN0cmlrZSBkb3duIHRhcmdldHMgd2l0aCBzd2lmdCBwcmVjaXNpb24uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDMzLjMzMzMzMixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC45NDk5OTk5OSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidGliZXJvbi5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNDQuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8zLzMxL1RpYmVyb24ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTAwMTIyMDk1N1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVGliZXJvblwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUaWJlcm9uIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9QcmltZVRpYmVyb24vUHJpbWVUaWJlcm9uUmlmbGVcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNDYsXG4gICAgICBcInRyaWdnZXJcIjogXCJCdXJzdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFydCBtZWV0cyBpbmdlbnVpdHkgd2l0aCB0aGlzIGJlYXV0aWZ1bGx5IGRlYWRseSByaWZsZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMzMuMzMzMzMyLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjk0OTk5OTk5LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0aWJlcm9uLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjQ2LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwic2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiU2VtaVwiLFxuICAgICAgICBcInNwZWVkXCI6IDYsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMzAsXG4gICAgICAgIFwiY3JpdF9tdWx0XCI6IDMuNCxcbiAgICAgICAgXCJzdGF0dXNfY2hhbmNlXCI6IDAuMixcbiAgICAgICAgXCJzaG90X3R5cGVcIjogXCJIaXQtU2NhblwiLFxuICAgICAgICBcImltcGFjdFwiOiAxMy44LFxuICAgICAgICBcInNsYXNoXCI6IDEzLjgsXG4gICAgICAgIFwicHVuY3R1cmVcIjogMTguNFxuICAgICAgfSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yNS9UaWJlcm9uUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDMxMzIwMDc1N1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVGliZXJvbl9QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTggMDMgMjBcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibi9hXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMjAgMDEgMTNcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBBbHQtZmlyZSB0b2dnbGVzIGJldHdlZW4gMy1yb3VuZCBidXJzdCwgc2VtaS1hdXRvLCBhbmQgYXV0by4gVGVzdGluZyBzbyBmYXIgc2hvd3MgdGhhdCBidXJzdCBmaXJlIGhhcyA1JSBlZGdlIG9uIERQUyBjb21wYXJlZCB0byBzZW1pLWF1dG8gYXQgdGhlIGV4cGVuc2Ugb2YgYW1tbyBlY29ub215LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0OC40LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlRpZ3Jpc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTG9uZ0d1bnMvRG91YmxlQmFycmVsU2hvdGd1bi9UZW5ub0RvdWJsZUJhcnJlbFNob3RndW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTA1MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkR1cGxleFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBkb3VibGUtYmFycmVsZWQgVGlncmlzIHNob3RndW4gZmlyZXMgdHdvIGJ1cnN0cyBpbiByYXBpZCBzdWNjZXNzaW9uLCBlYXNpbHkgdGFraW5nIGRvd24gdGhlIHRvdWdoZXN0IHByZXkuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDkuMDkwOTA5LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNTUwMDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInRpZ3Jpcy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMDUwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNC80My9ERVRpZ3Jpcy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQwMTAxMDY0MjQzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9UaWdyaXNcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVGlncmlzIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9QcmltZVRpZ3Jpcy9QcmltZVRpZ3Jpc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxNTYwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiRHVwbGV4XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQW4gYXJ0aWZhY3Qgb2YgZXhxdWlzaXRlIGJlYXV0eS4gQSB3ZWFwb24gb2YgZGVhZGx5IHB1cnBvc2UuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDkuMDkwOTA5LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjU1MDAwMDAxLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0aWdyaXMtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU2hvdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNTYwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2FhL1ByaW1lVGlncmlzMzQyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjA4MjAwMzIxMjhcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1RpZ3Jpc19QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAxLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTYgMDggMjNcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxOCAwNiAxOVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE4IDA2IDE5XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb2RlcmF0ZSBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBEdXBsZXggdHJpZ2dlciBtaWdodCB0YWtlIGEgd2hpbGUgdG8gZ2V0IHVzZWQgdG8uIFJlcXVpcmVkIHRvIG1vZCBmb3IgMTAwJSBzdGF0dXMgY2hhbmNlLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiMTAwJSBTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2NCxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUaXBlZG9cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N0YWZmL01vbmtTcGFkZS9Ubm9Nb25rU3RhZmZcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldpdGggaXRzIGNyZXNjZW50IHNoYXBlZCBibGFkZXMgZmx5aW5nIGluIHN3ZWVwaW5nIGFyY3MgYW5kIHN0cmlraW5nIGF0IHRyZW1lbmRvdXMgc3BlZWQsIHRoZSBUaXBlZG8gZGVtYW5kcyBmb2N1cyBmcm9tIHRob3NlIHdpc2hpbmcgdG8gdW5sb2NrIGl0cyB0cnVlIHBvd2VyLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogODMsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMzA5OTk5OSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInRpcGVkby5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTdGFmZlwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjUwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZS9lNS9UaXBlZG8ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDEwOTIwMDYwN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVGlwZWRvXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVGlwZWRvIFByaW1lXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9TdGFmZi9UaXBlZG9QcmltZS9UaXBlZG9QcmltZVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA3NixcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2l0aCB0aGVpciBmaW5hbCBicmVhdGggdGhleSBsb29rIHRvIHRoZSBtb29uLCBhbmQgYXJlIGdvbmUuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMjcsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjMwOTk5OTksXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0aXBlZG8tcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU3RhZmZcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjc2LjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wNy9UaXBlZG9QcmltZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTkwNDAzMDIxNDM2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9UaXBlZG9fUHJpbWVcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE5IDAzIDI3XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIm4vYVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDIxIDAxIDI3XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDI4LjI1LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgdmVyeSBoaWdoIGF0dGFjayBzcGVlZC4g4pyqXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNsYXNoaW5nIEZvcmVzdFwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlJlc29sdXRlIEZsdXJyeVwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0ZhaXJ5L0ZhaXJ5XCIsXG4gICAgICBcIm5hbWVcIjogXCJUaXRhbmlhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGFrZSBmbGlnaHQgd2l0aCB0aGlzIG1pc2NoaWV2b3VzIHBpeGllLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkJ1bGxldCBKdW1wIGNyZWF0ZXMgYSB0cmFtcG9saW5lIGxhc3RpbmcgfERVUkFUSU9OfHMgdGhhdCBlbmhhbmNlcyBCdWxsZXQgSnVtcCBtYW5ldXZlcnMgYnkgfEpVTVB8JSB3aGVuIHVzZWQgYnkgYWxsaWVzLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidGl0YW5pYS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDI2MzczODUsXG4gICAgICBcImludHJvZHVjZWRcIjogXCJUaGUgU2lsdmVyIEdyb3ZlXCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvOC84NC9UaXRhbmlhTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwODIyMTU0MzU5XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9UaXRhbmlhXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGhlIFNpbHZlciBHcm92ZSAoUXVlc3QpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVG9tYmZpbmdlclwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU29sYXJpc1VuaXRlZC9TZWNvbmRhcnkvU1VNb2R1bGFyU2Vjb25kYXJ5U2V0MS9CYXJyZWwvU1VNb2R1bGFyU2Vjb25kYXJ5QmFycmVsQlBhcnRcIixcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0b21iZmluZ2VyLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIktpdGd1blwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSdWRlIFp1dWQgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvVG9tYmZpbmdlclwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUb25ib1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvUG9sZWFybXMvRmxvd2VyUG93ZXJQb2xlYXJtL0Zsb3dlclBvd2VyUG9sZWFybVdlcFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA4MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRHVyaW5nIHRoZSBkYXJrZXN0IGRheXMgb2YgdGhlIE9sZCBXYXIgbWFueSBhIFRlbm5vIHJlbGllZCBzb2xlbHkgb24gdGhlIFRvbmJvIHRvIGtlZXAgdGhlbSBhbGl2ZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDEzMyxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zOCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInRvbmJvLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBvbGVhcm1cIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI4MC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvN2IvRmxvd2VyUG93ZXJQb2xlYXJtLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTAyMTgyMTE0MDlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1RvbmJvXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiU2xpZGVcIixcbiAgICAgIFwicmFua1wiOiAzNSxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgbG93IGF0dGFjayBzcGVlZC4g4pyqXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlR3aXJsaW5nIFNwaXJlXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiU2xpZGVcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUb25rb3JcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTG9uZ0d1bnMvR3JuR3JlbmFkZUxhdW5jaGVyL0dybkdyZW5hZGVMYXVuY2hlclwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxNCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIdXJsIG1heWhlbSBhbmQgZGVzdHJ1Y3Rpb24gd2l0aCB0aGlzIEdyaW5lZXIgZ3JlbmFkZSBsYXVuY2hlci5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInRvbmtvci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJMYXVuY2hlclwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzUuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogMzAsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvOGUvR3JuR3JlbmFkZUxhdW5jaGVyLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTA0MjMyMTA5MDVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1RvbmtvclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiTmVlZCBidWZmc1wiLFxuICAgICAgXCJub3Rlc1wiOiBcIkhpZ2ggZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIEdyZW5hZGVzIGNhbiBjYXVzZSBzZWxmIGRhbWFnZS4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXRpY2FsXCIsXG4gICAgICBcInJhbmtcIjogOTAuNyxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUb3JpZFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvQ2xhblRlY2gvQmlvL0Jpb1dlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvcmlkIGxvYnMgYSB0b3hpYyBwYXlsb2FkLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zLFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0b3JpZC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJMYXVuY2hlclwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTAwLjAgdG94aW5cIixcbiAgICAgIFwiZmxpZ2h0XCI6IDI1LFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzEyL0dyaW5lZXJHcmVuYWRlTGF1bmNoZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDMyNjIxMTQ1OVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVG9yaWRcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJCaW8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiTG93IGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIHByb2plY3RpbGUgbXVuaXRpb25zLiBUaGluZyBmaXJlZCBzdGljayBvbiBzdXJmYWNlcy90YXJnZXRzIGFuZCBjb250aW51ZSB0byBlbWl0IGdhcyB0aGF0IGRlYWxzIGRhbWFnZSBhbmQgY2F1c2VzIHN0YXR1cyBlZmZlY3RzLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogMTA3LjUsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvVHJpbml0eS9UcmluaXR5XCIsXG4gICAgICBcIm5hbWVcIjogXCJUcmluaXR5XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVHJpbml0eSBpcyBncmVhdCBmb3IgcGxheWVycyB3aG8gcHJlZmVyIGEgc3VwcG9ydGl2ZSByb2xlLiBXYXJmcmFtZXMgd2l0aCBoZWFsaW5nIHRlY2hub2xvZ3kgYXJlIHJhcmUgbWFraW5nIFRyaW5pdHkgYSBncmVhdCBlcXVhbGl6ZXIgd2hlbiB0aGUgb2RkcyBhcmUgc3RhY2tlZCBhZ2FpbnN0IHRoZSBUZW5uby5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJSZXZpdmUgZmFsbGVuIGFsbGllcyB8U1BFRUR8JSBmYXN0ZXIgYW5kIGZyb20gfFJBTkdFfCUgZmFydGhlciBhd2F5LlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidHJpbml0eS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImF1cmFcIjogXCJ2YXphcmluXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDMwODk0NDMsXG4gICAgICBcImludHJvZHVjZWRcIjogXCJWYW5pbGxhXCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMC8wMC9UcmluaXR5TmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMTI0MDIzMzM4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9UcmluaXR5XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQW1idWxhcyAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9UcmluaXR5L1RyaW5pdHlQcmltZVwiLFxuICAgICAgXCJuYW1lXCI6IFwiVHJpbml0eSBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJlY29tZSB0aGUgYmFzdGlvbiB0aGF0IGRlZmVuZHMgYWxsaWVzIHVzaW5nIHBvd2VyZnVsIGhlYWxpbmcgYWJpbGl0aWVzIHdpdGggVHJpbml0eSBQcmltZS4gRmVhdHVyaW5nIGFsdGVyZWQgbW9kIHBvbGFyaXRpZXMgZm9yIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjEsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIlJldml2ZSBmYWxsZW4gYWxsaWVzIHxTUEVFRHwlIGZhc3RlciBhbmQgZnJvbSB8UkFOR0V8JSBmYXJ0aGVyIGF3YXkuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0cmluaXR5LXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwidmF6YXJpblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAyMTA1NjMwLFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTcuNlwiLFxuICAgICAgXCJzZXhcIjogXCJGZW1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEuMSxcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83Lzc4L1RyaW5pdHlQcmltZU1haW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MTAyNDA4MDQzOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVHJpbml0eV9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTUgMTAgMDZcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNyAwOCAyOVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE3IDA4IDI5XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlR3aW4gQmFzb2xrXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL01lbGVlL0dybkR1YWxGaXJlQXhlL0dybkR1YWxGaXJlQXhlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDY1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGVzZSBuYXN0eSwgbGl0dGxlIGhhdGNoZXRzIHNsaWNlIHRocm91Z2ggc3RlZWwgYXMgaWYgaXQgd2VyZSBmbGVzaC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI2MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4xNzk5OTk5LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidHdpbi1iYXNvbGsucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBTd29yZHNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI2NS4wIGhlYXRcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNC80NS9Hcm5EdWFsRmlyZUF4ZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUxMDIyMDA1OTUzXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Ud2luX0Jhc29sa1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcImRtZ1wiOiBcIlN0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQyLjI2LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCBsb3cgYXR0YWNrIHNwZWVkLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBSaWZ0IFN0cmlrZSB0ZWxlcG9ydHMgdXNlciB0byBhIHRhcmdldCB3aXRoaW4gMjVtIG9uIGNoYXJnZSBhdHRhY2suIOKcqlwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDYXJ2aW5nIE1hbnRpc1wiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIkFsdCBjb21ibz0gQml0aW5nIE1hbmRpYmxlczsgLURQUywgK2V4ZWN1dGlvblwiLFxuICAgICAgXCJjb21ib1wiOiBcIkRpcmUgQ291cnRzaGlwXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVHdpbiBHcmFrYXRhc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9HcmluZWVyQXNzYXVsdFJpZmxlL1R3aW5HcmFrYXRhc1wiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGVuIG9uZSBHcmFrYXRhIGlzbid0IGVub3VnaCwgYnJpbmcgYW5vdGhlciBmb3IgZXh0cmEgZmlyZXBvd2VyLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyOC41NzE0MjgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDksXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0d2luLWdyYWthdGFzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2Y4L0FrZ3Jha2F0YS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUwNzMxMTc0OTQxXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9Ud2luX0dyYWthdGFzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCAgaGl0c2NhbiBtdW5pdGlvbnMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDYwLjMsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVHdpbiBHcmVtbGluc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9HcmluZWVyUGlzdG9sL0dyaW5lZXJBa2ltYm9QaXN0b2xcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzcsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGVzaWduZWQgYXMgYSBwYWlyLCB0aGVzZSBHcmluZWVyIHNpZGVhcm1zIGZpcmUgcHJvamVjdGlsZXMgYXQgYSBzbG93ZXIgcmF0ZSBidXQgd2l0aCBncmVhdGVyIGZvcmNlIGFuZCBhY2N1cmFjeS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTYuNjY2NjY2LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0d2luLWdyZW1saW5zLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzYuOTlcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDY1LFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9kL2RiL0dyZW1saW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDMxNDE3MzIzNlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVHdpbl9HcmVtbGluc1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNhcHRhaW4gVm9yIGFuZCBMaWV1dGVuYW50IExlY2ggS3JpbCAoQm9zcyBEdW8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVHdpbiBLb2htYWtcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvUGlzdG9scy9Hcm5EV1VuaXF1ZXMvR3JuVHdpbktvaG1ha3NcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRG91YmxpbmcgdGhlaXIgdm9sbGV5IG9uIGVhY2ggc3VjY2Vzc2l2ZSBzaG90LCB0aGUgVHdpbiBLb2htYWtzIGRlY2ltYXRlIGZvZXMgaW4gc2Vjb25kcy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogNS43MTQyODU5LFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInR3aW4ta29obWFrLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgU2hvdGd1bnNcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjMwLjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZC9kZS9EdWFsS29obWFrLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjA1MDIxMjM0MTBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1R3aW5fS29obWFrXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiS2VsYSBEZSBUaGF5bSAoQm9zcylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIHNob3QsIG1vbnN0cm91cyBEUFMsICBoaXRzY2FuIG11bml0aW9ucy4gU3Bvb2wgdXAgaW5jcmVhc2VzIHBlbGxldHMgc2hvdCBhbmQgZmlyZSByYXRlIHRvIHRoZSBwb2ludCB3aGVyZSBzdGF0dXMgZWZmZWN0cyBhcmUgc3RpbGwgcmVsaWFibHkgcHJvYydkIGRlc3BpdGUgdXNpbmcgc2hvdGd1biBjYWxjcy4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4g4pyqXCIsXG4gICAgICBcImRtZ1wiOiBcIlJhdy9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1NC4yLFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlR3aW4gS3JvaGt1clwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9NZWxlZS9Hcm5FZ3lwdFN3ZC9EdWFsR3JuRWd5cHRTd2RXZWFwb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJhdHRsZWZpZWxkIGJ1dGNoZXJ5IGJlY29tZXMgYWxsIHRvbyBlYXN5IHdpdGggYSBLcm9oa3VyIGJsYWRlIGluIGVhY2ggaGFuZC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDI4MCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDYsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40OCxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInR3aW4ta3JvaGt1ci5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJEdWFsIFN3b3Jkc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjcwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMy8zNy9EdWFsR3JuRWd5cHRTd29yZHMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MTAyMzA4MDE0MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVHdpbl9Lcm9oa3VyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAzMi40NyxcbiAgICAgIFwidGllclJhbmtcIjogMyxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIGhpdCwgaW5zYW5lIGRwcywgbG93IGF0dGFjayBzcGVlZC4gTG93ZXIgY3JpdCBhbmQgc3BlZWQgaGFtcGVyIHNjYWxpbmcgaW4gZXh0cmVtZSBzaXR1YXRpb25zLiDinKpcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2FydmluZyBNYW50aXNcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJBbHQgY29tYm89IEJpdGluZyBNYW5kaWJsZXM7IC1EUFMsICtleGVjdXRpb25cIixcbiAgICAgIFwiY29tYm9cIjogXCJEaXJlIENvdXJ0c2hpcFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlR3aW4gUm9nZ2FcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvUGlzdG9scy9Hcm5RdWVlbkd1YXJkRHVhbFBpc3RvbC9Hcm5RdWVlbkd1YXJkRHVhbFBpc3RvbHNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNzA1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZXNlIHR3aW4gYmFycmVscyBvZiBkZXN0cnVjdGlvbiBhcmUgdGhlIHNpZ25hdHVyZSBwaXN0b2xzIG9mIHRoZSBLdXZhIEd1YXJkaWFucy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogOSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjI1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInR3aW4tcm9nZ2EucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiRHVhbCBTaG90Z3Vuc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNzA1LjBcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkhpdHNjYW5cIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYi9iMC9Hcm5RdWVlbkd1YXJkRHVhbFBpc3RvbHMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTExMzAwMDQyMFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVHdpbl9Sb2dnYVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiQ29udGVuZGVyXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTUsXG4gICAgICBcInRpZXJSYW5rXCI6IDIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVHdpbiBWaXBlcnNcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0FraW1iby9Ba2ltYm9WaXBlclBpc3RvbHNcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTcsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBWaXBlciBlcXVpcHBlZCBpbiBlYWNoIGhhbmQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE1LjM4NDYxNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNSxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjQxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInR3aW4tdmlwZXJzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTcuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9lL2VkL1ZpcGVyJTJDX2R1YWwucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDQyNjA3NTUzMFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVHdpbl9WaXBlcnNcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVHdpbiBWaXBlcnMgV3JhaXRoXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL1Bpc3RvbHMvV3JhaXRoVHdpblZpcGVycy9XcmFpdGhUd2luVmlwZXJzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE4LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB1bmlxdWVseSBzdHlsZWQgVHdpbiBWaXBlcnMgV3JhaXRoIGFyZSBhIHBvd2VyZnVsIHZhcmlhdGlvbiBvbiB0aGUgc3RhbmRhcmQgYWtpbWJvIG1hY2hpbmUtcGlzdG9scy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTEuMTExMTExLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuNDEsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidHdpbi12aXBlcnMtd3JhaXRoLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkR1YWwgUGlzdG9sc1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxOC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTAvREVXcmFpdGhUd2luVmlwZXJzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDAxMjQxNzQ2MDlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1R3aW5fVmlwZXJzX1dyYWl0aFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkludmFzaW9uc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIGhpdHNjYW4gbXVuaXRpb25zLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAxMTAuOSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJUeXNpc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvSW5mZXN0ZWQvUGlzdG9scy9JbmZlc3RlZERhcnRQaXN0b2wvSW5mZXN0ZWREYXJ0UGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEzMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgVHlzaXMgcGlzdG9sIHNwaXRzIG91dCBjYXVzdGljIGRhcnRzIHRoYXQgY29ycm9kZSB0aGVpciB2aWN0aW1zIGZyb20gd2l0aGluLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDksXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS41MSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ0eXNpcy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjgxLjAgY29ycm9zaXZlXCIsXG4gICAgICBcImZsaWdodFwiOiA3NSxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvYS9hYS9ERVR5c2lzLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDAxMTYxNTM1MDhcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1R5c2lzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCAgcHJvamVjdGlsZSBtdW5pdGlvbnMuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIOKcqlwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2My4yLFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0JlcnNlcmtlci9CZXJzZXJrZXJcIixcbiAgICAgIFwibmFtZVwiOiBcIlZhbGt5clwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvcmdlZCBpbiB0aGUgbGFicyBvZiB0aGUgWmFudWthIHByb2plY3QsIHRoZSBvcmlnaW5hbCBWYWxreXIgd2FzIHN1YmplY3QgdG8gY3J1ZWwgZXhwZXJpbWVudHMsIGxlYXZpbmcgaGVyIHNjYXJyZWQsIGFuZ3J5IGFuZCBmcmlnaHRlbmluZ2x5IGFkZXB0IGF0IGtpbGxpbmcuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4xLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJSZWNvdmVyIHxQRVJDRU5UfCUgZmFzdGVyIGZyb20gYmVpbmcga25vY2tlZCBkb3duLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidmFsa3lyLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm1hZHVyYWlcIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMzAyNTE4OCxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjExXCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4xLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8wLzBlL1ZhbGt5ck5ld0xvb2sucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTEyNDAyMzM0NlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmFsa3lyXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQWxhZCBWIChCb3NzKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL0JlcnNlcmtlci9WYWxreXJQcmltZVwiLFxuICAgICAgXCJuYW1lXCI6IFwiVmFsa3lyIFByaW1lXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBwcm91ZCBmaWdodGVyIGVtZXJnZXMgdW5zY2FycmVkIGJ5IHRpbWUgb3IgbWFsaWNlLiBGZWF0dXJpbmcgYWx0ZXJlZCBtb2QgcG9sYXJpdGllcyBhbGxvdyBmb3IgZ3JlYXRlciBjdXN0b21pemF0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDAsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiUmVjb3ZlciB8UEVSQ0VOVHwlIGZhc3RlciBmcm9tIGJlaW5nIGtub2NrZWQgZG93bi5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZhbGt5ci1wcmltZS5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiYXVyYVwiOiBcIm1hZHVyYWlcIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogNDYwMzQ0MyxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjE5LjAuN1wiLFxuICAgICAgXCJzZXhcIjogXCJGZW1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEuMSxcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy8xLzE0L1ZhbGt5clByaW1lUHJvZmlsZVBpY3R1cmUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDMxNjE2NTMyMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmFsa3lyX1ByaW1lXCIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNiAxMSAyMlwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE4IDA5IDI1XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTggMDkgMjVcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVmFzdG9cIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbC9SZXZvbHZlclBpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiA1OCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTdGVhZHkgYW5kIHJlbGlhYmxlLCB0aGUgVmFzdG8gcmV2b2x2ZXIgY29tYmluZXMgc3BlZWQgYW5kIHBvd2VyIGZvciBhIGNsYXNzaWMgZ3Vuc2xpbmdlciBmZWVsLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZhc3RvLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlBpc3RvbFwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNTguMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzZiL1Zhc3RvLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxMzA4MDMxMDQzNDBcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1Zhc3RvXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVmFzdG8gUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL1Bpc3RvbHMvUHJpbWVWYXN0by9QcmltZVZhc3RvUGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDY2LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgZWxlZ2FudCByYXBpZC1maXJlIHJldm9sdmVyIGlzIHRoZSBlbWJvZGltZW50IG9mIHN1cGVyaW9yIE9yb2tpbiBjcmFmdHNtYW5zaGlwLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxNixcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTAsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4zNSxcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ2YXN0by1wcmltZS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiNjYuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2YvZjYvUHJpbWVWYXN0by5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTQxMjE3MDMwOTQ3XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9WYXN0b19QcmltZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTQgMTIgMTZcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNiAxMSAyMlwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE2IDExIDIyXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCAgaGl0c2NhbiBtdW5pdGlvbnMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDc3LjcsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9UcmFwcGVyL1RyYXBwZXJcIixcbiAgICAgIFwibmFtZVwiOiBcIlZhdWJhblwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBoaWdobHkgdGFjdGljYWwgVmF1YmFuIHVzZXMgaGlzIHBvd2VycyB0byBjcmVhdGUgZGVhZGx5IHRyYXBzIHRoYXQgY2FuIHphcCwgaW1wcmlzb24gYW5kIGRpbWVuc2lvbmFsbHkgY3J1c2ggZW5lbWllcy5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJEZWFsIHxEQU1BR0V8JSBFeHRyYSBEYW1hZ2UgdG8gaW5jYXBhY2l0YXRlZCBlbmVtaWVzLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidmF1YmFuLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm5hcmFtb25cIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMzk0NjU1MCxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjcuMTFcIixcbiAgICAgIFwic2V4XCI6IFwiTWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMi8yMy9WYXViYW5OZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjMzNTJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1ZhdWJhblwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk5pZ2h0d2F2ZVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL1RyYXBwZXIvVHJhcHBlclByaW1lXCIsXG4gICAgICBcIm5hbWVcIjogXCJWYXViYW4gUHJpbWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUcmFuc2Zvcm0gdGhlIGJhdHRsZWZpZWxkIGludG8gYSB3ZWFwb24gd2l0aCB0aGlzIGdpbGRlZCB0YWN0aWNpYW4uIEZlYXR1cmVzIHVuaXF1ZSBtb2QgcG9sYXJpdGllcyBmb3IgZXh0ZW5kZWQgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJEZWFsIHxEQU1BR0V8JSBFeHRyYSBEYW1hZ2UgdG8gaW5jYXBhY2l0YXRlZCBlbmVtaWVzLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidmF1YmFuLXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJhdXJhXCI6IFwibmFyYW1vblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAxNTgzMTUwLFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTguMTJcIixcbiAgICAgIFwic2V4XCI6IFwiTWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMSxcbiAgICAgIFwidmF1bHRlZFwiOiB0cnVlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzY5L1ZhdWJhblByaW1lTmV3TG9vay5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwNTI4MDgyMzE4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9WYXViYW5fUHJpbWVcIixcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE2IDA1IDE3XCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIjIwMTggMDMgMjBcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAxOCAwMyAyMFwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljcyAoVmF1bHRlZClcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJWYXlrb3IgSGVrXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9TeW5kaWNhdGVzL1N0ZWVsTWVyaWRpYW4vTG9uZ0d1bnMvU01IZWtcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTI1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvcmdlZCBpbiB0aGUgZmlyZXMgb2YgcmViZWwgc3RydWdnbGUsIHRoaXMgc2hvdGd1biBpcyBhIGZvcmNlIGZvciBsaWJlcmF0aW9uLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA5LjA5MDkwOSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTIsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC45NDk5OTk5OSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidmF5a29yLWhlay5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTaG90Z3VuXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjUyNS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2QvZGYvU3luZGljYXRlU01IZWsucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDkwMjIxNTEzNVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmF5a29yX0hla1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlN0ZWVsIE1lcmlkaWFuIChHZW5lcmFsKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGhpZ2ggZGFtYWdlIHBlciBzaG90LCBtb25zdHJvdXMgRFBTLCBoaXRzY2FuIG11bml0aW9ucy4gSnVzdGljZSAoQmxhc3QsIEhlYWx0aCwgQXJtb3IpIGVmZmVjdHMgY2FuIGJlIHVzZWZ1bC4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXRpY2FsXCIsXG4gICAgICBcInJhbmtcIjogNTMuOCxcbiAgICAgIFwidGllclJhbmtcIjogMixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJWYXlrb3IgTWFyZWxva1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU3luZGljYXRlcy9TdGVlbE1lcmlkaWFuL1Bpc3RvbHMvU01NYXJlbG9rXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE2MCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUYWtlbiBmcm9tIGRlZmVhdGVkIEdyaW5lZXIgY29tbWFuZGVycyBhbmQgcmVidWlsdCB0byBpbXByb3ZlIGNvbWJhdCBlZmZpY2llbmN5IGFuZCByZWxpYWJpbGl0eS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODk5OTk5OTgsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidmF5a29yLW1hcmVsb2sucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImRhbWFnZVwiOiBcIjE2MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTEvU01NYXJlbG9rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjcxODMxMDFcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1ZheWtvcl9NYXJlbG9rXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiU3RlZWwgTWVyaWRpYW4gKEdlbmVyYWwpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwibm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsICBoaXRzY2FuIG11bml0aW9ucy4gSnVzdGljZSAoQmxhc3QsIGhlYWx0aCwgYXJtb3IpIGNhbiBiZSBoZWxwZnVsIGF0IHRpbWVzLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA4Ni41LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlZheWtvciBTeWRvblwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvU3luZGljYXRlcy9TdGVlbE1lcmlkaWFuL01lbGVlL1NNU3lkb25cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogODUsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkp1c3RpY2UgYmxpbmRzLiBCbG9jayBoaXRzIHRvIGNoYXJnZSBhIFJhZGlhbCBCbGluZCwgd2hlbiBmdWxseSBjaGFyZ2VkIHRvZ2dsZSBjaGFubmVsaW5nIHRvIHVubGVhc2ggaXQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNDIsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODM5OTk5OTcsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ2YXlrb3Itc3lkb24ucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUG9sZWFybVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiODUuMVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83LzdhL1NNU3lkb24ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MDkxNjAzMDI0NVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmF5a29yX1N5ZG9uXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiU3RlZWwgTWVyaWRpYW4gKEdlbmVyYWwpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlZpYWJsZVwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ5LjcyLFxuICAgICAgXCJ0aWVyUmFua1wiOiAxLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIkxvdyBkYW1hZ2UgcGVyIGhpdCwgbW9kZXJhdGUgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gU3VmZmVycyBmcm9tIHJlbGF0aXZlbHkgcG9vciBjb25zaXN0ZW5jeS4gQmxvY2tpbmcgYWRkcyB1cCB0byAxNSBzdGFja3MsIHdoaWNoIHdpbGwgZW1pdCBSYWRpYWwgQmxpbmQgaW4gYSAxNW0gcmFkaXVzIGZvciA1cyB1cG9uIHJlYWNoaW5nIHRoZSAxNXRoIHN0YWNrLiBBbHNvIGFkZHMgNTAlIHJlc2lzdGFuY2UgdG8ga25vY2tkb3duL2tub2NrYmFjay4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIlR3aXJsaW5nIFNwaXJlXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiXCIsXG4gICAgICBcImNvbWJvXCI6IFwiVmF1bHRpbmcgQXBleFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlZlY3Rpc1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUmlmbGUvVGVubm9TbmlwZXJSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyMjUsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBjbGFzc2ljIFRlbm5vIHNuaXBlciByaWZsZSwgdGhlIFZlY3RpcyBpcyBpZGVhbCBmb3IgcmFuZ2VkIHRha2Vkb3ducy5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTMuMzMzMzMzLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAyLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuODAwMDAwMDEsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZlY3Rpcy5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJTbmlwZXIgUmlmbGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjIyNS4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzgvODAvREVWZWN0aXMucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTEyNTIzMTEyMlwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmVjdGlzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlZlY3RpcyBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTG9uZ0d1bnMvUHJpbWVWZWN0aXMvUHJpbWVWZWN0aXNSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiT25jZSB0aG91Z2h0IGRlc3Ryb3llZCwgdGhlIG5ld2x5IHVuY292ZXJlZCBWZWN0aXMgUHJpbWUgcmV2aXZlcyBUZW5ubyBtYXJ0aWFsIHRyYWRpdGlvbnMuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEzLjMzMzMzMyxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMC44MDAwMDAwMSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidmVjdGlzLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNuaXBlciBSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzNTAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzYvNjgvVmVjdGlzUHJpbWUucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE2MTEyNTIzMTIzOVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmVjdGlzX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDIsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNSAwNyAwN1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE3IDA1IDMwXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTcgMDUgMzBcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIlRvcFwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlZlcnkgaGlnaCBkYW1hZ2UgcGVyIHNob3QsIGluc2FuZSBkcHMsIGhpdHNjYW4gbXVuaXRpb25zLiBTbmlwZXIgY29tYm8gY291bnRlciByYW1wdXAgaXMgc2xvdyAobWluLiA1KSwgem9vbWluZyBpbiBnaXZlcyBhZGRpdGl2ZSBib251cyB0byBoZWFkc2hvdHMgKDM1JS81NSUpLiBcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0MS43LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlZlbGR0XCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9UblJldm9sdmVyUmlmbGUvVG5SZXZvbHZlclJpZmxlR3VuXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDkwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlByZWNpc2UgY2FsaWJyYXRpb24sIHJhcGlkIHRyaWdnZXItcHVsbCBhbmQgYSBzdGVhZHkgaGFuZCBhbGwgY29tYmluZSB0byBicmluZyBkb3duIHRoZSBoYXJkaWVzdCBwcmV5IG9uIHR3byBsZWdzIG9yIGZvdXIuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDMyLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZlbGR0LnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI5MC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2IvYjUvVmVsZHQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE4MDQxNzE5MjEzN1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmVsZHRcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNCxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwibm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgc2hvdCwgcG9vciBEUFMsIGhpdHNjYW4gbXVuaXRpb25zLiBBbHQtZmlyZSB0b2dnbGVzIGhpZ2hlciBtYWduaWZpY2F0aW9uIG9uIHpvb20uIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDc0LjMsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVmVsb2NpdHVzXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9BcmNod2luZy9QcmltYXJ5L1JhaWxndW4vQXJjaFJhaWxndW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogMTgwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkNoYXJnZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZW4gZnVsbHkgY2hhcmdlZCwgdGhlIG1hZ25ldGl6ZWQgYmFycmVsIG9mIHRoZSBWZWxvY2l0dXMgYWNjZWxlcmF0ZXMgYSBtZXRhbCBzbHVnIHRvIHRyZW1lbmRvdXMgc3BlZWRzLCBwaWVyY2luZyBodWxscyBhbmQgb2JsaXRlcmF0aW5nIGFybW9yLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyOC41NzE0MjgsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4wNSxcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidmVsb2NpdHVzLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMjAwLjAgbWFnbmV0aWNcIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwic3RhdHVzQ2hhbmNlXCI6IDI1LFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9lL2U1L0FyY2hSYWlsZ3VuLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMTMwMTExMDVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1ZlbG9jaXR1c1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJ0eXBlXCI6IFwiQXJjaHdpbmcgR3VuXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlZlbmthXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9DbGF3cy9UZW5ub0NsYXdzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDM3LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVdGlsaXppbmcgYSBuZXcgZmlnaHRpbmcgc3RhbmNlLCB0aGlzIFRlbm5vIHdlYXBvbiB0dXJucyBmaXN0cyBpbnRvIGNsYXdzIGFuZCBlbmVtaWVzIGludG8gbWVzc3kgcGlsZXMgb2YgbWVhdCBhbmQgc2NyYXAgbWV0YWwuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxMTEsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAzLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZlbmthLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkNsYXdzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzcuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9lL2U1L1Rlbm5vQ2xhd3MucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MDYyNjE4MjAwOFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmVua2FcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogMSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVmVua2EgUHJpbWVcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1ByaW1lVmVuS2EvUHJpbWVWZW5rYUNsYXdzXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDU1LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHbGVhbWluZyBibGFkZXMgb2Ygd2hpdGUgZHJhdyBibG9vZCBvZiB0aGUgZGVlcGVzdCByZWQuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAxNjUsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA4LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZlbmthLXByaW1lLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkNsYXdzXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCI1NS4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvMS8xMi9WZW5rYVByaW1lLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNjExMTIyMzQ5MDNcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1ZlbmthX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDEsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxNiAxMSAyMlwiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCIyMDE4IDA5IDI1XCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMTggMDkgMjVcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3MgKFZhdWx0ZWQpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIkNvbnRlbmRlclwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDQ1Ljg1LFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJ3ZWFwb25Ob3Rlc1wiOiBcIlZlcnkgbG93IGRhbWFnZSBwZXIgaGl0LCBtb25zdHJvdXMgRFBTLCBoaWdoIGF0dGFjayBzcGVlZC4gSGFzIDUwJSBtb3JlIG1lbGVlIGNvbWJvIG11bHRpcGxpZXI7IGV4Y2VsbGVudCBmb3IgQmxvb2QgUnVzaCBhbmQgV2VlcGluZyBXb3VuZHMuIFN0YW5jZSBoYXMgdW51c3VhbCAyeCBtdWx0aXBsaWVyIG9uIHNsaWRlLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiTWFsaWNpb3VzIFJhcHRvclwiLFxuICAgICAgXCJzdGFuY2VOb3Rlc1wiOiBcIlwiLFxuICAgICAgXCJjb21ib1wiOiBcIlZlbmdpbmcgVGhyYXNoXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVmVyaXR1eFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vQXJjaHdpbmcvTWVsZWUvQXJjaHN3b3JkL0FyY2hTd29yZFdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAzMDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlaWdodGxlc3Mgc3BhY2UgdHVybnMgdGhpcyBpbXBvc3NpYmx5IG1hc3NpdmUgc3dvcmQgaW50byBhbiBhZ2lsZSBpbnN0cnVtZW50IG9mIGRlc3RydWN0aW9uLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMzAwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ2ZXJpdHV4LnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMzAwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZC9kYy9BcmNoU3dvcmQucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE0MTAyNDE0MzYxM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmVyaXR1eFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJ0eXBlXCI6IFwiQXJjaHdpbmcgTWVsZWVcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUaGUgQXJjaHdpbmcgKFF1ZXN0KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlZpcGVyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL0dyaW5lZXJQaXN0b2wvR3JpbmVlckxpZ2h0UGlzdG9sXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDE3LFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgZnVsbC1hdXRvIHBpc3RvbCBrbm93biBhcyB0aGUgbW9zdCBjb21wYWN0IGFuZCBsaWdodHdlaWdodCB3ZWFwb24gb2YgdGhlIEdyaW5lZXIgYXJzZW5hbC4gVGhvdWdoIGl0IGhhcyBhIHNtYWxsIE1hZ2F6aW5lIENhcGFjaXR5LCB0aGUgVmlwZXIgaGFzIGEgdmVyeSBoaWdoIEZpcmUgUmF0ZSBhbmQgdWx0cmEtZmFzdCByZWxvYWQgdGltZXMgdGhhbmtzIHRvIGEgc2ltcGxpZmllZCBtYWdhemluZSBkZXNpZ24uXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDE1LjM4NDYxNSxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJpdGVtQ291bnRcIjogMSxcbiAgICAgIFwicGFyZW50c1wiOiBbXG4gICAgICAgIFwiSHlzdHJpeFwiLFxuICAgICAgICBcIlR3aW4gVmlwZXJzXCJcbiAgICAgIF0sXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidmlwZXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNy4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzkvOTkvVmlwZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDEzMDQyNjA3NDc1MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVmlwZXJcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJWaXBlciBXcmFpdGhcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvUGlzdG9scy9XcmFpdGhTaW5nbGVWaXBlci9XcmFpdGhTaW5nbGVWaXBlclwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxOCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdW5pcXVlbHkgc3R5bGVkIFZpcGVyIFdyYWl0aCBpcyBhIHBvd2VyZnVsIHZhcmlhdGlvbiBvbiB0aGUgc3RhbmRhcmQgbWFjaGluZS1waXN0b2wuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDI4LjU3MTQyOCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLjM1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2Vjb25kYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZpcGVyLXdyYWl0aC5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTguMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy83LzcyL1ZpcGVyV3JhaXRoLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODAxMjExNDQ4MDlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1ZpcGVyX1dyYWl0aFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA1LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkJhcm8gS2knVGVlciAoUmVsYXkpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCAgaGl0c2NhbiBtdW5pdGlvbnMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDExMC4xLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlZvbG51c1wiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvSGFtbWVyL0dsYXNzSGFtbWVyL0dsYXNzSGFtbWVyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGVhciBhbmQgbWFpbSB3aXRoIHRoaXMgYWdpbGUsIGxpZ2h0d2VpZ2h0IGdsYXNzIGhhbW1lci4gV2hlbiBHYXJhJ3Mgd2llbGRzIGhlciBzaWduYXR1cmUgbWVsZWUgd2VhcG9uLCBpdCBnYWlucyBhZGRpdGlvbmFsIFNsYW0gUmFkaWFsIERhbWFnZS5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDIwMCxcbiAgICAgIFwic2xvdFwiOiA1LFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yLFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwidm9sbnVzLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkhhbW1lclwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiY2hhbm5lbGluZ1wiOiAxLjUsXG4gICAgICBcImRhbWFnZVwiOiBcIjEwMC4wXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2UvZTgvR2xhc3NIYW1tZXIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE3MTAxNzIyNDI0MVwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVm9sbnVzXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1Mi4wMSxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgdmVyeSBoaWdoIGF0dGFjayBzcGVlZC4gXCIsXG4gICAgICBcInN0YW5jZVwiOiBcIkNydXNoaW5nIFJ1aW5cIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJPbmx5IHVzZSBSYWdpbmcgV2hpcmx3aW5kIHRvIHByb2MgSW1wYWN0IG9yIHRoZSBzbGFtIHdpbGwgcmFnZG9sbFwiLFxuICAgICAgXCJjb21ib1wiOiBcIlRpZGFsIEZvcmNlICYgUmFnaW5nIFdoaXJsd2luZFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL1ZvbHQvVm9sdFwiLFxuICAgICAgXCJuYW1lXCI6IFwiVm9sdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlZvbHQgY2FuIGNyZWF0ZSBhbmQgaGFybmVzcyBlbGVjdHJpY2FsIGVsZW1lbnRzLiBUaGlzIGlzIGEgaGlnaC1kYW1hZ2UgV2FyZnJhbWUgcGVyZmVjdCBmb3IgcGxheWVycyB3aG8gd2FudCBhIHBvdGVudCBhbHRlcm5hdGl2ZSB0byBndW4tcGxheS5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJHcm91bmRlZCBtb3ZlbWVudCBnZW5lcmF0ZXMgYW4gZWxlY3RyaWNhbCBjaGFyZ2UgYnVpbGRpbmcgdXAgfERBTUFHRXwgRGFtYWdlIHBlciBtZXRlciB0aGF0IGlzIHVubGVhc2hlZCB3aXRoIHRoZSBuZXh0IGF0dGFjay5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZvbHQucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibWFkdXJhaVwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAzMzU0NjY0LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiVmFuaWxsYVwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy80LzRkL1ZvbHROZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjMzNTlcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1ZvbHRcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvVm9sdC9Wb2x0UHJpbWVcIixcbiAgICAgIFwibmFtZVwiOiBcIlZvbHQgUHJpbWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGdsb3Jpb3VzIHdhcnJpb3IgZnJvbSB0aGUgcGFzdCwgVm9sdCBQcmltZSBmZWF0dXJlcyB0aGUgc2FtZSBhYmlsaXRpZXMgYXMgVm9sdCBidXQgd2l0aCB1bmlxdWUgbW9kIHBvbGFyaXRpZXMgZm9yIGdyZWF0ZXIgY3VzdG9taXphdGlvbi5cIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJHcm91bmRlZCBtb3ZlbWVudCBnZW5lcmF0ZXMgYW4gZWxlY3RyaWNhbCBjaGFyZ2UgYnVpbGRpbmcgdXAgfERBTUFHRXwgRGFtYWdlIHBlciBtZXRlciB0aGF0IGlzIHVubGVhc2hlZCB3aXRoIHRoZSBuZXh0IGF0dGFjay5cIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZvbHQtcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDE0MDA0ODQ0LFxuICAgICAgXCJpbnRyb2R1Y2VkXCI6IFwiMTYuMVwiLFxuICAgICAgXCJzZXhcIjogXCJNYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLFxuICAgICAgXCJ2YXVsdGVkXCI6IHRydWUsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2IvYmQvVm9sdFByaW1lTGFyZ2UucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDMyNDIyNDg0MFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVm9sdF9QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTUgMDMgMjRcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNyAwMiAyOFwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE3IDAyIDI4XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlZ1bGNheFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1R5cGVzL0ZyaWVuZGx5L1BldHMvTW9hUGV0cy9Nb2FQZXRDb21wb25lbnRzL1RoZXJtb2Nvck1vYVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQ2hhcmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ2hhcmdlcyB1cCBhIHBvd2VyZnVsIGJsYXN0IG9mIHVsdHJhLWhlYXRlZCBwbGFzbWEuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogdHJ1ZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxNCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAxLFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZ1bGNheC5wbmdcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiAzNSxcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIkRpc2NoYXJnZVwiLFxuICAgICAgXCJzdGF0dXNDaGFuY2VcIjogMTAsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzcvN2YvVnVsY2F4LnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODExMTAyMjA2MjVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1Z1bGNheFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkxlZ3MgKEZvcnR1bmEpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVnVsa2FyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9HcmluZWVyL0xvbmdHdW5zL0dyaW5lZXJTbmlwZXJSaWZsZS9Hcm5TbmlwZXJSaWZsZVwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAyMjQuOTk5OTgsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQnVpbHQgYnkgdGhlIEdyaW5lZXIgZm9yIHRoZWlyIGVsaXRlIHRyb29wZXJzLCB0aGUgVnVsa2FyIGlzIGEgZGV2YXN0YXRpbmcgZGlzdGFuY2Ugd2VhcG9uLiBJbiB0aGUgcmlnaHQgaGFuZHMgaXQgaXMgY2FwYWJsZSBvZiB0YWtpbmcgZG93biB0YXJnZXRzIGxvbmcgYmVmb3JlIHRoZXkgZ2V0IGludG8gYXR0YWNrIHJhbmdlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMy4zMzMzMzMsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDMsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ2dWxrYXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiU25pcGVyIFJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyMjUuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy84LzhjL1Z1bGthci5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcxMTEwMjIxNjIyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9WdWxrYXJcIixcbiAgICAgIFwiZGlzcG9zaXRpb25cIjogNSxcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJNYXJrZXQgKE9yYml0ZXIpXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiVnVsa2FyIFdyYWl0aFwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvR3JpbmVlci9Mb25nR3Vucy9HcmluZWVyU25pcGVyUmlmbGUvVnVsa2FyV3JhaXRoXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDI3MyxcbiAgICAgIFwidHJpZ2dlclwiOiBcIlNlbWlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGJsb29kLXJlZCB2YXJpYW50IG9mIHRoaXMgZGV2YXN0YXRpbmcgc25pcGVyIHJpZmxlLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMy4zMzMzMzMsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDcsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS40LFxuICAgICAgXCJ0eXBlXCI6IFwiUHJpbWFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ2dWxrYXItd3JhaXRoLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlNuaXBlciBSaWZsZVwiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIyNzMuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9iL2IzL1Z1bGthcldyYWl0aC5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMjA5MTUwMjIyXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9WdWxrYXJfV3JhaXRoXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDUsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiQmFybyBLaSdUZWVyIChSZWxheSlcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiB0cnVlLFxuICAgICAgXCJ0aWVyXCI6IFwiVmlhYmxlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBoaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9kZXJhdGUgRFBTLCBoaXRzY2FuIG11bml0aW9ucy4gU25pcGVyIGNvbWJvIGNvdW50ZXIgcmFtcHVwIGlzIHZlcnkgZ29vZCAobWluLiAyKSwgem9vbWluZyBpbiBnaXZlcyBhZGRpdGl2ZSBib251cyB0byBoZWFkc2hvdHMgKDM1JS81NSUvNzAlKS4gXCIsXG4gICAgICBcImRtZ1wiOiBcIkNyaXRpY2FsXCIsXG4gICAgICBcInJhbmtcIjogNjIuMixcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJWdWxrbG9rXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvU2VudGluZWxzL1NlbnRpbmVsV2VhcG9ucy9TZW50RWxlY1JhaWxndW5cIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogODUsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3RhbmRhcmQgaXNzdWUgc25pcGVyIHJpZmxlIGZvciBEaXJpZ2EuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDAsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogdHJ1ZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjQ1LFxuICAgICAgXCJ0eXBlXCI6IFwiU2VudGluZWwgV2VhcG9uXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInZ1bGtsb2sucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCI4NS4wIGVsZWN0cmljaXR5XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzMvMzQvU2VudGluZWxFbGVjdHJpY1JhaWxndW4ucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE1MDkwMjIxNTEzM1wiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvVnVsa2xva1wiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkNvbWVzIHdpdGggQ29tcGFuaW9uXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiV2FyXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9NZWxlZS9Td29yZHMvU3RhbGtlclR3by9TdGFsa2VyVHdvR3JlYXRTd29yZFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxNDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBTdGFsa2VyJ3Mgc3dvcmQgYXMgYmVzdG93ZWQgb24gaGltIGJ5IHRoZSBTZW50aWVudCBIdW5ob3cuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyODAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAxMCxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjUsXG4gICAgICBcInR5cGVcIjogXCJNZWxlZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ3YXIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiSGVhdnkgQmxhZGVcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImNoYW5uZWxpbmdcIjogMS41LFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNDAuMFwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9mL2ZkL1N0YWxrZXJUd29HcmVhdFN3b3JkLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNTEyMDQwMTMzMDdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1dhclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAxLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRoZSBTZWNvbmQgRHJlYW0gKFF1ZXN0KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA1My43NixcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgaGl0LCBtb2RlcmF0ZSBEUFMsIGxvdyBhdHRhY2sgc3BlZWQuIFdoYXQgaXMgaXQgZ29vZCBmb3I/IFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDbGVhdmluZyBXaGlybHdpbmRcIixcbiAgICAgIFwic3RhbmNlTm90ZXNcIjogXCJcIixcbiAgICAgIFwiY29tYm9cIjogXCJCcm9rZW4gQnVsbFwiLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL1dpc3AvV2lzcFwiLFxuICAgICAgXCJuYW1lXCI6IFwiV2lzcFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVsZW1lbnRhbCBhbmQgZWx1c2l2ZSwgV2lzcCBpcyBib3RoIGd1YXJkaWFuIGFuZCBnYXRld2F5LiBcIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiAwLFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjIsXG4gICAgICBcInBhc3NpdmVEZXNjcmlwdGlvblwiOiBcIkZsb3dpbmcgYmV0d2VlbiBkaW1lbnNpb25zIFdpc3AgYmVjb21lcyBpbnZpc2libGUgdG8gZW5lbWllcyB3aGlsZSBpbiB0aGUgYWlyLiBcIixcbiAgICAgIFwidHlwZVwiOiBcIldhcmZyYW1lXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcIndpc3AucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwibmFyYW1vblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiBmYWxzZSxcbiAgICAgIFwiY29sb3JcIjogMzk0NzA3NCxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjI1LjBcIixcbiAgICAgIFwic2V4XCI6IFwiRmVtYWxlXCIsXG4gICAgICBcInNwcmludFwiOiAxLjIsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzL2EvYTMvV2lzcEljb24yNzIucG5nL3JldmlzaW9uL2xhdGVzdD9jYj0yMDE5MDUxODAwMDgxNFwiLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvV2lzcFwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJvcGFsb2x5c3RcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJXb2xmIFNsZWRnZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTWVsZWUvSGFtbWVyL1Rocm93aW5nSGFtbWVyXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEzMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIk1lbGVlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHNpZ25hdHVyZSB3ZWFwb24gb2YgdGhlIG9ubHkgbHVuYXRpYyBmZWFyc29tZSBlbm91Z2ggdG8gYnVzdCBvdXQgb2YgdGhlIFNhdHVybiBTaXggTWF4LVBlbi4gT25jZSBsb29zZWQgdGhpcyBmb3JtaWRhYmxlIHRocm93aW5nIGhhbW1lciBhbHdheXMgZmluZHMgaXRzIHdheSBob21lLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAxMDAsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMjYwLFxuICAgICAgXCJzbG90XCI6IDUsXG4gICAgICBcIm5vaXNlXCI6IFwiQWxhcm1pbmdcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogNyxcbiAgICAgIFwib21lZ2FBdHRlbnVhdGlvblwiOiAwLjk1OTk5OTk4LFxuICAgICAgXCJ0eXBlXCI6IFwiTWVsZWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwid29sZi1zbGVkZ2UucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiSGFtbWVyXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTMwLjBcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1dvbGZfU2xlZGdlXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDMsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiV29sZiBvZiBTYXR1cm4gU2l4XCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogdHJ1ZSxcbiAgICAgIFwidGllclwiOiBcIk5lZWQgYnVmZnNcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA2NC44NixcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgaGl0LCBwb29yIERQUywgaGlnaCBhdHRhY2sgc3BlZWQuIFwiLFxuICAgICAgXCJzdGFuY2VcIjogXCJDcnVzaGluZyBSdWluXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiT25seSB1c2UgUmFnaW5nIFdoaXJsd2luZCB0byBwcm9jIEltcGFjdCBvciB0aGUgc2xhbSB3aWxsIHJhZ2RvbGxcIixcbiAgICAgIFwiY29tYm9cIjogXCJUaWRhbCBGb3JjZSAmIFJhZ2luZyBXaGlybHdpbmRcIixcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9Nb25rZXlLaW5nL01vbmtleUtpbmdcIixcbiAgICAgIFwibmFtZVwiOiBcIld1a29uZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgcHJpbWFsIHdhcnJpb3Igd2l0aCB0aGUgaGVhcnQgb2YgYSB0cmlja3N0ZXIuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiQWZ0ZXIgdGFraW5nIGZhdGFsIGRhbWFnZSBXdWtvbmcgYXV0b21hdGljYWxseSB1c2VzIG9uZSBvZiBoaXMgbWFzdGVyZWQgc3Vydml2YWwgdGVjaG5pcXVlcy4gVGhlc2UgdGVjaG5pcXVlcyBjYW4gb25seSBiZSBpbnZva2VkIHRocmVlIHRpbWVzIHBlciBtaXNzaW9uLlwiLFxuICAgICAgXCJ0eXBlXCI6IFwiV2FyZnJhbWVcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwid3Vrb25nLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwiYXVyYVwiOiBcIm1hZHVyYWlcIixcbiAgICAgIFwiY29uY2xhdmVcIjogdHJ1ZSxcbiAgICAgIFwiY29sb3JcIjogMzgxNzgwMixcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjE3LjEyXCIsXG4gICAgICBcInNleFwiOiBcIk1hbGVcIixcbiAgICAgIFwic3ByaW50XCI6IDEsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzkvOTEvV3Vrb25nTmV3SWNvbi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTUxMTI1MjA1NTA4XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9XdWtvbmdcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJUZW5ubyBMYWIgKERvam8pXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1Bvd2Vyc3VpdHMvTW9ua2V5S2luZy9XdWtvbmdQcmltZVwiLFxuICAgICAgXCJuYW1lXCI6IFwiV3Vrb25nIFByaW1lXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHRyaWNrc3Rlci13YXJyaW9yIGFzY2VuZHMgdG8gaGlzIHVsdGltYXRlIGluY2FybmF0aW9uLiBcIixcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA1LFxuICAgICAgXCJzcHJpbnRTcGVlZFwiOiAxLjA1LFxuICAgICAgXCJwYXNzaXZlRGVzY3JpcHRpb25cIjogXCJBZnRlciB0YWtpbmcgZmF0YWwgZGFtYWdlIFd1a29uZyBhdXRvbWF0aWNhbGx5IHVzZXMgb25lIG9mIGhpcyBtYXN0ZXJlZCBzdXJ2aXZhbCB0ZWNobmlxdWVzLiBUaGVzZSB0ZWNobmlxdWVzIGNhbiBvbmx5IGJlIGludm9rZWQgdGhyZWUgdGltZXMgcGVyIG1pc3Npb24uXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ3dWtvbmctcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJtYWR1cmFpXCIsXG4gICAgICBcImNvbG9yXCI6IDAsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIyNS4zLjBcIixcbiAgICAgIFwic2V4XCI6IFwiTWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4wNSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1d1a29uZ19QcmltZVwiLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTkgMDcgMDdcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwibi9hXCIsXG4gICAgICBcImVzdGltYXRlZFZhdWx0RGF0ZVwiOiBcIjIwMjEgMDUgMDJcIixcbiAgICAgIFwiYWNxdWlzaXRpb25cIjogXCJSZWxpY3NcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvVHlwZXMvU2VudGluZWxzL1NlbnRpbmVsUG93ZXJzdWl0cy9XeXJtUG93ZXJTdWl0XCIsXG4gICAgICBcIm5hbWVcIjogXCJXeXJtXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2l0aCAnQXNzYXVsdCBNb2RlJyBhbmQgJ0Nyb3dkIERpc3BlcnNpb24nIGFzIGRlZmF1bHQgUHJlY2VwdHMsIFd5cm0gaXMgYSBoaWdobHkgb2ZmZW5zaXZlIFNlbnRpbmVsLiBXeXJtIGFsc28gY29tZXMgd2l0aCBhIGxhc2VyIHJpZmxlLk5vdGU6IFRoaXMgaXRlbSByZXF1aXJlcyB0d28gb3BlbiBzbG90cy5cIixcbiAgICAgIFwidHlwZVwiOiBcIlNlbnRpbmVsXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInd5cm0ucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVVybFwiOiBcImh0dHA6Ly93YXJmcmFtZS53aWtpYS5jb20vd2lraS9XeXJtXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9UeXBlcy9TZW50aW5lbHMvU2VudGluZWxQb3dlcnN1aXRzL1ByaW1lV3lybVBvd2VyU3VpdFwiLFxuICAgICAgXCJuYW1lXCI6IFwiV3lybSBQcmltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJvdGggYm9keWd1YXJkIGFuZCBzdGF0dXMgc3ltYm9sLCB0aGUgV3lybSBQcmltZSBTZW50aW5lbCB3YXMgdGhlIGxhc3QgbGluZSBvZiBkZWZlbnNlIGZvciBoaWdoIHJhbmtpbmcgVGVubm8gaW4gdGhlIE9yb2tpbiBFcmEuXCIsXG4gICAgICBcInR5cGVcIjogXCJTZW50aW5lbFwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ3eXJtLXByaW1lLnBuZ1wiLFxuICAgICAgXCJ0cmFkYWJsZVwiOiB0cnVlLFxuICAgICAgXCJyZWxlYXNlRGF0ZVwiOiBcIjIwMTQgMDYgMTFcIixcbiAgICAgIFwidmF1bHREYXRlXCI6IFwiMjAxNiAwNSAxN1wiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDE2IDA1IDE3XCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzIChWYXVsdGVkKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInZhdWx0ZWRcIjogdHJ1ZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvV3lybV9QcmltZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJaYWt0aVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vUGlzdG9scy9Ubkd1YW5kb1Bpc3RvbC9Ubkd1YW5kb1Bpc3RvbEd1blwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJTZW1pXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRmlyZXMgcmF6b3Itc2hhcnAgZGFydHMgdGhhdCBhbmNob3IgdGhlbXNlbHZlcyBpbiB0aGVpciB0YXJnZXQgYmVmb3JlIGVydXB0aW5nIGluIGEgcGx1bWUgb2YgdG94aWMgZ2FzLlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAyNi42NjY2NjYsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAwLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMixcbiAgICAgIFwidHlwZVwiOiBcIlNlY29uZGFyeVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ6YWt0aS5wbmdcIixcbiAgICAgIFwiY2F0ZWdvcnlcIjogXCJQaXN0b2xcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjMwLjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IDY2LFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiUHJvamVjdGlsZVwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy9hL2E3L1pha3RpLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzA3MjAxNzAzMzZcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1pha3RpXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGVubm8gTGFiIChEb2pvKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiVmVyeSBsb3cgZGFtYWdlIHBlciBzaG90LCBwb29yIERQUywgIHByb2plY3RpbGUgbXVuaXRpb25zLiBQZWxsZXRzIGV4cGxvZGUgYWZ0ZXIgbGFuZGluZywgY2F1c2luZyBJbXBhY3Qgc3RhdHVzIGFuZCBHYXMgZGFtYWdlIGFuZCBzdGF0dXMuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA4NC44LFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlphcnJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL0dyaW5lZXIvTG9uZ0d1bnMvR3JuQ2Fubm9uL0dybkNhbm5vbldlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiU2VtaVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVubG9hZCBhIGJhcnJhZ2Ugb2YgZXhwbG9zaXZlcyBvciBhIGh1Z2Ugc2hvdCBvZiBmbGFrIGZyb20gdGhpcyBjYW5ub27igJlzIGVub3Jtb3VzIGJhcnJlbC5cIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMTAwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA3LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMTUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInphcnIucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiTGF1bmNoZXJcIixcbiAgICAgIFwidHJhZGFibGVcIjogZmFsc2UsXG4gICAgICBcImRhbWFnZVwiOiBcIjI1LjBcIixcbiAgICAgIFwiZmxpZ2h0XCI6IFwiPz8/XCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJQcm9qZWN0aWxlXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIkJhcnJhZ2UgTW9kZVwiLFxuICAgICAgICBcInNwZWVkXCI6IDMsXG4gICAgICAgIFwiY3JpdF9jaGFuY2VcIjogMTcsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiAwLjMsXG4gICAgICAgIFwiaW1wYWN0XCI6IDI0MCxcbiAgICAgICAgXCJzbGFzaFwiOiAxNjAsXG4gICAgICAgIFwicHVuY3R1cmVcIjogNDAwXG4gICAgICB9LFxuICAgICAgXCJzZWNvbmRhcnlBcmVhXCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQ2Fubm9uIE1vZGUgQ2x1c3RlciBCb21ic1wiLFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogMjksXG4gICAgICAgIFwicGVsbGV0XCI6IHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJCb21iXCIsXG4gICAgICAgICAgXCJjb3VudFwiOiA2XG4gICAgICAgIH0sXG4gICAgICAgIFwiYmxhc3RcIjogMzAwLFxuICAgICAgICBcImRhbWFnZVwiOiBcIjMwMC4wIGJsYXN0XCJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzQvNGIvR3JpbmVlckNhbm5vbi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYxMTE3MDIyMzUwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9aYXJyXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiTWFya2V0IChPcmJpdGVyKVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIG1vZGVyYXRlIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIEZpcnN0IGV4cGxvc2lvbiBmcm9tIHByaW1hcnkgZmlyZSBjYW4gZGFtYWdlIHNlbGYgYnV0IHN1YnNlcXVlbnQgY2x1c3RlciBib21ibGV0cyB3b24ndC4gRWFjaCBib21ibGV0IGNhbiBjYXVzZSBzdGF0dXMgZWZmZWN0IG9uIGl0J3Mgb3duLiBBbHQgZmlyZSBzd2l0Y2hlcyB0byBzaG90Z3VuIG1vZGUuIFN1ZmZlcnMgZnJvbSByZWxhdGl2ZWx5IHBvb3IgY29uc2lzdGVuY3kuIFwiLFxuICAgICAgXCJkbWdcIjogXCJDcml0L1N0YXR1c1wiLFxuICAgICAgXCJyYW5rXCI6IDYyLjIsXG4gICAgICBcInRpZXJSYW5rXCI6IDEsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiWmVuaXN0YXJcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL01lbGVlL1N1bkRpYWxBeGUvU3VuZGlhbEF4ZVdlYXBvblwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxMzAsXG4gICAgICBcInRyaWdnZXJcIjogXCJNZWxlZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNjb3JjaCBlbmVtaWVzIHdpdGggYmxpc3RlcmluZyBibG93cywgb3Igc2V0IHRoZW0gYWJsYXplIHdpdGggdGhlIGZseWluZyBmaXJlIGRpc2MuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDEwMCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAyNjAsXG4gICAgICBcInNsb3RcIjogNSxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDAuNSxcbiAgICAgIFwidHlwZVwiOiBcIk1lbGVlXCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInplbmlzdGFyLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkhlYXZ5IEJsYWRlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJjaGFubmVsaW5nXCI6IDEuNSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiMTMwLjAgaGVhdFwiLFxuICAgICAgXCJzZWNvbmRhcnlcIjoge1xuICAgICAgICBcIm5hbWVcIjogXCJBdHRhY2tzIHdoaWxlIGRpc2MgZGVwbG95ZWRcIixcbiAgICAgICAgXCJzcGVlZFwiOiAwLjk2NyxcbiAgICAgICAgXCJpbXBhY3RcIjogMTMsXG4gICAgICAgIFwic2xhc2hcIjogMTA0LFxuICAgICAgICBcInB1bmN0dXJlXCI6IDEzXG4gICAgICB9LFxuICAgICAgXCJzZWNvbmRhcnlBcmVhXCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IFwiRGlzYyBBdXJhXCIsXG4gICAgICAgIFwic3RhdHVzX2NoYW5jZVwiOiA1MCxcbiAgICAgICAgXCJkdXJhdGlvblwiOiA0NTAwLFxuICAgICAgICBcInJhZGl1c1wiOiA0MDAsXG4gICAgICAgIFwic3BlZWRcIjogMS4yLFxuICAgICAgICBcImhlYXRcIjogNTAsXG4gICAgICAgIFwiZGFtYWdlXCI6IFwiNTAuMCBoZWF0XCJcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzkvOTAvU3VuZGlhbEF4ZS5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTcxMDMxMTQ1MzAwXCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9aZW5pc3RhclwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAxLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkxvZ2luIFJld2FyZFwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJWaWFibGVcIixcbiAgICAgIFwiZG1nXCI6IFwiU3RhdHVzXCIsXG4gICAgICBcInJhbmtcIjogNTYuNSxcbiAgICAgIFwidGllclJhbmtcIjogMSxcbiAgICAgIFwid2VhcG9uTm90ZXNcIjogXCJMb3cgZGFtYWdlIHBlciBoaXQsIG1vZGVyYXRlIERQUywgdmVyeSBsb3cgYXR0YWNrIHNwZWVkLiBTdWZmZXJzIGZyb20gcmVsYXRpdmVseSBwb29yIGNvbnNpc3RlbmN5LiBDaGFyZ2UgYXR0YWNrIGRlcGxveXMgZmx5aW5nIGRpc2MgdGhhdCBkZWFscyBBT0UgZGFtYWdlIGFuZCBhbGxvdyB0aGUgcmVzdCBvZiB0aGUgd2VhcG9uIHRvIGRlYWwgcGh5c2ljYWwgZGFtYWdlLiBcIixcbiAgICAgIFwic3RhbmNlXCI6IFwiQ2xlYXZpbmcgV2hpcmx3aW5kXCIsXG4gICAgICBcInN0YW5jZU5vdGVzXCI6IFwiTGF1bmNoIHRoZSBkaXNjIGZpcnN0XCIsXG4gICAgICBcImNvbWJvXCI6IFwiQ2hhcmdlIGF0dGFjayB0aGVuIEJyb2tlbiBCdWxsXCIsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiWmVuaXRoXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9Mb25nR3Vucy9Mb2dpblByaW1hcnkvU3VuZGlhbFJpZmxlXCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDMwLFxuICAgICAgXCJ0cmlnZ2VyXCI6IFwiQXV0b1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRlcGxveSB0aGUgcmFkYXIgZGlzYyB0byByZXZlYWwgaGlkZGVuIGVuZW1pZXMgYW5kIHRoZW4gc3RyaWtlIHdpdGggcHJlY2lzaW9ucyBzaG90cyB0aGF0IHB1bmNoIHRocm91Z2ggYWxsIG9ic3RhY2xlcyBpbiB0aGUgd2F5LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiAzMy4zMzMzMzIsXG4gICAgICBcIndhbGxBdHRhY2tcIjogMCxcbiAgICAgIFwic2xvdFwiOiAxLFxuICAgICAgXCJub2lzZVwiOiBcIkFsYXJtaW5nXCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiemVuaXRoLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIlJpZmxlXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIzMC4wXCIsXG4gICAgICBcInByb2plY3RpbGVcIjogXCJIaXRzY2FuXCIsXG4gICAgICBcInNlY29uZGFyeVwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcIlNlbWktQXV0byBNb2RlXCIsXG4gICAgICAgIFwic3BlZWRcIjogMyxcbiAgICAgICAgXCJjcml0X2NoYW5jZVwiOiAzNSxcbiAgICAgICAgXCJjcml0X211bHRcIjogMi41LFxuICAgICAgICBcInN0YXR1c19jaGFuY2VcIjogMC4xLFxuICAgICAgICBcImltcGFjdFwiOiAxNSxcbiAgICAgICAgXCJzbGFzaFwiOiAxNSxcbiAgICAgICAgXCJwdW5jdHVyZVwiOiAxMjBcbiAgICAgIH0sXG4gICAgICBcInZhdWx0ZWRcIjogZmFsc2UsXG4gICAgICBcIndpa2lhVGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly92aWduZXR0ZS53aWtpYS5ub2Nvb2tpZS5uZXQvd2FyZnJhbWUvaW1hZ2VzLzEvMTAvU3VuZGlhbFJpZmxlLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNzEwMzExNDUyNDJcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1plbml0aFwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiAzLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIkxvZ2luIFJld2FyZFwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJUb3BcIixcbiAgICAgIFwibm90ZXNcIjogXCJWZXJ5IGxvdyBkYW1hZ2UgcGVyIHNob3QsIGluc2FuZSBkcHMsIGhpdHNjYW4gbXVuaXRpb25zLiBTZWNvbmRhcnkgZmlyZSBsYXVuY2hlcyBhIGRpc2MgdGhhdCBzY2FucyBlbmVtaWVzIGFuZCBzd2l0Y2hlcyB0aGUgd2VhcG9uIHRvIHNlbWktYXV0byB1bnRpbCB0aGUgbWFnYXppbmUgaXMgZGVwbGV0ZWQuIFNlbWktYXV0byBtb2RlIGhhcyBtb3JlIERQUyBhbmQgaW5maW5pdGUgcHVuY2h0aHJvdWdoLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiAzOC41LFxuICAgICAgXCJ0aWVyUmFua1wiOiAzLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9Qb3dlcnN1aXRzL1Rlbmd1L1Rlbmd1XCIsXG4gICAgICBcIm5hbWVcIjogXCJaZXBoeXJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTcGVjaWFsaXppbmcgaW4gYWlyIGF0dGFja3MgYW5kIG1vYmlsaXR5LCBaZXBoeXIgZG9taW5hdGVzIGZyb20gYWJvdmUuXCIsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMCxcbiAgICAgIFwic3ByaW50U3BlZWRcIjogMS4xNSxcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiTW92ZSBmYXN0ZXIgd2hpbGUgQWlyYm9ybmUgYW5kIGZhbGwgfFBFUkNFTlR8JSBzbG93ZXIuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ6ZXBoeXIucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJhdXJhXCI6IFwidmF6YXJpblwiLFxuICAgICAgXCJjb25jbGF2ZVwiOiB0cnVlLFxuICAgICAgXCJjb2xvclwiOiAxNDQ3MTg3NyxcbiAgICAgIFwiaW50cm9kdWNlZFwiOiBcIjEyXCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4xNSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZi9mYy9aZXBoeXJOZXdMb29rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxNDExMjQwMjM0MDdcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1plcGh5clwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlRlbm5vIExhYiAoRG9qbylcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvUG93ZXJzdWl0cy9UZW5ndS9aZXBoeXJQcmltZVwiLFxuICAgICAgXCJuYW1lXCI6IFwiWmVwaHlyIFByaW1lXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGFrZSB0byB0aGUgc2tpZXMgd2l0aCB0aGlzIGdvbGRlbiBiaXJkIG9mIGRlc3RydWN0aW9uLlwiLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDYsXG4gICAgICBcInNwcmludFNwZWVkXCI6IDEuMixcbiAgICAgIFwicGFzc2l2ZURlc2NyaXB0aW9uXCI6IFwiTW92ZSBmYXN0ZXIgd2hpbGUgQWlyYm9ybmUgYW5kIGZhbGwgfFBFUkNFTlR8JSBzbG93ZXIuXCIsXG4gICAgICBcInR5cGVcIjogXCJXYXJmcmFtZVwiLFxuICAgICAgXCJpbWFnZU5hbWVcIjogXCJ6ZXBoeXItcHJpbWUucG5nXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IHRydWUsXG4gICAgICBcImF1cmFcIjogXCJ2YXphcmluXCIsXG4gICAgICBcImNvbmNsYXZlXCI6IHRydWUsXG4gICAgICBcImNvbG9yXCI6IDI1NjU0MTMsXG4gICAgICBcImludHJvZHVjZWRcIjogXCIyMi4xNi40XCIsXG4gICAgICBcInNleFwiOiBcIkZlbWFsZVwiLFxuICAgICAgXCJzcHJpbnRcIjogMS4yLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzY4L1plcGh5clByaW1lSWNvbi5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTgwMzIwMjIxNDI2XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9aZXBoeXJfUHJpbWVcIixcbiAgICAgIFwicmVsZWFzZURhdGVcIjogXCIyMDE4IDAzIDIwXCIsXG4gICAgICBcInZhdWx0RGF0ZVwiOiBcIm4vYVwiLFxuICAgICAgXCJlc3RpbWF0ZWRWYXVsdERhdGVcIjogXCIyMDIwIDAxIDEzXCIsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiUmVsaWNzXCIsXG4gICAgICBcImNoZWNrZWRcIjogZmFsc2UsXG4gICAgICBcInVub2J0YWluYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwidGllckRhdGFcIjogZmFsc2UsXG4gICAgICBcInRpZXJSYW5rXCI6IDAsXG4gICAgICBcImNvbXBvbmVudFwiOiBmYWxzZVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiWmh1Z2VcIixcbiAgICAgIFwidW5pcXVlTmFtZVwiOiBcIi9Mb3R1cy9XZWFwb25zL1Rlbm5vL0xvbmdHdW5zL1JlcGVhdGluZ0Nyb3NzYm93L1JlcGVhdGluZ0Nyb3NzYm93XCIsXG4gICAgICBcInRvdGFsRGFtYWdlXCI6IDEwMCxcbiAgICAgIFwidHJpZ2dlclwiOiBcIkF1dG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGlzIGRldmFzdGF0aW5nIGF1dG9tYXRpYyBjcm9zc2JvdyBpcyB0aGUgcGVyZmVjdCBtYXJyaWFnZSBvZiBhbmNpZW50IEVhcnRoIHdlYXBvbnJ5IGFuZCBUZW5ubyB0ZWNobm9sb2d5LlwiLFxuICAgICAgXCJhY2N1cmFjeVwiOiA0MCxcbiAgICAgIFwid2FsbEF0dGFja1wiOiAwLFxuICAgICAgXCJzbG90XCI6IDEsXG4gICAgICBcIm5vaXNlXCI6IFwiU2lsZW50XCIsXG4gICAgICBcInNlbnRpbmVsXCI6IGZhbHNlLFxuICAgICAgXCJtYXN0ZXJ5UmVxXCI6IDEwLFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJQcmltYXJ5XCIsXG4gICAgICBcImltYWdlTmFtZVwiOiBcInpodWdlLnBuZ1wiLFxuICAgICAgXCJjYXRlZ29yeVwiOiBcIkNyb3NzYm93XCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxMDAuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogXCI/Pz9cIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvNC80MS9SZXBlYXRpbmdDcm9zc2Jvdy5wbmcvcmV2aXNpb24vbGF0ZXN0P2NiPTIwMTYwMzE3MDEwMDU0XCIsXG4gICAgICBcIndpa2lhVXJsXCI6IFwiaHR0cDovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9aaHVnZVwiLFxuICAgICAgXCJkaXNwb3NpdGlvblwiOiA0LFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIk1hcmtldCAoT3JiaXRlcilcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgIFwidW5vYnRhaW5hYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0aWVyRGF0YVwiOiBmYWxzZSxcbiAgICAgIFwidGllclJhbmtcIjogMCxcbiAgICAgIFwiY29tcG9uZW50XCI6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJaaHVnZSBQcmltZVwiLFxuICAgICAgXCJ1bmlxdWVOYW1lXCI6IFwiL0xvdHVzL1dlYXBvbnMvVGVubm8vTG9uZ0d1bnMvUHJpbWVaaHVnZS9QcmltZVpodWdlQ3Jvc3Nib3dcIixcbiAgICAgIFwidG90YWxEYW1hZ2VcIjogNTAsXG4gICAgICBcInRyaWdnZXJcIjogXCJBdXRvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGVubm8gYXJ0aXN0cnkuIEFuY2llbnQgY3JhZnQuIEEgd2VhcG9uIG9mIHN1cmdpY2FsIHByZWNpc2lvbiBhbmQgZGV2YXN0YXRpbmcgZWZmZWN0LiBFYWNoIGJvbHQgZmlyZWQgYnkgWmh1Z2UgUHJpbWUgZXhwbG9kZXMgc2hvcnRseSBhZnRlciBlbWJlZGRpbmcuXCIsXG4gICAgICBcImFjY3VyYWN5XCI6IDQwLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMSxcbiAgICAgIFwibm9pc2VcIjogXCJTaWxlbnRcIixcbiAgICAgIFwic2VudGluZWxcIjogZmFsc2UsXG4gICAgICBcIm1hc3RlcnlSZXFcIjogMTQsXG4gICAgICBcIm9tZWdhQXR0ZW51YXRpb25cIjogMS4yNSxcbiAgICAgIFwidHlwZVwiOiBcIlByaW1hcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwiemh1Z2UtcHJpbWUucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiQ3Jvc3Nib3dcIixcbiAgICAgIFwidHJhZGFibGVcIjogdHJ1ZSxcbiAgICAgIFwiZGFtYWdlXCI6IFwiOTAuMFwiLFxuICAgICAgXCJmbGlnaHRcIjogXCI/Pz9cIixcbiAgICAgIFwicHJvamVjdGlsZVwiOiBcIlByb2plY3RpbGVcIixcbiAgICAgIFwidmF1bHRlZFwiOiBmYWxzZSxcbiAgICAgIFwid2lraWFUaHVtYm5haWxcIjogXCJodHRwczovL3ZpZ25ldHRlLndpa2lhLm5vY29va2llLm5ldC93YXJmcmFtZS9pbWFnZXMvZi9mYS9aaHVnZVByaW1lLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxOTA3MDcxMTU1NDVcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1podWdlX1ByaW1lXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcInJlbGVhc2VEYXRlXCI6IFwiMjAxOSAwNyAwN1wiLFxuICAgICAgXCJ2YXVsdERhdGVcIjogXCJuL2FcIixcbiAgICAgIFwiZXN0aW1hdGVkVmF1bHREYXRlXCI6IFwiMjAyMSAwNSAwMlwiLFxuICAgICAgXCJhY3F1aXNpdGlvblwiOiBcIlJlbGljc1wiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJDb250ZW5kZXJcIixcbiAgICAgIFwibm90ZXNcIjogXCJIaWdoIGRhbWFnZSBwZXIgc2hvdCwgbW9uc3Ryb3VzIERQUywgcHJvamVjdGlsZSBtdW5pdGlvbnMuIEJvbHRzIHdpbGwgZXhwbG9kZSBhIHNob3J0IGR1cmF0aW9uIGFmdGVyIGhpdHRpbmcgYSB3YWxsLCBwb3RlbnRpYWxseSBjYXVzaW5nIHNlbGYgZGFtYWdlLiDinKpcIixcbiAgICAgIFwiZG1nXCI6IFwiQ3JpdC9TdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA0Ni4yLFxuICAgICAgXCJ0aWVyUmFua1wiOiAyLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIlp5bG9rXCIsXG4gICAgICBcInVuaXF1ZU5hbWVcIjogXCIvTG90dXMvV2VhcG9ucy9UZW5uby9QaXN0b2xzL0NvbmNsYXZlTGV2ZXJQaXN0b2wvQ29uY2xhdmVMZXZlclBpc3RvbFwiLFxuICAgICAgXCJ0b3RhbERhbWFnZVwiOiAxNDAsXG4gICAgICBcInRyaWdnZXJcIjogXCJEdXBsZXhcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIYW1tZXIgdGhlIGVuZW15IHdpdGggdGhpcyBsaWdodC1ib2RpZWQgaGVhdnkgaGl0dGVyLiBGZWF0dXJpbmcgYSBkb3VibGUtYWN0aW9uIHRyaWdnZXIgdGhhdCBmaXJlcyBoYXJkIGFuZCBmYXN0LiBcIixcbiAgICAgIFwiYWNjdXJhY3lcIjogMjMuNTI5NDExLFxuICAgICAgXCJ3YWxsQXR0YWNrXCI6IDAsXG4gICAgICBcInNsb3RcIjogMCxcbiAgICAgIFwibm9pc2VcIjogXCJBbGFybWluZ1wiLFxuICAgICAgXCJzZW50aW5lbFwiOiBmYWxzZSxcbiAgICAgIFwibWFzdGVyeVJlcVwiOiA2LFxuICAgICAgXCJvbWVnYUF0dGVudWF0aW9uXCI6IDEuMjUsXG4gICAgICBcInR5cGVcIjogXCJTZWNvbmRhcnlcIixcbiAgICAgIFwiaW1hZ2VOYW1lXCI6IFwienlsb2sucG5nXCIsXG4gICAgICBcImNhdGVnb3J5XCI6IFwiUGlzdG9sXCIsXG4gICAgICBcInRyYWRhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJkYW1hZ2VcIjogXCIxNDAuMFwiLFxuICAgICAgXCJwcm9qZWN0aWxlXCI6IFwiSGl0c2NhblwiLFxuICAgICAgXCJ2YXVsdGVkXCI6IGZhbHNlLFxuICAgICAgXCJ3aWtpYVRodW1ibmFpbFwiOiBcImh0dHBzOi8vdmlnbmV0dGUud2lraWEubm9jb29raWUubmV0L3dhcmZyYW1lL2ltYWdlcy82LzY3L1p5bG9rLnBuZy9yZXZpc2lvbi9sYXRlc3Q/Y2I9MjAxODA4MzEwMDQyMjhcIixcbiAgICAgIFwid2lraWFVcmxcIjogXCJodHRwOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL1p5bG9rXCIsXG4gICAgICBcImRpc3Bvc2l0aW9uXCI6IDQsXG4gICAgICBcImFjcXVpc2l0aW9uXCI6IFwiVGhlIFB5cnlzIFByb2plY3QgKFF1ZXN0KVwiLFxuICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgXCJ1bm9idGFpbmFibGVcIjogZmFsc2UsXG4gICAgICBcInRpZXJEYXRhXCI6IHRydWUsXG4gICAgICBcInRpZXJcIjogXCJOZWVkIGJ1ZmZzXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiSGlnaCBkYW1hZ2UgcGVyIHNob3QsIHBvb3IgRFBTLCAgaGl0c2NhbiBtdW5pdGlvbnMuIFwiLFxuICAgICAgXCJkbWdcIjogXCJTdGF0dXNcIixcbiAgICAgIFwicmFua1wiOiA5NS4zLFxuICAgICAgXCJ0aWVyUmFua1wiOiAwLFxuICAgICAgXCJjb21wb25lbnRcIjogZmFsc2VcbiAgICB9XG4gIF0sXG4gIFwiZmV0Y2hlZFwiOiBcIjIwMTkuMDguMDkgMDE6MTU6NTAgQ0VUKzAyOjAwXCIsXG4gIFwidmVyc2lvblwiOiB7XG4gICAgXCJwY1wiOiBcIjI1LjYuMVwiLFxuICAgIFwicHM0XCI6IFwiVGVubm8gUmVpbmZvcmNlbWVudHM6ICBVcGRhdGUgMjUuNC4wXCIsXG4gICAgXCJ4Ym94XCI6IFwiVGVubm8gUmVpbmZvcmNlbWVudHM6ICBVcGRhdGUgMjUuNC4wXCIsXG4gICAgXCJzd2l0Y2hcIjogXCJUZW5ubyBSZWluZm9yY2VtZW50czogIFVwZGF0ZSAyNS40LjBcIixcbiAgICBcInRpZXJcIjogXCJXYXJmcmFtZSBQYXRjaCAyNS40IC0gUXVhdHogcmFua2VkLiBcIlxuICB9XG59IiwiY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBjb25zb2xlLmxvZygnV2UgYXJlIGluIGRldmVsb3BtZW50IG1vZGUnKTtcbn1cblxuaW1wb3J0IFwiLi9qcy92ZW5kb3IvZm91bmRhdGlvbi5qc1wiO1xuaW1wb3J0IFwiLi9qcy93YXJmcmFtZS1kYXRhLmpzXCI7XG5pbXBvcnQgXCIuL2pzL2FwcC5qc1wiO1xuaW1wb3J0IFwiLi9qcy9jbG9jay1laWRvbG9uLmpzXCI7XG5pbXBvcnQgXCIuL2pzL2Nsb2NrLW9yYnZhbGxpc1wiO1xuXG5pbXBvcnQgXCIuL3ZpZXdzL2JlZ2lubmVyLWd1aWRlLmhic1wiO1xuaW1wb3J0IFwiLi92aWV3cy9hbGwtaXRlbXMuaGJzXCI7XG5pbXBvcnQgXCIuL3ZpZXdzL2ZpbHRlci5oYnNcIjtcbmltcG9ydCBcIi4vdmlld3MvaXRlbS5oYnNcIjtcbmltcG9ydCBcIi4vdmlld3MvaXRlbS1tb2RhbC5oYnNcIjtcbmltcG9ydCBcIi4vdmlld3Mvc2VhcmNoLmhic1wiO1xuaW1wb3J0IFwiLi92aWV3cy9zZWFyY2gtaW5kaWNhdG9yLmhic1wiO1xuaW1wb3J0IFwiLi92aWV3cy9zdGF0dXMuaGJzXCI7XG5pbXBvcnQgXCIuL3ZpZXdzL3BhZ2VzL2hlbHAuaGJzXCI7XG5pbXBvcnQgXCIuL3ZpZXdzL3BhZ2VzL3N0YXRzLmhic1wiO1xuaW1wb3J0IFwiLi92aWV3cy9wYWdlcy91c2VyLmhic1wiO1xuXG5pbXBvcnQgXCIuL2ZvbnQvZm9udGVsbG8uZW90XCI7XG5pbXBvcnQgXCIuL2ZvbnQvZm9udGVsbG8uc3ZnXCI7XG5pbXBvcnQgXCIuL2ZvbnQvZm9udGVsbG8udHRmXCI7XG5pbXBvcnQgXCIuL2ZvbnQvZm9udGVsbG8ud29mZlwiO1xuaW1wb3J0IFwiLi9mb250L2ZvbnRlbGxvLndvZmYyXCI7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKHJlcXVpcmUoXCIuL2l0ZW0uaGJzXCIpLGRlcHRoMCx7XCJuYW1lXCI6XCJpdGVtXCIsXCJkYXRhXCI6ZGF0YSxcImluZGVudFwiOlwiICAgICAgICBcIixcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8dWwgaWQ9XFxcImFsbC1pdGVtc1xcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSxkZXB0aDAse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3VsPlxcblwiO1xufSxcInVzZVBhcnRpYWxcIjp0cnVlLFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8aDE+QmVnaW5uZXJzIGd1aWRlIHRvIFdhcmZyYW1lPC9oMT5cXG48aDI+V2hhdCBzaG91bGQgSSBkbz88L2gyPlxcbjx1bD5cXG48bGk+VW5sb2NrIHBsYW5ldHMgYnkgY29tcGxldGluZyBqdW5jdGlvbnMgdW50aWwgeW91IHJlYWNoIFBsdXRvLiBDb21wbGV0ZSBQbHV0byB0byByZWNpZXZlIGEgbWlzc2lvbiBjYWxsZWQgJnF1b3Q7VGhlIFdhciBXaXRoaW4mcXVvdDsuPC9saT5cXG48bGk+TGV2ZWwgZnJhbWVzLCBhY3F1aXJlIHdlYXBvbnMgYW5kIHN0cmVuZ3RoZW4gbW9kcyB3aXRoIEVuZG8uPC9saT5cXG48bGk+UGxheSBhbGwgYXZhaWxhYmxlIHF1ZXN0LjwvbGk+XFxuPC91bD5cXG48aDI+SG93IGRvIEkgZG8gdGhhdD88L2gyPlxcbjx1bD5cXG48bGk+Q2xlYXIgYSBwYXRoIHRvIGVhY2ggcGxhbmV0cyBKdW5jdGlvbiwgdGhlbiBjaGVjayB0aGUgcmVxdWlyZW1lbnQgZm9yIHRoYXQgSnVuY3Rpb24uIENvbXBsZXRlIHRoZSBsaXN0LiBNb3ZlIG9uIHRvIHRoZSBuZXh0IHBsYW5ldC48L2xpPlxcbjxsaT5Zb3VyIGZpcnN0IGdvYWwgaXMgRm9zc2Egb24gVmVudXMuIFJlcGVhdCBGb3NzYSB1bnRpbCB5b3UgaGF2ZSByZXF1aXJlZCBhbGwgcGFydHMgZm9yIFJoaW5vcy4gQnVpbGQgYWxsIHRoZSBwYXJ0cyBuZWVkZWQsIHRoZW4gYnV5IHRoZSBibHVlcHJpbnQgZm9yIFJoaW5vIGluIE1hcmtldCB0byBidWlsZCB0aGUgY29tcGxldGUgZnJhbWUuIFJoaW5vIGlzIGEgdGFuayBhbmQgdmVyeSBkdXJhYmxlLCB5b3Ugd2lsbCBuZWVkIFJoaW5vIHRvIHByb2dyZXNzLiA8L2xpPlxcbjxsaT5Zb3VyIHNlY29uZCBnb2FsIHNob3VsZCBiZSB1bmxvY2tpbmcgU2VpbWVuaSBvbiBDZXJlcy4gU2VpbWVuaSBpcyBhIGdyZWF0IGNyZWRpdC1mYXJtLCBhbmQgeW91IHdpbGwgbmVlZCBjcmVkaXRzLiA8L2xpPlxcbjxsaT5OZXh0IGdvYWwgaXMgSGVsZW5lIG9uIFNhdHVybi4gSGVsZW5lIGlzIGEgZ3JlYXQgYWZmaW5pdHktZmFybSAoWFApIGFuZCB3aWxsIGhlbHAgaW4gbGV2ZWxpbmcgd2VhcG9ucyBhbmQgZnJhbWVzLjwvbGk+XFxuPGxpPkFjcXVpcmUgbW9yZSBmcmFtZXMgYW5kIHdlYXBvbnMgYnkgZmFybWluZyBBc3Nhc2luYXRpb24gbWlzc2lvbnMgb24gZWFjaCBwbGFuZXQuPC9saT5cXG48bGk+VW5sb2NrIFNlZG5hIEp1bmN0aW9uIG9uIFBsdXRvLiBUaGlzIHdpbGwgcmV3YXJkIHlvdSB3aXRoIGEgbWlzc2lvbiBjYWxsZWQgJnF1b3Q7VGhlIFdhciBXaXRoaW4mcXVvdDsuIENvbXBsZXRlIHRoaXMgbWlzc2lvbiB0byB1bmxvY2sgdGhlIGZpbmFsIHBhcnQgb2YgV2FyZnJhbWUsIHdoZXJlIHRoZSBmdW4gcmVhbGx5IGJlZ2lucyA6KTwvbGk+XFxuPC91bD5cXG48aDI+V2hhdCBkbyBJIG5lZWQgdG8ga25vdyBiZWZvcmUgaSBwcm9jZWVkPzwvaDI+XFxuPHVsPlxcbjxsaT5EbyBub3Qgc3BlbmQgcGxhdGludW0gb24gYW55dGhpbmcgZWxzZSB0aGFuIHNsb3RzIGZvciBmcmFtZXMgYW5kIHdlYXBvbnMuPC9saT5cXG48bGk+WW91IHdpbGwgZ2FpbiBhZmZpbml0eSAoWFApIGZyb20geW91ciB0ZWFtLW1lbWJlcnMga2lsbHMuIE5vIG5lZWQgdG8gY2hvcCB1cCBhbGwgdGhvc2UgZW5lbWllcyB5b3Vyc2VsZi48L2xpPlxcbjxsaT5Zb3Ugd2lsbCBsb3NlIGFmZmluaXR5IGlmIHlvdSBkaWUuIFdhaXQgZm9yIGEgdGVhbS1tZW1iZXIgdG8gcmV2aXZlIHlvdS48L2xpPlxcbjxsaT5Zb3VyIGdhaW4gbWFzdGVyeSByYW5raW5nIGJ5IGxldmVsaW5nIGl0ZW1zIHRvIGxldmVsIDMwLjwvbGk+XFxuPGxpPllvdSBjYW4gc2VsbCBpdGVtcyB0byBjbGVhciBvdXQgc2xvdHM6IE1lbnUgJmd0OyBFcXVpcG1lbnQgJmd0OyBJbnZlbnRvcnk8L2xpPlxcbjxsaT5Nb3N0IHdlYXBvbnMgeW91IGNhbiBhY3F1aXJlIGVhcmx5IG9uIGFyZSB0cmFzaC4gQ2hlY2sgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuY2VwaGFsb253YW5uYWIuY29tL1xcXCI+Y2VwaGFsb253YW5uYWIuY29tLzwvYT4gZm9yIGluZm8gb24gd2hhdCB3ZWFwb25zIHRvIGtlZXAuPC9saT5cXG48bGk+VGhlIGdhbWUgd2lsbCBub3QgcHJvdmlkZSBtdWNoIGhlbHAsIHNvIHlvdSBuZWVkIHRvIHVzZSBHb29nbGUgdG8gbGVhcm4gYWJvdXQgdGhlIGdhbWUsIG9yIGNoZWNrIHRoZSA8YSBocmVmPVxcXCJodHRwczovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraVxcXCI+V2FyZnJhbWUgV2lraWE8L2E+LjwvbGk+XFxuPGxpPkNlcnRhaW4gcmVzb3VyY2VzIGFyZSBoYXJkIHRvIGZpbmQuIERvIG5vdCBzcGVuZCB5b3VyIDxlbT5OZXVyb2RlczwvZW0+LCA8ZW0+T3Jva2lucyBDZWxsczwvZW0+IG9yIDxlbT5OZXVyYWwgU2Vuc29yczwvZW0+IG9uIHdlYXBvbnMgdW50aWwgeW91IGtub3cgd2hlcmUgdG8gYWNxdWlyZSB0aGVzZSByZXNvdXJjZXMuPC9saT5cXG48L3VsPlxcbjxoMj5Ib3cgc2hvdWxkIEkgc3BlbmQgbXkgcGxhdGludW0/PC9oMj5cXG48dWw+XFxuPGxpPkRvIG5vdCBzcGVuZCBwbGF0aW51bSBvbiBhbnl0aGluZyBlbHNlIHRoYW4gc2xvdHMgZm9yIGZyYW1lcyBhbmQgd2VhcG9ucy4gU2VyaW91c2x5LjwvbGk+XFxuPC91bD5cXG48aDI+V2hlcmUgZG8gSSBmaW5kIHJlc291cmNlcz88L2gyPlxcblwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBpZD1cXFwiZWlkb2xvbi1jbG9ja1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNsb2NrLXRpdGxlXFxcIj5QTEFORVMgT0YgRUlET0xPTjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0aW1lIHRpbWUtYm94XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInRpbWUtaW5kaWNhdG9yXFxcIj48L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImJpZy1ob3VyIGhvdXJcXFwiPjwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYmlnLWhvdXItZGl2aWRlclxcXCI+OjwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYmlnLW1pbnV0ZSBtaW51dGVcXFwiPjwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYmlnLWhvdXItZGl2aWRlclxcXCI+OjwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYmlnLXNlY29uZCBzZWNvbmRcXFwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidGltZS1pbmZvXFxcIj5cXG4gICAgICAgIHVudGlsIDxzcGFuIGNsYXNzPVxcXCJkYXlcXFwiPjwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcIndhcm5pbmctY29udGFpbmVyXFxcIj48L2Rpdj5cXG48L2Rpdj5cXG5cXG48ZGl2IGlkPVxcXCJvcmJ2YWxsaXMtY2xvY2tcXFwiIGNsYXNzPVxcXCJcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjbG9jay10aXRsZVxcXCI+T1JCIFZBTExJUzwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ3ZWF0aGVyIHRpbWUtYm94XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInRpbWUtaW5kaWNhdG9yXFxcIj48L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImJpZy1taW51dGUgbWludXRlXFxcIj48L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInRpbWUtaW5mb1xcXCI+XFxuICAgICAgICB1bnRpbCA8c3BhbiBjbGFzcz1cXFwibmV4dC1wZXJpb2RcXFwiPjwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXFxuPGEgY2xhc3M9XFxcImNsb3NlLXJldmVhbC1tb2RhbFxcXCIgYXJpYS1sYWJlbD1cXFwiQ2xvc2VcXFwiPiYjMjE1OzwvYT5cXG5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxkaXYgaWQ9XFxcImZpbHRlclxcXCI+XFxuICAgICAgICA8c3BhbiBpZD1cXFwiZmlsdGVyLWNsZWFyXFxcIiBvbmNsaWNrPVxcXCJhcHAuc2VhcmNoLmNsZWFyKCk7XFxcIj5DbGVhciA8aSBjbGFzcz1cXFwiaWNvbi1jYW5jZWxcXFwiPjwvaT48L3NwYW4+XFxuICAgIDxsYWJlbCBmb3I9XFxcImZpbHRlci1hbGxcXFwiPlxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBuYW1lPVxcXCJmaWx0ZXItc3RhdHVzXFxcIiBjbGFzcz1cXFwiZmlsdGVyLXN0YXR1c1xcXCIgdmFsdWU9XFxcImFsbFxcXCIgaWQ9XFxcImZpbHRlci1hbGxcXFwiIGNoZWNrZWQ9XFxcImNoZWNrZWRcXFwiIG9uY2xpY2s9XFxcImFwcC5maWx0ZXIuYWN0aXZhdGUoJ2FsbCcpO1xcXCI+XFxuICAgICAgICA8c3Bhbj5BbGw8L3NwYW4+XFxuICAgIDwvbGFiZWw+XFxuICAgIDxsYWJlbCBmb3I9XFxcImZpbHRlci1yYW5rZWRcXFwiIG9uY2xpY2s9XFxcImFwcC5maWx0ZXIuYWN0aXZhdGUoJ3JhbmtlZCcpO1xcXCI+XFxuICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5hbWU9XFxcImZpbHRlci1zdGF0dXNcXFwiIGNsYXNzPVxcXCJmaWx0ZXItc3RhdHVzXFxcIiB2YWx1ZT1cXFwicmFua2VkXFxcIiBpZD1cXFwiZmlsdGVyLXJhbmtlZFxcXCI+XFxuICAgICAgICA8c3Bhbj5SYW5rZWQ8L3NwYW4+XFxuICAgIDwvbGFiZWw+XFxuICAgIDxsYWJlbCBmb3I9XFxcImZpbHRlci11bnJhbmtlZFxcXCIgb25jbGljaz1cXFwiYXBwLmZpbHRlci5hY3RpdmF0ZSgncmFua2VkJyk7XFxcIj5cXG4gICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiZmlsdGVyLXN0YXR1c1xcXCIgY2xhc3M9XFxcImZpbHRlci1zdGF0dXNcXFwiIHZhbHVlPVxcXCJ1bnJhbmtlZFxcXCIgaWQ9XFxcImZpbHRlci11bnJhbmtlZFxcXCI+XFxuICAgICAgICA8c3Bhbj5VbnJhbmtlZDwvc3Bhbj5cXG4gICAgPC9sYWJlbD5cXG48L2Rpdj5cXG5cXG48ZGl2IGlkPVxcXCJzZWFyY2gtaW5kaWNhdG9yXFxcIj5cXG4gICAgPGkgY2xhc3M9XFxcImljb24tc2VhcmNoXFxcIj48L2k+PHNwYW4gaWQ9XFxcInNlYXJjaC1pbmRpY2F0b3Itc3RyaW5nXFxcIj48L3NwYW4+U2hvd2luZyA8c3BhbiBpZD1cXFwic2VhcmNoLWluZGljYXRvci12YWx1ZVxcXCI+NDQzPC9zcGFuPlxcbjwvZGl2PlxcblwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiICAgICAgICA8aSBjbGFzcz1cXFwiaWNvbi1jaGVja1xcXCI+PC9pPlxcblwiO1xufSxcIjNcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXI7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwidGh1bWJuYWlsLXdyYXBwZXJcXFwiPjxpbWcgY2xhc3M9XFxcInRodW1ibmFpbFxcXCIgIHNyYz1cXFwiaHR0cHM6Ly9jZG4ud2FyZnJhbWVzdGF0LnVzL2ltZy9cIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pbWFnZU5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmltYWdlTmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcImltYWdlTmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiPjwvZGl2PlxcblwiO1xufSxcIjVcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3Npbmc7XG5cbiAgcmV0dXJuIFwiICAgICAgICA8dHI+XFxuICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1sZWZ0XFxcIj5DYXRlZ29yeTo8L3RkPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtcmlnaHRcXFwiPiA8YSBvbmNsaWNrPVxcXCJhcHAuc2VhcmNoLnNlYXJjaEZvcignXCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKChoZWxwZXJzLmVzY2FwZSB8fCAoZGVwdGgwICYmIGRlcHRoMC5lc2NhcGUpIHx8IGFsaWFzMikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnR5cGUgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVzY2FwZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiJyk7XFxcIj5cIlxuICAgICsgKChzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnR5cGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnR5cGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInR5cGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvYT48L3RkPlxcbiAgICAgICAgPC90cj5cXG5cIjtcbn0sXCI3XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nO1xuXG4gIHJldHVybiBcIiAgICAgICAgPHRyPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtbGVmdFxcXCI+VHlwZTo8L3RkPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtcmlnaHRcXFwiPiA8YSBvbmNsaWNrPVxcXCJhcHAuc2VhcmNoLnNlYXJjaEZvcignXCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKChoZWxwZXJzLmVzY2FwZSB8fCAoZGVwdGgwICYmIGRlcHRoMC5lc2NhcGUpIHx8IGFsaWFzMikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNhdGVnb3J5IDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlc2NhcGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIicpO1xcXCI+XCJcbiAgICArICgoc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5jYXRlZ29yeSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2F0ZWdvcnkgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImNhdGVnb3J5XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2E+PC90ZD5cXG4gICAgICAgIDwvdHI+XFxuXCI7XG59LFwiOVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZztcblxuICByZXR1cm4gXCIgICAgICAgIDx0cj5cXG4gICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLWxlZnRcXFwiPkFjcXVpc2l0aW9uOjwvdGQ+XFxuICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1yaWdodFxcXCI+IDxhIG9uY2xpY2s9XFxcImFwcC5zZWFyY2guc2VhcmNoRm9yKCdcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKGhlbHBlcnMuZXNjYXBlIHx8IChkZXB0aDAgJiYgZGVwdGgwLmVzY2FwZSkgfHwgYWxpYXMyKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYWNxdWlzaXRpb24gOiBkZXB0aDApLHtcIm5hbWVcIjpcImVzY2FwZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiJyk7XFxcIj5cIlxuICAgICsgKChzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmFjcXVpc2l0aW9uIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hY3F1aXNpdGlvbiA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiYWNxdWlzaXRpb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvYT5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZhdWx0ZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEwLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVub2J0YWluYWJsZSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMTIsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyAoKHN0YWNrMSA9IChoZWxwZXJzLmlmQ29uZCB8fCAoZGVwdGgwICYmIGRlcHRoMC5pZkNvbmQpIHx8IGFsaWFzMikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm1hc3RlcnlSZXEgOiBkZXB0aDApLFwiPj1cIiwxLHtcIm5hbWVcIjpcImlmQ29uZFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxNCwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90ZD5cXG4gICAgICAgIDwvdHI+XFxuXCI7XG59LFwiMTBcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiA8aSBjbGFzcz1cXFwiaWNvbi1sb2NrXFxcIj48L2k+XCI7XG59LFwiMTJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiA8aSBjbGFzcz1cXFwiaWNvbi1hdHRlbnRpb25cXFwiPjwvaT5cIjtcbn0sXCIxNFwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlcjtcblxuICByZXR1cm4gXCIgfCBNUi1cIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5tYXN0ZXJ5UmVxIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tYXN0ZXJ5UmVxIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwibWFzdGVyeVJlcVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKTtcbn0sXCIxNlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgIDx0cj5cXG4gICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLWxlZnRcXFwiPldpa2lhOjwvdGQ+XFxuICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1yaWdodFxcXCI+PGEgaHJlZj1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLndpa2lhVXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC53aWtpYVVybCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwid2lraWFVcmxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiIDxpIGNsYXNzPVxcXCJpY29uLWxpbmstZXh0XFxcIj48L2k+PC9hPjwvdGQ+XFxuICAgICAgICA8L3RyPlxcblwiO1xufSxcIjE4XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXI7XG5cbiAgcmV0dXJuIFwiICAgICAgICA8dHI+XFxuICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1sZWZ0XFxcIj5EZXNjcmlwdGlvbjo8L3RkPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtcmlnaHRcXFwiPiBcIlxuICAgICsgKChzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmRlc2NyaXB0aW9uIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kZXNjcmlwdGlvbiA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcImRlc2NyaXB0aW9uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3RkPlxcbiAgICAgICAgPC90cj5cXG5cIjtcbn0sXCIyMFwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZztcblxuICByZXR1cm4gXCIgICAgICAgIDx0cj5cXG4gICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLWxlZnRcXFwiPlRpZXI6PC90ZD5cXG4gICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLXJpZ2h0XFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSAoaGVscGVycy5pZkNvbmQgfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWZDb25kKSB8fCBhbGlhczIpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aWVyUmFuayA6IGRlcHRoMCksXCI9PVwiLFwiM1wiLHtcIm5hbWVcIjpcImlmQ29uZFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gKGhlbHBlcnMuaWZDb25kIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlmQ29uZCkgfHwgYWxpYXMyKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGllclJhbmsgOiBkZXB0aDApLFwiPT1cIixcIjJcIix7XCJuYW1lXCI6XCJpZkNvbmRcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMjMsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyAoKHN0YWNrMSA9IChoZWxwZXJzLmlmQ29uZCB8fCAoZGVwdGgwICYmIGRlcHRoMC5pZkNvbmQpIHx8IGFsaWFzMikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpZXJSYW5rIDogZGVwdGgwKSxcIj09XCIsXCIxXCIse1wibmFtZVwiOlwiaWZDb25kXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDI1LCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgIChcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aWVyIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aWVyIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJ0aWVyXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIik8L3RkPlxcbiAgICAgICAgPC90cj5cXG5cIjtcbn0sXCIyMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ0aWVyLXJhbmsgdGllci1yYW5rLTNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImljb24tc3Rhci1lbXB0eVxcXCI+PC9pPjxpIGNsYXNzPVxcXCJpY29uLXN0YXItZW1wdHlcXFwiPjwvaT48aSBjbGFzcz1cXFwiaWNvbi1zdGFyLWVtcHR5XFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG5cIjtcbn0sXCIyM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ0aWVyLXJhbmsgdGllci1yYW5rLTJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImljb24tc3Rhci1lbXB0eVxcXCI+PC9pPjxpIGNsYXNzPVxcXCJpY29uLXN0YXItZW1wdHlcXFwiPjwvaT5cXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcblwiO1xufSxcIjI1XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRpZXItcmFuayB0aWVyLXJhbmstMVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiaWNvbi1zdGFyLWVtcHR5XFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG5cIjtcbn0sXCIyN1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyO1xuXG4gIHJldHVybiBcIiAgICAgICAgPHRyPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtbGVmdFxcXCI+UmFuazo8L3RkPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtcmlnaHRcXFwiPiBcIlxuICAgICsgKChzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnJhbmsgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnJhbmsgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJyYW5rXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3RkPlxcbiAgICAgICAgPC90cj5cXG5cIjtcbn0sXCIyOVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyO1xuXG4gIHJldHVybiBcIiAgICAgICAgPHRyPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtbGVmdFxcXCI+UmVsZWFzZSBkYXRlOjwvdGQ+XFxuICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1yaWdodFxcXCI+IFwiXG4gICAgKyAoKHN0YWNrMSA9ICgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucmVsZWFzZURhdGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnJlbGVhc2VEYXRlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwicmVsZWFzZURhdGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvdGQ+XFxuICAgICAgICA8L3RyPlxcblwiO1xufSxcIjMxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXI7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLWxlZnRcXFwiPlNwZWNpYWw6PC90ZD5cXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1yaWdodFxcXCI+IFwiXG4gICAgKyAoKHN0YWNrMSA9ICgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuc3BlY2lhbE5vdGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNwZWNpYWxOb3RlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwic3BlY2lhbE5vdGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvdGQ+XFxuICAgICAgICAgICAgPC90cj5cXG5cIjtcbn0sXCIzM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1sZWZ0XFxcIj5Ob3Rlczo8L3RkPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLXJpZ2h0XFxcIj4gXCJcbiAgICArICgoc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5ub3RlcyB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubm90ZXMgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJub3Rlc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcblwiO1xufSxcIjM1XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXI7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLWxlZnRcXFwiPldlYXBvbiBub3Rlczo8L3RkPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLXJpZ2h0XFxcIj4gXCJcbiAgICArICgoc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy53ZWFwb25Ob3RlcyB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAud2VhcG9uTm90ZXMgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJ3ZWFwb25Ob3Rlc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcblwiO1xufSxcIjM3XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXI7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLWxlZnRcXFwiPkRhbWFnZTo8L3RkPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLXJpZ2h0XFxcIj4gXCJcbiAgICArICgoc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5kbWcgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRtZyA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcImRtZ1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcblwiO1xufSxcIjM5XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXI7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLWxlZnRcXFwiPkFiaWxpdGllczo8L3RkPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLXJpZ2h0XFxcIj4gXCJcbiAgICArICgoc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5hYmlsaXRpZXMgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFiaWxpdGllcyA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcImFiaWxpdGllc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcblwiO1xufSxcIjQxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXI7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLWxlZnRcXFwiPlRyaWdnZXI6PC90ZD5cXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1yaWdodFxcXCI+IFwiXG4gICAgKyAoKHN0YWNrMSA9ICgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudHJpZ2dlciB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudHJpZ2dlciA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcInRyaWdnZXJcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvdGQ+XFxuICAgICAgICAgICAgPC90cj5cXG5cIjtcbn0sXCI0M1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1sZWZ0XFxcIj5Qcm9qZWN0aWxlOjwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtcmlnaHRcXFwiPiBcIlxuICAgICsgKChzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnByb2plY3RpbGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnByb2plY3RpbGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJwcm9qZWN0aWxlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3RkPlxcbiAgICAgICAgICAgIDwvdHI+XFxuXCI7XG59LFwiNDVcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlcjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICA8dHI+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtbGVmdFxcXCI+U3RhbmNlOjwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtcmlnaHRcXFwiPiBcIlxuICAgICsgKChzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnN0YW5jZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc3RhbmNlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwic3RhbmNlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3RkPlxcbiAgICAgICAgICAgIDwvdHI+XFxuXCI7XG59LFwiNDdcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlcjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICA8dHI+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtbGVmdFxcXCI+U3RhbmNlIG5vdGVzOjwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtcmlnaHRcXFwiPiBcIlxuICAgICsgKChzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnN0YW5jZU5vdGVzIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zdGFuY2VOb3RlcyA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcInN0YW5jZU5vdGVzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3RkPlxcbiAgICAgICAgICAgIDwvdHI+XFxuXCI7XG59LFwiNDlcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlcjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICA8dHI+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGFibGUtbGVmdFxcXCI+Q29tYm86PC90ZD5cXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1yaWdodFxcXCI+IFwiXG4gICAgKyAoKHN0YWNrMSA9ICgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuY29tYm8gfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbWJvIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwiY29tYm9cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvdGQ+XFxuICAgICAgICAgICAgPC90cj5cXG5cIjtcbn0sXCI1MVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1sZWZ0XFxcIj5Vc2U6PC90ZD5cXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0YWJsZS1yaWdodFxcXCI+IFwiXG4gICAgKyAoKHN0YWNrMSA9ICgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudXNlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51c2UgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJ1c2VcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvdGQ+XFxuICAgICAgICAgICAgPC90cj5cXG5cIjtcbn0sXCI1M1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLWxlZnRcXFwiPkNvbXBvbmVudDo8L3RkPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRhYmxlLXJpZ2h0XFxcIj48YSBocmVmPVxcXCJodHRwOi8vd2FyZnJhbWUud2lraWEuY29tL3dpa2kvV2VhcG9uc19SZXF1aXJlZF9hc19DcmFmdGluZ19JbmdyZWRpZW50cyNDb21iaW5lZF9ibHVlcHJpbnRzXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+SXRlbSBhcmUgYSBjb21wb25lbnQsIHJlYWQgbW9yZSBhYm91dCBidWlsZC1jaGFpbnMuIDxpIGNsYXNzPVxcXCJpY29uLWxpbmstZXh0XFxcIj48L2k+PC9hPjwvdGQ+XFxuICAgICAgICAgICAgPC90cj5cXG5cIjtcbn0sXCI1NVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiICAgICAgICA8cCBjbGFzcz1cXFwidGV4dC1pcy1ncmV5IG1hcmdpbi10b3AtbWVkaXVtXFxcIj5EYXRhIGZyb20gPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuY2VwaGFsb253YW5uYWIuY29tL1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmNlcGhhbG9ud2FubmFiLmNvbSA8aSBjbGFzcz1cXFwiaWNvbi1saW5rLWV4dFxcXCI+PC9pPjwvYT48L3A+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCI8aDIgaWQ9XFxcIm1vZGFsVGl0bGVcXFwiIGNsYXNzPVxcXCJuYW1lXFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNoZWNrZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICBcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcbjwvaDI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pbWFnZU5hbWUgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjxkaXYgY2xhc3M9XFxcImRhdGFcXFwiPlxcbiAgICA8dGFibGUgY2xhc3M9XFxcImxlZnQtcmlnaHQtdGFibGVcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudHlwZSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jYXRlZ29yeSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hY3F1aXNpdGlvbiA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oOSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC53aWtpYVVybCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMTYsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgPHRyPlxcbiAgICAgICAgICAgIDx0ZCBjb2xzcGFuPVxcXCIyXFxcIj48aHI+PC90ZD5cXG4gICAgICAgIDwvdHI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kZXNjcmlwdGlvbiA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMTgsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGllciA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMjAsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucmFuayA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMjcsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucmVsZWFzZURhdGUgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDI5LCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNwZWNpYWxOb3RlIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5ub3RlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMzMsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAud2VhcG9uTm90ZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDM1LCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRtZyA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMzcsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYWJpbGl0aWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzOSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50cmlnZ2VyIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSg0MSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wcm9qZWN0aWxlIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSg0MywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zdGFuY2UgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDQ1LCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnN0YW5jZU5vdGVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSg0NywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb21ibyA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNDksIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXNlIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSg1MSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb21wb25lbnQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDUzLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC90YWJsZT5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpZXIgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDU1LCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPGEgY2xhc3M9XFxcImNsb3NlLXJldmVhbC1tb2RhbFxcXCIgYXJpYS1sYWJlbD1cXFwiQ2xvc2VcXFwiPiYjMjE1OzwvYT5cXG48L2Rpdj5cXG5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIml0ZW0tY2hlY2tlZFwiO1xufSxcIjNcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIml0ZW0tdW5jaGVja2VkXCI7XG59LFwiNVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiIGl0ZW0tdmF1bHRlZFwiO1xufSxcIjdcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiBpdGVtLXVub2J0YWluYWJsZVwiO1xufSxcIjlcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiA8aSBjbGFzcz1cXFwiaWNvbi1sb2NrXFxcIj48L2k+XCI7XG59LFwiMTFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiA8aSBjbGFzcz1cXFwiaWNvbi1hdHRlbnRpb25cXFwiPjwvaT5cIjtcbn0sXCIxM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlcjtcblxuICByZXR1cm4gXCIgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ0aWVyLXJhbmsgdGllci1yYW5rLTNcXFwiIG9uY2xpY2s9XFxcImFwcC5pdGVtLnRvZ2dsZUluZm8oJ1wiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIicpXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiaWNvbi1zdGFyLWVtcHR5XFxcIj48L2k+PGkgY2xhc3M9XFxcImljb24tc3Rhci1lbXB0eVxcXCI+PC9pPjxpIGNsYXNzPVxcXCJpY29uLXN0YXItZW1wdHlcXFwiPjwvaT5cXG4gICAgICAgIDwvc3Bhbj5cXG5cIjtcbn0sXCIxNVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlcjtcblxuICByZXR1cm4gXCIgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ0aWVyLXJhbmsgdGllci1yYW5rLTJcXFwiIG9uY2xpY2s9XFxcImFwcC5pdGVtLnRvZ2dsZUluZm8oJ1wiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIicpXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiaWNvbi1zdGFyLWVtcHR5XFxcIj48L2k+PGkgY2xhc3M9XFxcImljb24tc3Rhci1lbXB0eVxcXCI+PC9pPlxcbiAgICAgICAgPC9zcGFuPlxcblwiO1xufSxcIjE3XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyO1xuXG4gIHJldHVybiBcIiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRpZXItcmFuayB0aWVyLXJhbmstMVxcXCIgb25jbGljaz1cXFwiYXBwLml0ZW0udG9nZ2xlSW5mbygnXCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiJylcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJpY29uLXN0YXItZW1wdHlcXFwiPjwvaT5cXG4gICAgICAgIDwvc3Bhbj5cXG5cIjtcbn0sXCIxOVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlcjtcblxuICByZXR1cm4gXCI8c3BhbiBjbGFzcz1cXFwiY29tcG9uZW50XFxcIiBvbmNsaWNrPVxcXCJhcHAuaXRlbS50b2dnbGVJbmZvKCdcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCInKVxcXCI+PGkgY2xhc3M9XFxcImljb24tcHV6emxlLXBpZWNlXFxcIj48L2k+PC9zcGFuPlwiO1xufSxcIjIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJpY29uLWNoZWNrIGljb24tMnhcXFwiIG9uY2xpY2s9XFxcImFwcC5pdGVtLmNoZWNrKCdcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCInLCBmYWxzZSlcXFwiPjwvaT5cXG5cIjtcbn0sXCIyM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlcjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICA8aSBjbGFzcz1cXFwiaWNvbi1jaGVjay1lbXB0eSBpY29uLTJ4XFxcIiBvbmNsaWNrPVxcXCJhcHAuaXRlbS5jaGVjaygnXCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiJywgdHJ1ZSlcXFwiPjwvaT5cXG5cIjtcbn0sXCIyNVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlcjtcblxuICByZXR1cm4gXCI6IFwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmNhdGVnb3J5IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jYXRlZ29yeSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcImNhdGVnb3J5XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpO1xufSxcIjI3XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyO1xuXG4gIHJldHVybiBcIjxzcGFuIGNsYXNzPVxcXCJtYXN0ZXJ5LXJhbmtcXFwiPiB8IE1SLVwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm1hc3RlcnlSZXEgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm1hc3RlcnlSZXEgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJtYXN0ZXJ5UmVxXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvc3Bhbj5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiPGxpIGNsYXNzPVxcXCJpdGVtIFwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2hlY2tlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC52YXVsdGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSg1LCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVub2J0YWluYWJsZSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxcIiBkYXRhLW5hbWU9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJuYW1lXFxcIiBvbmNsaWNrPVxcXCJhcHAuaXRlbS50b2dnbGVJbmZvKCdcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCInKVxcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwiYWNxdWlzaXRpb25cXFwiIG9uY2xpY2s9XFxcImFwcC5pdGVtLnRvZ2dsZUluZm8oJ1wiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIicpXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuYWNxdWlzaXRpb24gfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFjcXVpc2l0aW9uIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJhY3F1aXNpdGlvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZhdWx0ZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDksIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudW5vYnRhaW5hYmxlIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9zcGFuPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IChoZWxwZXJzLmlmQ29uZCB8fCAoZGVwdGgwICYmIGRlcHRoMC5pZkNvbmQpIHx8IGFsaWFzMikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpZXJSYW5rIDogZGVwdGgwKSxcIj09XCIsXCIzXCIse1wibmFtZVwiOlwiaWZDb25kXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEzLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgKChzdGFjazEgPSAoaGVscGVycy5pZkNvbmQgfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWZDb25kKSB8fCBhbGlhczIpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aWVyUmFuayA6IGRlcHRoMCksXCI9PVwiLFwiMlwiLHtcIm5hbWVcIjpcImlmQ29uZFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxNSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gKGhlbHBlcnMuaWZDb25kIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlmQ29uZCkgfHwgYWxpYXMyKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGllclJhbmsgOiBkZXB0aDApLFwiPT1cIixcIjFcIix7XCJuYW1lXCI6XCJpZkNvbmRcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMTcsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICBcIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbXBvbmVudCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMTksIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIlxcbiAgICA8c3BhbiBjbGFzcz1cXFwiY2hlY2tcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2hlY2tlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMjEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5wcm9ncmFtKDIzLCBkYXRhLCAwKSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9zcGFuPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzcGVjaWZpY2F0aW9uXFxcIj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ0eXBlXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudHlwZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudHlwZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwidHlwZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3NwYW4+PHNwYW4gY2xhc3M9XFxcImNhdGVnb3J5XFxcIj5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNhdGVnb3J5IDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyNSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9zcGFuPlxcbiAgICAgICAgXCJcbiAgICArICgoc3RhY2sxID0gKGhlbHBlcnMuaWZDb25kIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlmQ29uZCkgfHwgYWxpYXMyKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubWFzdGVyeVJlcSA6IGRlcHRoMCksXCI+PVwiLDEse1wibmFtZVwiOlwiaWZDb25kXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDI3LCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXG4gICAgICAgIDxhIGhyZWY9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy53aWtpYVVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAud2lraWFVcmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIndpa2lhVXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIGNsYXNzPVxcXCJ3aWtpYS1saW5rXFxcIj48aSBjbGFzcz1cXFwiaWNvbi1saW5rLWV4dFxcXCI+PC9pPjwvYT5cXG4gICAgPC9kaXY+XFxuPC9saT5cXG5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlciwgYWxpYXMxPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczI9Y29udGFpbmVyLmxhbWJkYTtcblxuICByZXR1cm4gXCI8aDI+SGVscDwvaDI+XFxuXFxuPGgzPkxlZ2VuZDwvaDM+XFxuPHA+PGkgY2xhc3M9XFxcImxlZ2VuZC1pY29uIGljb24tY2hlY2stZW1wdHlcXFwiPjwvaT4gSXRlbSBhcmUgdW4tY2hlY2tlZDwvcD5cXG48cD48aSBjbGFzcz1cXFwibGVnZW5kLWljb24gaWNvbi1jaGVja1xcXCI+PC9pPiBJdGVtIGFyZSBjaGVja2VkPC9wPlxcbjxwPjxpIGNsYXNzPVxcXCJsZWdlbmQtaWNvbiBpY29uLXN0YXItZW1wdHlcXFwiPjwvaT4gSXRlbSByYXRpbmcgKDEgdG8gMyBzdGFycyk8L3A+XFxuPHA+PGkgY2xhc3M9XFxcImxlZ2VuZC1pY29uIGljb24tbG9ja1xcXCI+PC9pPiBJdGVtIGFyZSBjdXJyZW50bHkgdmF1bHRlZDwvcD5cXG48cD48aSBjbGFzcz1cXFwibGVnZW5kLWljb24gaWNvbi1hdHRlbnRpb25cXFwiPjwvaT4gSXRlbSBhcmUgdW5vYnRhaW5hYmxlPC9wPlxcbjxwPjxpIGNsYXNzPVxcXCJsZWdlbmQtaWNvbiBpY29uLXB1enpsZVxcXCI+PC9pPiBJdGVtIGFyZSBhIGNvbXBvbmVudCAoc2F2ZSB0aGlzIGl0ZW0gaW4geW91ciBJbnZlbnRvcnkpPC9wPlxcbjxwPjxpIGNsYXNzPVxcXCJsZWdlbmQtaWNvbiBpY29uLWxpbmstZXh0XFxcIj48L2k+IEV4dGVybmFsIGxpbmssIHdpbGwgb3BlbiBpbiBhIG5ldyB0YWI8L3A+XFxuPHA+PHNwYW4gY2xhc3M9XFxcImxlZ2VuZC1jb2xvciBsZWdlbmQtdW5jaGVja2VkXFxcIj48L3NwYW4+IEl0ZW0gYXJlIHVuY2hlY2tlZDwvcD5cXG48cD48c3BhbiBjbGFzcz1cXFwibGVnZW5kLWNvbG9yIGxlZ2VuZC1jaGVja2VkXFxcIj48L3NwYW4+IEl0ZW0gYXJlIGNoZWNrZWQ8L3A+XFxuPHA+PHNwYW4gY2xhc3M9XFxcImxlZ2VuZC1jb2xvciBsZWdlbmQtdmF1bHRlZFxcXCI+PC9zcGFuPiBJdGVtIGFyZSB2YXVsdGVkPC9wPlxcbjxwPjxzcGFuIGNsYXNzPVxcXCJsZWdlbmQtY29sb3IgbGVnZW5kLXVub2J0YWluYWJsZVxcXCI+PC9zcGFuPiBJdGVtIGFyZSB1bm9idGFpbmFibGU8L3A+XFxuXFxuPGgzPlVzZWZ1bCBsaW5rczwvaDM+XFxuPHVsPlxcbiAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9kcm9wcy53YXJmcmFtZXN0YXQudXMvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGI+RHJvcCBEYXRhIChlYXNpbHkgc2VhcmNoYWJsZSk8L2I+PC9hPjwvbGk+XFxuICAgIDxsaT48YSBocmVmPVxcXCJodHRwczovL244azZlMnk2LnNzbC5od2Nkbi5uZXQvcmVwb3MvaG5mdmMwbzNqbmZ2Yzg3M25qYjAzZW5yZjU2Lmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48Yj5PZmZpY2lhbCBEcm9wIFJhdGVzICZhbXA7IExvY2F0aW9uczwvYj48L2E+PC9saT5cXG4gICAgPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNlcGhhbG9ud2FubmFiLmNvbS9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48Yj5pX3dhbm5hX2JfdGhlX2d1eSdzIFRpZXIgTGlzdDwvYj48L2E+PC9saT5cXG4gICAgPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnRlbm5vLnpvbmUvcGxhbm5lci9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48Yj5UZW5ubyBab25lJ3MgZ3VpZGUgdG8gZmluZCByZWxpY3M8L2I+PC9hPjwvbGk+XFxuICAgIDxsaT48YSBocmVmPVxcXCJodHRwczovL3d3dy5mcmFtZW1hc3RlcnkuY29tL1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxiPkZyYW1lTWFzdGVyeS5jb20gLSBHdWlkZXMgZm9yIGV2ZXJ5dGhpbmc8L2I+PC9hPjwvbGk+XFxuICAgIDxsaT48YSBocmVmPVxcXCJodHRwOi8vY29udGVudC53YXJmcmFtZS5jb20vZHluYW1pYy93b3JsZFN0YXRlLnBocFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk9mZmljaWFsIFdvcmxkLXN0YXRlIEFQSTwvYT48L2xpPlxcbiAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9odWIud2FyZnJhbWVzdGF0LnVzXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2FyZnJhbWUgSHViPC9hPjwvbGk+XFxuICAgIDxsaT48YSBocmVmPVxcXCJodHRwOi8vd2FyZnJhbWUtYnVpbGRlci5jb20vXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2FyZnJhbWUgQnVpbGRzPC9hPjwvbGk+XFxuICAgIDxsaT48YSBocmVmPVxcXCJodHRwczovL3NlbWxhci5jb20vZmlzaFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkd1aWRlIHRvIGZpc2hpbmc8L2E+PC9saT5cXG4gICAgPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vd2FyZnJhbWVndWlkZS5jb20vcmVzb3VyY2VzLWZhcm1pbmctaW4td2FyZnJhbWUvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+R3VpZGUgdG8gcmVzb3VyY2UgZmFybWluZzwvYT48L2xpPlxcbiAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvTWFzdGVyeV9SYW5rXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+QWxsIGFib3V0IG1hc3RlcnkgcmFuazwvYT48L2xpPlxcbjwvdWw+XFxuXFxuPGgzPk5vdGVzPC9oMz5cXG48cD48Yj5Vbm9idGFpbmFibGUgaXRlbXM8L2I+PC9wPlxcbjxwPlRocmVlIGl0ZW1zIGFyZSBjb25zaWRlcmVkIFxcXCJVbm9idGFpbmFibGVcXFwiIHNpbmNlIHRoZXkgd2VyZSBvbmx5IGFjY2Vzc2libGUgZnJvbSB0aGUgPGEgaHJlZj1cXFwiaHR0cHM6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRm91bmRlcnNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Gb3VuZGVyIFBhY2thZ2VzPC9hPjo8L3A+XFxuPHVsPlxcbiAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvRXhjYWxpYnVyX1ByaW1lXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+RXhjYWxpYnVyIFByaW1lPC9hPjwvbGk+XFxuICAgIDxsaT48YSBocmVmPVxcXCJodHRwczovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9MYXRvX1ByaW1lXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TGF0byBQcmltZTwvYT48L2xpPlxcbiAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2thbmFfUHJpbWVcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Ta2FuYSBQcmltZTwvYT48L2xpPlxcbjwvdWw+XFxuPHA+PGI+RnVsbHkgcmFua2VkIGl0ZW1zPC9iPjwvcD5cXG48cD5Ud28gaXRlbXMgY29tZXMgZnVsbHkgcmFua2VkIGFuZCB3aWxsIGFkZCB0byBtYXN0ZXJ5IG9uY2Ugb2J0YWluZWQ6PC9wPlxcbjx1bD5cXG4gICAgPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vd2FyZnJhbWUuZmFuZG9tLmNvbS93aWtpL0V4Y2FsaWJ1cl9VbWJyYVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkV4Y2FsaWJ1ciBVbWJyYTwvYT48L2xpPlxcbiAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvU2tpYWphdGlcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Ta2lhamF0aTwvYT48L2xpPlxcbjwvdWw+XFxuPHA+PGI+VW5pcXVlIGl0ZW1zPC9iPjwvcD5cXG48cD5PbmUgaXRlbSBjYW4gcmVhY2ggbGV2ZWwgNDAgYW5kIGdyYW50IGFuIGFkZGl0aW9uYWwgMTAwMCBwb2ludHMsIGJ1dCBhcmUgY29uc2lkZXJlZCBtYXN0ZXJlZCBhdCBsZXZlbCAzMDo8L3A+XFxuPHVsPlxcbiAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly93YXJmcmFtZS5mYW5kb20uY29tL3dpa2kvUGFyYWNlc2lzXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+UGFyYWNlc2lzPC9hPjwvbGk+XFxuPC91bD5cXG48cD48YSBocmVmPVxcXCJodHRwczovL3dhcmZyYW1lLmZhbmRvbS5jb20vd2lraS9LaG9yYVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPktob3JhJ3M8L2E+IGNvbXBhbmlvbiBWZW5hcmkgd2lsbCBncmFudCA2MDAwIHBvaW50cyB0b3dhcmRzIG1hc3RlcnkgcmFuay48L3A+XFxuXFxuPGgzPkFib3V0IHRoaXMgYXBwPC9oMz5cXG48cD5HVUkgYW5kIGZyb250ZW5kIGJ5IDxhIGhyZWY9XFxcImh0dHBzOi8vYW5kZXJzYnJhbmR0LnNlL1xcXCI+QW5kZXJzIEJyYW5kdDwvYT48L3A+XFxuPHA+SXRlbSBkYXRhIGFyZSBzdXBwbGllZCBieSA8YSBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vV0ZDRC9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XYXJmcmFtZSBDb21tdW5pdHkgRGV2ZWxvcGVyczwvYT4gcmVwbyA8YSBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vV0ZDRC93YXJmcmFtZS1pdGVtcy9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj53YXJmcmFtZS1pdGVtczwvYT4sIHRoYW5rIHlvdSBndXlzITwvcD5cXG48cD5UaWVyLWxpc3QgYXJlIHN1cHBsaWVkIGJ5IDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNlcGhhbG9ud2FubmFiLmNvbS9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5pX3dhbm5hX2JfdGhlX2d1eSdzIFRpZXIgTGlzdDwvYT48L3A+XFxuPHA+XFxuICAgIDxiPkRhdGEgZmV0Y2hlZDo8L2I+PGJyLz5cXG4gICAgXCJcbiAgICArIGFsaWFzMSgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmZldGNoZWQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZldGNoZWQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJmZXRjaGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcbjwvcD5cXG48cD5cXG4gICAgPGI+RGF0YSBhY3R1YWwgZm9yIHZlcnNpb25zOjwvYj48YnIvPlxcbiAgICBQQzogXCJcbiAgICArIGFsaWFzMShhbGlhczIoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudmVyc2lvbiA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEucGMgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8YnIvPlxcbiAgICBQUzQ6IFwiXG4gICAgKyBhbGlhczEoYWxpYXMyKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZlcnNpb24gOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnBzNCA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIjxici8+XFxuICAgIFhib3g6IFwiXG4gICAgKyBhbGlhczEoYWxpYXMyKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZlcnNpb24gOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnhib3ggOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8YnIvPlxcbiAgICBTd2l0Y2g6IFwiXG4gICAgKyBhbGlhczEoYWxpYXMyKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZlcnNpb24gOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxW1wic3dpdGNoXCJdIDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiPGJyLz5cXG48L3A+XFxuXFxuPGgzPkZ1bmN0aW9uczwvaDM+XFxuPHA+Q2hlY2sgYWxsIGl0ZW1zPC9wPlxcbjxwPjxjb2RlPmFwcC5pdGVtLmNoZWNrQWxsKCk8L2NvZGU+PC9wPlxcbjxwPlVuY2hlY2sgYWxsIGl0ZW1zPC9wPlxcbjxwPjxjb2RlPmFwcC5pdGVtLnVuQ2hlY2tBbGwoKTwvY29kZT48L3A+XFxuPHA+Q29weSBkYXRhIGZvciBjaGVja2VkIGl0ZW1zIHRvIGNsaXBib2FyZCAoV29ya3MgZm9yIENocm9tZSk6PC9wPlxcbjxwPjxjb2RlPmNvcHkoYXBwLnN0b3JhZ2UubGlzdCgpKTwvY29kZT48L3A+XFxuPHA+SW1wb3J0IGRhdGE8L3A+XFxuPHA+PGNvZGU+YXBwLmltcG9ydC5zaG93TW9kYWwoKTwvY29kZT48L3A+XFxuPHA+RXhwb3J0IGRhdGE8L3A+XFxuPHA+PGNvZGU+YXBwLmV4cG9ydC5zaG93TW9kYWwoKTwvY29kZT48L3A+XFxuPHA+RG93bmxvYWQgQ1NWPC9wPlxcbjxwPjxjb2RlPmFwcC5leHBvcnQuY3N2KCk8L2NvZGU+PC9wPlxcblxcbjxoMz5JJ20gTVItMjcsIHdoYXQgZG8gSSBkbz88L2gzPlxcbjxwPkNoZWNrIGFsbCBpdGVtcyBieSB0eXBpbmcgdGhpcyBpbiBicm93c2VyIGNvbnNvbGU6PC9wPlxcbjxwPjxjb2RlPmFwcC5pdGVtLmNoZWNrQWxsKCk8L2NvZGU+PC9wPlxcbjxwPlNlYXJjaCBmb3IgJ1Vub2J0YWluYWJsZScgYW5kIHJlbW92ZSBhbGwgRm91bmRlcnMgaXRlbXM8L3A+XFxuPHA+U2VhcmNoIGZvciAnTG9naW4gcmV3YXJkJyBhbmQgY2hlY2sgdGhvc2UgaXRlbXM8L3A+XFxuPHA+T3BlbiBTdGF0cyBhbmQgY2hlY2sgYWxsIGNhdGVnb3JpZXMgYWdhaW5zdCBpbi1nYW1lIG1lbnUgaWYgdGhlIG51bWJlcnMgZG9uJ3QgYWRkIHVwPC9wPlxcblxcbjxoMz5Qcml2YWN5PC9oMz5cXG48cD5XZSB3aWxsIG5vdCBzdG9yZSBhbnkgcGVyc29uYWwgaW5mb3JtYXRpb24uIExvZ2luIGFyZSBkZWxlZ2F0ZWQgdG8gR29vZ2xlIHVzaW5nIDxhIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBocmVmPVxcXCJodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hcGktY2xpZW50LWxpYnJhcnkvXFxcIj5Hb29nbGUgQVBJIENsaWVudDwvYT48L3A+XFxuPHA+VGhlIG9ubHkgZGF0YSB3ZSBzdG9yZSBhcmUgeW91ciA8YSB0YXJnZXQ9XFxcIl9ibGFua1xcXCIgaHJlZj1cXFwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT13aGF0JTI3cytteStnb29nbGUraWRcXFwiPnB1YmxpYyBHb29nbGUgSUQ8L2E+LCB1c2VkIHB1YmxpY2x5IGluIGEgb2JmdXNjYXRlZCBmb3JtYXQuPC9wPlxcbjxwPllvdXIgZmlyc3RuYW1lIChkaXNwbGF5ZWQgaW4gdXNlci1tZW51KSBhcmUgc3RvcmVkIGluIHNlc3Npb24gb25seSwgYW5kIG5ldmVyIHN0b3JlZCBpbiBkYXRhYmFzZSBvciBvbiBkaXNrLjwvcD5cXG48cD5XZSB3aWxsIG5vdCBzZW5kIHlvdSBlbWFpbHMgb3Igc3RvcmUgeW91ciBlbWFpbC1hZGRyZXNzLjwvcD5cXG5cXG48YSBjbGFzcz1cXFwiY2xvc2UtcmV2ZWFsLW1vZGFsXFxcIiBhcmlhLWxhYmVsPVxcXCJDbG9zZVxcXCI+JiMyMTU7PC9hPlxcblxcbjxkaXYgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPlxcbiAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgb25jbGljaz1cXFwiYXBwLnRvb2xzLmNsb3NlTW9kYWwoKTtcXFwiPkNsb3NlPC9idXR0b24+XFxuPC9kaXY+XFxuXCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgPHRyPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwibmFtZVxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L3RkPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidW5yYW5rZWRcXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudW5yYW5rZWQgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmxlbmd0aCA6IHN0YWNrMSkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oNCwgZGF0YSwgMCksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90ZD5cXG4gICAgICAgICAgICA8dGQgY2xhc3M9XFxcInJhbmtlZFxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucmFua2VkIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5sZW5ndGggOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8L3RkPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidG90YWxcXFwiPlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50b3RhbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjwvdGQ+XFxuICAgICAgICA8L3RyPlxcblwiO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKGNvbnRhaW5lci5sYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudW5yYW5rZWQgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmxlbmd0aCA6IHN0YWNrMSksIGRlcHRoMCkpO1xufSxcIjRcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiA8aSBjbGFzcz1cXFwiaWNvbi1vayBjb2xvci1ncmVlblxcXCI+PC9pPiBcIjtcbn0sXCI2XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJzdGF0cy1pdGVtXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwibmFtZVxcXCI+XFxuICAgICAgICA8Yj5cIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oY29udGFpbmVyLmxhbWJkYSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51bnJhbmtlZCA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubGVuZ3RoIDogc3RhY2sxKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSg3LCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIucHJvZ3JhbSg0LCBkYXRhLCAwKSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgPC9iPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwicmFua2VkXFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVucmFua2VkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDksIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjtcbn0sXCI3XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIiAoXCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKGNvbnRhaW5lci5sYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudW5yYW5rZWQgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmxlbmd0aCA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIikgXCI7XG59LFwiOVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgYWxpYXMzPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiICAgICAgICA8YSBocmVmPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVub2J0YWluYWJsZSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMTAsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvYT5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLnVubGVzcy5jYWxsKGFsaWFzMywoZGF0YSAmJiBkYXRhLmxhc3QpLHtcIm5hbWVcIjpcInVubGVzc1wiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxMiwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxuXCI7XG59LFwiMTBcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiAoVW5vYnRhaW5hYmxlKVwiO1xufSxcIjEyXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCIsIFwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMzPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjxoMj5TdGF0aXN0aWNzPC9oMj5cXG5cXG48aDM+UmFua2VkIGl0ZW1zIGJ5IHR5cGU8L2gzPlxcbjxwPlxcbiAgICBUaGVzZSBjYXRlZ29yaWVzIG1hdGNoIHRoZSBpbi1nYW1lIG1lbnUgUHJvZmlsZSA+IEVxdWlwbWVudC48YnI+XFxuICAgIE5vdGU6IFVubGVzcyB5b3UgYXJlIGEgRm91bmRlciwgdGhlcmUgYXJlIDMgdW5vYnRhaW5hYmxlIGl0ZW1zLiBSZWFkIG1vcmUgaW4gSGVscC5cXG48L3A+XFxuPHRhYmxlPlxcbiAgICA8dGhlYWQ+XFxuICAgICAgICA8dGg+VHlwZTwvdGg+XFxuICAgICAgICA8dGg+VW5yYW5rZWQ8L3RoPlxcbiAgICAgICAgPHRoPlJhbmtlZDwvdGg+XFxuICAgICAgICA8dGg+VG90YWwgaXRlbXM8L3RoPlxcbiAgICA8L3RoZWFkPlxcbiAgICA8dGJvZHk+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLGRlcHRoMCx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgPHRyIGNsYXNzPVxcXCJkaXZpZGVyXFxcIj5cXG4gICAgICAgICAgICA8dGQ+Jm5ic3A7PC90ZD5cXG4gICAgICAgICAgICA8dGQgY2xhc3M9XFxcInVucmFua2VkXFxcIj5cIlxuICAgICsgYWxpYXMzKGFsaWFzMigoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudG90YWxJdGVtc1VucmFua2VkIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC90ZD5cXG4gICAgICAgICAgICA8dGQgY2xhc3M9XFxcInJhbmtlZFxcXCI+XCJcbiAgICArIGFsaWFzMyhhbGlhczIoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRvdGFsSXRlbXNSYW5rZWQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L3RkPlxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidG90YWxcXFwiPlwiXG4gICAgKyBhbGlhczMoYWxpYXMyKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50b3RhbEl0ZW1zIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC90ZD5cXG4gICAgICAgIDwvdHI+XFxuICAgIDwvdGJvZHk+XFxuPC90YWJsZT5cXG5cXG48aDM+VW5yYW5rZWQgaXRlbXMgYnkgdHlwZTwvaDM+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLGRlcHRoMCx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDYsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIlxcbjxhIGNsYXNzPVxcXCJjbG9zZS1yZXZlYWwtbW9kYWxcXFwiIGFyaWEtbGFiZWw9XFxcIkNsb3NlXFxcIj4mIzIxNTs8L2E+XFxuXFxuPGRpdiBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+XFxuICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBvbmNsaWNrPVxcXCJhcHAudG9vbHMuY2xvc2VNb2RhbCgpO1xcXCI+Q2xvc2U8L2J1dHRvbj5cXG48L2Rpdj5cXG5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjxkaXYgaWQ9XFxcInVzZXItd3JhcHBlclxcXCI+XFxuICAgIDxoMj5Vc2VyPC9oMj5cXG4gICAgPHA+XFxuICAgICAgICA8YSBvbmNsaWNrPVxcXCJhcHAuaW1wb3J0LnNob3dNb2RhbCgpO1xcXCI+SW1wb3J0IGRhdGEgZnJvbSBhcnJheTwvYT48YnIgLz5cXG4gICAgICAgIDxhIG9uY2xpY2s9XFxcImFwcC5leHBvcnQuc2hvd01vZGFsKCk7XFxcIj5FeHBvcnQgZGF0YSBhcyBhcnJheTwvYT48YnIgLz5cXG4gICAgICAgIDxhIG9uY2xpY2s9XFxcImFwcC5leHBvcnQuY3N2KCk7XFxcIj5Eb3dubG9hZCBkYXRhIGFzIENTVjwvYT5cXG4gICAgPC9wPlxcbiAgICA8aHIgLz5cXG4gICAgPHA+XFxuICAgICAgICBTaWduZWQgaW4gYXMgPGI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpcnN0TmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjwvYj48YnI+XFxuICAgIDwvcD5cXG4gICAgPCEtLVxcbiAgICA8cD5cXG4gICAgICAgIEFwcGxpY2F0aW9uIFVzZXIgSWQ6IFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51aWQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXG4gICAgPC9wPlxcbiAgICAtLT5cXG4gICAgPHA+PGEgY2xhc3M9XFxcImJ1dHRvblxcXCIgaHJlZj1cXFwiLi4vdXNlci9sb2dvdXQucGhwXFxcIj5Mb2dvdXQ8L2E+PC9wPlxcbjwvZGl2PlxcblxcbjxhIGNsYXNzPVxcXCJjbG9zZS1yZXZlYWwtbW9kYWxcXFwiIGFyaWEtbGFiZWw9XFxcIkNsb3NlXFxcIj4mIzIxNTs8L2E+XFxuXCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8ZGl2IGlkPVxcXCJzZWFyY2gtaW5kaWNhdG9yXFxcIj48aSBjbGFzcz1cXFwiaWNvbi1zZWFyY2hcXFwiPjwvaT4gU2hvd2luZyA8c3BhbiBpZD1cXFwic2VhcmNoLWluZGljYXRvci12YWx1ZVxcXCI+PC9zcGFuPiBpdGVtczwvZGl2PlxcblwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGlkPVxcXCJzZWFyY2hcXFwiIG5hbWU9XFxcInNlYXJjaFxcXCIgb25rZXl1cD1cXFwiYXBwLnNlYXJjaC5hY3Rpb24oKVxcXCIgcGxhY2Vob2xkZXI9XFxcIlNlYXJjaCBuYW1lLCB0eXBlLCBjYXRlZ29yeSBvciBhY3F1aXNpdGlvblxcXCIgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIC8+XFxuPGRpdiBpZD1cXFwic2VhcmNoLWNsZWFyXFxcIiBvbmNsaWNrPVxcXCJhcHAuc2VhcmNoLmNsZWFyKCk7XFxcIj48aSBjbGFzcz1cXFwiaWNvbi1jYW5jZWxcXFwiPjwvaT48L2Rpdj5cXG5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sdW1uIHNtYWxsLTEyIG1lZGl1bS0xMlxcXCI+XFxuICAgICAgICA8ZGl2IGlkPVxcXCJyYW5rZWQtaW5kaWNhdG9yXFxcIiB0aXRsZT1cXFwiXFxcIj5cXG4gICAgICAgICAgIDxzcGFuPlJhbmtlZDo8L3NwYW4+IDxiIGlkPVxcXCJjaGVja2VkLWl0ZW1zLXZhbHVlXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuY2hlY2tlZEl0ZW1zIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jaGVja2VkSXRlbXMgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImNoZWNrZWRJdGVtc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2I+IC8gPGI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmF2YWlsYWJsZUl0ZW1zIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hdmFpbGFibGVJdGVtcyA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiYXZhaWxhYmxlSXRlbXNcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9iPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7Il0sInNvdXJjZVJvb3QiOiIifQ==