/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars.runtime.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _handlebarsBase = __webpack_require__(/*! ./handlebars/base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

var _handlebarsSafeString = __webpack_require__(/*! ./handlebars/safe-string */ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js");

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = __webpack_require__(/*! ./handlebars/exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = __webpack_require__(/*! ./handlebars/utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = __webpack_require__(/*! ./handlebars/runtime */ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js");

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = __webpack_require__(/*! ./handlebars/no-conflict */ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js");

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;

exports['default'] = inst;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OEJBQXNCLG1CQUFtQjs7SUFBN0IsSUFBSTs7Ozs7b0NBSU8sMEJBQTBCOzs7O21DQUMzQix3QkFBd0I7Ozs7K0JBQ3ZCLG9CQUFvQjs7SUFBL0IsS0FBSzs7aUNBQ1Esc0JBQXNCOztJQUFuQyxPQUFPOztvQ0FFSSwwQkFBMEI7Ozs7O0FBR2pELFNBQVMsTUFBTSxHQUFHO0FBQ2hCLE1BQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7O0FBRTFDLE9BQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQyxVQUFVLG9DQUFhLENBQUM7QUFDM0IsSUFBRSxDQUFDLFNBQVMsbUNBQVksQ0FBQztBQUN6QixJQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDOztBQUU3QyxJQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNoQixJQUFFLENBQUMsUUFBUSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQzNCLFdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDbkMsQ0FBQzs7QUFFRixTQUFPLEVBQUUsQ0FBQztDQUNYOztBQUVELElBQUksSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUVyQixrQ0FBVyxJQUFJLENBQUMsQ0FBQzs7QUFFakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7cUJBRVIsSUFBSSIsImZpbGUiOiJoYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/base.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _helpers = __webpack_require__(/*! ./helpers */ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js");

var _decorators = __webpack_require__(/*! ./decorators */ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js");

var _logger = __webpack_require__(/*! ./logger */ "./node_modules/handlebars/dist/cjs/handlebars/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var VERSION = '4.5.3';
exports.VERSION = VERSION;
var COMPILER_REVISION = 8;
exports.COMPILER_REVISION = COMPILER_REVISION;
var LAST_COMPATIBLE_COMPILER_REVISION = 7;

exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0 <4.3.0',
  8: '>= 4.3.0'
};

exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: _logger2['default'],
  log: _logger2['default'].log,

  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }
      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },

  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },

  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }
      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  }
};

var log = _logger2['default'].log;

exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cUJBQTRDLFNBQVM7O3lCQUMvQixhQUFhOzs7O3VCQUNFLFdBQVc7OzBCQUNSLGNBQWM7O3NCQUNuQyxVQUFVOzs7O0FBRXRCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQzs7QUFDeEIsSUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7O0FBQzVCLElBQU0saUNBQWlDLEdBQUcsQ0FBQyxDQUFDOzs7QUFFNUMsSUFBTSxnQkFBZ0IsR0FBRztBQUM5QixHQUFDLEVBQUUsYUFBYTtBQUNoQixHQUFDLEVBQUUsZUFBZTtBQUNsQixHQUFDLEVBQUUsZUFBZTtBQUNsQixHQUFDLEVBQUUsVUFBVTtBQUNiLEdBQUMsRUFBRSxrQkFBa0I7QUFDckIsR0FBQyxFQUFFLGlCQUFpQjtBQUNwQixHQUFDLEVBQUUsaUJBQWlCO0FBQ3BCLEdBQUMsRUFBRSxVQUFVO0NBQ2QsQ0FBQzs7O0FBRUYsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUM7O0FBRTlCLFNBQVMscUJBQXFCLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7QUFDbkUsTUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQzdCLE1BQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxJQUFJLEVBQUUsQ0FBQztBQUMvQixNQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7O0FBRW5DLGtDQUF1QixJQUFJLENBQUMsQ0FBQztBQUM3Qix3Q0FBMEIsSUFBSSxDQUFDLENBQUM7Q0FDakM7O0FBRUQscUJBQXFCLENBQUMsU0FBUyxHQUFHO0FBQ2hDLGFBQVcsRUFBRSxxQkFBcUI7O0FBRWxDLFFBQU0scUJBQVE7QUFDZCxLQUFHLEVBQUUsb0JBQU8sR0FBRzs7QUFFZixnQkFBYyxFQUFFLHdCQUFTLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDakMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFVBQUksRUFBRSxFQUFFO0FBQUUsY0FBTSwyQkFBYyx5Q0FBeUMsQ0FBQyxDQUFDO09BQUU7QUFDM0Usb0JBQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1QixNQUFNO0FBQ0wsVUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDekI7R0FDRjtBQUNELGtCQUFnQixFQUFFLDBCQUFTLElBQUksRUFBRTtBQUMvQixXQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDM0I7O0FBRUQsaUJBQWUsRUFBRSx5QkFBUyxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQ3ZDLFFBQUksZ0JBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUN0QyxvQkFBTyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzdCLE1BQU07QUFDTCxVQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsRUFBRTtBQUNsQyxjQUFNLHlFQUEwRCxJQUFJLG9CQUFpQixDQUFDO09BQ3ZGO0FBQ0QsVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7S0FDL0I7R0FDRjtBQUNELG1CQUFpQixFQUFFLDJCQUFTLElBQUksRUFBRTtBQUNoQyxXQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDNUI7O0FBRUQsbUJBQWlCLEVBQUUsMkJBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNwQyxRQUFJLGdCQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDdEMsVUFBSSxFQUFFLEVBQUU7QUFBRSxjQUFNLDJCQUFjLDRDQUE0QyxDQUFDLENBQUM7T0FBRTtBQUM5RSxvQkFBTyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQy9CLE1BQU07QUFDTCxVQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUM1QjtHQUNGO0FBQ0QscUJBQW1CLEVBQUUsNkJBQVMsSUFBSSxFQUFFO0FBQ2xDLFdBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUM5QjtDQUNGLENBQUM7O0FBRUssSUFBSSxHQUFHLEdBQUcsb0JBQU8sR0FBRyxDQUFDOzs7UUFFcEIsV0FBVztRQUFFLE1BQU0iLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmd9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdEhlbHBlcnN9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnN9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC41LjMnO1xuZXhwb3J0IGNvbnN0IENPTVBJTEVSX1JFVklTSU9OID0gODtcbmV4cG9ydCBjb25zdCBMQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT04gPSA3O1xuXG5leHBvcnQgY29uc3QgUkVWSVNJT05fQ0hBTkdFUyA9IHtcbiAgMTogJzw9IDEuMC5yYy4yJywgLy8gMS4wLnJjLjIgaXMgYWN0dWFsbHkgcmV2MiBidXQgZG9lc24ndCByZXBvcnQgaXRcbiAgMjogJz09IDEuMC4wLXJjLjMnLFxuICAzOiAnPT0gMS4wLjAtcmMuNCcsXG4gIDQ6ICc9PSAxLngueCcsXG4gIDU6ICc9PSAyLjAuMC1hbHBoYS54JyxcbiAgNjogJz49IDIuMC4wLWJldGEuMScsXG4gIDc6ICc+PSA0LjAuMCA8NC4zLjAnLFxuICA4OiAnPj0gNC4zLjAnXG59O1xuXG5jb25zdCBvYmplY3RUeXBlID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcbiAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcbiAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG4gIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XG59XG5cbkhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGViYXJzRW52aXJvbm1lbnQsXG5cbiAgbG9nZ2VyOiBsb2dnZXIsXG4gIGxvZzogbG9nZ2VyLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgaGVscGVycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oYEF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIiR7bmFtZX1cIiBhcyB1bmRlZmluZWRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBsb2cgPSBsb2dnZXIubG9nO1xuXG5leHBvcnQge2NyZWF0ZUZyYW1lLCBsb2dnZXJ9O1xuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _decoratorsInline = __webpack_require__(/*! ./decorators/inline */ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js");

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0NBQTJCLHFCQUFxQjs7OztBQUV6QyxTQUFTLHlCQUF5QixDQUFDLFFBQVEsRUFBRTtBQUNsRCxnQ0FBZSxRQUFRLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJkZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG5cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;
    if (!props.partials) {
      props.partials = {};
      ret = function (context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQXFCLFVBQVU7O3FCQUVoQixVQUFTLFFBQVEsRUFBRTtBQUNoQyxVQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQzNFLFFBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25CLFdBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFNBQUcsR0FBRyxVQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUU7O0FBRS9CLFlBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbEMsaUJBQVMsQ0FBQyxRQUFRLEdBQUcsY0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRCxZQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLGlCQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QixlQUFPLEdBQUcsQ0FBQztPQUNaLENBQUM7S0FDSDs7QUFFRCxTQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUU3QyxXQUFPLEdBQUcsQ0FBQztHQUNaLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlubGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGxldCByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFydGlhbHMgc3RhY2sgZnJhbWUgcHJpb3IgdG8gZXhlYy5cbiAgICAgICAgbGV0IG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBleHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG4gICAgICAgIGxldCByZXQgPSBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/exception.js":
/*!******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/exception.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var errorProps = ['description', 'fileName', 'lineNumber', 'endLineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      endLineNumber = undefined,
      column = undefined,
      endColumn = undefined;

  if (loc) {
    line = loc.start.line;
    endLineNumber = loc.end.line;
    column = loc.start.column;
    endColumn = loc.end.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  /* istanbul ignore else */
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line;
      this.endLineNumber = endLineNumber;

      // Work around issue under safari where we can't directly set the column value
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
        Object.defineProperty(this, 'endColumn', {
          value: endColumn,
          enumerable: true
        });
      } else {
        this.column = column;
        this.endColumn = endColumn;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();

exports['default'] = Exception;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsSUFBTSxVQUFVLEdBQUcsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7O0FBRXBILFNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUU7QUFDaEMsTUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHO01BQ3RCLElBQUksWUFBQTtNQUNKLGFBQWEsWUFBQTtNQUNiLE1BQU0sWUFBQTtNQUNOLFNBQVMsWUFBQSxDQUFDOztBQUVkLE1BQUksR0FBRyxFQUFFO0FBQ1AsUUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3RCLGlCQUFhLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDN0IsVUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzFCLGFBQVMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQzs7QUFFM0IsV0FBTyxJQUFJLEtBQUssR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQztHQUN4Qzs7QUFFRCxNQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDOzs7QUFHMUQsT0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUU7QUFDaEQsUUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUM5Qzs7O0FBR0QsTUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUU7QUFDM0IsU0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztHQUMxQzs7QUFFRCxNQUFJO0FBQ0YsUUFBSSxHQUFHLEVBQUU7QUFDUCxVQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztBQUN2QixVQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQzs7OztBQUluQyxVQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUU7QUFDekIsY0FBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO0FBQ3BDLGVBQUssRUFBRSxNQUFNO0FBQ2Isb0JBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztBQUNILGNBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtBQUN2QyxlQUFLLEVBQUUsU0FBUztBQUNoQixvQkFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO09BQ0osTUFBTTtBQUNMLFlBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLFlBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO09BQzVCO0tBQ0Y7R0FDRixDQUFDLE9BQU8sR0FBRyxFQUFFOztHQUViO0NBQ0Y7O0FBRUQsU0FBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDOztxQkFFbkIsU0FBUyIsImZpbGUiOiJleGNlcHRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnZW5kTGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgICAgbGluZSxcbiAgICAgIGVuZExpbmVOdW1iZXIsXG4gICAgICBjb2x1bW4sXG4gICAgICBlbmRDb2x1bW47XG5cbiAgaWYgKGxvYykge1xuICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcbiAgICBlbmRMaW5lTnVtYmVyID0gbG9jLmVuZC5saW5lO1xuICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XG4gICAgZW5kQ29sdW1uID0gbG9jLmVuZC5jb2x1bW47XG5cbiAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcbiAgfVxuXG4gIGxldCB0bXAgPSBFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICAvLyBVbmZvcnR1bmF0ZWx5IGVycm9ycyBhcmUgbm90IGVudW1lcmFibGUgaW4gQ2hyb21lIChhdCBsZWFzdCksIHNvIGBmb3IgcHJvcCBpbiB0bXBgIGRvZXNuJ3Qgd29yay5cbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZXJyb3JQcm9wcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAobG9jKSB7XG4gICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lO1xuICAgICAgdGhpcy5lbmRMaW5lTnVtYmVyID0gZW5kTGluZU51bWJlcjtcblxuICAgICAgLy8gV29yayBhcm91bmQgaXNzdWUgdW5kZXIgc2FmYXJpIHdoZXJlIHdlIGNhbid0IGRpcmVjdGx5IHNldCB0aGUgY29sdW1uIHZhbHVlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogY29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZW5kQ29sdW1uJywge1xuICAgICAgICAgIHZhbHVlOiBlbmRDb2x1bW4sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICAgICAgICB0aGlzLmVuZENvbHVtbiA9IGVuZENvbHVtbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKG5vcCkge1xuICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cbiAgfVxufVxuXG5FeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbmV4cG9ydCBkZWZhdWx0IEV4Y2VwdGlvbjtcbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers;
exports.moveHelperToHooks = moveHelperToHooks;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _helpersBlockHelperMissing = __webpack_require__(/*! ./helpers/block-helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js");

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = __webpack_require__(/*! ./helpers/each */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js");

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = __webpack_require__(/*! ./helpers/helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js");

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = __webpack_require__(/*! ./helpers/if */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js");

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = __webpack_require__(/*! ./helpers/log */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js");

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = __webpack_require__(/*! ./helpers/lookup */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js");

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = __webpack_require__(/*! ./helpers/with */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js");

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);
  _helpersEach2['default'](instance);
  _helpersHelperMissing2['default'](instance);
  _helpersIf2['default'](instance);
  _helpersLog2['default'](instance);
  _helpersLookup2['default'](instance);
  _helpersWith2['default'](instance);
}

function moveHelperToHooks(instance, helperName, keepHelper) {
  if (instance.helpers[helperName]) {
    instance.hooks[helperName] = instance.helpers[helperName];
    if (!keepHelper) {
      delete instance.helpers[helperName];
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3lDQUF1QyxnQ0FBZ0M7Ozs7MkJBQzlDLGdCQUFnQjs7OztvQ0FDUCwwQkFBMEI7Ozs7eUJBQ3JDLGNBQWM7Ozs7MEJBQ2IsZUFBZTs7Ozs2QkFDWixrQkFBa0I7Ozs7MkJBQ3BCLGdCQUFnQjs7OztBQUVsQyxTQUFTLHNCQUFzQixDQUFDLFFBQVEsRUFBRTtBQUMvQyx5Q0FBMkIsUUFBUSxDQUFDLENBQUM7QUFDckMsMkJBQWEsUUFBUSxDQUFDLENBQUM7QUFDdkIsb0NBQXNCLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLHlCQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ3JCLDBCQUFZLFFBQVEsQ0FBQyxDQUFDO0FBQ3RCLDZCQUFlLFFBQVEsQ0FBQyxDQUFDO0FBQ3pCLDJCQUFhLFFBQVEsQ0FBQyxDQUFDO0NBQ3hCOztBQUVNLFNBQVMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7QUFDbEUsTUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ2hDLFlBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxRCxRQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsYUFBTyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3JDO0dBQ0Y7Q0FDRiIsImZpbGUiOiJoZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJFYWNoIGZyb20gJy4vaGVscGVycy9lYWNoJztcbmltcG9ydCByZWdpc3RlckhlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2hlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlcklmIGZyb20gJy4vaGVscGVycy9pZic7XG5pbXBvcnQgcmVnaXN0ZXJMb2cgZnJvbSAnLi9oZWxwZXJzL2xvZyc7XG5pbXBvcnQgcmVnaXN0ZXJMb29rdXAgZnJvbSAnLi9oZWxwZXJzL2xvb2t1cCc7XG5pbXBvcnQgcmVnaXN0ZXJXaXRoIGZyb20gJy4vaGVscGVycy93aXRoJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlckVhY2goaW5zdGFuY2UpO1xuICByZWdpc3RlckhlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlcklmKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb2coaW5zdGFuY2UpO1xuICByZWdpc3Rlckxvb2t1cChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyV2l0aChpbnN0YW5jZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlSGVscGVyVG9Ib29rcyhpbnN0YW5jZSwgaGVscGVyTmFtZSwga2VlcEhlbHBlcikge1xuICBpZiAoaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXSkge1xuICAgIGluc3RhbmNlLmhvb2tzW2hlbHBlck5hbWVdID0gaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXTtcbiAgICBpZiAoIWtlZXBIZWxwZXIpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIH1cbiAgfVxufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = { data: data };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBc0QsVUFBVTs7cUJBRWpELFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3ZFLFFBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPO1FBQ3pCLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVwQixRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsYUFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakIsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtBQUMvQyxhQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QixNQUFNLElBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUMzQixVQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLFlBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNmLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCOztBQUVELGVBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2hELE1BQU07QUFDTCxlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN0QjtLQUNGLE1BQU07QUFDTCxVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLElBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdFLGVBQU8sR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztPQUN4Qjs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0I7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJibG9jay1oZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && typeof context === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else if (global.Symbol && context[global.Symbol.iterator]) {
        var newContext = [];
        var iterator = context[global.Symbol.iterator]();
        for (var it = iterator.next(); !it.done; it = iterator.next()) {
          newContext.push(it.value);
        }
        context = newContext;
        for (var j = context.length; i < j; i++) {
          execIteration(i, i, i === context.length - 1);
        }
      } else {
        (function () {
          var priorKey = undefined;

          Object.keys(context).forEach(function (key) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          });
          if (priorKey !== undefined) {
            execIteration(priorKey, i - 1, true);
          }
        })();
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQUErRSxVQUFVOzt5QkFDbkUsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksQ0FBQyxPQUFPLEVBQUU7QUFDWixZQUFNLDJCQUFjLDZCQUE2QixDQUFDLENBQUM7S0FDcEQ7O0FBRUQsUUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFDZixPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU87UUFDekIsQ0FBQyxHQUFHLENBQUM7UUFDTCxHQUFHLEdBQUcsRUFBRTtRQUNSLElBQUksWUFBQTtRQUNKLFdBQVcsWUFBQSxDQUFDOztBQUVoQixRQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixpQkFBVyxHQUFHLHlCQUFrQixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ2pGOztBQUVELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFBRSxhQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOztBQUUxRCxRQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDaEIsVUFBSSxHQUFHLG1CQUFZLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNsQzs7QUFFRCxhQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUN6QyxVQUFJLElBQUksRUFBRTtBQUNSLFlBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2pCLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUN6QixZQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7O0FBRW5CLFlBQUksV0FBVyxFQUFFO0FBQ2YsY0FBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQ3hDO09BQ0Y7O0FBRUQsU0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzdCLFlBQUksRUFBRSxJQUFJO0FBQ1YsbUJBQVcsRUFBRSxtQkFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDL0UsQ0FBQyxDQUFDO0tBQ0o7O0FBRUQsUUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzFDLFVBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNwQixhQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxjQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDaEIseUJBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQy9DO1NBQ0Y7T0FDRixNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMzRCxZQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDdEIsWUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztBQUNuRCxhQUFLLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRTtBQUM3RCxvQkFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7QUFDRCxlQUFPLEdBQUcsVUFBVSxDQUFDO0FBQ3JCLGFBQUssSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3ZDLHVCQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMvQztPQUNGLE1BQU07O0FBQ0wsY0FBSSxRQUFRLFlBQUEsQ0FBQzs7QUFFYixnQkFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLEVBQUk7Ozs7QUFJbEMsZ0JBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQiwyQkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDaEM7QUFDRCxvQkFBUSxHQUFHLEdBQUcsQ0FBQztBQUNmLGFBQUMsRUFBRSxDQUFDO1dBQ0wsQ0FBQyxDQUFDO0FBQ0gsY0FBSSxRQUFRLEtBQUssU0FBUyxFQUFFO0FBQzFCLHlCQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7V0FDdEM7O09BQ0Y7S0FDRjs7QUFFRCxRQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDWCxTQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCOztBQUVELFdBQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiZWFjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNBcnJheSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICAgIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICByZXQgPSAnJyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dFBhdGg7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICBjb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7IGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7IH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmtleSA9IGZpZWxkO1xuICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcbiAgICAgICAgZGF0YS5sYXN0ID0gISFsYXN0O1xuXG4gICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbZmllbGRdLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGdsb2JhbC5TeW1ib2wgJiYgY29udGV4dFtnbG9iYWwuU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgICBjb25zdCBuZXdDb250ZXh0ID0gW107XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9yID0gY29udGV4dFtnbG9iYWwuU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBmb3IgKGxldCBpdCA9IGl0ZXJhdG9yLm5leHQoKTsgIWl0LmRvbmU7IGl0ID0gaXRlcmF0b3IubmV4dCgpKSB7XG4gICAgICAgICAgbmV3Q29udGV4dC5wdXNoKGl0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0ID0gbmV3Q29udGV4dDtcbiAgICAgICAgZm9yIChsZXQgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoY29udGV4dCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgdGhlIGl0ZXJhdGlvbnMgb25lIHN0ZXAgb3V0IG9mIHN5bmMgc28gd2UgY2FuIGRldGVjdFxuICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByaW9yS2V5ID0ga2V5O1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iXX0=

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('helperMissing', function () /* [args, ]options */{
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt5QkFBc0IsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsaUNBQWdDO0FBQ3ZFLFFBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7O0FBRTFCLGFBQU8sU0FBUyxDQUFDO0tBQ2xCLE1BQU07O0FBRUwsWUFBTSwyQkFBYyxtQkFBbUIsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDdkY7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJoZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbigvKiBbYXJncywgXW9wdGlvbnMgKi8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (arguments.length != 2) {
      throw new _exception2['default']('#if requires exactly one argument');
    }
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function (conditional, options) {
    if (arguments.length != 2) {
      throw new _exception2['default']('#unless requires exactly one argument');
    }
    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztxQkFBb0MsVUFBVTs7eUJBQ3hCLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVMsV0FBVyxFQUFFLE9BQU8sRUFBRTtBQUMzRCxRQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQUUsWUFBTSwyQkFBYyxtQ0FBbUMsQ0FBQyxDQUFDO0tBQUM7QUFDdkYsUUFBSSxrQkFBVyxXQUFXLENBQUMsRUFBRTtBQUFFLGlCQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOzs7OztBQUt0RSxRQUFJLEFBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLFdBQVcsSUFBSyxlQUFRLFdBQVcsQ0FBQyxFQUFFO0FBQ3ZFLGFBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QixNQUFNO0FBQ0wsYUFBTyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3pCO0dBQ0YsQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFVBQVMsV0FBVyxFQUFFLE9BQU8sRUFBRTtBQUMvRCxRQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQUUsWUFBTSwyQkFBYyx1Q0FBdUMsQ0FBQyxDQUFDO0tBQUM7QUFDM0YsV0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0dBQ3ZILENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFbXB0eSwgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2lmJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJyNpZiByZXF1aXJlcyBleGFjdGx5IG9uZSBhcmd1bWVudCcpO31cbiAgICBpZiAoaXNGdW5jdGlvbihjb25kaXRpb25hbCkpIHsgY29uZGl0aW9uYWwgPSBjb25kaXRpb25hbC5jYWxsKHRoaXMpOyB9XG5cbiAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHJlbmRlciB0aGUgcG9zaXRpdmUgcGF0aCBpZiB0aGUgdmFsdWUgaXMgdHJ1dGh5IGFuZCBub3QgZW1wdHkuXG4gICAgLy8gVGhlIGBpbmNsdWRlWmVyb2Agb3B0aW9uIG1heSBiZSBzZXQgdG8gdHJlYXQgdGhlIGNvbmR0aW9uYWwgYXMgcHVyZWx5IG5vdCBlbXB0eSBiYXNlZCBvbiB0aGVcbiAgICAvLyBiZWhhdmlvciBvZiBpc0VtcHR5LiBFZmZlY3RpdmVseSB0aGlzIGRldGVybWluZXMgaWYgMCBpcyBoYW5kbGVkIGJ5IHRoZSBwb3NpdGl2ZSBwYXRoIG9yIG5lZ2F0aXZlLlxuICAgIGlmICgoIW9wdGlvbnMuaGFzaC5pbmNsdWRlWmVybyAmJiAhY29uZGl0aW9uYWwpIHx8IGlzRW1wdHkoY29uZGl0aW9uYWwpKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd1bmxlc3MnLCBmdW5jdGlvbihjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9IDIpIHsgdGhyb3cgbmV3IEV4Y2VwdGlvbignI3VubGVzcyByZXF1aXJlcyBleGFjdGx5IG9uZSBhcmd1bWVudCcpO31cbiAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVyc1snaWYnXS5jYWxsKHRoaXMsIGNvbmRpdGlvbmFsLCB7Zm46IG9wdGlvbnMuaW52ZXJzZSwgaW52ZXJzZTogb3B0aW9ucy5mbiwgaGFzaDogb3B0aW9ucy5oYXNofSk7XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('log', function () /* message, options */{
    var args = [undefined],
        options = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;
    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }
    args[0] = level;

    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsa0NBQWlDO0FBQzlELFFBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ2xCLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM5QyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0MsVUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7QUFFRCxRQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtBQUM5QixXQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDNUIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JELFdBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUM1QjtBQUNELFFBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRWhCLFlBQVEsQ0FBQyxHQUFHLE1BQUEsQ0FBWixRQUFRLEVBQVMsSUFBSSxDQUFDLENBQUM7R0FDeEIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIGxldCBsZXZlbCA9IDE7XG4gICAgaWYgKG9wdGlvbnMuaGFzaC5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuaGFzaC5sZXZlbDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGEubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmRhdGEubGV2ZWw7XG4gICAgfVxuICAgIGFyZ3NbMF0gPSBsZXZlbDtcblxuICAgIGluc3RhbmNlLmxvZyguLi4gYXJncyk7XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js":
/*!***********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var dangerousPropertyRegex = /^(constructor|__defineGetter__|__defineSetter__|__lookupGetter__|__proto__)$/;

exports.dangerousPropertyRegex = dangerousPropertyRegex;

exports['default'] = function (instance) {
  instance.registerHelper('lookup', function (obj, field) {
    if (!obj) {
      return obj;
    }
    if (dangerousPropertyRegex.test(String(field)) && !Object.prototype.propertyIsEnumerable.call(obj, field)) {
      return undefined;
    }
    return obj[field];
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFPLElBQU0sc0JBQXNCLEdBQUcsOEVBQThFLENBQUM7Ozs7cUJBRXRHLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFVBQVMsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUNyRCxRQUFJLENBQUMsR0FBRyxFQUFFO0FBQ1IsYUFBTyxHQUFHLENBQUM7S0FDWjtBQUNELFFBQUksc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQ3pHLGFBQU8sU0FBUyxDQUFDO0tBQ2xCO0FBQ0QsV0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDbkIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9va3VwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGRhbmdlcm91c1Byb3BlcnR5UmVnZXggPSAvXihjb25zdHJ1Y3RvcnxfX2RlZmluZUdldHRlcl9ffF9fZGVmaW5lU2V0dGVyX198X19sb29rdXBHZXR0ZXJfX3xfX3Byb3RvX18pJC87XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbihvYmosIGZpZWxkKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGlmIChkYW5nZXJvdXNQcm9wZXJ0eVJlZ2V4LnRlc3QoU3RyaW5nKGZpZWxkKSkgJiYgIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIGZpZWxkKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG9ialtmaWVsZF07XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (arguments.length != 2) {
      throw new _exception2['default']('#with requires exactly one argument');
    }
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;
      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQUFpRixVQUFVOzt5QkFDckUsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7QUFBRSxZQUFNLDJCQUFjLHFDQUFxQyxDQUFDLENBQUM7S0FBQztBQUN6RixRQUFJLGtCQUFXLE9BQU8sQ0FBQyxFQUFFO0FBQUUsYUFBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FBRTs7QUFFMUQsUUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQzs7QUFFcEIsUUFBSSxDQUFDLGVBQVEsT0FBTyxDQUFDLEVBQUU7QUFDckIsVUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLEdBQUcsbUJBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFlBQUksQ0FBQyxXQUFXLEdBQUcseUJBQWtCLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNoRjs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUU7QUFDakIsWUFBSSxFQUFFLElBQUk7QUFDVixtQkFBVyxFQUFFLG1CQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO09BQ2hFLENBQUMsQ0FBQztLQUNKLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUI7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJ3aXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNFbXB0eSwgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT0gMikgeyB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjd2l0aCByZXF1aXJlcyBleGFjdGx5IG9uZSBhcmd1bWVudCcpO31cbiAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0KSkgeyBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpOyB9XG5cbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKCFpc0VtcHR5KGNvbnRleHQpKSB7XG4gICAgICBsZXQgZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IGJsb2NrUGFyYW1zKFtjb250ZXh0XSwgW2RhdGEgJiYgZGF0YS5jb250ZXh0UGF0aF0pXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/logger.js":
/*!***************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/logger.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',

  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },

  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];
      if (!console[method]) {
        // eslint-disable-line no-console
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};

exports['default'] = logger;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFzQixTQUFTOztBQUUvQixJQUFJLE1BQU0sR0FBRztBQUNYLFdBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztBQUM3QyxPQUFLLEVBQUUsTUFBTTs7O0FBR2IsYUFBVyxFQUFFLHFCQUFTLEtBQUssRUFBRTtBQUMzQixRQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUM3QixVQUFJLFFBQVEsR0FBRyxlQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDOUQsVUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ2pCLGFBQUssR0FBRyxRQUFRLENBQUM7T0FDbEIsTUFBTTtBQUNMLGFBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO09BQzdCO0tBQ0Y7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZDs7O0FBR0QsS0FBRyxFQUFFLGFBQVMsS0FBSyxFQUFjO0FBQy9CLFNBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVsQyxRQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7QUFDL0UsVUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxVQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFOztBQUNwQixjQUFNLEdBQUcsS0FBSyxDQUFDO09BQ2hCOzt3Q0FQbUIsT0FBTztBQUFQLGVBQU87OztBQVEzQixhQUFPLENBQUMsTUFBTSxPQUFDLENBQWYsT0FBTyxFQUFZLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0dBQ0Y7Q0FDRixDQUFDOztxQkFFYSxNQUFNIiwiZmlsZSI6ImxvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aW5kZXhPZn0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGVbbWV0aG9kXSguLi5tZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* global window */


exports.__esModule = true;

exports['default'] = function (Handlebars) {
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */
  Handlebars.noConflict = function () {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }
    return Handlebars;
  };
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O3FCQUNlLFVBQVMsVUFBVSxFQUFFOztBQUVsQyxNQUFJLElBQUksR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLEdBQUcsTUFBTSxHQUFHLE1BQU07TUFDdEQsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7O0FBRWxDLFlBQVUsQ0FBQyxVQUFVLEdBQUcsWUFBVztBQUNqQyxRQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO0FBQ2xDLFVBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO0tBQy9CO0FBQ0QsV0FBTyxVQUFVLENBQUM7R0FDbkIsQ0FBQztDQUNIIiwiZmlsZSI6Im5vLWNvbmZsaWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIHdpbmRvdyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oSGFuZGxlYmFycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBsZXQgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxuICAgICAgJEhhbmRsZWJhcnMgPSByb290LkhhbmRsZWJhcnM7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcbiAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xuICAgIH1cbiAgICByZXR1cm4gSGFuZGxlYmFycztcbiAgfTtcbn1cbiJdfQ==

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/runtime.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_utils);

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _base = __webpack_require__(/*! ./base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

var _helpers = __webpack_require__(/*! ./helpers */ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js");

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
    return;
  }

  if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
    var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
        compilerVersions = _base.REVISION_CHANGES[compilerRevision];
    throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
  } else {
    // Use the embedded version info since the runtime doesn't know about this revision yet
    throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
  }
}

function template(templateSpec, env) {

  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
  }

  templateSpec.main.decorator = templateSpec.main_d;

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as pseudo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)
  var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }
    partial = env.VM.resolvePartial.call(this, partial, context, options);

    var optionsWithHooks = Utils.extend({}, options, { hooks: this.hooks });

    var result = env.VM.invokePartial.call(this, partial, context, optionsWithHooks);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, optionsWithHooks);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  }

  // Just add water
  var container = {
    strict: function strict(obj, name, loc) {
      if (!obj || !(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj, { loc: loc });
      }
      return obj[name];
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },

    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }
      return programWrapper;
    },

    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context /*, options*/) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }
    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }
  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      container.helpers = Utils.extend({}, env.helpers, options.helpers);

      if (templateSpec.usePartial) {
        container.partials = Utils.extend({}, env.partials, options.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = Utils.extend({}, env.decorators, options.decorators);
      }

      container.hooks = {};

      var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
      _helpers.moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);
      _helpers.moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
      container.hooks = options.hooks;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

/**
 * This is currently part of the official API, therefore implementation details should not be changed.
 */

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;
  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data);
      // Wrapper function to get access to currentPartialBlock from the closure
      var fn = options.fn;
      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.
        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };
      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }
  return prog;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/safe-string.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Build out our basic SafeString type


exports.__esModule = true;
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports['default'] = SafeString;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Q0FDdEI7O0FBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBVztBQUN2RSxTQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ3pCLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoic2FmZS1zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/utils.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;

var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;

exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
/* eslint-disable func-style */
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  exports.isFunction = isFunction = function (value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
exports.isFunction = isFunction;

/* eslint-enable func-style */

/* istanbul ignore next */
var isArray = Array.isArray || function (value) {
  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsSUFBTSxNQUFNLEdBQUc7QUFDYixLQUFHLEVBQUUsT0FBTztBQUNaLEtBQUcsRUFBRSxNQUFNO0FBQ1gsS0FBRyxFQUFFLE1BQU07QUFDWCxLQUFHLEVBQUUsUUFBUTtBQUNiLEtBQUcsRUFBRSxRQUFRO0FBQ2IsS0FBRyxFQUFFLFFBQVE7QUFDYixLQUFHLEVBQUUsUUFBUTtDQUNkLENBQUM7O0FBRUYsSUFBTSxRQUFRLEdBQUcsWUFBWTtJQUN2QixRQUFRLEdBQUcsV0FBVyxDQUFDOztBQUU3QixTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDdkIsU0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDcEI7O0FBRU0sU0FBUyxNQUFNLENBQUMsR0FBRyxvQkFBbUI7QUFDM0MsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDekMsU0FBSyxJQUFJLEdBQUcsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDNUIsVUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0FBQzNELFdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDOUI7S0FDRjtHQUNGOztBQUVELFNBQU8sR0FBRyxDQUFDO0NBQ1o7O0FBRU0sSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7Ozs7OztBQUtoRCxJQUFJLFVBQVUsR0FBRyxvQkFBUyxLQUFLLEVBQUU7QUFDL0IsU0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLENBQUM7Q0FDcEMsQ0FBQzs7O0FBR0YsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDbkIsVUFJTSxVQUFVLEdBSmhCLFVBQVUsR0FBRyxVQUFTLEtBQUssRUFBRTtBQUMzQixXQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLG1CQUFtQixDQUFDO0dBQ3BGLENBQUM7Q0FDSDtRQUNPLFVBQVUsR0FBVixVQUFVOzs7OztBQUlYLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksVUFBUyxLQUFLLEVBQUU7QUFDdEQsU0FBTyxBQUFDLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEdBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7Q0FDakcsQ0FBQzs7Ozs7QUFHSyxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ3BDLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDaEQsUUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO0FBQ3RCLGFBQU8sQ0FBQyxDQUFDO0tBQ1Y7R0FDRjtBQUNELFNBQU8sQ0FBQyxDQUFDLENBQUM7Q0FDWDs7QUFHTSxTQUFTLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtBQUN2QyxNQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTs7QUFFOUIsUUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUMzQixhQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUN4QixNQUFNLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtBQUN6QixhQUFPLEVBQUUsQ0FBQztLQUNYLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNsQixhQUFPLE1BQU0sR0FBRyxFQUFFLENBQUM7S0FDcEI7Ozs7O0FBS0QsVUFBTSxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7R0FDdEI7O0FBRUQsTUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFBRSxXQUFPLE1BQU0sQ0FBQztHQUFFO0FBQzlDLFNBQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7Q0FDN0M7O0FBRU0sU0FBUyxPQUFPLENBQUMsS0FBSyxFQUFFO0FBQzdCLE1BQUksQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtBQUN6QixXQUFPLElBQUksQ0FBQztHQUNiLE1BQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDL0MsV0FBTyxJQUFJLENBQUM7R0FDYixNQUFNO0FBQ0wsV0FBTyxLQUFLLENBQUM7R0FDZDtDQUNGOztBQUVNLFNBQVMsV0FBVyxDQUFDLE1BQU0sRUFBRTtBQUNsQyxNQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLE9BQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ3ZCLFNBQU8sS0FBSyxDQUFDO0NBQ2Q7O0FBRU0sU0FBUyxXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUN2QyxRQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUNsQixTQUFPLE1BQU0sQ0FBQztDQUNmOztBQUVNLFNBQVMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRTtBQUNqRCxTQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFBLEdBQUksRUFBRSxDQUFDO0NBQ3BEIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gICAgICBwb3NzaWJsZSA9IC9bJjw+XCInYD1dLztcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcihjaHIpIHtcbiAgcmV0dXJuIGVzY2FwZVtjaHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iai8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydCB7aXNGdW5jdGlvbn07XG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcbn07XG5cbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkgeyByZXR1cm4gc3RyaW5nOyB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICBsZXQgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG4gIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/runtime.js":
/*!********************************************!*\
  !*** ./node_modules/handlebars/runtime.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = __webpack_require__(/*! ./dist/cjs/handlebars.runtime */ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js")['default'];


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.4.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code, options ) {
		DOMEval( code, { nonce: options && options.nonce } );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) &&

				// Support: IE 8 only
				// Exclude object elements
				(nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 && rdescend.test( selector ) ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = (elem.ownerDocument || elem).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( typeof elem.contentDocument !== "undefined" ) {
			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								} );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	// Support: IE 9-11 only
	// Also use offsetWidth/offsetHeight for when box sizing is unreliable
	// We use getClientRects() to check for hidden/disconnected.
	// In those cases, the computed value can be trusted to be border-box
	if ( ( !support.boxSizingReliable() && isBorderBox ||
		val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url, options ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js-exposed":
/*!****************************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js-exposed ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(/*! -!./jquery.js */ "./node_modules/jquery/dist/jquery.js");
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/font/fontello.eot":
/*!*******************************!*\
  !*** ./src/font/fontello.eot ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.eot";

/***/ }),

/***/ "./src/font/fontello.svg":
/*!*******************************!*\
  !*** ./src/font/fontello.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.svg";

/***/ }),

/***/ "./src/font/fontello.ttf":
/*!*******************************!*\
  !*** ./src/font/fontello.ttf ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.ttf";

/***/ }),

/***/ "./src/font/fontello.woff":
/*!********************************!*\
  !*** ./src/font/fontello.woff ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.woff";

/***/ }),

/***/ "./src/font/fontello.woff2":
/*!*********************************!*\
  !*** ./src/font/fontello.woff2 ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "../font/fontello.woff2";

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

const {utils} = __webpack_require__(/*! ./utils.js */ "./src/js/utils.js");
const warframeData = __webpack_require__(/*! ./warframe-data.js */ "./src/js/warframe-data.js");
const ClockEidolon = __webpack_require__(/*! ./clock-eidolon.js */ "./src/js/clock-eidolon.js");
const ClockOrbvallis = __webpack_require__(/*! ./clock-orbvallis.js */ "./src/js/clock-orbvallis.js");

var app = {
  name: "Warframe Mastery Helper",
  version: "2.5.0",
  data: {},
  config: {
    modal: {
      animation: "pop",
      animation_speed: 0
    }
  },
  init: function () {
    app.render.spinner.show();
    utils.tryLocalStorage();
    utils.registerHandlebarHelpers();
    app.clocks.init();
    if (utils.readLocalStorage("data") == false) {
      app.tools.firstRun();
    }
    app.data = JSON.parse(JSON.stringify(warframeData));
    app.storage.getData(
      function (data) {
        // Ugly hack in order to solve backwards compability with old data-sources
        for (var i = 0; i < data.data.length; i++) {
          if (data.data[i].indexOf("MK1") == 0) {
            data.data[i] = data.data[i].replace("MK1", "Mk1");
          }
        }
        utils.writeLocalStorage("data", JSON.stringify(data.data));
        app.tools.mapFromStorage();
        app.render.page.start();
        app.render.spinner.show();
        $(document).foundation();
        app.render.spinner.hide();
        app.search.updateIndicator();
      }
    );
  },
  tools: {
    restart: function () {
      window.location.reload();
    },
    firstRun: function () {
      utils.writeLocalStorage("data", "[]");
      app.render.page.help();
    },
    mapFromStorage: function () {
      var checked = app.storage.list();
      if (checked.length) {
        for (var i = 0; i < checked.length; i++) {
          app.item.setState(checked[i], true)
        }
      }
    },
    closeModal: function () {
      $('.reveal-modal').foundation('reveal', 'close');
    },
    closeMenu: function () {
      $('.top-bar').removeClass('expanded');
    },
    statusByType: function (type) {
      var items = {
        ranked: [],
        unranked: []
      }
      var l = app.data.array.length;
      for (var k = 0; k < l; k++) {
        if (app.data.array[k]["type"] == type && app.data.array[k]["checked"] == true) {
          items.ranked.push(app.data.array[k]);
        } else if (app.data.array[k]["type"] == type && app.data.array[k]["checked"] == false) {
          items.unranked.push(app.data.array[k]);
        }
      }
      return items;
    },
    itemCountByType: function (type) {
      var l = app.data.array.length;
      var list = [];
      for (var k = 0; k < l; k++) {
        if (app.data.array[k]["type"] == type) {
          list.push(app.data.array[k]);
        }
      }
      return list.length;
    },
    checkData: function(){
      var missingWikiaUrl = [];
      var missingMasteryReq = [];
      var missingImageName = [];
      app.data.array.forEach(function(item){
        if (typeof(item.wikiaUrl) == "undefined") {
          missingWikiaUrl.push(item.name);
        }
        if (typeof(item.masteryReq) == "undefined") {
          missingMasteryReq.push(item.name);
        }
        if (typeof(item.imageName) == "undefined") {
          missingImageName.push(item.name);
        }
      });
      console.log("missingWikiaUrl", missingWikiaUrl);
      console.log("missingMasteryReq", missingMasteryReq);
      console.log("missingImageName", missingImageName);
    }
  },
  render: {
    views: {
      search: function () {
        var template = __webpack_require__(/*! ./../views/search.hbs */ "./src/views/search.hbs");
        var html = template();
        $("#search-placeholder").html(html);
      },
      filter: function () {
        var template = __webpack_require__(/*! ./../views/filter.hbs */ "./src/views/filter.hbs");
        var html = template();
        $("#filter-placeholder").html(html);
      },
      allItems: function () {
        var template = __webpack_require__(/*! ./../views/all-items.hbs */ "./src/views/all-items.hbs");
        var html = template(app.data.array);
        $("#all-items-placeholder").html(html);
      },
      status: function () {
        var checkedItems = app.storage.list().length;
        var availableItems = app.data.array.length;
        var template = __webpack_require__(/*! ./../views/status.hbs */ "./src/views/status.hbs");
        var html = template({
          "checkedItems": checkedItems,
          "availableItems": availableItems
        });
        $("#status-placeholder").html(html);
      },
      item: function (name) {
        var data = app.data.array[app.item.getIndexByName(name)];
        var template = __webpack_require__(/*! ./../views/item.hbs */ "./src/views/item.hbs");
        var html = template(data);
        $('*[data-name="' + name + '"]').replaceWith(html);
      },
      help: function () {
        var template = __webpack_require__(/*! ./../views/pages/help.hbs */ "./src/views/pages/help.hbs");
        var html = template(app.data);
        $("#help-placeholder").html(html);
      },
      stats: function () {
        var template = __webpack_require__(/*! ./../views/pages/stats.hbs */ "./src/views/pages/stats.hbs");
        var html = template(app.stats.create());
        $("#stats-placeholder").html(html);
      },
      user: function () {
        var template = __webpack_require__(/*! ./../views/pages/user.hbs */ "./src/views/pages/user.hbs");
        var html = template(user);
        $("#user-placeholder").html(html);
      },
      clock: function () {
        var template = __webpack_require__(/*! ./../views/clock-modal.hbs */ "./src/views/clock-modal.hbs");
        var html = template();
        $("#clock-placeholder").html(html);
      },
      guide: function () {
        var template = __webpack_require__(/*! ./../views/beginner-guide.hbs */ "./src/views/beginner-guide.hbs");
        var html = template(app.data);
        $("#guide-placeholder").html(html);
      }
    },
    page: {
      start: function () {
        app.render.reset();
        app.render.views.search();
        app.render.views.filter();
        app.render.views.status();
        app.render.views.allItems();
        app.render.views.clock();
        app.render.views.help();
        app.search.updateIndicator();
      },
      help: function () {
        app.render.views.help();
        $("#help-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
        // Track event
        gtag('event', 'Open modal: Help', {
          'event_category': 'Open modal',
          'event_label': 'Open modal: Help'
        });
      },
      stats: function () {
        app.render.views.stats();
        $("#stats-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
        // Track event
        gtag('event', 'Open modal: Stats', {
          'event_category': 'Open modal',
          'event_label': 'Open modal: Stats'
        });
      },
      clock: function () {
        $("#clock-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
        // Track event
        gtag('event', 'Open modal: Clock', {
          'event_category': 'Open modal',
          'event_label': 'Open modal: Clock'
        });
      },
      guide: function () {
        app.render.views.guide();
        $("#guide-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
        // Track event
        gtag('event', 'Open modal: Guide', {
          'event_category': 'Open modal',
          'event_label': 'Open modal: Guide'
        });
      },
      user: function () {
        app.render.views.user();
        $("#user-modal").foundation("reveal", "open", app.config.modal);
        app.tools.closeMenu();
        // Track event
        gtag('event', 'Open modal: User', {
          'event_category': 'Open modal',
          'event_label': 'Open modal: User'
        });
      }
    },
    reset: function () {
      $(".view-placeholder").each(function () {
        $(this).html("");
      })
    },
    spinner: {
      show: function () {
        $(".spinner-loaded").hide();
        $("#spinner").show();
      },
      hide: function () {
        $("#spinner").hide();
        $(".spinner-loaded").show();
      }
    }
  },
  storage: {
    list: function () {
      var data = JSON.parse(utils.readLocalStorage("data"));
      return data;
    },
    get: function (item) {
      //TODO rename to itemExist
      var data = app.storage.list();
      if (data.indexOf(item) !== -1) {
        return true
      } else {
        return false;
      }
    },
    add: function (item) {
      var checked = app.storage.list();
      if (checked.indexOf(item) == -1) {
        checked.push(item);
        utils.writeLocalStorage("data", JSON.stringify(checked));
      } else {
        console.log("Item already exists in storage", item);
      }
    },
    remove: function (item) {
      var data = app.storage.list();
      var index = data.indexOf(item);
      if (index !== -1) {
        data.splice(index, 1);
        utils.writeLocalStorage("data", JSON.stringify(data));
      } else {
        console.log("Item do not exist in storage", item);
      }
    },
    clear: function () {
      utils.writeLocalStorage("data", "[]");
    },
    saveData: function (callback) {
      var payload = app.storage.list();
      $.ajax({
        url: "ajax-controller.php?action=save",
        type: "POST",
        data: {
          json: JSON.stringify(payload)
        },
        dataType: "json",
        success: function (data) {
          if (typeof data["ERROR"] !="undefined"){
            app.tools.restart();            
          }
          if (typeof callback == "function") {
            callback(data);
          }
        }
      });
    },
    getData: function (callback) {
      $.ajax({
        url: "ajax-controller.php?action=get",
        type: "GET",
        dataType: "json",
        success: function (data) {
          if (typeof callback == "function") {
            callback(data);
          }
        }
      });
    }
  },
  filter: {
    activate: function (status) {
      app.search.action();
    },
    getStatus: function () {
      return $(".filter-status:checked").val();
    },
    setBodyClass: function (status) {
      if (status) {
        $("body").addClass("filter-active");
      } else {
        $("body").removeClass("filter-active");
      }
    }
  },
  search: {
    action: function () {
      var input, filter, li, name, i, category, type, acquisition;
      var filterStatus = app.filter.getStatus();
      app.filter.setBodyClass(filterStatus);
      input = document.getElementById("search");
      filter = input.value.toUpperCase();
      li = document.getElementsByClassName("item");
      for (i = 0; i < li.length; i++) {
        name = li[i].getElementsByClassName("name")[0];
        type = li[i].getElementsByClassName("type")[0];
        category = li[i].getElementsByClassName("category")[0];
        acquisition = li[i].getElementsByClassName("acquisition")[0];
        if (name.innerHTML.toUpperCase().indexOf(filter) > -1
          || category.innerHTML.toUpperCase().indexOf(filter) > -1
          || type.innerHTML.toUpperCase().indexOf(filter) > -1
          || acquisition.innerHTML.toUpperCase().indexOf(filter) > -1) {
          li[i].style.display = "";
        } else {
          li[i].style.display = "none";
        }
      }
      switch (filterStatus) {
        case "all":
          app.filter.setBodyClass(false);
          break;
        case "ranked":
          $(".item.item-unchecked").hide();
          break;
        case "unranked":
          $(".item.item-checked").hide();
          break;
      }
      app.search.updateIndicator();
    },
    updateIndicator: function () {
      var count = $(".item:visible").length;
      var string = $("#search").val();
      if (string.length) {
        $("#search-indicator").find("#search-indicator-string").html("Searching for <b>" + string + "</b>. ");
      } else {
        $("#search-indicator").find("#search-indicator-string").html("");
      }
      $("#search-indicator").find("#search-indicator-value").html(count);
      var filterStatus = app.filter.getStatus();
      if (filterStatus == "unranked" || filterStatus == "ranked") {
        $("#search-indicator").addClass("search-indicator-filtered");
        app.filter.setBodyClass(true);
      } else {
        $("#search-indicator").removeClass("search-indicator-filtered");
        app.filter.setBodyClass(false);
      }
    },
    clear: function () {
      $("#search").val("").focus();
      $(":radio[value=all]").click();
      app.search.action();
    },
    searchFor: function (string) {
      Foundation.libs.reveal.close();
      app.search.clear();
      $("#search").val(string).keyup();
    }
  },
  item: {
    getDataByName: function (name) {
      var index = utils.getIndexOf(app.data.array, "name", name);
      return app.data.array[index];
    },
    getIndexByName: function (name) {
      return utils.getIndexOf(app.data.array, "name", name);
    },
    toggleInfo: function (name) {
      var data = app.item.getDataByName(name);
      var template = __webpack_require__(/*! ./../views/item-modal.hbs */ "./src/views/item-modal.hbs");
      var html = template(data);
      $("#item-info-placeholder").html(html).foundation("reveal", "open", app.config.modal);
      app.tools.closeMenu();
      // Track event
      gtag('event', 'Open modal: Item', {
        'event_category': 'Open modal',
        'event_label': 'Open modal: Item'
      });
    },
    check: function (name, state) {
      if (state) {
        app.storage.add(name);
      } else {
        app.storage.remove(name);
      }
      app.item.setState(name, state);
      app.storage.saveData(function () {
        app.render.views.status();
        app.render.views.item(name);
        app.search.updateIndicator();
      });
    },
    setState: function (name, state) {
      var objIndex = app.item.getIndexByName(name);
      if (objIndex !== -1 && objIndex !== false) {
        app.data.array[objIndex]["checked"] = state;
      } else {
        // Track event
        gtag('event', 'Error:  Can\'t find item', {
          'event_category': 'Error',
          'event_label': 'Error:  Can\'t find item ' + name
        });
        console.error("Can't find index for " + name);
        alert("Can't find index for " + name);
      }
    },
    checkAll: function () {
      var data = warframeData.array;
      var allItems = [];
      for (var i = 0; i < data.length; i++) {
        allItems.push(data[i]["name"]);
      }
      utils.writeLocalStorage("data", JSON.stringify(allItems));
      app.storage.saveData(
        function () {
          app.tools.restart();
        }
      );
    },
    unCheckAll: function () {
      utils.writeLocalStorage("data", JSON.stringify([]));
      app.storage.saveData(
        function () {
          app.tools.restart();
        }
      );
    }
  },
  stats: {
    create: function () {
      //var types = app.data.constants.TYPES;
      var categories = [
        {
          "label": "Warframe",
          "types": [
            "Warframe"           
          ]
        },
        {
          "label": "Primary",
          "types": [
            "Primary"           
          ]
        },
        {
          "label": "Secondary",
          "types": [
            "Secondary"           
          ]
        },
        {
          "label": "Melee",
          "types": [
            "Melee",
            "Zaw"           
          ]
        },
        {
          "label": "Robotic",
          "types": [
            "Sentinel",           
            "Sentinel Weapon"           
          ]
        },
        {
          "label": "Companions",
          "types": [
            "Companion"
          ]
        },
        {
          "label": "Vehicles",
          "types": [
            "Vehicle"            
          ]
        },
        {
          "label": "Archgun",
          "types": [
            "Archwing Gun"       
          ]
        },
        {
          "label": "Archmelee",
          "types": [
            "Archwing Melee"       
          ]
        },
        {
          "label": "Amps",
          "types": [
            "Amp"
          ]
        }
      ];
      var data = [];
      var totalItems = 0;
      var totalItemsRanked = 0;
      var totalItemsUnranked = 0;

      for (var key in categories) {
        var typeDataRanked = [];
        var typeDataUnranked = [];
        var typeDataTotal = 0;
        for (var type in categories[key]["types"]) {
          var typeStatus = app.tools.statusByType(categories[key]["types"][type]);
          for (var i=0; i < typeStatus["unranked"].length; i++) {
            typeDataUnranked.push(typeStatus["unranked"][i]);
          }
          for (var i=0; i < typeStatus["ranked"].length; i++) {
            typeDataRanked.push(typeStatus["ranked"][i]);
          }
        }
        var total = typeDataTotal + (typeDataRanked.length + typeDataUnranked.length);;
        var item = {
          "name": categories[key]["label"],
          "ranked": typeDataRanked,
          "unranked": typeDataUnranked,
          "total": total
        };
        data.push(item);
        totalItems += total;
        totalItemsRanked += typeDataRanked.length;
        totalItemsUnranked += typeDataUnranked.length;
      }
      data.totalItemsRanked = totalItemsRanked;
      data.totalItemsUnranked = totalItemsUnranked;
      data.totalItems = totalItems;
      return data;
    }
  },
  import: {
    showModal: function () {
      $("#modal-import").foundation('reveal', 'open', app.config.modal)
    },
    list: function () {
      var data = JSON.parse($('#import-data').val());
      console.log("Data to import", data);
      utils.writeLocalStorage("data", JSON.stringify(data));
      app.storage.saveData(null);
      app.tools.restart();
    }
  },
  export: {
    showModal: function () {
      var data = utils.readLocalStorage("data");
      console.log("Data to export", JSON.parse(data));
      $("#export-data-placeholder").html(data);
      $("#modal-export").foundation('reveal', 'open', app.config.modal);
      // Track event
      gtag('event', 'Export data as array', {
        'event_category': 'Export',
        'event_label': 'Export data as array'
      });
    },
    csv: function () {
      var today = new Date().toISOString().slice(0, 10);
      var array = JSON.parse(utils.readLocalStorage("data"));
      var str = 'Ranked items ' + today + ': ' + array.length + '\r\n';
      for (var i = 0; i < array.length; i++) {
        str += array[i] + '\r\n';
      }
      // Track event
      gtag('event', 'Export data as CSV', {
        'event_category': 'Export',
        'event_label': 'Export data as CSV'
      });
      // Open window
      window.open("data:text/csv;charset=utf-8," + escape(str))
    }
  },
  clocks: {
    init: function () {
      var clockEidolon = new ClockEidolon();
      var clockOrbvallis = new ClockOrbvallis();
      clockEidolon.init();
      clockOrbvallis.init();
      $("#clock-modal").bind('closed.fndtn.reveal', function () {
        clockEidolon.stop();
        clockOrbvallis.stop();
      });
      $("#clock-modal").bind('open.fndtn.reveal', function () {
        clockEidolon.start();
        clockOrbvallis.updateTime();
        clockOrbvallis.start();
      });
    }
  }
};

$(document).ready(function () {
  app.init();
});

window.app = app; //TODO delete or not?

module.exports = {
  app: app
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed")))

/***/ }),

/***/ "./src/js/clock-eidolon.js":
/*!*********************************!*\
  !*** ./src/js/clock-eidolon.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {module.exports = function () {
  var eido_timestamp = 1540015141;
  const UPDATE_INTERVAL = 1000;
  const WARNING_MESSAGE = "Warning: unable to get time. Retrying soon.";

  function defaultGetTimeCallback(t) {
    eido_timestamp = t;
  }

  function pad(s) {
    if (s.toString().length == 1) return '0' + s.toString();
    return s.toString();
  }

  function setTimeFailure(hasIssue) {
    var e = document.getElementById("warning-container");
    if (hasIssue) {
      e.innerHTML = WARNING_MESSAGE;
      setTimeout(this.getCetusTime, 30000, true, defaultGetTimeCallback);
    }
    else
      e.innerHTML = "";
  }

  this.getCetusTime = function (fetch, callback) {
    var timestamp = 1522764301;	//Static timestamp to be returned in case of an error. Correct as of 2018-04-03, for PC version 22.17.0.1. Might not be accurate in the future.
    if (!fetch) {
      callback(timestamp);
      return;
    }

    var worldStateFileUrl = "http://content.warframe.com/dynamic/worldState.php";
    var worldStateCORSUrl = "https://whatever-origin.herokuapp.com/get?callback=?&url=" + encodeURIComponent(worldStateFileUrl);

    $.ajax(
      {
        url: worldStateCORSUrl,
        dataType: "json",
        mimeType: "application/json",
        success: function (data) {
          var worldStateData;
          try {
            worldStateData = JSON.parse(data.contents); //The data is returned as a string inside a JSON response and has to be parsed.
          }
          catch (e) {
            console.warn("Could not fetch Cetus time (", e.message, "). Using static timestamp. Accuracy not guaranteed.");
            callback(timestamp);
            setTimeFailure(true);
            return;
          }
          var syndicate = worldStateData["SyndicateMissions"].find(element => (element["Tag"] == "CetusSyndicate"));
          if (syndicate == undefined) {
            setTimeFailure(true);
            callback(timestamp);
            return;
          }
          setTimeFailure(false);
          timestamp = Math.floor(syndicate["Expiry"]["$date"]["$numberLong"] / 1000);	//The activation time, converted to whole seconds
          callback(timestamp);
        },
        error: function (xhr, status, error) {
          console.warn("Cound not fetch Cetus time:", status, error, ". Using static timestamp. Accuracy not guaranteed.");
          setTimeFailure(true);
          callback(timestamp);
        }
      });
  };

  function updateTime() {
    var d = new Date();
    var time = d.getTime() / 1000;
    // This time is the end of night and start of day
    var start_time = (eido_timestamp - 150 * 60)
    var irltime_m = ((time - start_time) / 60) % 150;  // 100m of day + 50m of night

    var eidotime_in_h = (irltime_m / 6.25) + 6;
    if (eidotime_in_h < 0) eidotime_in_h += 24;
    if (eidotime_in_h > 24) eidotime_in_h -= 24;
    var eidotime_h = Math.floor(eidotime_in_h);
    var eidotime_m = Math.floor((eidotime_in_h * 60) % 60);
    var eidotime_s = Math.floor((eidotime_in_h * 60 * 60) % 60);

    var wrapped_time = eidotime_in_h - 5;
    if (wrapped_time < 0) wrapped_time += 24;
    //var slider_percent = wrapped_time / 24 * 90 + 5
    //$('.slider').css('top', slider_percent + '%');

    var next_interval;

    // Night is from 9pm to 5am
    // Day is from 5am to 9pm
    if (150 - irltime_m > 50) {
      $('#eidolon-clock').addClass('time-is-day').removeClass('time-is-night');
      $('#eidolon-clock .day').addClass('night').removeClass('day');
      $('#eidolon-clock .night').text('night');
      next_interval = 21;
    } else {
      $('#eidolon-clock').addClass('time-is-night').removeClass('time-is-day');
      $('#eidolon-clock .night').addClass('day').removeClass('night');
      $('#eidolon-clock .day').text('day');
      next_interval = 5;
    }

    var eido_until_h = next_interval - (eidotime_h % 24);
    if (eido_until_h < 0) eido_until_h += 24
    var irl_until_in_m = 150 - irltime_m;
    if (irl_until_in_m > 50) irl_until_in_m -= 50

    var irl_until_h = Math.floor(irl_until_in_m / 60);
    var irl_until_m = Math.floor(irl_until_in_m % 60);
    var irl_until_s = Math.floor((irl_until_in_m * 60) % 60);

    $('.time>.big-hour').text(pad(irl_until_h));
    $('.time>.big-minute').text(pad(irl_until_m));
    $('.time>.big-second').text(pad(irl_until_s));
  }

  this.init = function () {
    this.getCetusTime(1, defaultGetTimeCallback);
  };

  this.start = function () {
    updateTime();
    this.interval = setInterval(updateTime, UPDATE_INTERVAL);
  };

  this.stop = function () {
    clearInterval(this.interval);
  };
};

//module.exports = {
//  Clock: Clock
//};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed")))

/***/ }),

/***/ "./src/js/clock-orbvallis.js":
/*!***********************************!*\
  !*** ./src/js/clock-orbvallis.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {module.exports = function () {

    function convertMilliseconds(millis) {
        var minutes = Math.floor(millis / 60000);
        var seconds = ((millis % 60000) / 1000).toFixed(0);
        return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
    }

    this.updateTime = function () {
        var nextState;
        var nextPeriod;
        var tStart = 1542132024000;
        var cycleLength = 1600000;
        var warmLength = 400000;
        var currentTime = (Date.now() - tStart) % cycleLength;
        if (currentTime < warmLength) {
            nextPeriod = warmLength - currentTime;
            nextState = "cold";
            $('#orbvallis-clock').addClass('weather-is-warm').removeClass('weather-is-cold');
        } else {
            nextPeriod = cycleLength - currentTime;
            nextState = "warm";
            $('#orbvallis-clock').addClass('weather-is-cold').removeClass('weather-is-warm');
        }
        $('#orbvallis-clock .next-period').text(nextState);
        $('.weather>.big-minute').text(convertMilliseconds(nextPeriod));
    }
    this.init = function () {
        this.updateTime();
    };

    this.start = function () {
        this.interval = setInterval(this.updateTime, 1000);
    };

    this.stop = function () {
        clearInterval(this.interval);
    };
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed")))

/***/ }),

/***/ "./src/js/config.js":
/*!**************************!*\
  !*** ./src/js/config.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  localstorage: {
    domain: "warframe-mastery-helper."
  }
};


/***/ }),

/***/ "./src/js/utils.js":
/*!*************************!*\
  !*** ./src/js/utils.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const config = __webpack_require__(/*! ./config.js */ "./src/js/config.js");
const Handlebars = __webpack_require__(/*! handlebars/runtime */ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js");

var utils = {

  isInArray: function (arr, obj) {
    return (arr.indexOf(obj) != -1);
  },

  getIndexOf: function (array, key, value) {
    var l = array.length;
    for (var k = 0; k < l; k++) {
      if (array[k][key] == value) {
        return k;
      }
    }
    return false;
  },

  groupBy: key => array =>
    array.reduce((objectsByKeyValue, obj) => {
      const value = obj[key];
      objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);
      return objectsByKeyValue;
    }, {}),

  scrubName: function (string) {
    var temp = string.replace(/[^a-zA-Z]+/g, '');
    return temp.replace(/\s/g, '');
  },

  formatNumber: function(num) {
    return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1.")
  },

  sortNumber: function(a, b) {
    return b - a;
  },

  sortByName: function (a, b) {
    if (a["name"] === b["name"]) {
      return 0;
    } else {
      return (a["name"] < b["name"]) ? -1 : 1;
    }
  },

  sortObject: function(obj) {
    return Object.keys(obj).sort().reduce(function (result, key) {
      result[key] = obj[key];
      return result;
    }, {});
  },

  //
  //  Localstorage
  //
  supportsLocalStorage: function () {
    try {
      return 'localStorage' in window && window['localStorage'] !== null;
    } catch (e) {
      return false;
    }
  },

  privateModeEnabled: function () {
    try {
      localStorage.setItem(config["localstorage"]["domain"] + "localstorage.test", "data");
    } catch (e) {
      if (/QUOTA_?EXCEEDED/i.test(e.name)) {
        return false;
      }
    }
    localStorage.removeItem(config["localstorage"]["domain"] + "localstorage.test");
    return true;
  },

  tryLocalStorage: function () {
    if (!utils.supportsLocalStorage()) {
      window.localStorageEnabled = false;
      return false;
    } else if (!utils.privateModeEnabled()) {
      window.localStorageEnabled = false;
      return false;
    } else {
      window.localStorageEnabled = true;
      return true;
    }
  },

  LocalStorage: function () {
    if (window.localStorageEnabled) {
      return true;
    } else {
      return false;
    }
  },

  writeLocalStorage: function (key, value) {
    if (utils.LocalStorage()) {
      localStorage[config["localstorage"]["domain"] + key] = JSON.stringify(value);
    }
  },

  readLocalStorage: function (key) {
    if (utils.LocalStorage()) {
      if (localStorage[config["localstorage"]["domain"] + key]) {
        var data = JSON.parse(localStorage[config["localstorage"]["domain"] + key]);
        return data;
      } else {
        return false;
      }
    }
  },

  //
  //  Handlebars
  //
  registerHandlebarHelpers: function () {
    Handlebars.registerHelper('config', function (obj) {
      var str = arguments[0];
      if (str.indexOf(".") !== -1) {
        var strPart = str.split(".");
        return J.config[strPart[0]][strPart[1]];
      } else {
        return J.config[str];
      }
    });
    Handlebars.registerHelper('escape', function(variable) {
      if (typeof(variable) != "undefined"){
        return variable.replace(/(['"])/g, '\\$1');
      }
    });
    Handlebars.registerHelper('unescape', function (obj) {
      var doc = new DOMParser().parseFromString(arguments[0], "text/html");
      return doc.documentElement.textContent;
    });
    Handlebars.registerHelper("ifValue", function (conditional, options) {
      if (conditional == options.hash.equals) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    });
    Handlebars.registerHelper("replace", function (str, a, b) {
      // Example: {{{replace ImageUrl.Url "small" "medium"}}}
      if (str && typeof str === 'string') {
        if (!a || typeof a !== 'string') return str;
        if (!b || typeof b !== 'string') b = '';
        return str.split(a).join(b);
      }
    });
    Handlebars.registerHelper('ifCond', function (v1, operator, v2, options) {
      switch (operator) {
        case '==':
          return (v1 == v2) ? options.fn(this) : options.inverse(this);
        case '===':
          return (v1 === v2) ? options.fn(this) : options.inverse(this);
        case '!=':
          return (v1 != v2) ? options.fn(this) : options.inverse(this);
        case '!==':
          return (v1 !== v2) ? options.fn(this) : options.inverse(this);
        case '<':
          return (v1 < v2) ? options.fn(this) : options.inverse(this);
        case '<=':
          return (v1 <= v2) ? options.fn(this) : options.inverse(this);
        case '>':
          return (v1 > v2) ? options.fn(this) : options.inverse(this);
        case '>=':
          return (v1 >= v2) ? options.fn(this) : options.inverse(this);
        case '&&':
          return (v1 && v2) ? options.fn(this) : options.inverse(this);
        case '||':
          return (v1 || v2) ? options.fn(this) : options.inverse(this);
        default:
          return options.inverse(this);
      }
    });
  }

};

module.exports = {
  utils: utils
};


/***/ }),

/***/ "./src/js/vendor/foundation.js":
/*!*************************************!*\
  !*** ./src/js/vendor/foundation.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*
 * Foundation Responsive Library
 * http://foundation.zurb.com
 * Copyright 2015, ZURB
 * Free to use under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
*/

(function ($, window, document, undefined) {
  'use strict';

  var header_helpers = function (class_array) {
    var head = $('head');
    head.prepend($.map(class_array, function (class_name) {
      if (head.has('.' + class_name).length === 0) {
        return '<meta class="' + class_name + '" />';
      }
    }));
  };

  header_helpers([
    'foundation-mq-small',
    'foundation-mq-small-only',
    'foundation-mq-medium',
    'foundation-mq-medium-only',
    'foundation-mq-large',
    'foundation-mq-large-only',
    'foundation-mq-xlarge',
    'foundation-mq-xlarge-only',
    'foundation-mq-xxlarge',
    'foundation-data-attribute-namespace']);

  // Enable FastClick if present

  $(function () {
    if (typeof FastClick !== 'undefined') {
      // Don't attach to body if undefined
      if (typeof document.body !== 'undefined') {
        FastClick.attach(document.body);
      }
    }
  });

  // private Fast Selector wrapper,
  // returns jQuery object. Only use where
  // getElementById is not available.
  var S = function (selector, context) {
    if (typeof selector === 'string') {
      if (context) {
        var cont;
        if (context.jquery) {
          cont = context[0];
          if (!cont) {
            return context;
          }
        } else {
          cont = context;
        }
        return $(cont.querySelectorAll(selector));
      }

      return $(document.querySelectorAll(selector));
    }

    return $(selector, context);
  };

  // Namespace functions.

  var attr_name = function (init) {
    var arr = [];
    if (!init) {
      arr.push('data');
    }
    if (this.namespace.length > 0) {
      arr.push(this.namespace);
    }
    arr.push(this.name);

    return arr.join('-');
  };

  var add_namespace = function (str) {
    var parts = str.split('-'),
        i = parts.length,
        arr = [];

    while (i--) {
      if (i !== 0) {
        arr.push(parts[i]);
      } else {
        if (this.namespace.length > 0) {
          arr.push(this.namespace, parts[i]);
        } else {
          arr.push(parts[i]);
        }
      }
    }

    return arr.reverse().join('-');
  };

  // Event binding and data-options updating.

  var bindings = function (method, options) {
    var self = this,
        bind = function(){
          var $this = S(this),
              should_bind_events = !$this.data(self.attr_name(true) + '-init');
          $this.data(self.attr_name(true) + '-init', $.extend({}, self.settings, (options || method), self.data_options($this)));

          if (should_bind_events) {
            self.events(this);
          }
        };

    if (S(this.scope).is('[' + this.attr_name() +']')) {
      bind.call(this.scope);
    } else {
      S('[' + this.attr_name() +']', this.scope).each(bind);
    }
    // # Patch to fix #5043 to move this *after* the if/else clause in order for Backbone and similar frameworks to have improved control over event binding and data-options updating.
    if (typeof method === 'string') {
      return this[method].call(this, options);
    }

  };

  var single_image_loaded = function (image, callback) {
    function loaded () {
      callback(image[0]);
    }

    function bindLoad () {
      this.one('load', loaded);

      if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
        var src = this.attr( 'src' ),
            param = src.match( /\?/ ) ? '&' : '?';

        param += 'random=' + (new Date()).getTime();
        this.attr('src', src + param);
      }
    }

    if (!image.attr('src')) {
      loaded();
      return;
    }

    if (image[0].complete || image[0].readyState === 4) {
      loaded();
    } else {
      bindLoad.call(image);
    }
  };

  /*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */

  window.matchMedia || (window.matchMedia = function() {
      "use strict";

      // For browsers that support matchMedium api such as IE 9 and webkit
      var styleMedia = (window.styleMedia || window.media);

      // For those that don't support matchMedium
      if (!styleMedia) {
          var style       = document.createElement('style'),
              script      = document.getElementsByTagName('script')[0],
              info        = null;

          style.type  = 'text/css';
          style.id    = 'matchmediajs-test';

          script.parentNode.insertBefore(style, script);

          // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
          info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;

          styleMedia = {
              matchMedium: function(media) {
                  var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

                  // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
                  if (style.styleSheet) {
                      style.styleSheet.cssText = text;
                  } else {
                      style.textContent = text;
                  }

                  // Test if media query is true or false
                  return info.width === '1px';
              }
          };
      }

      return function(media) {
          return {
              matches: styleMedia.matchMedium(media || 'all'),
              media: media || 'all'
          };
      };
  }());

  /*
   * jquery.requestAnimationFrame
   * https://github.com/gnarf37/jquery-requestAnimationFrame
   * Requires jQuery 1.8+
   *
   * Copyright (c) 2012 Corey Frang
   * Licensed under the MIT license.
   */

  (function(jQuery) {


  // requestAnimationFrame polyfill adapted from Erik Möller
  // fixes from Paul Irish and Tino Zijdel
  // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
  // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

  var animating,
      lastTime = 0,
      vendors = ['webkit', 'moz'],
      requestAnimationFrame = window.requestAnimationFrame,
      cancelAnimationFrame = window.cancelAnimationFrame,
      jqueryFxAvailable = 'undefined' !== typeof jQuery.fx;

  for (; lastTime < vendors.length && !requestAnimationFrame; lastTime++) {
    requestAnimationFrame = window[ vendors[lastTime] + 'RequestAnimationFrame' ];
    cancelAnimationFrame = cancelAnimationFrame ||
      window[ vendors[lastTime] + 'CancelAnimationFrame' ] ||
      window[ vendors[lastTime] + 'CancelRequestAnimationFrame' ];
  }

  function raf() {
    if (animating) {
      requestAnimationFrame(raf);

      if (jqueryFxAvailable) {
        jQuery.fx.tick();
      }
    }
  }

  if (requestAnimationFrame) {
    // use rAF
    window.requestAnimationFrame = requestAnimationFrame;
    window.cancelAnimationFrame = cancelAnimationFrame;

    if (jqueryFxAvailable) {
      jQuery.fx.timer = function (timer) {
        if (timer() && jQuery.timers.push(timer) && !animating) {
          animating = true;
          raf();
        }
      };

      jQuery.fx.stop = function () {
        animating = false;
      };
    }
  } else {
    // polyfill
    window.requestAnimationFrame = function (callback) {
      var currTime = new Date().getTime(),
        timeToCall = Math.max(0, 16 - (currTime - lastTime)),
        id = window.setTimeout(function () {
          callback(currTime + timeToCall);
        }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };

    window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };

  }

  }( $ ));

  function removeQuotes (string) {
    if (typeof string === 'string' || string instanceof String) {
      string = string.replace(/^['\\/"]+|(;\s?})+|['\\/"]+$/g, '');
    }

    return string;
  }

  function MediaQuery(selector) {
    this.selector = selector;
    this.query = '';
  }

  MediaQuery.prototype.toString = function () {
    return this.query || (this.query = S(this.selector).css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''));
  };

  window.Foundation = {
    name : 'Foundation',

    version : '5.5.3',

    media_queries : {
      'small'       : new MediaQuery('.foundation-mq-small'),
      'small-only'  : new MediaQuery('.foundation-mq-small-only'),
      'medium'      : new MediaQuery('.foundation-mq-medium'),
      'medium-only' : new MediaQuery('.foundation-mq-medium-only'),
      'large'       : new MediaQuery('.foundation-mq-large'),
      'large-only'  : new MediaQuery('.foundation-mq-large-only'),
      'xlarge'      : new MediaQuery('.foundation-mq-xlarge'),
      'xlarge-only' : new MediaQuery('.foundation-mq-xlarge-only'),
      'xxlarge'     : new MediaQuery('.foundation-mq-xxlarge')
    },

    stylesheet : $('<style></style>').appendTo('head')[0].sheet,

    global : {
      namespace : undefined
    },

    init : function (scope, libraries, method, options, response) {
      var args = [scope, method, options, response],
          responses = [];

      // check RTL
      this.rtl = /rtl/i.test(S('html').attr('dir'));

      // set foundation global scope
      this.scope = scope || this.scope;

      this.set_namespace();

      if (libraries && typeof libraries === 'string' && !/reflow/i.test(libraries)) {
        if (this.libs.hasOwnProperty(libraries)) {
          responses.push(this.init_lib(libraries, args));
        }
      } else {
        for (var lib in this.libs) {
          responses.push(this.init_lib(lib, libraries));
        }
      }

      S(window).on("load", function () {
        S(window)
          .trigger('resize.fndtn.clearing')
          .trigger('resize.fndtn.dropdown')
          .trigger('resize.fndtn.equalizer')
          .trigger('resize.fndtn.interchange')
          .trigger('resize.fndtn.joyride')
          .trigger('resize.fndtn.magellan')
          .trigger('resize.fndtn.topbar')
          .trigger('resize.fndtn.slider');
      });

      return scope;
    },

    init_lib : function (lib, args) {
      if (this.libs.hasOwnProperty(lib)) {
        this.patch(this.libs[lib]);

        if (args && args.hasOwnProperty(lib)) {
            if (typeof this.libs[lib].settings !== 'undefined') {
              $.extend(true, this.libs[lib].settings, args[lib]);
            } else if (typeof this.libs[lib].defaults !== 'undefined') {
              $.extend(true, this.libs[lib].defaults, args[lib]);
            }
          return this.libs[lib].init.apply(this.libs[lib], [this.scope, args[lib]]);
        }

        args = args instanceof Array ? args : new Array(args);
        return this.libs[lib].init.apply(this.libs[lib], args);
      }

      return function () {};
    },

    patch : function (lib) {
      lib.scope = this.scope;
      lib.namespace = this.global.namespace;
      lib.rtl = this.rtl;
      lib['data_options'] = this.utils.data_options;
      lib['attr_name'] = attr_name;
      lib['add_namespace'] = add_namespace;
      lib['bindings'] = bindings;
      lib['S'] = this.utils.S;
    },

    inherit : function (scope, methods) {
      var methods_arr = methods.split(' '),
          i = methods_arr.length;

      while (i--) {
        if (this.utils.hasOwnProperty(methods_arr[i])) {
          scope[methods_arr[i]] = this.utils[methods_arr[i]];
        }
      }
    },

    set_namespace : function () {

      // Description:
      //    Don't bother reading the namespace out of the meta tag
      //    if the namespace has been set globally in javascript
      //
      // Example:
      //    Foundation.global.namespace = 'my-namespace';
      // or make it an empty string:
      //    Foundation.global.namespace = '';
      //
      //

      // If the namespace has not been set (is undefined), try to read it out of the meta element.
      // Otherwise use the globally defined namespace, even if it's empty ('')
      var namespace = ( this.global.namespace === undefined ) ? $('.foundation-data-attribute-namespace').css('font-family') : this.global.namespace;

      // Finally, if the namsepace is either undefined or false, set it to an empty string.
      // Otherwise use the namespace value.
      this.global.namespace = ( namespace === undefined || /false/i.test(namespace) ) ? '' : namespace;
    },

    libs : {},

    // methods that can be inherited in libraries
    utils : {

      // Description:
      //    Fast Selector wrapper returns jQuery object. Only use where getElementById
      //    is not available.
      //
      // Arguments:
      //    Selector (String): CSS selector describing the element(s) to be
      //    returned as a jQuery object.
      //
      //    Scope (String): CSS selector describing the area to be searched. Default
      //    is document.
      //
      // Returns:
      //    Element (jQuery Object): jQuery object containing elements matching the
      //    selector within the scope.
      S : S,

      // Description:
      //    Executes a function a max of once every n milliseconds
      //
      // Arguments:
      //    Func (Function): Function to be throttled.
      //
      //    Delay (Integer): Function execution threshold in milliseconds.
      //
      // Returns:
      //    Lazy_function (Function): Function with throttling applied.
      throttle : function (func, delay) {
        var timer = null;

        return function () {
          var context = this, args = arguments;

          if (timer == null) {
            timer = setTimeout(function () {
              func.apply(context, args);
              timer = null;
            }, delay);
          }
        };
      },

      // Description:
      //    Executes a function when it stops being invoked for n seconds
      //    Modified version of _.debounce() http://underscorejs.org
      //
      // Arguments:
      //    Func (Function): Function to be debounced.
      //
      //    Delay (Integer): Function execution threshold in milliseconds.
      //
      //    Immediate (Bool): Whether the function should be called at the beginning
      //    of the delay instead of the end. Default is false.
      //
      // Returns:
      //    Lazy_function (Function): Function with debouncing applied.
      debounce : function (func, delay, immediate) {
        var timeout, result;
        return function () {
          var context = this, args = arguments;
          var later = function () {
            timeout = null;
            if (!immediate) {
              result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, delay);
          if (callNow) {
            result = func.apply(context, args);
          }
          return result;
        };
      },

      // Description:
      //    Parses data-options attribute
      //
      // Arguments:
      //    El (jQuery Object): Element to be parsed.
      //
      // Returns:
      //    Options (Javascript Object): Contents of the element's data-options
      //    attribute.
      data_options : function (el, data_attr_name) {
        data_attr_name = data_attr_name || 'options';
        var opts = {}, ii, p, opts_arr,
            data_options = function (el) {
              var namespace = Foundation.global.namespace;

              if (namespace.length > 0) {
                return el.data(namespace + '-' + data_attr_name);
              }

              return el.data(data_attr_name);
            };

        var cached_options = data_options(el);

        if (typeof cached_options === 'object') {
          return cached_options;
        }

        opts_arr = (cached_options || ':').split(';');
        ii = opts_arr.length;

        function isNumber (o) {
          return !isNaN (o - 0) && o !== null && o !== '' && o !== false && o !== true;
        }

        function trim (str) {
          if (typeof str === 'string') {
            return $.trim(str);
          }
          return str;
        }

        while (ii--) {
          p = opts_arr[ii].split(':');
          p = [p[0], p.slice(1).join(':')];

          if (/true/i.test(p[1])) {
            p[1] = true;
          }
          if (/false/i.test(p[1])) {
            p[1] = false;
          }
          if (isNumber(p[1])) {
            if (p[1].indexOf('.') === -1) {
              p[1] = parseInt(p[1], 10);
            } else {
              p[1] = parseFloat(p[1]);
            }
          }

          if (p.length === 2 && p[0].length > 0) {
            opts[trim(p[0])] = trim(p[1]);
          }
        }

        return opts;
      },

      // Description:
      //    Adds JS-recognizable media queries
      //
      // Arguments:
      //    Media (String): Key string for the media query to be stored as in
      //    Foundation.media_queries
      //
      //    Class (String): Class name for the generated <meta> tag
      register_media : function (media, media_class) {
        if (Foundation.media_queries[media] === undefined) {
          $('head').append('<meta class="' + media_class + '"/>');
          Foundation.media_queries[media] = removeQuotes($('.' + media_class).css('font-family'));
        }
      },

      // Description:
      //    Add custom CSS within a JS-defined media query
      //
      // Arguments:
      //    Rule (String): CSS rule to be appended to the document.
      //
      //    Media (String): Optional media query string for the CSS rule to be
      //    nested under.
      add_custom_rule : function (rule, media) {
        if (media === undefined && Foundation.stylesheet) {
          Foundation.stylesheet.insertRule(rule, Foundation.stylesheet.cssRules.length);
        } else {
          var query = Foundation.media_queries[media];

          if (query !== undefined) {
            Foundation.stylesheet.insertRule('@media ' +
              Foundation.media_queries[media] + '{ ' + rule + ' }', Foundation.stylesheet.cssRules.length);
          }
        }
      },

      // Description:
      //    Performs a callback function when an image is fully loaded
      //
      // Arguments:
      //    Image (jQuery Object): Image(s) to check if loaded.
      //
      //    Callback (Function): Function to execute when image is fully loaded.
      image_loaded : function (images, callback) {
        var self = this,
            unloaded = images.length;

        function pictures_has_height(images) {
          var pictures_number = images.length;

          for (var i = pictures_number - 1; i >= 0; i--) {
            if(images.attr('height') === undefined) {
              return false;
            };
          };

          return true;
        }

        if (unloaded === 0 || pictures_has_height(images)) {
          callback(images);
        }

        images.each(function () {
          single_image_loaded(self.S(this), function () {
            unloaded -= 1;
            if (unloaded === 0) {
              callback(images);
            }
          });
        });
      },

      // Description:
      //    Returns a random, alphanumeric string
      //
      // Arguments:
      //    Length (Integer): Length of string to be generated. Defaults to random
      //    integer.
      //
      // Returns:
      //    Rand (String): Pseudo-random, alphanumeric string.
      random_str : function () {
        if (!this.fidx) {
          this.fidx = 0;
        }
        this.prefix = this.prefix || [(this.name || 'F'), (+new Date).toString(36)].join('-');

        return this.prefix + (this.fidx++).toString(36);
      },

      // Description:
      //    Helper for window.matchMedia
      //
      // Arguments:
      //    mq (String): Media query
      //
      // Returns:
      //    (Boolean): Whether the media query passes or not
      match : function (mq) {
        return window.matchMedia(mq).matches;
      },

      // Description:
      //    Helpers for checking Foundation default media queries with JS
      //
      // Returns:
      //    (Boolean): Whether the media query passes or not

      is_small_up : function () {
        return this.match(Foundation.media_queries.small);
      },

      is_medium_up : function () {
        return this.match(Foundation.media_queries.medium);
      },

      is_large_up : function () {
        return this.match(Foundation.media_queries.large);
      },

      is_xlarge_up : function () {
        return this.match(Foundation.media_queries.xlarge);
      },

      is_xxlarge_up : function () {
        return this.match(Foundation.media_queries.xxlarge);
      },

      is_small_only : function () {
        return !this.is_medium_up() && !this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_medium_only : function () {
        return this.is_medium_up() && !this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_large_only : function () {
        return this.is_medium_up() && this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_xlarge_only : function () {
        return this.is_medium_up() && this.is_large_up() && this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_xxlarge_only : function () {
        return this.is_medium_up() && this.is_large_up() && this.is_xlarge_up() && this.is_xxlarge_up();
      }
    }
  };

  $.fn.foundation = function () {
    var args = Array.prototype.slice.call(arguments, 0);

    return this.each(function () {
      Foundation.init.apply(Foundation, [this].concat(args));
      return this;
    });
  };

}(jQuery, window, window.document));

;(function ($, window, document, undefined) {
  'use strict';

  var openModals = [];

  Foundation.libs.reveal = {
    name : 'reveal',

    version : '5.5.3',

    locked : false,

    settings : {
      animation : 'fadeAndPop',
      animation_speed : 250,
      close_on_background_click : true,
      close_on_esc : true,
      dismiss_modal_class : 'close-reveal-modal',
      multiple_opened : false,
      bg_class : 'reveal-modal-bg',
      root_element : 'body',
      open : function(){},
      opened : function(){},
      close : function(){},
      closed : function(){},
      on_ajax_error: $.noop,
      bg : $('.reveal-modal-bg'),
      css : {
        open : {
          'opacity' : 0,
          'visibility' : 'visible',
          'display' : 'block'
        },
        close : {
          'opacity' : 1,
          'visibility' : 'hidden',
          'display' : 'none'
        }
      }
    },

    init : function (scope, method, options) {
      $.extend(true, this.settings, method, options);
      this.bindings(method, options);
    },

    events : function (scope) {
      var self = this,
          S = self.S;

      S(this.scope)
        .off('.reveal')
        .on('click.fndtn.reveal', '[' + this.add_namespace('data-reveal-id') + ']:not([disabled])', function (e) {
          e.preventDefault();

          if (!self.locked) {
            var element = S(this),
                ajax = element.data(self.data_attr('reveal-ajax')),
                replaceContentSel = element.data(self.data_attr('reveal-replace-content'));

            self.locked = true;

            if (typeof ajax === 'undefined') {
              self.open.call(self, element);
            } else {
              var url = ajax === true ? element.attr('href') : ajax;
              self.open.call(self, element, {url : url}, { replaceContentSel : replaceContentSel });
            }
          }
        });

      S(document)
        .on('click.fndtn.reveal', this.close_targets(), function (e) {
          e.preventDefault();
          if (!self.locked) {
            var settings = S('[' + self.attr_name() + '].open').data(self.attr_name(true) + '-init') || self.settings,
                bg_clicked = S(e.target)[0] === S('.' + settings.bg_class)[0];

            if (bg_clicked) {
              if (settings.close_on_background_click) {
                e.stopPropagation();
              } else {
                return;
              }
            }

            self.locked = true;
            self.close.call(self, bg_clicked ? S('[' + self.attr_name() + '].open:not(.toback)') : S(this).closest('[' + self.attr_name() + ']'));
          }
        });

      if (S('[' + self.attr_name() + ']', this.scope).length > 0) {
        S(this.scope)
          // .off('.reveal')
          .on('open.fndtn.reveal', this.settings.open)
          .on('opened.fndtn.reveal', this.settings.opened)
          .on('opened.fndtn.reveal', this.open_video)
          .on('close.fndtn.reveal', this.settings.close)
          .on('closed.fndtn.reveal', this.settings.closed)
          .on('closed.fndtn.reveal', this.close_video);
      } else {
        S(this.scope)
          // .off('.reveal')
          .on('open.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.open)
          .on('opened.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.opened)
          .on('opened.fndtn.reveal', '[' + self.attr_name() + ']', this.open_video)
          .on('close.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.close)
          .on('closed.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.closed)
          .on('closed.fndtn.reveal', '[' + self.attr_name() + ']', this.close_video);
      }

      return true;
    },

    // PATCH #3: turning on key up capture only when a reveal window is open
    key_up_on : function (scope) {
      var self = this;

      // PATCH #1: fixing multiple keyup event trigger from single key press
      self.S('body').off('keyup.fndtn.reveal').on('keyup.fndtn.reveal', function ( event ) {
        var open_modal = self.S('[' + self.attr_name() + '].open'),
            settings = open_modal.data(self.attr_name(true) + '-init') || self.settings ;
        // PATCH #2: making sure that the close event can be called only while unlocked,
        //           so that multiple keyup.fndtn.reveal events don't prevent clean closing of the reveal window.
        if ( settings && event.which === 27  && settings.close_on_esc && !self.locked) { // 27 is the keycode for the Escape key
          self.close.call(self, open_modal);
        }
      });

      return true;
    },

    // PATCH #3: turning on key up capture only when a reveal window is open
    key_up_off : function (scope) {
      this.S('body').off('keyup.fndtn.reveal');
      return true;
    },

    open : function (target, ajax_settings) {
      var self = this,
          modal;

      if (target) {
        if (typeof target.selector !== 'undefined') {
          // Find the named node; only use the first one found, since the rest of the code assumes there's only one node
          modal = self.S('#' + target.data(self.data_attr('reveal-id'))).first();
        } else {
          modal = self.S(this.scope);

          ajax_settings = target;
        }
      } else {
        modal = self.S(this.scope);
      }

      var settings = modal.data(self.attr_name(true) + '-init');
      settings = settings || this.settings;


      if (modal.hasClass('open') && target !== undefined && target.attr('data-reveal-id') == modal.attr('id')) {
        return self.close(modal);
      }

      if (!modal.hasClass('open')) {
        var open_modal = self.S('[' + self.attr_name() + '].open');

        if (typeof modal.data('css-top') === 'undefined') {
          modal.data('css-top', parseInt(modal.css('top'), 10))
            .data('offset', this.cache_offset(modal));
        }

        modal.attr('tabindex','0').attr('aria-hidden','false');

        this.key_up_on(modal);    // PATCH #3: turning on key up capture only when a reveal window is open

        // Prevent namespace event from triggering twice
        modal.on('open.fndtn.reveal', function(e) {
          if (e.namespace !== 'fndtn.reveal') return;
        });

        modal.on('open.fndtn.reveal').trigger('open.fndtn.reveal');

        if (open_modal.length < 1) {
          this.toggle_bg(modal, true);
        }

        if (typeof ajax_settings === 'string') {
          ajax_settings = {
            url : ajax_settings
          };
        }

        var openModal = function() {
          if(open_modal.length > 0) {
            if(settings.multiple_opened) {
              self.to_back(open_modal);
            } else {
              self.hide(open_modal, settings.css.close);
            }
          }

          // bl: add the open_modal that isn't already in the background to the openModals array
          if(settings.multiple_opened) {
            openModals.push(modal);
          }

          self.show(modal, settings.css.open);
        };

        if (typeof ajax_settings === 'undefined' || !ajax_settings.url) {
          openModal();
        } else {
          var old_success = typeof ajax_settings.success !== 'undefined' ? ajax_settings.success : null;
          $.extend(ajax_settings, {
            success : function (data, textStatus, jqXHR) {
              if ( $.isFunction(old_success) ) {
                var result = old_success(data, textStatus, jqXHR);
                if (typeof result == 'string') {
                  data = result;
                }
              }

              if (typeof options !== 'undefined' && typeof options.replaceContentSel !== 'undefined') {
                modal.find(options.replaceContentSel).html(data);
              } else {
                modal.html(data);
              }

              self.S(modal).foundation('section', 'reflow');
              self.S(modal).children().foundation();

              openModal();
            }
          });

          // check for if user initalized with error callback
          if (settings.on_ajax_error !== $.noop) {
            $.extend(ajax_settings, {
              error : settings.on_ajax_error
            });
          }

          $.ajax(ajax_settings);
        }
      }
      self.S(window).trigger('resize');
    },

    close : function (modal) {
      var modal = modal && modal.length ? modal : this.S(this.scope),
          open_modals = this.S('[' + this.attr_name() + '].open'),
          settings = modal.data(this.attr_name(true) + '-init') || this.settings,
          self = this;

      if (open_modals.length > 0) {

        modal.removeAttr('tabindex','0').attr('aria-hidden','true');

        this.locked = true;
        this.key_up_off(modal);   // PATCH #3: turning on key up capture only when a reveal window is open

        modal.trigger('close.fndtn.reveal');

        if ((settings.multiple_opened && open_modals.length === 1) || !settings.multiple_opened || modal.length > 1) {
          self.toggle_bg(modal, false);
          self.to_front(modal);
        }

        if (settings.multiple_opened) {
          var isCurrent = modal.is(':not(.toback)');
          self.hide(modal, settings.css.close, settings);
          if(isCurrent) {
            // remove the last modal since it is now closed
            openModals.pop();
          } else {
            // if this isn't the current modal, then find it in the array and remove it
            openModals = $.grep(openModals, function(elt) {
              var isThis = elt[0]===modal[0];
              if(isThis) {
                // since it's not currently in the front, put it in the front now that it is hidden
                // so that if it's re-opened, it won't be .toback
                self.to_front(modal);
              }
              return !isThis;
            });
          }
          // finally, show the next modal in the stack, if there is one
          if(openModals.length>0) {
            self.to_front(openModals[openModals.length - 1]);
          }
        } else {
          self.hide(open_modals, settings.css.close, settings);
        }
      }
    },

    close_targets : function () {
      var base = '.' + this.settings.dismiss_modal_class;

      if (this.settings.close_on_background_click) {
        return base + ', .' + this.settings.bg_class;
      }

      return base;
    },

    toggle_bg : function (modal, state) {
      if (this.S('.' + this.settings.bg_class).length === 0) {
        this.settings.bg = $('<div />', {'class': this.settings.bg_class})
          .appendTo('body').hide();
      }

      var visible = this.settings.bg.filter(':visible').length > 0;
      if ( state != visible ) {
        if ( state == undefined ? visible : !state ) {
          this.hide(this.settings.bg);
        } else {
          this.show(this.settings.bg);
        }
      }
    },

    show : function (el, css) {
      // is modal
      if (css) {
        var settings = el.data(this.attr_name(true) + '-init') || this.settings,
            root_element = settings.root_element,
            context = this;

        if (el.parent(root_element).length === 0) {
          var placeholder = el.wrap('<div style="display: none;" />').parent();

          el.on('closed.fndtn.reveal.wrapped', function () {
            el.detach().appendTo(placeholder);
            el.unwrap().unbind('closed.fndtn.reveal.wrapped');
          });

          el.detach().appendTo(root_element);
        }

        var animData = getAnimationData(settings.animation);
        if (!animData.animate) {
          this.locked = false;
        }
        if (animData.pop) {
          css.top = $(window).scrollTop() - el.data('offset') + 'px';
          var end_css = {
            top: $(window).scrollTop() + el.data('css-top') + 'px',
            opacity: 1
          };

          return setTimeout(function () {
            return el
              .css(css)
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.trigger('opened.fndtn.reveal');
              })
              .addClass('open');
          }, settings.animation_speed / 2);
        }

        css.top = $(window).scrollTop() + el.data('css-top') + 'px';

        if (animData.fade) {
          var end_css = {opacity: 1};

          return setTimeout(function () {
            return el
              .css(css)
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.trigger('opened.fndtn.reveal');
              })
              .addClass('open');
          }, settings.animation_speed / 2);
        }

        return el.css(css).show().css({opacity : 1}).addClass('open').trigger('opened.fndtn.reveal');
      }

      var settings = this.settings;

      // should we animate the background?
      if (getAnimationData(settings.animation).fade) {
        return el.fadeIn(settings.animation_speed / 2);
      }

      this.locked = false;

      return el.show();
    },

    to_back : function(el) {
      el.addClass('toback');
    },

    to_front : function(el) {
      el.removeClass('toback');
    },

    hide : function (el, css) {
      // is modal
      if (css) {
        var settings = el.data(this.attr_name(true) + '-init'),
            context = this;
        settings = settings || this.settings;

        var animData = getAnimationData(settings.animation);
        if (!animData.animate) {
          this.locked = false;
        }
        if (animData.pop) {
          var end_css = {
            top: - $(window).scrollTop() - el.data('offset') + 'px',
            opacity: 0
          };

          return setTimeout(function () {
            return el
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.css(css).trigger('closed.fndtn.reveal');
              })
              .removeClass('open');
          }, settings.animation_speed / 2);
        }

        if (animData.fade) {
          var end_css = {opacity : 0};

          return setTimeout(function () {
            return el
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.css(css).trigger('closed.fndtn.reveal');
              })
              .removeClass('open');
          }, settings.animation_speed / 2);
        }

        return el.hide().css(css).removeClass('open').trigger('closed.fndtn.reveal');
      }

      var settings = this.settings;

      // should we animate the background?
      if (getAnimationData(settings.animation).fade) {
        return el.fadeOut(settings.animation_speed / 2);
      }

      return el.hide();
    },

    close_video : function (e) {
      var video = $('.flex-video', e.target),
          iframe = $('iframe', video);

      if (iframe.length > 0) {
        iframe.attr('data-src', iframe[0].src);
        iframe.attr('src', iframe.attr('src'));
        video.hide();
      }
    },

    open_video : function (e) {
      var video = $('.flex-video', e.target),
          iframe = video.find('iframe');

      if (iframe.length > 0) {
        var data_src = iframe.attr('data-src');
        if (typeof data_src === 'string') {
          iframe[0].src = iframe.attr('data-src');
        } else {
          var src = iframe[0].src;
          iframe[0].src = undefined;
          iframe[0].src = src;
        }
        video.show();
      }
    },

    data_attr : function (str) {
      if (this.namespace.length > 0) {
        return this.namespace + '-' + str;
      }

      return str;
    },

    cache_offset : function (modal) {
      var offset = modal.show().height() + parseInt(modal.css('top'), 10) + modal.scrollY;

      modal.hide();

      return offset;
    },

    off : function () {
      $(this.scope).off('.fndtn.reveal');
    },

    reflow : function () {}
  };

  /*
   * getAnimationData('popAndFade') // {animate: true,  pop: true,  fade: true}
   * getAnimationData('fade')       // {animate: true,  pop: false, fade: true}
   * getAnimationData('pop')        // {animate: true,  pop: true,  fade: false}
   * getAnimationData('foo')        // {animate: false, pop: false, fade: false}
   * getAnimationData(null)         // {animate: false, pop: false, fade: false}
   */
  function getAnimationData(str) {
    var fade = /fade/i.test(str);
    var pop = /pop/i.test(str);
    return {
      animate : fade || pop,
      pop : pop,
      fade : fade
    };
  }
}(jQuery, window, window.document));

;(function ($, window, document, undefined) {
  'use strict';

  Foundation.libs.tooltip = {
    name : 'tooltip',

    version : '5.5.3',

    settings : {
      additional_inheritable_classes : [],
      tooltip_class : '.tooltip',
      append_to : 'body',
      touch_close_text : 'Tap To Close',
      disable_for_touch : false,
      hover_delay : 200,
      fade_in_duration : 150,
      fade_out_duration : 150,
      show_on : 'all',
      tip_template : function (selector, content) {
        return '<span data-selector="' + selector + '" id="' + selector + '" class="'
          + Foundation.libs.tooltip.settings.tooltip_class.substring(1)
          + '" role="tooltip">' + content + '<span class="nub"></span></span>';
      }
    },

    cache : {},

    init : function (scope, method, options) {
      Foundation.inherit(this, 'random_str');
      this.bindings(method, options);
    },

    should_show : function (target, tip) {
      var settings = $.extend({}, this.settings, this.data_options(target));

      if (settings.show_on === 'all') {
        return true;
      } else if (this.small() && settings.show_on === 'small') {
        return true;
      } else if (this.medium() && settings.show_on === 'medium') {
        return true;
      } else if (this.large() && settings.show_on === 'large') {
        return true;
      }
      return false;
    },

    medium : function () {
      return matchMedia(Foundation.media_queries['medium']).matches;
    },

    large : function () {
      return matchMedia(Foundation.media_queries['large']).matches;
    },

    events : function (instance) {
      var self = this,
          S = self.S;

      self.create(this.S(instance));

      function _startShow(elt, $this, immediate) {
        if (elt.timer) {
          return;
        }

        if (immediate) {
          elt.timer = null;
          self.showTip($this);
        } else {
          elt.timer = setTimeout(function () {
            elt.timer = null;
            self.showTip($this);
          }.bind(elt), self.settings.hover_delay);
        }
      }

      function _startHide(elt, $this) {
        if (elt.timer) {
          clearTimeout(elt.timer);
          elt.timer = null;
        }

        self.hide($this);
      }

      $(this.scope)
        .off('.tooltip')
        .on('mouseenter.fndtn.tooltip mouseleave.fndtn.tooltip touchstart.fndtn.tooltip MSPointerDown.fndtn.tooltip',
          '[' + this.attr_name() + ']', function (e) {
          var $this = S(this),
              settings = $.extend({}, self.settings, self.data_options($this)),
              is_touch = false;

          if (Modernizr.touch && /touchstart|MSPointerDown/i.test(e.type) && S(e.target).is('a')) {
            return false;
          }

          if (/mouse/i.test(e.type) && self.ie_touch(e)) {
            return false;
          }
          
          if ($this.hasClass('open')) {
            if (Modernizr.touch && /touchstart|MSPointerDown/i.test(e.type)) {
              e.preventDefault();
            }
            self.hide($this);
          } else {
            if (settings.disable_for_touch && Modernizr.touch && /touchstart|MSPointerDown/i.test(e.type)) {
              return;
            } else if (!settings.disable_for_touch && Modernizr.touch && /touchstart|MSPointerDown/i.test(e.type)) {
              e.preventDefault();
              S(settings.tooltip_class + '.open').hide();
              is_touch = true;
              // close other open tooltips on touch
              if ($('.open[' + self.attr_name() + ']').length > 0) {
               var prevOpen = S($('.open[' + self.attr_name() + ']')[0]);
               self.hide(prevOpen);
              }
            }

            if (/enter|over/i.test(e.type)) {
              _startShow(this, $this);

            } else if (e.type === 'mouseout' || e.type === 'mouseleave') {
              _startHide(this, $this);
            } else {
              _startShow(this, $this, true);
            }
          }
        })
        .on('mouseleave.fndtn.tooltip touchstart.fndtn.tooltip MSPointerDown.fndtn.tooltip', '[' + this.attr_name() + '].open', function (e) {
          if (/mouse/i.test(e.type) && self.ie_touch(e)) {
            return false;
          }

          if ($(this).data('tooltip-open-event-type') == 'touch' && e.type == 'mouseleave') {
            return;
          } else if ($(this).data('tooltip-open-event-type') == 'mouse' && /MSPointerDown|touchstart/i.test(e.type)) {
            self.convert_to_touch($(this));
          } else {
            _startHide(this, $(this));
          }
        })
        .on('DOMNodeRemoved DOMAttrModified', '[' + this.attr_name() + ']:not(a)', function (e) {
          _startHide(this, S(this));
        });
    },

    ie_touch : function (e) {
      // How do I distinguish between IE11 and Windows Phone 8?????
      return false;
    },

    showTip : function ($target) {
      var $tip = this.getTip($target);
      if (this.should_show($target, $tip)) {
        return this.show($target);
      }
      return;
    },

    getTip : function ($target) {
      var selector = this.selector($target),
          settings = $.extend({}, this.settings, this.data_options($target)),
          tip = null;

      if (selector) {
        tip = this.S('span[data-selector="' + selector + '"]' + settings.tooltip_class);
      }

      return (typeof tip === 'object') ? tip : false;
    },

    selector : function ($target) {
      var dataSelector = $target.attr(this.attr_name()) || $target.attr('data-selector');

      if (typeof dataSelector != 'string') {
        dataSelector = this.random_str(6);
        $target
          .attr('data-selector', dataSelector)
          .attr('aria-describedby', dataSelector);
      }

      return dataSelector;
    },

    create : function ($target) {
      var self = this,
          settings = $.extend({}, this.settings, this.data_options($target)),
          tip_template = this.settings.tip_template;

      if (typeof settings.tip_template === 'string' && window.hasOwnProperty(settings.tip_template)) {
        tip_template = window[settings.tip_template];
      }

      var $tip = $(tip_template(this.selector($target), $('<div></div>').html($target.attr('title')).html())),
          classes = this.inheritable_classes($target);

      $tip.addClass(classes).appendTo(settings.append_to);

      if (Modernizr.touch) {
        $tip.append('<span class="tap-to-close">' + settings.touch_close_text + '</span>');
        $tip.on('touchstart.fndtn.tooltip MSPointerDown.fndtn.tooltip', function (e) {
          self.hide($target);
        });
      }

      $target.removeAttr('title').attr('title', '');
    },

    reposition : function (target, tip, classes) {
      var width, nub, nubHeight, nubWidth, objPos;

      tip.css('visibility', 'hidden').show();

      width = target.data('width');
      nub = tip.children('.nub');
      nubHeight = nub.outerHeight();
      nubWidth = nub.outerWidth();

      if (this.small()) {
        tip.css({'width' : '100%'});
      } else {
        tip.css({'width' : (width) ? width : 'auto'});
      }

      objPos = function (obj, top, right, bottom, left, width) {
        return obj.css({
          'top' : (top) ? top : 'auto',
          'bottom' : (bottom) ? bottom : 'auto',
          'left' : (left) ? left : 'auto',
          'right' : (right) ? right : 'auto'
        }).end();
      };
      
      var o_top = target.offset().top;
      var o_left = target.offset().left;
      var outerHeight = target.outerHeight();

      objPos(tip, (o_top + outerHeight + 10), 'auto', 'auto', o_left);

      if (this.small()) {
        objPos(tip, (o_top + outerHeight + 10), 'auto', 'auto', 12.5, $(this.scope).width());
        tip.addClass('tip-override');
        objPos(nub, -nubHeight, 'auto', 'auto', o_left);
      } else {
        
        if (Foundation.rtl) {
          nub.addClass('rtl');
          o_left = o_left + target.outerWidth() - tip.outerWidth();
        }

        objPos(tip, (o_top + outerHeight + 10), 'auto', 'auto', o_left);
        // reset nub from small styles, if they've been applied
        if (nub.attr('style')) {
          nub.removeAttr('style');
        }
        
        tip.removeClass('tip-override');
        
        var tip_outerHeight = tip.outerHeight();
        
        if (classes && classes.indexOf('tip-top') > -1) {
          if (Foundation.rtl) {
            nub.addClass('rtl');
          }
          objPos(tip, (o_top - tip_outerHeight), 'auto', 'auto', o_left)
            .removeClass('tip-override');
        } else if (classes && classes.indexOf('tip-left') > -1) {
          objPos(tip, (o_top + (outerHeight / 2) - (tip_outerHeight / 2)), 'auto', 'auto', (o_left - tip.outerWidth() - nubHeight))
            .removeClass('tip-override');
          nub.removeClass('rtl');
        } else if (classes && classes.indexOf('tip-right') > -1) {
          objPos(tip, (o_top + (outerHeight / 2) - (tip_outerHeight / 2)), 'auto', 'auto', (o_left + target.outerWidth() + nubHeight))
            .removeClass('tip-override');
          nub.removeClass('rtl');
        }
      }

      tip.css('visibility', 'visible').hide();
    },

    small : function () {
      return matchMedia(Foundation.media_queries.small).matches &&
        !matchMedia(Foundation.media_queries.medium).matches;
    },

    inheritable_classes : function ($target) {
      var settings = $.extend({}, this.settings, this.data_options($target)),
          inheritables = ['tip-top', 'tip-left', 'tip-bottom', 'tip-right', 'radius', 'round'].concat(settings.additional_inheritable_classes),
          classes = $target.attr('class'),
          filtered = classes ? $.map(classes.split(' '), function (el, i) {
            if ($.inArray(el, inheritables) !== -1) {
              return el;
            }
          }).join(' ') : '';

      return $.trim(filtered);
    },

    convert_to_touch : function ($target) {
      var self = this,
          $tip = self.getTip($target),
          settings = $.extend({}, self.settings, self.data_options($target));

      if ($tip.find('.tap-to-close').length === 0) {
        $tip.append('<span class="tap-to-close">' + settings.touch_close_text + '</span>');
        $tip.on('click.fndtn.tooltip.tapclose touchstart.fndtn.tooltip.tapclose MSPointerDown.fndtn.tooltip.tapclose', function (e) {
          self.hide($target);
        });
      }

      $target.data('tooltip-open-event-type', 'touch');
    },

    show : function ($target) {
      var $tip = this.getTip($target);
      if ($target.data('tooltip-open-event-type') == 'touch') {
        this.convert_to_touch($target);
      }

      this.reposition($target, $tip, $target.attr('class'));
      $target.addClass('open');
      $tip.fadeIn(this.settings.fade_in_duration);
    },

    hide : function ($target) {
      var $tip = this.getTip($target);

      $tip.fadeOut(this.settings.fade_out_duration, function () {
        $tip.find('.tap-to-close').remove();
        $tip.off('click.fndtn.tooltip.tapclose MSPointerDown.fndtn.tapclose');
        $target.removeClass('open');
      });
    },

    off : function () {
      var self = this;
      this.S(this.scope).off('.fndtn.tooltip');
      this.S(this.settings.tooltip_class).each(function (i) {
        $('[' + self.attr_name() + ']').eq(i).attr('title', $(this).text());
      }).remove();
    },

    reflow : function () {}
  };
}(jQuery, window, window.document));

;(function ($, window, document, undefined) {
  'use strict';

  Foundation.libs.topbar = {
    name : 'topbar',

    version : '5.5.3',

    settings : {
      index : 0,
      start_offset : 0,
      sticky_class : 'sticky',
      custom_back_text : true,
      back_text : 'Back',
      mobile_show_parent_link : true,
      is_hover : true,
      scrolltop : true, // jump to top when sticky nav menu toggle is clicked
      sticky_on : 'all',
      dropdown_autoclose: true
    },

    init : function (section, method, options) {
      Foundation.inherit(this, 'add_custom_rule register_media throttle');
      var self = this;

      self.register_media('topbar', 'foundation-mq-topbar');

      this.bindings(method, options);

      self.S('[' + this.attr_name() + ']', this.scope).each(function () {
        var topbar = $(this),
            settings = topbar.data(self.attr_name(true) + '-init'),
            section = self.S('section, .top-bar-section', this);
        topbar.data('index', 0);
        var topbarContainer = topbar.parent();
        if (topbarContainer.hasClass('fixed') || self.is_sticky(topbar, topbarContainer, settings) ) {
          self.settings.sticky_class = settings.sticky_class;
          self.settings.sticky_topbar = topbar;
          topbar.data('height', topbarContainer.outerHeight());
          topbar.data('stickyoffset', topbarContainer.offset().top);
        } else {
          topbar.data('height', topbar.outerHeight());
        }

        if (!settings.assembled) {
          self.assemble(topbar);
        }

        if (settings.is_hover) {
          self.S('.has-dropdown', topbar).addClass('not-click');
        } else {
          self.S('.has-dropdown', topbar).removeClass('not-click');
        }

        // Pad body when sticky (scrolled) or fixed.
        self.add_custom_rule('.f-topbar-fixed { padding-top: ' + topbar.data('height') + 'px }');

        if (topbarContainer.hasClass('fixed')) {
          self.S('body').addClass('f-topbar-fixed');
        }
      });

    },

    is_sticky : function (topbar, topbarContainer, settings) {
      var sticky     = topbarContainer.hasClass(settings.sticky_class);
      var smallMatch = matchMedia(Foundation.media_queries.small).matches;
      var medMatch   = matchMedia(Foundation.media_queries.medium).matches;
      var lrgMatch   = matchMedia(Foundation.media_queries.large).matches;

      if (sticky && settings.sticky_on === 'all') {
        return true;
      }
      if (sticky && this.small() && settings.sticky_on.indexOf('small') !== -1) {
        if (smallMatch && !medMatch && !lrgMatch) { return true; }
      }
      if (sticky && this.medium() && settings.sticky_on.indexOf('medium') !== -1) {
        if (smallMatch && medMatch && !lrgMatch) { return true; }
      }
      if (sticky && this.large() && settings.sticky_on.indexOf('large') !== -1) {
        if (smallMatch && medMatch && lrgMatch) { return true; }
      }

       return false;
    },

    toggle : function (toggleEl) {
      var self = this,
          topbar;

      if (toggleEl) {
        topbar = self.S(toggleEl).closest('[' + this.attr_name() + ']');
      } else {
        topbar = self.S('[' + this.attr_name() + ']');
      }

      var settings = topbar.data(this.attr_name(true) + '-init');

      var section = self.S('section, .top-bar-section', topbar);

      if (self.breakpoint()) {
        if (!self.rtl) {
          section.css({left : '0%'});
          $('>.name', section).css({left : '100%'});
        } else {
          section.css({right : '0%'});
          $('>.name', section).css({right : '100%'});
        }

        self.S('li.moved', section).removeClass('moved');
        topbar.data('index', 0);

        topbar
          .toggleClass('expanded')
          .css('height', '');
      }

      if (settings.scrolltop) {
        if (!topbar.hasClass('expanded')) {
          if (topbar.hasClass('fixed')) {
            topbar.parent().addClass('fixed');
            topbar.removeClass('fixed');
            self.S('body').addClass('f-topbar-fixed');
          }
        } else if (topbar.parent().hasClass('fixed')) {
          if (settings.scrolltop) {
            topbar.parent().removeClass('fixed');
            topbar.addClass('fixed');
            self.S('body').removeClass('f-topbar-fixed');

            window.scrollTo(0, 0);
          } else {
            topbar.parent().removeClass('expanded');
          }
        }
      } else {
        if (self.is_sticky(topbar, topbar.parent(), settings)) {
          topbar.parent().addClass('fixed');
        }

        if (topbar.parent().hasClass('fixed')) {
          if (!topbar.hasClass('expanded')) {
            topbar.removeClass('fixed');
            topbar.parent().removeClass('expanded');
            self.update_sticky_positioning();
          } else {
            topbar.addClass('fixed');
            topbar.parent().addClass('expanded');
            self.S('body').addClass('f-topbar-fixed');
          }
        }
      }
    },

    timer : null,

    events : function (bar) {
      var self = this,
          S = this.S;

      S(this.scope)
        .off('.topbar')
        .on('click.fndtn.topbar', '[' + this.attr_name() + '] .toggle-topbar', function (e) {
          e.preventDefault();
          self.toggle(this);
        })
        .on('click.fndtn.topbar contextmenu.fndtn.topbar', '.top-bar .top-bar-section li a[href^="#"],[' + this.attr_name() + '] .top-bar-section li a[href^="#"]', function (e) {
          var li = $(this).closest('li'),
              topbar = li.closest('[' + self.attr_name() + ']'),
              settings = topbar.data(self.attr_name(true) + '-init');

          if (settings.dropdown_autoclose && settings.is_hover) {
            var hoverLi = $(this).closest('.hover');
            hoverLi.removeClass('hover');
          }
          if (self.breakpoint() && !li.hasClass('back') && !li.hasClass('has-dropdown')) {
            self.toggle();
          }

        })
        .on('click.fndtn.topbar', '[' + this.attr_name() + '] li.has-dropdown', function (e) {
          var li = S(this),
              target = S(e.target),
              topbar = li.closest('[' + self.attr_name() + ']'),
              settings = topbar.data(self.attr_name(true) + '-init');

          if (target.data('revealId')) {
            self.toggle();
            return;
          }

          if (self.breakpoint()) {
            return;
          }

          if (settings.is_hover && !Modernizr.touch) {
            return;
          }

          e.stopImmediatePropagation();

          if (li.hasClass('hover')) {
            li
              .removeClass('hover')
              .find('li')
              .removeClass('hover');

            li.parents('li.hover')
              .removeClass('hover');
          } else {
            li.addClass('hover');

            $(li).siblings().removeClass('hover');

            if (target[0].nodeName === 'A' && target.parent().hasClass('has-dropdown')) {
              e.preventDefault();
            }
          }
        })
        .on('click.fndtn.topbar', '[' + this.attr_name() + '] .has-dropdown>a', function (e) {
          if (self.breakpoint()) {

            e.preventDefault();

            var $this = S(this),
                topbar = $this.closest('[' + self.attr_name() + ']'),
                section = topbar.find('section, .top-bar-section'),
                dropdownHeight = $this.next('.dropdown').outerHeight(),
                $selectedLi = $this.closest('li');

            topbar.data('index', topbar.data('index') + 1);
            $selectedLi.addClass('moved');

            if (!self.rtl) {
              section.css({left : -(100 * topbar.data('index')) + '%'});
              section.find('>.name').css({left : 100 * topbar.data('index') + '%'});
            } else {
              section.css({right : -(100 * topbar.data('index')) + '%'});
              section.find('>.name').css({right : 100 * topbar.data('index') + '%'});
            }

            topbar.css('height', $this.siblings('ul').outerHeight(true) + topbar.data('height'));
          }
        });

      S(window).off('.topbar').on('resize.fndtn.topbar', self.throttle(function () {
          self.resize.call(self);
      }, 50)).trigger('resize.fndtn.topbar').on("load", function () {
          // Ensure that the offset is calculated after all of the pages resources have loaded
          S(this).trigger('resize.fndtn.topbar');
      });

      S('body').off('.topbar').on('click.fndtn.topbar', function (e) {
        var parent = S(e.target).closest('li').closest('li.hover');

        if (parent.length > 0) {
          return;
        }

        S('[' + self.attr_name() + '] li.hover').removeClass('hover');
      });

      // Go up a level on Click
      S(this.scope).on('click.fndtn.topbar', '[' + this.attr_name() + '] .has-dropdown .back', function (e) {
        e.preventDefault();

        var $this = S(this),
            topbar = $this.closest('[' + self.attr_name() + ']'),
            section = topbar.find('section, .top-bar-section'),
            settings = topbar.data(self.attr_name(true) + '-init'),
            $movedLi = $this.closest('li.moved'),
            $previousLevelUl = $movedLi.parent();

        topbar.data('index', topbar.data('index') - 1);

        if (!self.rtl) {
          section.css({left : -(100 * topbar.data('index')) + '%'});
          section.find('>.name').css({left : 100 * topbar.data('index') + '%'});
        } else {
          section.css({right : -(100 * topbar.data('index')) + '%'});
          section.find('>.name').css({right : 100 * topbar.data('index') + '%'});
        }

        if (topbar.data('index') === 0) {
          topbar.css('height', '');
        } else {
          topbar.css('height', $previousLevelUl.outerHeight(true) + topbar.data('height'));
        }

        setTimeout(function () {
          $movedLi.removeClass('moved');
        }, 300);
      });

      // Show dropdown menus when their items are focused
      S(this.scope).find('.dropdown a')
        .focus(function () {
          $(this).parents('.has-dropdown').addClass('hover');
        })
        .blur(function () {
          $(this).parents('.has-dropdown').removeClass('hover');
        });
    },

    resize : function () {
      var self = this;
      self.S('[' + this.attr_name() + ']').each(function () {
        var topbar = self.S(this),
            settings = topbar.data(self.attr_name(true) + '-init');

        var stickyContainer = topbar.parent('.' + self.settings.sticky_class);
        var stickyOffset;

        if (!self.breakpoint()) {
          var doToggle = topbar.hasClass('expanded');
          topbar
            .css('height', '')
            .removeClass('expanded')
            .find('li')
            .removeClass('hover');

            if (doToggle) {
              self.toggle(topbar);
            }
        }

        if (self.is_sticky(topbar, stickyContainer, settings)) {
          if (stickyContainer.hasClass('fixed')) {
            // Remove the fixed to allow for correct calculation of the offset.
            stickyContainer.removeClass('fixed');

            stickyOffset = stickyContainer.offset().top;
            if (self.S(document.body).hasClass('f-topbar-fixed')) {
              stickyOffset -= topbar.data('height');
            }

            topbar.data('stickyoffset', stickyOffset);
            stickyContainer.addClass('fixed');
          } else {
            stickyOffset = stickyContainer.offset().top;
            topbar.data('stickyoffset', stickyOffset);
          }
        }

      });
    },

    breakpoint : function () {
      return !matchMedia(Foundation.media_queries['topbar']).matches;
    },

    small : function () {
      return matchMedia(Foundation.media_queries['small']).matches;
    },

    medium : function () {
      return matchMedia(Foundation.media_queries['medium']).matches;
    },

    large : function () {
      return matchMedia(Foundation.media_queries['large']).matches;
    },

    assemble : function (topbar) {
      var self = this,
          settings = topbar.data(this.attr_name(true) + '-init'),
          section = self.S('section, .top-bar-section', topbar);

      // Pull element out of the DOM for manipulation
      section.detach();

      self.S('.has-dropdown>a', section).each(function () {
        var $link = self.S(this),
            $dropdown = $link.siblings('.dropdown'),
            url = $link.attr('href'),
            $titleLi;

        if (!$dropdown.find('.title.back').length) {

          if (settings.mobile_show_parent_link == true && url) {
            $titleLi = $('<li class="title back js-generated"><h5><a href="javascript:void(0)"></a></h5></li><li class="parent-link hide-for-medium-up"><a class="parent-link js-generated" href="' + url + '">' + $link.html() +'</a></li>');
          } else {
            $titleLi = $('<li class="title back js-generated"><h5><a href="javascript:void(0)"></a></h5>');
          }

          // Copy link to subnav
          if (settings.custom_back_text == true) {
            $('h5>a', $titleLi).html(settings.back_text);
          } else {
            $('h5>a', $titleLi).html('&laquo; ' + $link.html());
          }
          $dropdown.prepend($titleLi);
        }
      });

      // Put element back in the DOM
      section.appendTo(topbar);

      // check for sticky
      this.sticky();

      this.assembled(topbar);
    },

    assembled : function (topbar) {
      topbar.data(this.attr_name(true), $.extend({}, topbar.data(this.attr_name(true)), {assembled : true}));
    },

    height : function (ul) {
      var total = 0,
          self = this;

      $('> li', ul).each(function () {
        total += self.S(this).outerHeight(true);
      });

      return total;
    },

    sticky : function () {
      var self = this;

      this.S(window).on('scroll', function () {
        self.update_sticky_positioning();
      });
    },

    update_sticky_positioning : function () {
      var klass = '.' + this.settings.sticky_class,
          $window = this.S(window),
          self = this;

      if (self.settings.sticky_topbar && self.is_sticky(this.settings.sticky_topbar,this.settings.sticky_topbar.parent(), this.settings)) {
        var distance = this.settings.sticky_topbar.data('stickyoffset') + this.settings.start_offset;
        if (!self.S(klass).hasClass('expanded')) {
          if ($window.scrollTop() > (distance)) {
            if (!self.S(klass).hasClass('fixed')) {
              self.S(klass).addClass('fixed');
              self.S('body').addClass('f-topbar-fixed');
            }
          } else if ($window.scrollTop() <= distance) {
            if (self.S(klass).hasClass('fixed')) {
              self.S(klass).removeClass('fixed');
              self.S('body').removeClass('f-topbar-fixed');
            }
          }
        }
      }
    },

    off : function () {
      this.S(this.scope).off('.fndtn.topbar');
      this.S(window).off('.fndtn.topbar');
    },

    reflow : function () {}
  };
}(jQuery, window, window.document));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed")))

/***/ }),

/***/ "./src/js/warframe-data.js":
/*!*********************************!*\
  !*** ./src/js/warframe-data.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  "array": [
    {
      "name": "Acceltra",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/SapientPrimary/SapientPrimaryWeapon",
      "omegaAttenuation": 0.80000001,
      "totalDamage": 70,
      "trigger": "Auto",
      "description": "Using a barrage of rapid-fire plasma rockets, Gauss’ signature weapon lays down a path of destruction. Reloads are faster while sprinting, even more so in Gauss’ hands. For safety, rockets arm after traveling a safe distance.",
      "accuracy": 23.529411,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "acceltra.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "35.0",
      "flight": 70,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/19/Acceltra.png/revision/latest?cb=20190831102245",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Acceltra",
      "disposition": 2,
      "acquisition": "Disruption",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "High damage per shot; projectile munitions. Projetiles explode on impact with an appreciable AOE while also requiring some travel distance which will reduce self damage. High fire rate and low ammo pool is impossible to manage without some manner of ammo mutation or restore. ✪",
      "dmg": "Crit/Status",
      "rank": 32.5748873851023,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Ack & Brunt",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerTylAxeAndBoar/RegorAxeShield",
      "omegaAttenuation": 0.89999998,
      "totalDamage": 149,
      "trigger": "Melee",
      "description": "Tyl Regor’s custom axe and shield are how he likes to eliminate ‘frustrations’.",
      "accuracy": 100,
      "wallAttack": 447,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ack-&-brunt.png",
      "category": "Sword and Shield",
      "tradable": false,
      "channeling": 1.5,
      "damage": "149.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/41/RegorAxeShield.png/revision/latest?cb=20150731174942",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ack_%26_Brunt",
      "disposition": 3,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 40.93,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, low attack speed. ",
      "stance": "Final Harbinger",
      "stanceNotes": "",
      "combo": "Null Warning",
      "component": false
    },
    {
      "name": "Acrid",
      "uniqueName": "/Lotus/Weapons/ClanTech/Bio/AcidDartPistol",
      "omegaAttenuation": 1.33,
      "totalDamage": 35,
      "trigger": "Semi",
      "description": "The Acrid fires an acidic-infused needle.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "acrid.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "35.0 toxin",
      "flight": 65,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a8/Acrid2.png/revision/latest?cb=20190926231820",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Acrid",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot; projectile munitions. Each flechette delivers toxin DoT (scales with modified base damage and toxin damage) regardless of elemental modding. ",
      "dmg": "Status",
      "rank": 83.2690470119715,
      "tierRank": 1,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Game/CatbrowPet/MirrorCatbrowPetPowerSuit",
      "name": "Adarza Kavat",
      "description": "Piercing eyes reflect deadly instincts.",
      "type": "Companion",
      "imageName": "adarza-kavat.png",
      "category": "Kavat",
      "tradable": false,
      "acquisition": "Kavat Incubator Upgrade Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Adarza_Kavat"
    },
    {
      "name": "Afuris",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboAutoPistols",
      "omegaAttenuation": 1.45,
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "Furis pistols equipped in each hand. Twice the Magazine Capacity and slightly faster Fire Rate, but Accuracy and Reload Speed are lowered.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "afuris.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "20.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/20/Afuris.png/revision/latest?cb=20170606011035",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Afuris",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; hitscan munitions. ",
      "dmg": "Raw/Status",
      "rank": 108.968688725255,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Agkuza",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/ArchSwordHook/ArchHookSwordWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 350,
      "trigger": "Melee",
      "description": "Tear apart incoming enemies with this massive hooked blade.",
      "accuracy": 100,
      "wallAttack": 350,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "SpaceMelee",
      "imageName": "agkuza.png",
      "tradable": false,
      "damage": "350.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c2/ArchHookSword.png/revision/latest?cb=20160710175147",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Agkuza",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Akarius",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/SapientPistol/SapientPistol",
      "omegaAttenuation": 1,
      "totalDamage": 487,
      "trigger": "Burst",
      "description": "Bombard legions of enemies with target seeking rockets. These dual launchers reload faster while sprinting, even more so in Gauss’ hands. Rockets arm after reaching a safe distance.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akarius.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "68.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Rocket Detonation",
        "crit_chance": 0,
        "blast": 419,
        "damage": "419.0 blast"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/89/Akarius.png/revision/latest?cb=20190831103041",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akarius",
      "disposition": 3,
      "acquisition": "Disruption",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; projectile munitions. Projetiles explode on impact with an appreciable AOE while also requiring some travel distance which will reduce self damage. High fire rate and low ammo pool is impossible to manage without some manner of ammo mutation or restore. ✪",
      "dmg": "Raw/Status",
      "rank": 30.0733200530681,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Akbolto",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboBolto",
      "omegaAttenuation": 0.94999999,
      "totalDamage": 40,
      "trigger": "Semi",
      "description": "A Bolto equipped in each hand. Twice the Magazine Capacity and slightly faster Fire Rate, but reload time is doubled and accuracy is lowered.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Pistols",
      "itemCount": 1,
      "parents": [
        "Akjagara"
      ],
      "type": "Secondary",
      "imageName": "akbolto.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "40.0",
      "flight": 75,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0e/Akbolto.png/revision/latest?cb=20130426075511",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akbolto",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Akbolto Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeAkbolto/PrimeAkBoltoWeapon",
      "omegaAttenuation": 0.85000002,
      "totalDamage": 32,
      "trigger": "Semi",
      "description": "Gilded rails adorn these two vicious bolt launching pistols.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akbolto-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "32.0",
      "flight": 75,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/88/MirageAkboltoPrime.png/revision/latest?cb=20171213095347",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akbolto_Prime",
      "disposition": 2,
      "releaseDate": "2017 12 12",
      "vaultDate": "2019 10 01",
      "estimatedVaultDate": "2019 10 01",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot; projectile munitions. Keep your friends close; keep your enemies closer. Because bolts have travel time. ",
      "dmg": "Crit/Status",
      "rank": 67.2076809620811,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Akbronco",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboShotGun",
      "omegaAttenuation": 1.35,
      "totalDamage": 280,
      "trigger": "Semi",
      "description": "A Bronco equipped in each hand.",
      "accuracy": 3.7037036,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akbronco.png",
      "category": "Dual Shotguns",
      "tradable": false,
      "damage": "280.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/Dual_Broncos.png/revision/latest?cb=20130524143655",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akbronco",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Akbronco Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/PrimeAkimboShotGun",
      "omegaAttenuation": 1.3,
      "totalDamage": 350,
      "trigger": "Semi",
      "description": "Used together, these Orokin pistols feed off each other, inflicting greater damage with an enhanced chance for inducing elemental effects on targets.",
      "accuracy": 3.7037036,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akbronco-prime.png",
      "category": "Dual Shotguns",
      "tradable": true,
      "damage": "350.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/af/DEPrimeDualBroncos.png/revision/latest?cb=20140306030523",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akbronco_Prime",
      "disposition": 4,
      "releaseDate": "2014 03 06",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Suffers from relatively poor consistency. ",
      "dmg": "100% Status",
      "rank": 79.7481704595758,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Akjagara",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TigrisRedeemerSetPistol/TnoBladedPistols",
      "omegaAttenuation": 0.94999999,
      "totalDamage": 30,
      "trigger": "Burst",
      "description": "The design of these hard-hitting dual pistols is a mix of organic and bladed elements.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akjagara.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/89/TnoBladedPistols.png/revision/latest?cb=20150205211110",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akjagara",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Akjagara Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeAkjagara/AkJagaraPrime",
      "omegaAttenuation": 0.85000002,
      "totalDamage": 36,
      "trigger": "Burst",
      "description": "Precision machined mirrored pistols. Primed and ready.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akjagara-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "36.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/ba/AkjagaraPrime.png/revision/latest?cb=20181218224226",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akjagara_Prime",
      "disposition": 2,
      "releaseDate": "2018 12 12",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 09 18",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 46.3452078799117,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Aklato",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboPistol",
      "omegaAttenuation": 1.52,
      "totalDamage": 30,
      "trigger": "Semi",
      "description": "A Lato equipped in each hand. Twice the Magazine Capacity and Fire Rate, but Reload time is doubled and Accuracy is lowered.",
      "accuracy": 11.111111,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "aklato.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/47/Aklato.png/revision/latest?cb=20170210002057",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Aklato",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; hitscan munitions. ",
      "dmg": "Status",
      "rank": 244.62385935564,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Aklex",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkLexPistols",
      "omegaAttenuation": 0.89999998,
      "totalDamage": 130,
      "trigger": "Semi",
      "description": "Dual Lex pistols double the amount of high caliber lead you can throw at the enemy, but accuracy and reload time suffer.",
      "accuracy": 9.7560978,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "aklex.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "130.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/85/DEAklex.png/revision/latest?cb=20140124173940",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Aklex",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Aklex Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkLexPrimePistols",
      "omegaAttenuation": 0.80000001,
      "totalDamage": 150,
      "trigger": "Semi",
      "description": "Savage the enemy with a Lex Prime in each hand.",
      "accuracy": 9.7560978,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 15,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "aklex-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "150.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/61/Aklex_Prime.png/revision/latest?cb=20170127212929",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Aklex_Prime",
      "disposition": 2,
      "releaseDate": "2017 01 27",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Massive recoil hurts overall DPS. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 80.4105975524154,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Akmagnus",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/DualMagnus",
      "omegaAttenuation": 1.28,
      "totalDamage": 76,
      "trigger": "Semi",
      "description": "Twice the ammo and twice the stopping power of a single Magnus.",
      "accuracy": 11.111111,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akmagnus.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "76.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/11/DEAkmagnus.png/revision/latest?cb=20140204013038",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akmagnus",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 82.4494897427832,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Aksomati",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/SomaSidearm/AkimboSomaPistols",
      "omegaAttenuation": 1.25,
      "totalDamage": 18,
      "trigger": "Auto",
      "description": "The devastating power of the Soma rifle compacted into two elegant pistols.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "aksomati.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "18.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/de/AkimboSomaPistols.png/revision/latest?cb=20150408223719",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Aksomati",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Aksomati Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeAksomati/PrimeAksomati",
      "omegaAttenuation": 1,
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "The elegant Aksomati precisely refined to this, their ultimate manifestation.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "aksomati-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "20.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fd/AksomatiPrime.png/revision/latest?cb=20191218021140",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Aksomati_Prime",
      "disposition": 3,
      "releaseDate": "2019 12 17",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 09 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; hitscan munitions. Spool-up increases accuracy. ✪",
      "dmg": "Crit/Status",
      "rank": 39.7320508075689,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Akstiletto",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TennoUzi/TennoUzi",
      "omegaAttenuation": 0.60000002,
      "totalDamage": 28,
      "trigger": "Auto",
      "description": "These diminutive rapid-fire Stiletto machine-pistols are just the right size to be akimbo style without sacrificing accuracy.",
      "accuracy": 23.529411,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akstiletto.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "28.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ef/TennoUzi.png/revision/latest?cb=20140206061957",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akstiletto",
      "disposition": 1,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Akstiletto Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeAkstiletto/PrimeAkstiletto",
      "omegaAttenuation": 0.55000001,
      "totalDamage": 36,
      "trigger": "Auto",
      "description": "Stylish, discreet and accurate, perfect for the Tenno of distinction.",
      "accuracy": 23.529411,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akstiletto-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "36.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/43/PrimeAkstiletto.png/revision/latest?cb=20160520210650",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akstiletto_Prime",
      "disposition": 1,
      "releaseDate": "2016 05 17",
      "vaultDate": "2018 03 20",
      "estimatedVaultDate": "2018 03 20",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. Very good all-rounder secondary. ",
      "dmg": "Crit/Status",
      "rank": 60.6093613071762,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Akvasto",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/DualVastos",
      "omegaAttenuation": 1.25,
      "totalDamage": 58,
      "trigger": "Semi",
      "description": "Vasto revolvers equipped in each hand.",
      "accuracy": 11.111111,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akvasto.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "58.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fa/Dual_vastos.png/revision/latest?cb=20130901100333",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akvasto",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Akvasto Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeVasto/AkPrimeVasto/AkPrimeVastoPistol",
      "omegaAttenuation": 1.2,
      "totalDamage": 66,
      "trigger": "Semi",
      "description": "Orokin craftsmanship married with superior firepower. Dual Vastos, primed and ready to strike.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akvasto-prime.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "66.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/AkvastoPrime.png/revision/latest?cb=20181113201313",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akvasto_Prime",
      "disposition": 4,
      "releaseDate": "2018 11 14",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 57.1038404810405,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Akzani",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/HarlequinGun/HarlequinPistols",
      "omegaAttenuation": 1.52,
      "totalDamage": 12,
      "trigger": "Auto",
      "description": "The choice weapon of Mirage, these fast-firing dual pistols deliver a deadly performance.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "akzani.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "12.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/Akzani.png/revision/latest?cb=20170403054851",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Akzani",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 88.9497747702047,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/SupportJetPack/SupportJetPack",
      "name": "Amesha",
      "description": "Transform into a winged guardian.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "type": "Vehicle",
      "imageName": "amesha.png",
      "category": "Archwing",
      "tradable": false,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Amesha"
    },
    {
      "name": "Amphis",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/GrnStaff",
      "omegaAttenuation": 1.5,
      "totalDamage": 130,
      "trigger": "Melee",
      "description": "Fashioned with Grineer materials and balanced for marine infantry use, the Amphis is a traditional staff weapon that has received a monstrous makeover that enables shock damage on jump attacks. Connects with multiple enemies with each strike.",
      "accuracy": 100,
      "wallAttack": 217,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "amphis.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "130.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f9/DEAmphis.png/revision/latest?cb=20140407035856",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Amphis",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 49.32,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, very high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Clashing Forest",
      "stanceNotes": "",
      "combo": "Resolute Flurry",
      "component": true
    },
    {
      "name": "Amprex",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/ChainLightningGun/ChainLightningRifle",
      "omegaAttenuation": 0.69999999,
      "totalDamage": 22,
      "trigger": "Held",
      "description": "The Amprex rifle fires a continuous beam of high voltage electricity that arcs among nearby enemies. This weapon excels at Crowd Control.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "amprex.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "22.0 electricity",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8f/ChainLightningGunEdit.png/revision/latest?cb=20140425171112",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Amprex",
      "disposition": 1,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; beam munitions. Beam chains to nearby enemies giving it decent AOE. ",
      "dmg": "Crit/Status",
      "rank": 40.5811388300842,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Angstrum",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpHandRL/CorpusHandRocketLauncher",
      "omegaAttenuation": 1.35,
      "totalDamage": 1350,
      "trigger": "Charge",
      "description": "Capable of firing multiple rockets at once, the Angstrum is a handheld instrument of destruction.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "angstrum.png",
      "category": "Pistol",
      "tradable": false,
      "chargeTime": 0.5,
      "damage": 200,
      "projectile": "Projectile",
      "secondary": {
        "name": "3-Rocket Barrage Explosion",
        "pellet": {
          "count": 3,
          "name": "Rocket"
        },
        "blast": 750,
        "damage": "750.0 blast"
      },
      "secondaryArea": {
        "name": "3-Rocket Barrage Impact",
        "status_chance": 52.5,
        "pellet": {
          "name": "Rocket",
          "count": 3
        },
        "blast": 600,
        "damage": "600.0 blast"
      },
      "statusChance": 22,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fe/CorpusHandRocket.png/revision/latest?cb=20170606150901",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Angstrum",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Anku",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Scythe/ParisScythe/ParisScythe",
      "omegaAttenuation": 1.46,
      "totalDamage": 170,
      "trigger": "Melee",
      "description": "Reap havoc with this full sized Tenno-crafted scythe.",
      "accuracy": 100,
      "wallAttack": 340,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "anku.png",
      "category": "Scythe",
      "tradable": false,
      "channeling": 1.5,
      "damage": "170.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e7/ParisScythe.png/revision/latest?cb=20150605002310",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Anku",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Heavy Attack",
      "rank": 27.09,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. ✪",
      "stance": "Reaping Spiral",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Ankyros",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gauntlet/Gauntlet",
      "omegaAttenuation": 1.45,
      "totalDamage": 90,
      "trigger": "Melee",
      "description": "A pair of mighty gauntlets, the Ankyros were designed by the Tenno for close quarters combat. What they lack in range they make up for in speed.",
      "accuracy": 100,
      "wallAttack": 270,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ankyros.png",
      "category": "Fist",
      "tradable": false,
      "channeling": 1.5,
      "damage": "90.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/20/Ankyros.png/revision/latest?cb=20160221144002",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ankyros",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Ankyros Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gauntlet/PrimeAnkyros/PrimeAnkyros",
      "omegaAttenuation": 1.45,
      "totalDamage": 128,
      "trigger": "Melee",
      "description": "This Orokin variation of the Ankyros is superior to its successor in every way.",
      "accuracy": 100,
      "wallAttack": 384,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ankyros-prime.png",
      "category": "Fist",
      "tradable": true,
      "channeling": 1.5,
      "damage": "128.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/87/PrimeAnkyros.png/revision/latest?cb=20160221144022",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ankyros_Prime",
      "disposition": 5,
      "releaseDate": "2014 03 06",
      "vaultDate": "2016 02 16",
      "estimatedVaultDate": "2016 02 16",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 48.98,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, very high attack speed. ",
      "stance": "Seismic Palm",
      "stanceNotes": "",
      "combo": "Quaking Touch",
      "component": false
    },
    {
      "name": "Arca Plasmor",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpShotgun/CrpShotgun",
      "omegaAttenuation": 0.55000001,
      "totalDamage": 600,
      "trigger": "Semi",
      "description": "Stagger targets with blasts from this Corpus engineered plasma shotgun. Surviving enemies are consumed with radiation.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "arca-plasmor.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "600.0 radiation",
      "flight": 60,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1a/CrpShotgun.png/revision/latest?cb=20170907190538",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Arca_Plasmor",
      "disposition": 1,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; projectile munitions. Single pellet is wide with punchthrough and therefore can act as AOE and reliably proc status effects. Does not have a headshot multiplier. ",
      "dmg": "Crit/Status",
      "rank": 53.2205262752974,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Arca Scisco",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/SniperPistol/CrpScopeGun",
      "omegaAttenuation": 1.05,
      "totalDamage": 60,
      "trigger": "Semi",
      "description": "This scoped pistol analyzes strikes, learning how to damage its targets most effectively. Achieve maximum damage output after five successive hits.",
      "accuracy": 32,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "arca-scisco.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "60.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0f/CrpScopePistol.png/revision/latest?cb=20170907190537",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Arca_Scisco",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. Each shot landed grants Target Analysis buff. Target Analysis stacks up to 5 times, lasting 2 seconds each. Critical Chance and Status Chance increases by 4% per stack. ",
      "dmg": "Crit/Status",
      "rank": 62.5495097567964,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Arca Titron",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Hammer/CorpusHammerWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 360,
      "trigger": "Melee",
      "description": "Each successive kill from this massive electron hammer builds an electron charge that is unleashed on slam attacks.",
      "accuracy": 100,
      "wallAttack": 720,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "arca-titron.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "360.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8d/CrpHammer.png/revision/latest?cb=20170907190535",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Arca_Titron",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 31.63,
      "tierRank": 2,
      "weaponNotes": "Very high damage per hit, very low attack speed. Kills grant up to 10 Capacitor (+100% electricity damage each) charges that is used on next slam attack. Slams also proc electricity and overrides hammer ragdoll. ",
      "stance": "Shattering Storm",
      "stanceNotes": "",
      "combo": "Falling Rock",
      "component": false
    },
    {
      "name": "Argonak",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/LaserAimRifle/LaserAimRifle",
      "omegaAttenuation": 1.25,
      "totalDamage": 57,
      "trigger": "Semi",
      "description": "Pick off targets by highlighting distant enemies using this Grineer rifle's advanced laser sighting system. Deadly in both single fire and automatic modes.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "argonak.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "57.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 4.33,
        "crit_chance": 27,
        "crit_mult": 2.3,
        "status_chance": 0.2,
        "shot_type": "Hit-Scan",
        "impact": 24.5,
        "slash": 26.2,
        "puncture": 6.3
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/LaserAimRifle.png/revision/latest?cb=20171015014021",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Argonak",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot; hitscan munitions. Scoping highlights enemies for easier targetting. Alternate between semi-auto (higher DPS) and full-auto (higher fire rate) to deal with different enemies. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 78.1322916030806,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Artax",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/Gremlin",
      "omegaAttenuation": 1,
      "totalDamage": 5,
      "trigger": "Held",
      "description": "Freeze targets in their tracks with this sentinel mounted ice-beam.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "artax.png",
      "tradable": false,
      "damage": "5.0 cold",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/06/SentinelArtax.png/revision/latest?cb=20170209235027",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Artax",
      "disposition": 3,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ninja/Ninja",
      "name": "Ash",
      "description": "Ash is great for players looking for a stealthier approach to combat. Lethal abilities are complemented by powers of distraction.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Bleed effects inflicted on enemies do |DAMAGE|% increased damage and last |DURATION|% longer.",
      "type": "Warframe",
      "imageName": "ash.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 7170143,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/17/AshNewLook.png/revision/latest?cb=20141124022921",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ash",
      "acquisition": "Manics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ninja/AshPrime",
      "name": "Ash Prime",
      "description": "Distraction and subterfuge become lethal weapons with Ash Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "Bleed effects inflicted on enemies do |DAMAGE|% increased damage and last |DURATION|% longer.",
      "type": "Warframe",
      "imageName": "ash-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 4143928,
      "introduced": "16.11",
      "sex": "Male",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/62/AshPrimeNewLook.png/revision/latest?cb=20150707222051",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ash_Prime",
      "releaseDate": "2015 07 07",
      "vaultDate": "2017 05 30",
      "estimatedVaultDate": "2017 05 30",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Astilla",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnGlassShotgun/TnGlassShotgunGun",
      "omegaAttenuation": 1.1,
      "totalDamage": 190,
      "trigger": "Auto",
      "description": "Blast enemies with glass slugs that devastate on impact. In Gara's hands, this signature weapon has a larger Ammo Pool.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "astilla.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "70.0",
      "flight": 75,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5d/GlassShotgun.png/revision/latest?cb=20171018134541",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Astilla",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; projectile munitions. Deals 30% of damage upon impact and 70% on explosion. ✪",
      "dmg": "Crit/Status",
      "rank": 43.3493588689618,
      "tierRank": 2,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Brawler/Brawler",
      "name": "Atlas",
      "description": "Titan of stone, lord of the earthly elementals.",
      "masteryReq": 0,
      "sprintSpeed": 0.89999998,
      "passiveDescription": "Becomes immune to Knockdown effects while on the ground.",
      "type": "Warframe",
      "imageName": "atlas.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4009772,
      "introduced": "17.5",
      "sex": "Male",
      "sprint": 0.9,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7f/AtlasNewLook.png/revision/latest?cb=20151002032553",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Atlas",
      "acquisition": "Jordas Golem (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Brawler/AtlasPrime",
      "name": "Atlas Prime",
      "description": "In bygone ages, mountains were said to house warriors. In this age, the mountain has become the warrior.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Becomes immune to Knockdown effects while on the ground.",
      "type": "Warframe",
      "imageName": "atlas-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 1840657,
      "introduced": "25.8",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/50/AtlasPrime.png/revision/latest?cb=20191002055416",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Atlas_Prime",
      "releaseDate": "2019 10 01",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 06 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Atomos",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/HeatGun/GrnHeatGun",
      "omegaAttenuation": 0.80000001,
      "totalDamage": 29,
      "trigger": "Held",
      "description": "This particle cannon generates a condensed beam of super-heated plasma designed to melt rock to ore, and enemies to molten slag.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "atomos.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "29.0 heat",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/77/GrnHeatGun.png/revision/latest?cb=20150512233115",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Atomos",
      "disposition": 2,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot; beam munitions. Chains 7m away, even when shooting at dead bodies. ",
      "dmg": "Crit/Status",
      "rank": 38.9748873851023,
      "tierRank": 3,
      "component": true
    },
    {
      "name": "Atterax",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerWhip/GrineerWhip",
      "omegaAttenuation": 0.5,
      "totalDamage": 129,
      "trigger": "Melee",
      "description": "A multi-bladed whip that is adept at flaying skin from bone. In extreme cases, disobedient Grineer are sentenced to death by Atterax.",
      "accuracy": 100,
      "wallAttack": 387,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "atterax.png",
      "category": "Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "129.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4e/GrineerWhip.png/revision/latest?cb=20140918035809",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Atterax",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Heavy Attack",
      "rank": 21.63,
      "tierRank": 3,
      "weaponNotes": "Low damage per hit, low attack speed. ",
      "stance": "Burning Wasp",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Attica",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnoPrmryXbow/TnoPrmryXbowWeapon",
      "omegaAttenuation": 1.42,
      "totalDamage": 80,
      "trigger": "Auto",
      "description": "Quickly fire off a volley of deadly bolts with the Attica repeating crossbow.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "attica.png",
      "category": "Crossbow",
      "tradable": false,
      "damage": "80.0",
      "flight": 90,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/df/TnoPrmryXbow.png/revision/latest?cb=20140410055409",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Attica",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. ",
      "dmg": "Crit/Status",
      "rank": 67.9615472627943,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Azima",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/SundialGun/SundialPistol",
      "omegaAttenuation": 1.25,
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "This intricate automatic pistol is able to fire its magazine which then spins in the air for a short time, firing lasers at nearby enemies.",
      "accuracy": 22.222221,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "azima.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "20.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Launch Turret",
        "crit_chance": 16,
        "status_chance": 0.2,
        "blast": 75,
        "damage": "75.0 blast"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4b/SundialPistol.png/revision/latest?cb=20171031145315",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Azima",
      "disposition": 4,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot; hitscan munitions. Alt fire launches the remaining clip that will act as a 4-point dumb turret. ",
      "dmg": "Crit/Status",
      "rank": 62.5811388300842,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Bad Baby",
      "uniqueName": "/Lotus/Types/Vehicles/Hoverboard/HoverboardParts/PartComponents/HoverboardSolarisA/HoverboardSolarisADeck",
      "omegaAttenuation": 1,
      "type": "Vehicle",
      "imageName": "bad-baby.png",
      "category": "K-Drive",
      "tradable": false,
      "acquisition": "Roky (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Bad_Baby"
    },
    {
      "name": "Balla Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipOne",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "balla.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Balla_Strike"
    },
    {
      "name": "Ballistica",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/AutomaticHandCrossbow/AutoCrossBow",
      "omegaAttenuation": 1.2,
      "totalDamage": 100,
      "trigger": "Charge",
      "description": "The Ballistica crossbow features a unique dual firing mechanism. Choose between a four bolt volley or a deadly accurate charged shot.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "ballistica.png",
      "category": "Crossbow",
      "tradable": false,
      "chargeTime": 1,
      "damage": 100,
      "projectile": "Projectile",
      "secondary": {
        "name": "Burst Shot",
        "speed": 11.43,
        "crit_chance": 3.75,
        "crit_mult": 1.5,
        "status_chance": 0,
        "shot_type": "Projectile",
        "shot_speed": 100,
        "impact": 2.5,
        "slash": 2.5,
        "puncture": 20
      },
      "statusChance": 10,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/92/DEBallistica.png/revision/latest?cb=20190926235141",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ballistica",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ballistica Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeBallistica/PrimeBallistica",
      "omegaAttenuation": 1.15,
      "totalDamage": 304,
      "trigger": "Charge",
      "description": "The beauty of this luxuriously gilded crossbow cannot obscure its lethal purpose.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "ballistica-prime.png",
      "category": "Crossbow",
      "tradable": true,
      "damage": "152.0",
      "flight": 100,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/db/PrimeBallistica.png/revision/latest?cb=20170829215439",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ballistica_Prime",
      "disposition": 4,
      "releaseDate": "2017 08 29",
      "vaultDate": "2019 07 07",
      "estimatedVaultDate": "2019 07 07",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; projectile munitions. Charged shot kills turns the target into a ghostly specter for 7 seconds. ",
      "dmg": "Crit/Status",
      "rank": 90.707372593841,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Banshee/Banshee",
      "name": "Banshee",
      "description": "Using sonic attacks and acoustic target detection, Banshee is well suited for stealth gameplay and is capable of filling both attack and support roles.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Weapon noises are hushed so that enemies cannot hear them.",
      "type": "Warframe",
      "imageName": "banshee.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4476499,
      "introduced": "7",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9d/BansheeNewLook.png/revision/latest?cb=20141124023002",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Banshee",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Banshee/BansheePrime",
      "name": "Banshee Prime",
      "description": "Banshee Prime assails her foes by manipulating sonic forces to deadly effect. Featuring altered mod polarities for greater customization.",
      "masteryReq": 8,
      "sprintSpeed": 1.15,
      "passiveDescription": "Weapon noises are hushed so that enemies cannot hear them.",
      "type": "Warframe",
      "imageName": "banshee-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 3947064,
      "introduced": "19.11.5",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8e/BansheePrimeIcon.png/revision/latest?cb=20170308023206",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Banshee_Prime",
      "releaseDate": "2017 02 28",
      "vaultDate": "2018 12 12",
      "estimatedVaultDate": "2018 12 12",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Pacifist/Pacifist",
      "name": "Baruuk",
      "description": "Beware the fury of the truly patient. Pushed beyond restraint, a reluctant master unleashes the storm within.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "Each projectile dodged, each enemy lulled or disarmed, erodes Baruuk's restraint and fuels the storm within. As Baruuk's restraint is diminished he becomes up to |PERCENT|% more resistant to damage.",
      "type": "Warframe",
      "imageName": "baruuk.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 4407354,
      "introduced": "24.2",
      "sex": "Male",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b5/BaruukIcon272.png/revision/latest?cb=20181219151057",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Baruuk",
      "acquisition": "Little Duck (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Battacor",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpSentExperimentRifle/CrpSentExperimentRifle",
      "omegaAttenuation": 1,
      "totalDamage": 66,
      "trigger": "Auto Burst",
      "description": "A weapon that builds charge the more it kills. Hit capacity then release for an obliterating discharge of power.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "battacor.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "42.0 magnetic",
      "flight": 115,
      "projectile": "Projectile",
      "secondaryArea": {
        "name": "Beam AoE",
        "status_chance": 8,
        "radius": 600,
        "radiation": 208,
        "damage": "208.0 radiation"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d8/Battacor.png/revision/latest?cb=20181110201051",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Battacor",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot; projectile munitions. Primary fire has two-round burst which is potentially wasteful. Every kill gives one secondary fire charge. Up to three charges can be stored for greater damage and crit chance. Recommend to expend secondary fire as soon as possible as it is a free shot and would increase overall DPS. ",
      "dmg": "Crit/Status",
      "rank": 44,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Baza",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnSMG/TnSMGWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 16,
      "trigger": "Auto",
      "description": "Make easy prey of enemies with this quiet, agile, and pinpoint accurate Tenno submachine gun.",
      "accuracy": 80,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "baza.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "16.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fa/Baza.png/revision/latest?cb=20171124054156",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Baza",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Baza Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeBaza/PrimeBazaGun",
      "omegaAttenuation": 1,
      "totalDamage": 16,
      "trigger": "Auto",
      "description": "This rapid-fire classic is the Orokin-engineered definition of silent, pinpoint lethality.",
      "accuracy": 80,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "baza-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "16.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/10/BazaPrime.png/revision/latest?cb=20191218021158",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Baza_Prime",
      "disposition": 3,
      "releaseDate": "2019 12 17",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 09 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. Completely silent but has damage falloff similar to shotguns. ",
      "dmg": "Crit/Status",
      "rank": 48.6366600265341,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Bo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/Staff",
      "omegaAttenuation": 1.29,
      "totalDamage": 140,
      "trigger": "Melee",
      "description": "A two-handed, reinforced staff that can send multiple enemies airborne.",
      "accuracy": 100,
      "wallAttack": 233,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "bo.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "140.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/74/BoStaff.png/revision/latest?cb=20170210002058",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bo",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Bo Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/PrimeBo/PrimeBoWeapon",
      "omegaAttenuation": 1.29,
      "totalDamage": 176,
      "trigger": "Melee",
      "description": "A classic Orokin weapon, Bo Prime creates elegant fury on the battlefield.",
      "accuracy": 100,
      "wallAttack": 293,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "bo-prime.png",
      "category": "Staff",
      "tradable": true,
      "channeling": 1.5,
      "damage": "176.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1b/PrimeBo.png/revision/latest?cb=20140612000225",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bo_Prime",
      "disposition": 4,
      "releaseDate": "2014 06 11",
      "vaultDate": "2016 05 17",
      "estimatedVaultDate": "2016 05 17",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 37.35,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Clashing Forest",
      "stanceNotes": "",
      "combo": "Resolute Flurry",
      "component": false
    },
    {
      "name": "Boar",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/FullAutoShotgun",
      "omegaAttenuation": 1.4,
      "totalDamage": 176,
      "trigger": "Auto",
      "description": "A shotgun with low accuracy and strong recoil, but able to deliver its payload in full-auto. The Boar is best used at close range.",
      "accuracy": 5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "boar.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "176.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6f/Boar.png/revision/latest?cb=20130426074012",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boar",
      "disposition": 5,
      "acquisition": "Drekar Troopers",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Boar Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/PrimeBoar",
      "omegaAttenuation": 1.34,
      "totalDamage": 320,
      "trigger": "Auto",
      "description": "One of the finest examples of Tenno craftsmanship, the Boar Prime offers a higher Fire Rate, Magazine Capacity and a much higher per-shot damage.",
      "accuracy": 5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "boar-prime.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "320.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e7/FixedPrimeBoar.png/revision/latest?cb=20130914101658",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boar_Prime",
      "disposition": 5,
      "releaseDate": "2013 09 13",
      "vaultDate": "2015 07 07",
      "estimatedVaultDate": "2015 07 07",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; hitscan munitions. Required to mod for 100% status chance. ✪",
      "dmg": "Status",
      "rank": 46.4165902124585,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Boltace",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Tonfa/Boltonfa/Boltonfa",
      "omegaAttenuation": 1,
      "totalDamage": 176,
      "trigger": "Melee",
      "description": "An intimidating Tonfa set designed to match the briary design of the Boltor.",
      "accuracy": 100,
      "wallAttack": 352,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "boltace.png",
      "category": "Tonfa",
      "tradable": false,
      "channeling": 1.5,
      "damage": "176.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/61/Boltonfa.png/revision/latest?cb=20150512232947",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boltace",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Bolto",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/CrossBow",
      "omegaAttenuation": 1.51,
      "totalDamage": 40,
      "trigger": "Semi",
      "description": "The Bolto fires slow, heavy bolts that are capable of impaling enemies to walls.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "itemCount": 1,
      "parents": [
        "Hystrix"
      ],
      "type": "Secondary",
      "imageName": "bolto.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "40.0",
      "flight": 75,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/Bolto.png/revision/latest?cb=20130426074708",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bolto",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Boltor",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/BoltoRifle",
      "omegaAttenuation": 1.2,
      "totalDamage": 25,
      "trigger": "Auto",
      "description": "The Boltor fires slow, heavy bolts that are capable of impaling enemies to walls.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "boltor.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "25.0",
      "flight": 85,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b5/Boltor.png/revision/latest?cb=20130213060423",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boltor",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Boltor Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeBoltor/PrimeBoltor",
      "omegaAttenuation": 1.1,
      "totalDamage": 45.999996,
      "trigger": "Auto",
      "description": "Fires Orokin designed bolts that are faster and sharper.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "boltor-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "46.0",
      "flight": 100,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/59/DEPrimeBoltor.png/revision/latest?cb=20190925045504",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Boltor_Prime",
      "disposition": 3,
      "releaseDate": "2014 03 06",
      "vaultDate": "2016 02 16",
      "estimatedVaultDate": "2016 02 16",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot; projectile munitions. ",
      "dmg": "Status",
      "rank": 66.9154759474226,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Brakk",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerHandShotgun/GrineerHandCannon",
      "omegaAttenuation": 1.25,
      "totalDamage": 200,
      "trigger": "Semi",
      "description": "Simple but powerful. The semi-automatic Brakk hand cannon delivers a lot of punch in a small package.",
      "accuracy": 7.6923075,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "brakk.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "200.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b5/DEGrineerHandShotgun.png/revision/latest?cb=20140116153506",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Brakk",
      "disposition": 4,
      "acquisition": "The Grustrag Three",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; hitscan munitions. RIP Raids. ",
      "dmg": "Critical",
      "rank": 85.7637059362411,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Braton",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/Rifle",
      "omegaAttenuation": 1.3,
      "totalDamage": 24,
      "trigger": "Auto",
      "description": "The Braton's high rate of fire and accuracy make it a favorite among the Tenno.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "braton.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "24.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/19/Braton.png/revision/latest?cb=20170210002053",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Braton",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Braton Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/BratonPrime",
      "omegaAttenuation": 1.2,
      "totalDamage": 35,
      "trigger": "Auto",
      "description": "A classic Orokin weapon, Braton Prime features modified damage levels and a larger magazine over the standard model.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "braton-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "35.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/02/PrimeBraton.png/revision/latest?cb=20161125231435",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Braton_Prime",
      "disposition": 4,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 81.122287581247,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Braton Vandal",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/VIPRifle",
      "omegaAttenuation": 1.25,
      "totalDamage": 35,
      "trigger": "Auto",
      "description": "A special version of the standard Braton rifle with a slower Fire Rate but offering higher accuracy and damage values. The Braton Vandal has been customized by the Tenno with a blue-green metallic finish and Lotus branding on the grips.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "braton-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "35.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/30/BratonVandal.png/revision/latest?cb=20180428090650",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Braton_Vandal",
      "disposition": 4,
      "acquisition": "Sanctuary Onslaught",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Broken Scepter",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnQueenSceptre/GrnQueenSceptreWeapon",
      "omegaAttenuation": 1.1900001,
      "totalDamage": 179,
      "trigger": "Melee",
      "description": "A shattered talisman of the Grineer Elder Queen. It pulls health orbs from deceased enemies and energy orbs from destroyed robots.",
      "accuracy": 100,
      "wallAttack": 298,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "broken-scepter.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "179.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/18/GrnQueenSceptre.png/revision/latest?cb=20161112092829",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Broken_Scepter",
      "disposition": 4,
      "acquisition": "The War Within (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 49.37,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, very high attack speed. Suffers from relatively poor consistency. Can Drain enemies to spawn health/energy orb. ",
      "stance": "Clashing Forest",
      "stanceNotes": "",
      "combo": "Resolute Flurry",
      "component": false
    },
    {
      "name": "Broken War",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/StalkerTwo/StalkerTwoSmallSword",
      "omegaAttenuation": 0.79000002,
      "totalDamage": 187,
      "trigger": "Melee",
      "description": "A fragment of Stalker's War sword, a symbol of his defeat.",
      "accuracy": 100,
      "wallAttack": 561,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "broken-war.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "187.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b2/StalkerTwoSword.png/revision/latest?cb=20151204013307",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Broken_War",
      "disposition": 2,
      "acquisition": "The Second Dream (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 24.67,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, high attack speed. ",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": true
    },
    {
      "name": "Bronco",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/HandShotGun",
      "omegaAttenuation": 1.4,
      "totalDamage": 280,
      "trigger": "Semi",
      "description": "The Bronco is a small-scale shotgun that can be wielded with one hand. Only effective at close range, it has a limited Magazine Capacity.",
      "accuracy": 3.7037036,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "bronco.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "280.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8e/Bronco.png/revision/latest?cb=20130426074714",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bronco",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Bronco Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/BroncoPrime",
      "omegaAttenuation": 1.35,
      "totalDamage": 350,
      "trigger": "Semi",
      "description": "Infused with rare Orokin alloys, the Bronco Prime is a highly efficient weapon, trading an increased Magazine Capacity and damage for a lower rate of fire.",
      "accuracy": 3.7037036,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "bronco-prime.png",
      "category": "Shotgun Sidearm",
      "tradable": true,
      "damage": "350.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c8/PrimeBronco.png/revision/latest?cb=20130713204336",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Bronco_Prime",
      "disposition": 5,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; hitscan munitions. ",
      "dmg": "100% Status",
      "rank": 90.0906705900093,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Burst Laser",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/BurstLaserPistol",
      "omegaAttenuation": 1.45,
      "totalDamage": 7,
      "trigger": "Burst",
      "description": "Fires a small burst of lasers.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "burst-laser.png",
      "tradable": false,
      "damage": "7.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d4/DESentinelBurstLaser.png/revision/latest?cb=20140122154227",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Burst_Laser",
      "disposition": 5,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Burston",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/BurstRifle",
      "omegaAttenuation": 1.4,
      "totalDamage": 30,
      "trigger": "Burst",
      "description": "The Burston fires 3-round bursts, which provides a balance between the lethality of automatic rifles and the accuracy of semi-automatic rifles.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "burston.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a8/Burston.png/revision/latest?cb=20160820040926",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Burston",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Burston Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeBurston/PrimeBurston",
      "omegaAttenuation": 1.3,
      "totalDamage": 36,
      "trigger": "Burst",
      "description": "Once thought lost to the ages, attempts to reengineer the Burston Prime never fully replicated this weapon's power and agility.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "burston-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "36.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/83/PrimeBurston.png/revision/latest?cb=20161126000536",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Burston_Prime",
      "disposition": 4,
      "releaseDate": "2013 12 19",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot; hitscan munitions. Gilded Truth (Arbiters of Hexis) increases fire rate and provide Truth effect (Gas, health, parkour). ",
      "dmg": "Crit/Status",
      "rank": 102.808318915758,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Buzlok",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnGorgSniperRifle/GrnGorgSniperRifle",
      "omegaAttenuation": 1.45,
      "totalDamage": 60,
      "trigger": "Semi",
      "description": "Mark your targets and unleash a barrage of bullets, the Buzlok's homing rounds always find the enemy. Marked targets are more likely to take critical hits.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "buzlok.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "60.0",
      "flight": 40,
      "projectile": "Projectile",
      "secondary": {
        "name": "Beacon",
        "speed": 1.67,
        "crit_chance": 0,
        "crit_mult": 1,
        "status_chance": 0,
        "shot_type": "Projectile",
        "shot_speed": null,
        "puncture": 3
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9e/GrnGorgSniperRifle.png/revision/latest?cb=20140918035810",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Buzlok",
      "disposition": 5,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot; projectile munitions. Alt fire launches tracer beacon which gives additive 50% Crit Chance (20 seconds) that remain active even the target is dead. Has insane DPS potential but difficult to attain due to difficulty in handling beacon and relatively poor handling. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 61.1038450166037,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Cantic Prism",
      "uniqueName": "/Lotus/Weapons/Corpus/OperatorAmplifiers/Set1/Barrel/CorpAmpSet1BarrelPartA",
      "omegaAttenuation": 1,
      "type": "Amp",
      "imageName": "cantic-prism.png",
      "tradable": false,
      "acquisition": "Little Duck (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Cantic_Prism"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/CarrierPowerSuit",
      "name": "Carrier",
      "description": "With 'Assault Mode' and 'Ammo Case' as default Precepts, Carrier is a seeker Sentinel. Carrier also comes with a shotgun weapon.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "carrier.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Carrier"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/PrimeCarrierPowerSuit",
      "name": "Carrier Prime",
      "description": "This ornate sentinel is an excellent example of late Orokin craftsmanship and styling.",
      "type": "Sentinel",
      "imageName": "carrier-prime.png",
      "tradable": true,
      "releaseDate": "2015 07 07",
      "vaultDate": "2017 05 30",
      "estimatedVaultDate": "2017 05 30",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Carrier_Prime"
    },
    {
      "name": "Cassowar",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/TnHalberdPolearm/TnHalberdPolearmWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 188,
      "trigger": "Melee",
      "description": "Light and nimble, the twin blades of this polearm will swoop and slice through throngs of hardened foes.",
      "accuracy": 100,
      "wallAttack": 313,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "cassowar.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "188.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b3/Cassowar.png/revision/latest?cb=20171124054158",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cassowar",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 42.27,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, high attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Cresting Peak",
      "component": false
    },
    {
      "name": "Castanas",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/StickyBomb/StickyBombs",
      "omegaAttenuation": 1.4,
      "totalDamage": 160,
      "trigger": "Active",
      "description": "The remotely triggered Castanas quietly deliver a lethal dose of electricity to unsuspecting enemies.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "castanas.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "160.0 electricity",
      "flight": 30,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/17/TaserStar.png/revision/latest?cb=20140226214533",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Castanas",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Catchmoon",
      "uniqueName": "/Lotus/Weapons/SolarisUnited/Secondary/SUModularSecondarySet1/Barrel/SUModularSecondaryBarrelAPart",
      "omegaAttenuation": 0.5,
      "type": "Secondary",
      "imageName": "catchmoon.png",
      "category": "Kitgun",
      "tradable": false,
      "acquisition": "Rude Zuud (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Catchmoon"
    },
    {
      "name": "Caustacyst",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/InfEmbolistScythe/InfestedScythe",
      "omegaAttenuation": 1.3,
      "totalDamage": 260,
      "trigger": "Melee",
      "description": "Charge attacks from this scythe unleash a wave of acid that mutilates enemies and leaves a trail of corrosive sludge.",
      "accuracy": 100,
      "wallAttack": 520,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "caustacyst.png",
      "category": "Scythe",
      "tradable": false,
      "channeling": 1.5,
      "damage": "103.0 corrosive",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e1/EmbolistScythe.png/revision/latest?cb=20161021004947",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Caustacyst",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Heavy Attack",
      "rank": 27.34,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, low attack speed. Suffers from relatively poor consistency. Charge attack throws wave of Corrosive damage, staggers enemies and causes guaranteed slash proc on direct contact. ✪",
      "stance": "Reaping Spiral",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Centaur",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/Archswordandshield/ArchSwordShield",
      "omegaAttenuation": 1,
      "totalDamage": 280,
      "trigger": "Melee",
      "description": "Part sword, part shield, the Centaur excels at charging headlong into enemy fire.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "SpaceMelee",
      "imageName": "centaur.png",
      "tradable": false,
      "damage": "280.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2f/Archswordandshield.png/revision/latest?cb=20141024143732",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Centaur",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ceramic Dagger",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Dagger/CeramicDagger",
      "omegaAttenuation": 1.4299999,
      "totalDamage": 140,
      "trigger": "Melee",
      "description": "This short blade weapon was built using ceramic. It has limited range but comes out fast.",
      "accuracy": 100,
      "wallAttack": 420,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ceramic-dagger.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "140.0",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ceramic_Dagger",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 42.28,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, low attack speed. ",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Cerata",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Glaives/PunctureGlaive/PunctureGlaiveWeapon",
      "omegaAttenuation": 1.36,
      "totalDamage": 183,
      "trigger": "Melee",
      "description": "Twisted and tortured from exposure to the Infestation, this glaive becomes an absolute predator in the hands of the right Tenno.",
      "accuracy": 100,
      "wallAttack": 549,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "cerata.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "76.0 toxin",
      "projectile": "Thrown",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/ca/PunctureGlaive.png/revision/latest?cb=20151028155311",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cerata",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 38.96,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, low attack speed. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "name": "Cernos",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/AntlerBow/AntlerBow",
      "omegaAttenuation": 1.25,
      "totalDamage": 380,
      "trigger": "Charge",
      "description": "Evoking the design of ancient bows, the high impact Cernos is perfect for hunting down highly shielded enemies.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "cernos.png",
      "category": "Bow",
      "tradable": false,
      "damage": "190.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 18,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ac/DECernos.png/revision/latest?cb=20180503202033",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cernos",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Cernos Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/PrimeCernos/PrimeCernos",
      "omegaAttenuation": 1.2,
      "totalDamage": 552,
      "trigger": "Charge",
      "description": "A noble bow to hunt hellish beasts.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "cernos-prime.png",
      "category": "Bow",
      "tradable": true,
      "damage": "276.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 30,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/06/CernosPrime.png/revision/latest?cb=20161123020233",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cernos_Prime",
      "disposition": 4,
      "releaseDate": "2016 11 22",
      "vaultDate": "2018 09 25",
      "estimatedVaultDate": "2018 09 25",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; projectile munitions. Alt fire toggles firing pattern between horizontal and vertical (+50% headshot damage). ✪",
      "dmg": "Crit/Status",
      "rank": 42.1099800796022,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Cestra",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CorpusMinigun/CorpusMinigun",
      "omegaAttenuation": 1.52,
      "totalDamage": 26.000002,
      "trigger": "Auto",
      "description": "Compact and deadly, the Cestra discharges bolts of energy at an increasingly rapid rate.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "itemCount": 1,
      "parents": [
        "Dual Cestra"
      ],
      "type": "Secondary",
      "imageName": "cestra.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "26.0",
      "flight": 100,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/16/CorpusMinigun.png/revision/latest?cb=20140221191931",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cestra",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/RetrieverKubrowPetPowerSuit",
      "name": "Chesa Kubrow",
      "description": "This Kubrow will disarm adversaries and retrieve the spoils of battle.",
      "type": "Companion",
      "imageName": "chesa-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Chesa_Kubrow"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Dragon/Dragon",
      "name": "Chroma",
      "description": "A master of the deadly elements, Chroma can alter his damage output by changing his Emissive Color.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Chosen Emissive Color dictates the type of Elemental Damage dealt by Abilities.",
      "type": "Warframe",
      "imageName": "chroma.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4142643,
      "introduced": "16",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2d/ChromaNewLook.png/revision/latest?cb=20150324023405",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Chroma",
      "acquisition": "The New Strange (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Dragon/ChromaPrime",
      "name": "Chroma Prime",
      "description": "Bind the elements and unleash untold destruction with Chroma Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 6,
      "sprintSpeed": 1,
      "passiveDescription": "Chosen Emissive Color dictates the type of Elemental Damage dealt by Abilities.",
      "type": "Warframe",
      "imageName": "chroma-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 2235678,
      "introduced": "23.9",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f2/ChromaPrime.png/revision/latest?cb=20180925193634",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Chroma_Prime",
      "releaseDate": "2018 09 25",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 06 18",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Cobra & Crane",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/SwordsAndBoards/PacifistShieldAndSword/PacifistShieldSword",
      "omegaAttenuation": 1,
      "totalDamage": 296,
      "trigger": "Melee",
      "description": "Baruuk's signature weapons: a sword for retribution, a shield for restraint. In Baruuk's hands, and his hands only, Cobra's first strike in a combo renders his foe unconscious.",
      "accuracy": 100,
      "wallAttack": 888,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "cobra-&-crane.png",
      "category": "Sword and Shield",
      "tradable": false,
      "channeling": 1.5,
      "damage": "296.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b1/Cobra_%26_Crane.png/revision/latest?cb=20181219165427",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cobra_%26_Crane",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 37.28,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, low attack speed. ",
      "stance": "Final Harbinger",
      "stanceNotes": "",
      "combo": "Null Warning",
      "component": false
    },
    {
      "name": "Convectrix",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpSplitLaser/CrpSplitLaser",
      "omegaAttenuation": 1.46,
      "totalDamage": 24,
      "trigger": "Held",
      "description": "When its twin-lasers converge on a target a circuit is created, frying the subject.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "convectrix.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "24.0",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9f/CrpSplitRifle.png/revision/latest?cb=20151002090144",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Convectrix",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot; beam munitions. Primary fire brings the beam from wide to narrow while alt fire sweeps the beam. Alt fire sweeps the beam from narrow to wide instead and is useful for applying status effects to large crowds. [Efficient Beams] makes 100% status modding easy while consuming no ammo while not dealing damage. This makes it possible to keep the beam narrow for maximum concentrated damage without hurting ammo economy. ✪",
      "dmg": "Crit/Status",
      "rank": 53.9888543819998,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Corinth",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnHeavyShotgun/TnHeavyShotgunGun",
      "omegaAttenuation": 0.94999999,
      "totalDamage": 540,
      "trigger": "Semi",
      "description": "Deliver a massive punch with each blast of this shotgun, or launch a round that explodes mid-air knocking down nearby enemies.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "corinth.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "540.0",
      "projectile": "Hitscan",
      "secondaryArea": {
        "name": "Air Burst Explosion",
        "status_chance": 28,
        "radius": 800,
        "blast": 404,
        "damage": "404.0 blast"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/32/TnHeavyShotgun.png/revision/latest?cb=20171221214433",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Corinth",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Alt fire is useful when the reload button is harder to reach than the secondary fire button. Reload should be done when clip is empty as there is a delay between reloading and firing, but the gains should be minimal. ",
      "dmg": "Critical",
      "rank": 55.4736441353328,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Corvas",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/LaunchGrenade/ArchCannon",
      "omegaAttenuation": 1.05,
      "totalDamage": 350,
      "trigger": "Charge",
      "description": "When fully charged, this flak-cannon delivers a devastating shot. Perfect for taking down fast-moving interceptors.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "productCategory": "SpaceGuns",
      "imageName": "corvas.png",
      "tradable": false,
      "damage": "100.0 heat",
      "projectile": "Projectile",
      "statusChance": 20,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/21/ArchLaunchGrenade.png/revision/latest?cb=20141024143734",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Corvas",
      "disposition": 3,
      "type": "Archwing Gun",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Cronus",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/CronusSword/CronusLongSword",
      "omegaAttenuation": 1.48,
      "totalDamage": 106,
      "trigger": "Melee",
      "description": "A strong blade forged using ceramic.",
      "accuracy": 100,
      "wallAttack": 318,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "cronus.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "106.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/Cronus.png/revision/latest?cb=20130426080615",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cronus",
      "disposition": 5,
      "acquisition": "Captain Vor (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 37.63,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, low attack speed. ",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Cryotra",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetComponents/CryoxionWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 10,
      "trigger": "Held",
      "description": "Emits a ray of sub-zero energy.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "cryotra.png",
      "tradable": false,
      "damage": "10.0 cold",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fa/Cryotra.png/revision/latest?cb=20181110220600",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cryotra",
      "disposition": 3,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Cyanex",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpSentAmalgPistol/CrpSentAmalgPistol",
      "omegaAttenuation": 0.80000001,
      "totalDamage": 91,
      "trigger": "Auto",
      "description": "Sentient tech merges with Corpus design to deliver this lethal sidearm. Fully automatic, it fires ricocheting, homing projectiles that release small clouds of Gas on impact. Alt-fire to release the entire magazine without homing as a single burst.",
      "accuracy": 1.8181819,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "cyanex.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "50.0",
      "projectile": "Projectile",
      "secondary": {
        "name": "Burst Mode",
        "speed": 10.05,
        "crit_chance": 8,
        "crit_mult": 1.4,
        "status_chance": 0.3,
        "shot_type": "Projectile",
        "impact": 2.9,
        "slash": 38.9,
        "puncture": 30.2
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/36/Cyanex.png/revision/latest?cb=20190523234907",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cyanex",
      "disposition": 2,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; projectile munitions. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 54.340758070878,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Cyath Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipFour",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "cyath.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Cyath_Strike"
    },
    {
      "name": "Cycron",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpChargeGun/CrpChargeGun",
      "omegaAttenuation": 1.2,
      "totalDamage": 23,
      "trigger": "Held",
      "description": "Forgo ammunition with the regenerating energy disc in this plasma throwing pistol.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "cycron.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "10.0 radiation",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/66/Cycron.png/revision/latest?cb=20170426223716",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cycron",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot; beam munitions. Does not have an ammo reserve. Ammo in clip regenerates over time when not firing. ",
      "dmg": "Status",
      "rank": 75.9165750888103,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Cyngas",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/ArchBurstGun/ArchBurstGun",
      "omegaAttenuation": 1.3,
      "totalDamage": 48,
      "trigger": "Burst",
      "description": "Unload deadly accurate bursts of mayhem.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "SpaceGuns",
      "imageName": "cyngas.png",
      "tradable": false,
      "damage": "48.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2f/ArchBurstGun.png/revision/latest?cb=20160710175146",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Cyngas",
      "disposition": 4,
      "type": "Archwing Gun",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Daikyu",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/AsymetricalBow/AsymetricalBow",
      "omegaAttenuation": 1.25,
      "totalDamage": 700,
      "trigger": "Charge",
      "description": "Daikyu takes great strength to draw back, but provides added power and range to every shot.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "daikyu.png",
      "category": "Bow",
      "tradable": false,
      "chargeTime": 1,
      "damage": 700,
      "projectile": "Projectile",
      "statusChance": 46,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/AsymmetricBow.png/revision/latest?cb=20150512232727",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Daikyu",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; projectile munitions. ",
      "dmg": "Crit/Status",
      "rank": 59.4809720581776,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Dakra Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/CronusSword/PrimeCronusLongSword",
      "omegaAttenuation": 1.15,
      "totalDamage": 170,
      "trigger": "Melee",
      "description": "The Dakra Prime is a Tenno forged weapon, crafted during the time of the Orokin. It is renowned for speed, power and the ability to hit multiple targets.",
      "accuracy": 100,
      "wallAttack": 510,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dakra-prime.png",
      "category": "Sword",
      "tradable": true,
      "channeling": 1.5,
      "damage": "170.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/86/SwordPrime.png/revision/latest?cb=20130914111405",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dakra_Prime",
      "disposition": 4,
      "releaseDate": "2013 09 13",
      "vaultDate": "2015 07 07",
      "estimatedVaultDate": "2015 07 07",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 24.89,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, high attack speed. ✪",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Dark Dagger",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Dagger/DarkDagger",
      "omegaAttenuation": 0.51999998,
      "totalDamage": 154,
      "trigger": "Melee",
      "description": "This short blade weapon forged using dark metals has limited range but comes out fast.",
      "accuracy": 100,
      "wallAttack": 462,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dark-dagger.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "60.0 radiation",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0b/DarkDagger.png/revision/latest?cb=20161106060712",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dark_Dagger",
      "disposition": 1,
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dark Split-Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/DarkSword/DarkSwordDaggerHybridWeapon",
      "omegaAttenuation": 1.21,
      "totalDamage": 10,
      "trigger": "",
      "description": "Use as a devastating heavy sword or apply a Dual Melee stance and split the weapon into two ferocious blades.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dark-split-sword.png",
      "category": "Melee",
      "tradable": false,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 29.2,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, very high attack speed. Heavy blade mode is relatively underpowered. ",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Dark_Split-Sword"
    },
    {
      "name": "Dark Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/DarkSword/DarkLongSword",
      "omegaAttenuation": 1.48,
      "totalDamage": 260,
      "trigger": "Melee",
      "description": "A blade forged using dark metals, capable of delivering innate <DT_RADIATION>Radiation Damage with attacks.",
      "accuracy": 100,
      "wallAttack": 780,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dark-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "80.0 radiation",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c6/DarkSword.png/revision/latest?cb=20161106060928",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dark_Sword",
      "disposition": 5,
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 32.63,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, very low attack speed. ✪",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Deconstructor",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/SentGlaiveWeapon",
      "omegaAttenuation": 1.25,
      "totalDamage": 50,
      "trigger": "",
      "description": "Causes the Helios Sentinel to attack enemy targets using pieces of itself.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "deconstructor.png",
      "tradable": false,
      "damage": "50.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a1/SentinelGlaiveWeapon.png/revision/latest?cb=20140422001413",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Deconstructor",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Deconstructor Prime",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/DeconstructorPrime/PrimeHeliosGlaiveWeapon",
      "omegaAttenuation": 1.25,
      "totalDamage": 75,
      "trigger": "",
      "description": "Allows the Helios Prime to violently disassemble and turn itself into a deadly projectile.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 8,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "deconstructor-prime.png",
      "tradable": true,
      "damage": "75.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9f/DeconstructorPrime.png/revision/latest?cb=20170222214714",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Deconstructor_Prime",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dehtat Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipFive",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "dehtat.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Dehtat_Strike"
    },
    {
      "name": "Dera",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/EnergyRifle",
      "omegaAttenuation": 1.35,
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "The Dera is a repeater that fires super-heated plasma.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "dera.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "30.0",
      "flight": 100,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a3/CorpusEnergyRifle.png/revision/latest?cb=20161125234457",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dera",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dera Vandal",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/DeraVandal",
      "omegaAttenuation": 1.3,
      "totalDamage": 32,
      "trigger": "Auto",
      "description": "A customized version of the Dera, featuring a metallic finish and Lotus decal.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "dera-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "32.0",
      "flight": 100,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/27/DeraVandal.png/revision/latest?cb=20161126000242",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dera_Vandal",
      "disposition": 4,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; projectile munitions. ",
      "dmg": "Status",
      "rank": 87.2410525505948,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Despair",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/StalkerKunai",
      "omegaAttenuation": 1.3,
      "totalDamage": 58,
      "trigger": "Auto",
      "description": "Used by The Stalker, Despair throwing blades have a mono-filament edge, sharp enough to penetrate a Warframe.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "despair.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "58.0",
      "flight": 70,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/25/Despair.png/revision/latest?cb=20170304062240",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Despair",
      "disposition": 4,
      "acquisition": "Stalker",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot; projectile munitions. ",
      "dmg": "Crit/Status",
      "rank": 120.340032573204,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Destreza",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/TnoRapier/TnoRapier",
      "omegaAttenuation": 1.14,
      "totalDamage": 158,
      "trigger": "Melee",
      "description": "Elevate martial combat into an art form with this Tenno rapier.",
      "accuracy": 100,
      "wallAttack": 474,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "destreza.png",
      "category": "Rapier",
      "tradable": false,
      "channeling": 1.5,
      "damage": "158.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5c/TnoRapier.png/revision/latest?cb=20160120124035",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Destreza",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Destreza Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PRapier/DestrezaPrime",
      "omegaAttenuation": 1.14,
      "totalDamage": 170,
      "trigger": "Melee",
      "description": "Take mastery to the next level with this primed rapier.",
      "accuracy": 100,
      "wallAttack": 510,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "destreza-prime.png",
      "category": "Rapier",
      "tradable": true,
      "channeling": 1.5,
      "damage": "170.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1f/DestrezaPrime.png/revision/latest?cb=20180619191549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Destreza_Prime",
      "disposition": 4,
      "releaseDate": "2018 06 19",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 03 18",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Heavy Attack",
      "rank": 22.4,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, low attack speed. ✪",
      "stance": "Vulpine Mask",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Deth Machine Rifle",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/DethMachineRifle",
      "omegaAttenuation": 1.455,
      "totalDamage": 5,
      "trigger": "Auto",
      "description": "Standard issue weaponry signature to Dethcube.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "deth-machine-rifle.png",
      "tradable": false,
      "damage": "5.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f2/DESentinelDethMachineRifle.png/revision/latest?cb=20140122154228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Deth_Machine_Rifle",
      "disposition": 5,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Deth Machine Rifle Prime",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/PrimeDethMachineRifle",
      "omegaAttenuation": 1.455,
      "totalDamage": 7,
      "trigger": "Auto",
      "description": "Signature default weapon of Dethcube Prime.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "deth-machine-rifle-prime.png",
      "tradable": true,
      "damage": "7.0",
      "projectile": "Hitscan",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Deth_Machine_Rifle_Prime",
      "disposition": 5,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/DethCubePowerSuit",
      "name": "Dethcube",
      "description": "With 'Assault Mode' and 'Vaporize' as default precepts, Dethcube acts exactly as advertised, as a badass cube of 'deth'. Comes loaded with Deth Machine Rifle weapon.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "dethcube.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Dethcube"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/PrimeDethCubePowerSuit",
      "name": "Dethcube Prime",
      "description": "With 'Assault Mode' and 'Vaporize' as default precepts, Dethcube Prime is the apex of lethal support. Comes loaded with Deth Machine Rifle Prime weapon.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "dethcube-prime.png",
      "tradable": true,
      "releaseDate": "2019 10 01",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 06 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Dethcube_Prime"
    },
    {
      "name": "Detron",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CorpusHandShotgun/CorpusHandCannon",
      "omegaAttenuation": 1.1,
      "totalDamage": 280,
      "trigger": "Semi",
      "description": "The sleek lines of the Detron conceal its ferocious nature. The hand cannon's semi-automatic action takes down enemies with speed and efficiency.",
      "accuracy": 7.1428571,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "detron.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "280.0 radiation",
      "flight": 150,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fd/DECorpusHandCannon.png/revision/latest?cb=20140116153506",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Detron",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dex Dakra",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/DexTheSecond/DexTheSecond",
      "omegaAttenuation": 1.15,
      "totalDamage": 142,
      "trigger": "Melee",
      "description": "A gift from the Lotus to commemorate the anniversary of the first Tenno waking from Cryo stasis.",
      "accuracy": 100,
      "wallAttack": 426,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dex-dakra.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "142.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e9/DexDakra.png/revision/latest?cb=20150423184455",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dex_Dakra",
      "disposition": 4,
      "acquisition": "Anniversary",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 30.37,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, low attack speed. ",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Dex Furis",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/DexFuris/DexFuris",
      "omegaAttenuation": 1.39,
      "totalDamage": 16,
      "trigger": "Auto",
      "description": "A gift from the Lotus to commemorate the anniversary of the first Tenno waking from Cryo stasis.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "dex-furis.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "16.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/33/DexFuris.png/revision/latest?cb=20170606011218",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dex_Furis",
      "disposition": 5,
      "acquisition": "Anniversary",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot; hitscan munitions. Despite being called the Furis, it uses the Afuris riven. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 77.707372593841,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Dex Sybaris",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/DexTheThird/DexTheThird",
      "omegaAttenuation": 1.15,
      "totalDamage": 75,
      "trigger": "Burst",
      "description": "A gift from the Lotus to commemorate the third anniversary of the first Tenno waking from Cryo stasis.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "dex-sybaris.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "75.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/12/DexSybaris.png/revision/latest?cb=20160307022859",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dex_Sybaris",
      "disposition": 4,
      "acquisition": "Anniversary",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/ArcDronePowerSuit",
      "name": "Diriga",
      "description": "Diriga shocks nearby enemies, and picks off distant threats, utilizing the Vulklok sniper rifle and the 'Calculated Shot', 'Arc Coil' and 'Electro Pulse' precepts.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "diriga.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Diriga"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/GubberPowerSuit",
      "name": "Djinn",
      "description": "With 'Thumper' and 'Fatal Attraction' as default Precepts, Djinn is a combat Sentinel. Djinn also comes with a poison dart weapon.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "djinn.png",
      "tradable": false,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Djinn"
    },
    {
      "name": "Dokrahm Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee02/Tip/TipEleven",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "dokrahm.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Dokrahm_Strike"
    },
    {
      "name": "Dragon Nikana",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/KatanaAndWakizashi/LowKatana",
      "omegaAttenuation": 1.35,
      "totalDamage": 188,
      "trigger": "Melee",
      "description": "The Dragon Nikana is forged from ancient Tenno steel. This is a master's weapon, only the most worthy of Tenno may wield it.",
      "accuracy": 100,
      "wallAttack": 403,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dragon-nikana.png",
      "category": "Nikana",
      "tradable": false,
      "channeling": 1.5,
      "damage": "188.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/39/DragonKatana.png/revision/latest?cb=20140415221134",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dragon_Nikana",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 30.76,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. ✪",
      "stance": "Decisive Judgement",
      "stanceNotes": "",
      "combo": "Swift Retribution",
      "component": false
    },
    {
      "name": "Drakgoon",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerFlakCannon/FlakCannon",
      "omegaAttenuation": 1.48,
      "totalDamage": 700,
      "trigger": "Charge",
      "description": "The Drakgoon flak cannon sends volleys of intensely hot shrapnel ricocheting around the room. Can be fired in wide or concentrated bursts.",
      "accuracy": 1.4285715,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "LongGuns",
      "itemCount": 1,
      "parents": [
        "Zarr"
      ],
      "type": "Primary",
      "imageName": "drakgoon.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "400.0",
      "flight": 100,
      "projectile": "Projectile",
      "statusChance": 23,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/GrineerFlakCannon.png/revision/latest?cb=20161117023032",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Drakgoon",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; projectile munitions. ",
      "dmg": "Raw",
      "rank": 103.810597552415,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Dread",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/StalkerBow",
      "omegaAttenuation": 1.25,
      "totalDamage": 336,
      "trigger": "Charge",
      "description": "Dread is the calling card of The Stalker. It fires arrows that can decapitate.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "dread.png",
      "category": "Bow",
      "tradable": false,
      "damage": "168.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 20,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/20/Dread2.png/revision/latest?cb=20180418151352",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dread",
      "disposition": 4,
      "acquisition": "Stalker",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot; projectile munitions. ",
      "dmg": "Critical",
      "rank": 58.6299105359837,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Dual Cestra",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CorpusMinigun/DualCorpusMinigun",
      "omegaAttenuation": 1.35,
      "totalDamage": 26.000002,
      "trigger": "Auto",
      "description": "Wield two Cestras to unleash a dual torrent of high energy bolts.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "dual-cestra.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "26.0",
      "flight": 100,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4e/DualCorpusMinigun.png/revision/latest?cb=20140206061958",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Cestra",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dual Cleavers",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerMachetteAndCleaver/DualCleaverWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 157,
      "trigger": "Melee",
      "description": "Butcher your foes with brutal blades in each hand.",
      "accuracy": 100,
      "wallAttack": 471,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dual-cleavers.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "157.1",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/43/Dual_Cleavers.png/revision/latest?cb=20130803121949",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Cleavers",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Dual Decurion",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/ArchwingHeavyPistols/ArchHeavyPistols",
      "omegaAttenuation": 1.25,
      "totalDamage": 42,
      "trigger": "Auto",
      "description": "Delivering twin streams of highly accurate, rapid-fire ordnance, the Decurion are specifically designed for combat in the vacuum of space.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "productCategory": "SpaceGuns",
      "imageName": "dual-decurion.png",
      "tradable": false,
      "damage": "42.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5f/ArchHeavyPistols.png/revision/latest?cb=20141127181924",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Decurion",
      "disposition": 4,
      "type": "Archwing Gun",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Dual Ether",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualShortSword/DualEtherSword",
      "omegaAttenuation": 1.45,
      "totalDamage": 180,
      "trigger": "Melee",
      "description": "Fast and precise. The Dual Ether cuts so cleanly that it was considered by the Tenno to be a more humane weapon for ‘cleansing’ infested allies. Capable of hitting multiple targets.",
      "accuracy": 100,
      "wallAttack": 540,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dual-ether.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "180.0",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Ether",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 27.67,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. ✪",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Dual Heat Swords",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualShortSword/DualHeatSwords",
      "omegaAttenuation": 1.4400001,
      "totalDamage": 147,
      "trigger": "Melee",
      "description": "With a Heat Sword in each hand, enemies reach their fiery demise twice as fast. Can connect with multiple targets at once.",
      "accuracy": 100,
      "wallAttack": 441,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dual-heat-swords.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "147.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/39/DualHeat.png/revision/latest?cb=20130213060428",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Heat_Swords",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 60.99,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, very low attack speed. Suffers from relatively poor consistency. Slam attacks procs Heat in an AOE. ",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Dual Ichor",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Axe/DualInfestedAxesWeapon",
      "omegaAttenuation": 1.16,
      "totalDamage": 122,
      "trigger": "Melee",
      "description": "The fast and brutal Dual Ichor axes will quickly tear through enemies with a high probability of inflicting Critical Damage.",
      "accuracy": 100,
      "wallAttack": 366,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dual-ichor.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "47.0 toxin",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/51/DualInfestedAxes.png/revision/latest?cb=20130914111400",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Ichor",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 27.45,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. ",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Dual Kamas",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualKamas/DualKamas",
      "omegaAttenuation": 0.81,
      "totalDamage": 96.000008,
      "trigger": "Melee",
      "description": "Wielding a Kama in each hand brings a savage amount of <DT_SLASH>Slash Damage to bear against your enemies.",
      "accuracy": 100,
      "wallAttack": 288,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "productCategory": "Melee",
      "itemCount": 1,
      "parents": [
        "Dual Raza"
      ],
      "type": "Melee",
      "imageName": "dual-kamas.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "96.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f9/DEDualKamas.png/revision/latest?cb=20140124181157",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Kamas",
      "disposition": 2,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Dual Kamas Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeDualKamas/PrimeDualKamas",
      "omegaAttenuation": 0.81,
      "totalDamage": 160,
      "trigger": "Melee",
      "description": "The sensual lines of these golden Kamas have long been celebrated as a masterwork of Tenno weapon smithing.",
      "accuracy": 100,
      "wallAttack": 480,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dual-kamas-prime.png",
      "category": "Dual Swords",
      "tradable": true,
      "channeling": 1.5,
      "damage": "160.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5b/DualKamasPrime.png/revision/latest?cb=20151015150932",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Kamas_Prime",
      "disposition": 2,
      "releaseDate": "2015 10 06",
      "vaultDate": "2017 08 29",
      "estimatedVaultDate": "2017 08 29",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 28.1,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, very high attack speed. ",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Dual Keres",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/QuillSword/QuillDualSwords",
      "omegaAttenuation": 1.48,
      "totalDamage": 115,
      "trigger": "Melee",
      "description": "Tear through any target with these vicious, claw-like blades. The signature swords of Khora.",
      "accuracy": 100,
      "wallAttack": 345,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dual-keres.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "115.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0e/DualKeres.png/revision/latest?cb=20180417184307",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Keres",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Critical/Crit & Status",
      "rank": 28.26,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, very high attack speed. ✪",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Dual Raza",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Soma/SomaDualKamas",
      "omegaAttenuation": 1.4,
      "totalDamage": 110,
      "trigger": "Melee",
      "description": "Razor sharp battle-hatchets, designed to compliment the Soma.",
      "accuracy": 100,
      "wallAttack": 330,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dual-raza.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "110.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4d/SomaDualKamas.png/revision/latest?cb=20150408223721",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Raza",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 33.03,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, low attack speed. ✪",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Dual Skana",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualShortSword/DualShortSword",
      "omegaAttenuation": 1.48,
      "totalDamage": 120,
      "trigger": "Melee",
      "description": "A shorter Skana in each hand. Can hit multiple targets.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "itemCount": 1,
      "parents": [
        "Akjagara",
        "Dark Split-Sword",
        "Redeemer"
      ],
      "type": "Melee",
      "imageName": "dual-skana.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "120.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f8/DualSkana.png/revision/latest?cb=20160221143832",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Skana",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 44.92,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, very low attack speed. ",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": true
    },
    {
      "name": "Dual Toxocyst",
      "uniqueName": "/Lotus/Weapons/Infested/Pistols/InfVomitGun/InfVomitGunWep",
      "omegaAttenuation": 1.35,
      "totalDamage": 75,
      "trigger": "Semi",
      "description": "Brain-strikes excite this bioweapon, causing it to rapidly release toxic munitions.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "dual-toxocyst.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "75.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/09/InfVomitGun.png/revision/latest?cb=20160304215549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Toxocyst",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. Headshot grants Frenzy buff. Frenzy lasts 3 seconds and can be refreshed. Frenzy grants 100% increase in Toxin damage (on base damage), 15% increase in fire rate, recoil reduction, and doesn't consume ammo while firing. ✪",
      "dmg": "Speed/Status",
      "rank": 58.3749213828704,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Dual Zoren",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Axe/DualAxeWeapon",
      "omegaAttenuation": 1.4400001,
      "totalDamage": 70,
      "trigger": "Melee",
      "description": "Short axes held in each hand. High attack speed and can hit multiple targets. Delivers a high percentage of critical strikes.",
      "accuracy": 100,
      "wallAttack": 210,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "dual-zoren.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "70.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/44/DualZoren.png/revision/latest?cb=20130811190125",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Dual_Zoren",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 39.93,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, very high attack speed. ",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": true
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/DemolitionJetPack/DemolitionJetPack",
      "name": "Elytron",
      "description": "This heavy duty Archwing was designed for one purpose, destruction.",
      "masteryReq": 0,
      "sprintSpeed": 0.89999998,
      "type": "Vehicle",
      "imageName": "elytron.png",
      "category": "Archwing",
      "tradable": false,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Elytron"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ember/Ember",
      "name": "Ember",
      "description": "Ember is a nightmare for light-armored targets. Ember can super-heat the air which opens up surprising crowd-control possibilities.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Receive |STRENGTH|% Ability Strength for every enemy within |RANGE|m engulfed in flame<DT_FIRE>.",
      "type": "Warframe",
      "imageName": "ember.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": false,
      "color": 4670010,
      "introduced": "Vanilla",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a7/EmberNewLook.png/revision/latest?cb=20141124023013",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ember",
      "acquisition": "General Sargas Ruk (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ember/EmberPrime",
      "name": "Ember Prime",
      "description": "Ember Prime offers the same potential for wanton destruction as Ember but provides unique mod polarities, allowing for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Receive |STRENGTH|% Ability Strength for every enemy within |RANGE|m engulfed in flame<DT_FIRE>.",
      "type": "Warframe",
      "imageName": "ember-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": false,
      "color": 2959129,
      "introduced": "11",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/39/EmberPrimeNewLook.png/revision/latest?cb=20141124023024",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ember_Prime",
      "releaseDate": "2013 11 20",
      "vaultDate": "2015 10 06",
      "estimatedVaultDate": "2015 10 06",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Embolist",
      "uniqueName": "/Lotus/Weapons/Infested/Pistols/InfestedPistol",
      "omegaAttenuation": 1.4,
      "totalDamage": 35,
      "trigger": "Held",
      "description": "A living weapon, the infested Embolist pistol kills its victims with an acidic venomous gas.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "embolist.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "35.0 toxin",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/InfestedPistol.png/revision/latest?cb=20140314172859",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Embolist",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot; beam munitions. ✪",
      "dmg": "Status",
      "rank": 48.7235384061671,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Endura",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/ThreeLeaf/ThreeLeaf",
      "omegaAttenuation": 1,
      "totalDamage": 200,
      "trigger": "Melee",
      "description": "The delicate form of this Tenno rapier conceals its ferocious and resilient force.",
      "accuracy": 100,
      "wallAttack": 600,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "endura.png",
      "category": "Rapier",
      "tradable": false,
      "channeling": 1.5,
      "damage": "200.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/Endura.png/revision/latest?cb=20170524214221",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Endura",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 35.67,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, low attack speed. ",
      "stance": "Vulpine Mask",
      "stanceNotes": "",
      "combo": "Assailant Guise",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/YinYang/YinYang",
      "name": "Equinox",
      "description": "Split between day and night, Equinox manifests aggressive and defensive forms at will.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "|PERCENT|% of Health Orbs are converted into Energy, and |PERCENT|% of Energy Orbs are converted into Health.",
      "type": "Warframe",
      "imageName": "equinox.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 0,
      "introduced": "17",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Equinox",
      "acquisition": "Tyl Regor (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/YinYang/EquinoxPrime",
      "name": "Equinox Prime",
      "description": "Night and Day in final balance; the graceful perfection of the one that walks the borders.",
      "masteryReq": 5,
      "sprintSpeed": 1.15,
      "passiveDescription": "|PERCENT|% of Health Orbs are converted into Energy, and |PERCENT|% of Energy Orbs are converted into Health.",
      "type": "Warframe",
      "imageName": "equinox-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 0,
      "introduced": "24.5.8",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Equinox_Prime",
      "releaseDate": "2019 03 27",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 12 19",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ether Daggers",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualDagger/DualEtherDagger",
      "omegaAttenuation": 1.49,
      "totalDamage": 224,
      "trigger": "Melee",
      "description": "A shorter version of the Ether blade that allows for a more focused attack on a single target.",
      "accuracy": 100,
      "wallAttack": 672,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ether-daggers.png",
      "category": "Dual Daggers",
      "tradable": false,
      "channeling": 1.5,
      "damage": "224.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/08/EtherDaggers2.png/revision/latest?cb=20130412155450",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ether_Daggers",
      "disposition": 5,
      "acquisition": "Operation Plague Star (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 34.68,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, very low attack speed. Suffers from relatively poor consistency. ✪",
      "stance": "Spinning Needle",
      "stanceNotes": "",
      "combo": "True Kiss",
      "component": false
    },
    {
      "name": "Ether Reaper",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Scythe/EtherScytheWeapon",
      "omegaAttenuation": 1.45,
      "totalDamage": 180,
      "trigger": "Melee",
      "description": "With a blade forged from the same material as the Ether Sword, the Ether Reaper delivers quick death to its victims.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ether-reaper.png",
      "category": "Scythe",
      "tradable": false,
      "channeling": 1.5,
      "damage": "180.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/48/EtherScythe.png/revision/latest?cb=20130914111401",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ether_Reaper",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Heavy Attack",
      "rank": 27.09,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. ✪",
      "stance": "Reaping Spiral",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Ether Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/LongSword/EtherSword",
      "omegaAttenuation": 1.4400001,
      "totalDamage": 192,
      "trigger": "Melee",
      "description": "A single blade for more precision. The Ether Sword cuts so cleanly that it was considered by the Tenno to be a more humane weapon for ‘cleansing’ infested allies.",
      "accuracy": 100,
      "wallAttack": 576,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ether-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "192.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5a/Ether-Sword.png/revision/latest?cb=20160221144220",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ether_Sword",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 27.56,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, low attack speed. Slam attacks procs Radiation in an AOE. ✪",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Euphona Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/AllNew1hSG/AllNew1hSG",
      "omegaAttenuation": 0.69999999,
      "totalDamage": 325,
      "trigger": "Semi",
      "description": "Banshee Prime’s signature shotgun is an instrument of devastation that fires both focused and broad shots.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "euphona-prime.png",
      "category": "Shotgun Sidearm",
      "tradable": true,
      "damage": "325.0",
      "flight": 180,
      "projectile": "Projectile",
      "secondary": {
        "crit_chance": 2,
        "crit_mult": 2,
        "status_chance": 0.3,
        "pellet": {
          "count": 10
        },
        "falloff": {
          "start": 6,
          "end": 12,
          "reduction": 0.9886
        },
        "impact": 44,
        "slash": 660,
        "puncture": 176
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/EuphoraPrime.png/revision/latest?cb=20170301080132",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Euphona_Prime",
      "disposition": 1,
      "releaseDate": "2017 02 28",
      "vaultDate": "2018 12 12",
      "estimatedVaultDate": "2018 12 12",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; projectile munitions. Alt-fire switches to multi-pellet mode that can achieve 100% status chance when modded properly. However, slug mode firing has superior DPS and hybrid modding will gimp both builds. ",
      "dmg": "Critical",
      "rank": 55.9679483388679,
      "tierRank": 2,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Excalibur/Excalibur",
      "name": "Excalibur",
      "description": "A perfect balance of mobility and offense, Excalibur is the ideal Warframe for new players.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Excalibur deals |DAMAGE|% increased damage and attacks |SPEED|% faster when wielding swords.",
      "type": "Warframe",
      "imageName": "excalibur.png",
      "tradable": false,
      "conclave": true,
      "color": 7564394,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/40/ExcaliburNewLook.png/revision/latest?cb=20141124023040",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Excalibur",
      "acquisition": "Lieutenant Lech Kril (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Excalibur/ExcaliburPrime",
      "name": "Excalibur Prime",
      "description": "Excalibur Prime is the epitome of mobility and offense, and features the same abilities as Excalibur, but has unique mod polarities installed allowing for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Excalibur Prime deals |DAMAGE|% increased damage and attacks |SPEED|% faster when wielding swords.",
      "type": "Warframe",
      "imageName": "excalibur-prime.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 12169376,
      "introduced": "5",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/ExcaliburPrimeNewLook.png/revision/latest?cb=20180628213418",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Excalibur_Prime",
      "acquisition": "Unobtainable (Founders)",
      "checked": false,
      "unobtainable": true,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Excalibur/ExcaliburUmbra",
      "name": "Excalibur Umbra",
      "description": "From the shadow of the long night emerges a new Excalibur.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Umbra exhibits sentience in combat without Transference control. Attacks |SPEED|% faster and deals |DAMAGE|% more damage while wielding swords.",
      "type": "Warframe",
      "imageName": "excalibur-umbra.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4013626,
      "introduced": "23",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5c/ExcaliburUmbra.png/revision/latest?cb=20180908125114",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Excalibur_Umbra",
      "acquisition": "The Sacrifice (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "specialNote": "Item are fully ranked when obtained."
    },
    {
      "name": "Exergis",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpShapeBlast/CrpShapeBlastShotgun",
      "omegaAttenuation": 1,
      "totalDamage": 1620,
      "trigger": "Semi",
      "description": "Feel the kick of this Corpus shotgun as it shatters a high-yield crystal into anyone and anything standing in your way.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "exergis.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "420.0 radiation",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6c/Exergis.png/revision/latest?cb=20190925182707",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Exergis",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; projectile munitions. ",
      "dmg": "Status",
      "rank": 48.4736441353328,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Falcor",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Glaive/CrpGlaive/CrpGlaive",
      "omegaAttenuation": 1,
      "totalDamage": 230,
      "trigger": "Melee",
      "description": "Carve through enemies with surgical precision using this Corpus-tech glaive.",
      "accuracy": 100,
      "wallAttack": 690,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "falcor.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "84.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f4/CrpGlaive.png/revision/latest?cb=20181012140354",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Falcor",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 49.33,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, very low attack speed. Suffers from relatively poor consistency. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "name": "Fang",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualDagger/DualDagger",
      "omegaAttenuation": 1.36,
      "totalDamage": 108,
      "trigger": "Melee",
      "description": "These matching stilettos have increased attack speed and can unleash a flurry of multi-hit attacks.",
      "accuracy": 100,
      "wallAttack": 324,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "fang.png",
      "category": "Dual Daggers",
      "tradable": false,
      "channeling": 1.5,
      "damage": "108.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/DualDaggers.png/revision/latest?cb=20160221143944",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fang",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Fang Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualDagger/FangPrimeDagger",
      "omegaAttenuation": 1.36,
      "totalDamage": 178,
      "trigger": "Melee",
      "description": "A set of ceremonial daggers from the Orokin era, the Fang Prime's blades resonate violently as they strike. This allows them to pierce hardened materials like armor with ease.",
      "accuracy": 100,
      "wallAttack": 534,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "fang-prime.png",
      "category": "Dual Daggers",
      "tradable": true,
      "channeling": 1.5,
      "damage": "178.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2b/PrimeFang.png/revision/latest?cb=20130713205727",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fang_Prime",
      "disposition": 5,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 28.42,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. ✪",
      "stance": "Spinning Needle",
      "stanceNotes": "",
      "combo": "True Kiss",
      "component": false
    },
    {
      "name": "Ferrox",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/Spears/Railgun/CorpusRailgun",
      "omegaAttenuation": 1.15,
      "totalDamage": 350,
      "trigger": "Charge",
      "description": "Discharge a rail of ionized death or throw the Ferrox like a spear and create a localized field of attraction no enemy can escape from.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "ferrox.png",
      "category": "Speargun",
      "tradable": false,
      "chargeTime": 0.5,
      "damage": 350,
      "projectile": "Hitscan",
      "secondary": {
        "name": "Attraction Field",
        "speed": 0.5,
        "crit_chance": 0,
        "crit_mult": 2,
        "status_chance": 0.5
      },
      "secondaryArea": {
        "name": "Spear Throw",
        "status_chance": 33,
        "speed": 1,
        "impact": 455,
        "slash": 122.5,
        "puncture": 72.5
      },
      "statusChance": 10,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/56/Ferrox.png/revision/latest?cb=20170309230240",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ferrox",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; hitscan munitions. Munition shot the moment it is fully charged. Alt fire should be used to reduce reliance on primary weapons. Suffers from relatively poor consistency. ✪",
      "dmg": "Critical",
      "rank": 47.3011626335213,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Flatbelly",
      "uniqueName": "/Lotus/Types/Vehicles/Hoverboard/HoverboardParts/PartComponents/HoverboardCorpusA/HoverboardCorpusADeck",
      "omegaAttenuation": 1,
      "type": "Vehicle",
      "imageName": "flatbelly.png",
      "category": "K-Drive",
      "tradable": false,
      "acquisition": "Roky (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Flatbelly"
    },
    {
      "name": "Fluctus",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/RocketArtillery/ArchRocketCrossbow",
      "omegaAttenuation": 0.89999998,
      "totalDamage": 120,
      "trigger": "Semi",
      "description": "An Archwing energy weapon that sends waves of deadly plasma crashing into enemies.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "SpaceGuns",
      "imageName": "fluctus.png",
      "tradable": false,
      "damage": "120.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/dc/ArchRocketCrossbow.png/revision/latest?cb=20141219182154",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fluctus",
      "disposition": 3,
      "type": "Archwing Gun",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Flux Rifle",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/CrpLaserRifle",
      "omegaAttenuation": 1.55,
      "totalDamage": 22,
      "trigger": "Held",
      "description": "Laser Rifle with Corpus safe-guards removed.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "flux-rifle.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "22.0",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/62/CorpusLaserRifle.png/revision/latest?cb=20161126002354",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Flux_Rifle",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; beam munitions. ",
      "dmg": "Status",
      "rank": 74.5401754250992,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Fragor",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Hammer/HammerWeapon",
      "omegaAttenuation": 0.95999998,
      "totalDamage": 200,
      "trigger": "Melee",
      "description": "A large two-handed hammer, the Fragor requires great strength to wield, but impacts with enough force to send groups of enemies tumbling.",
      "accuracy": 100,
      "wallAttack": 400,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "fragor.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "200.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a9/DEFragor.png/revision/latest?cb=20140416121340",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fragor",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Fragor Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeFragor/PrimeFragor",
      "omegaAttenuation": 0.95999998,
      "totalDamage": 270,
      "trigger": "Melee",
      "description": "A beautifully forged instrument of devastation.",
      "accuracy": 100,
      "wallAttack": 540,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "fragor-prime.png",
      "category": "Hammer",
      "tradable": true,
      "channeling": 1.5,
      "damage": "270.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d7/PrimeFragor.png/revision/latest?cb=20160520210719",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fragor_Prime",
      "disposition": 3,
      "releaseDate": "2016 05 17",
      "vaultDate": "2018 03 20",
      "estimatedVaultDate": "2018 03 20",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 47.34,
      "tierRank": 0,
      "weaponNotes": "Very high damage per hit, low attack speed. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "",
      "combo": "Raging Whirlwind",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Frost/Frost",
      "name": "Frost",
      "description": "By channeling moisture and vapor in the surrounding environment, Frost creates formidable defenses and lethal attacks from sub zero conditions.",
      "masteryReq": 0,
      "sprintSpeed": 0.94999999,
      "passiveDescription": "Striking Frost with a melee attack has a |CHANCE|% chance to freeze the attacker for |DURATION|s.",
      "type": "Warframe",
      "imageName": "frost.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 2897981,
      "introduced": "6",
      "sex": "Male",
      "sprint": 0.95,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5a/FrostNewLook.png/revision/latest?cb=20141124023059",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Frost",
      "acquisition": "Captain Vor and Lieutenant Lech Kril (Boss Duo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Frost/FrostPrime",
      "name": "Frost Prime",
      "description": "Frost Prime has the same chilling abilities as Frost but provides unique mod polarities, allowing for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 0.94999999,
      "passiveDescription": "Striking Frost with a melee attack has a |CHANCE|% chance to freeze the attacker for |DURATION|s.",
      "type": "Warframe",
      "imageName": "frost-prime.png",
      "tradable": true,
      "aura": "vazarin",
      "conclave": true,
      "color": 1776408,
      "introduced": "7.10",
      "sex": "Male",
      "sprint": 0.95,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d1/FrostPrimeNewLook.png/revision/latest?cb=20141124023106",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Frost_Prime",
      "releaseDate": "2013 05 03",
      "vaultDate": "2015 04 01",
      "estimatedVaultDate": "2015 04 01",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Fulmin",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnWispRifle/TnWispRifle",
      "omegaAttenuation": 0.64999998,
      "totalDamage": 500,
      "trigger": "Semi",
      "description": "Strike with silent lightning or the pummeling drum of thunder. Alternate between stealthy short-range electrical discharge, and automatic lightning gun. Faster mode-switch when used by Wisp.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "fulmin.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "400.0 electricity",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Full Auto Mode",
        "speed": 9.33,
        "crit_chance": 28,
        "crit_mult": 2.4,
        "status_chance": 0.1,
        "shot_type": "Hit-Scan",
        "puncture": 8,
        "electricity": 25,
        "damage": "25.0 electricity"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/34/Fulmin.png/revision/latest?cb=20190523234908",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fulmin",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; projectile munitions. Primary fire has a small cone-like AoE. Secondary fire toggles automatic hitscan fire mode. Switching between the two is slow and clunky. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 37.9615472627943,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Furax",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Fist/Fist",
      "omegaAttenuation": 1.38,
      "totalDamage": 135,
      "trigger": "Melee",
      "description": "These power gauntlets lack the range of most Melee Weapons, but Furax is far more devastating when you strike an enemy in close combat.",
      "accuracy": 100,
      "wallAttack": 405,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "furax.png",
      "category": "Fist",
      "tradable": false,
      "channeling": 1.5,
      "damage": "135.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/Furax.png/revision/latest?cb=20130426080553",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Furax",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Furax Wraith",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Fist/FuraxWraith",
      "omegaAttenuation": 1.38,
      "totalDamage": 138.99998,
      "trigger": "Melee",
      "description": "These Wraith gauntlets have been augmented for power.",
      "accuracy": 100,
      "wallAttack": 417,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "furax-wraith.png",
      "category": "Fist",
      "tradable": true,
      "channeling": 1.5,
      "damage": "139.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b8/WraithFurax.png/revision/latest?cb=20160430000926",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Furax_Wraith",
      "disposition": 5,
      "acquisition": "Cetus Bounty (Levels 40 - 60)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 43.16,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Seismic Palm",
      "stanceNotes": "",
      "combo": "Quaking Touch",
      "component": false
    },
    {
      "name": "Furis",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/AutoPistol",
      "omegaAttenuation": 1.35,
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "The Furis delivers a high damage output in a short time frame thanks to its high rate of fire.",
      "accuracy": 22.222221,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "furis.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "20.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3e/Furis.png/revision/latest?cb=20170606011114",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Furis",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Fusilai",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/GlassKunai/GlassKunaiWeapon",
      "omegaAttenuation": 1.3,
      "totalDamage": 77,
      "trigger": "Auto",
      "description": "Silently lacerate enemies with Gara's signature glass throwing knives. Increased Projectile Speed when wielded by Gara.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "fusilai.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "77.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 1.5,
        "crit_chance": 3,
        "crit_mult": 1.5,
        "status_chance": 0.4,
        "shot_type": "Projectile",
        "shot_speed": null,
        "pellet": {
          "count": 3,
          "name": "Shuriken"
        },
        "slash": 138.6,
        "puncture": 92.4
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6d/GlassKunai.png/revision/latest?cb=20171017224243",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Fusilai",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot; projectile munitions. Alt-fire launches three throwing knives horizontally instead. ✪",
      "dmg": "Status",
      "rank": 59.9099800796022,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Galatine",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/GreatSword/TennoGreatSword",
      "omegaAttenuation": 0.5,
      "totalDamage": 182,
      "trigger": "Melee",
      "description": "With massive charged power and the ability to hit up to five foes in a single swing, the Galatine sword is the heavy artillery of Melee Weapons.",
      "accuracy": 100,
      "wallAttack": 364,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "galatine.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "182.0",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Galatine",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Galatine Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PrimeGalatine/PrimeGalatine",
      "omegaAttenuation": 0.5,
      "totalDamage": 280,
      "trigger": "Melee",
      "description": "Only Tenno were strong enough to wield this noble beast of a weapon.",
      "accuracy": 100,
      "wallAttack": 560,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "galatine-prime.png",
      "category": "Heavy Blade",
      "tradable": true,
      "channeling": 1.5,
      "damage": "280.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/PrimeGalatine342.png/revision/latest?cb=20160820032103",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Galatine_Prime",
      "disposition": 1,
      "releaseDate": "2016 08 23",
      "vaultDate": "2018 06 19",
      "estimatedVaultDate": "2018 06 19",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 30.92,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, high attack speed. ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "name": "Galvacord",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Whips/CrpShockGrip/CrpShockGripWhipWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 210,
      "trigger": "Melee",
      "description": "Shock and maim with this heavyweight retractable whip.",
      "accuracy": 100,
      "wallAttack": 630,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "galvacord.png",
      "category": "Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "96.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/27/Galvacord.png/revision/latest?cb=20190725171640",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Galvacord",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Heavy Attack",
      "rank": 27.13,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, very low attack speed. ",
      "stance": "Burning Wasp",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Gammacor",
      "uniqueName": "/Lotus/Weapons/Syndicates/CephalonSuda/Pistols/CSDroidArray",
      "omegaAttenuation": 1.05,
      "totalDamage": 16,
      "trigger": "Held",
      "description": "Designed to quickly vaporize minerals for content analysis, users discovered its powerful beam was equally efficient at dispatching hostiles.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "gammacor.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "16.0 magnetic",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/24/Gammacor.png/revision/latest?cb=20141127182228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gammacor",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "uniqueName": "/Lotus/Powersuits/Glass/Glass",
      "name": "Gara",
      "description": "The battlefield trembles before Gara's crystalline power, her ringing touch transforming opponents to targets of brittle beauty.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "A chance to create a radial blind lasting |DURATION|s when exposed to bright light.",
      "type": "Warframe",
      "imageName": "gara.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 6379861,
      "introduced": "22",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2c/GaraNewLook.png/revision/latest?cb=20171026104236",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gara",
      "acquisition": "Saya's Vigil (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Garuda/Garuda",
      "name": "Garuda",
      "description": "Death's crimson maiden, the blood of Garuda's foes imbue her with strength and vitality.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "As Garuda nears death, her damage increases up to an additional |DAMAGE|%.Slashes with her talons if no melee weapon is equipped.",
      "type": "Warframe",
      "imageName": "garuda.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": false,
      "color": 12960440,
      "introduced": "24",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/Garuda.png/revision/latest?cb=20181225215327",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Garuda",
      "acquisition": "Vox Solaris (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Runner/Runner",
      "name": "Gauss",
      "description": "Never stop moving. Gauss' battery is charged by movement, powering his devastating kinetic abilities. They can't kill what they can't hit.",
      "masteryReq": 0,
      "sprintSpeed": 1.4,
      "passiveDescription": "Moving generates an electrical current that fills Gauss' battery. Shields recharge up to |SPEED|% faster while the Recharge Delay is up to |DELAY|% shorter, based on the battery level.",
      "type": "Warframe",
      "imageName": "gauss.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 5662072,
      "introduced": "25.7",
      "sex": "Male",
      "sprint": 1.4,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fd/Gauss.png/revision/latest?cb=20190830132603",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gauss",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Gazal Machete",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PersianMachete/DjinnMachete",
      "omegaAttenuation": 1.35,
      "totalDamage": 178,
      "trigger": "Melee",
      "description": "Each kill with this swooping blade adds bonus damage to the Djinn Sentinel’s next Fatal Attraction ability. In turn, Fatal Attraction bestows the weapon with a period of <DT_CORROSIVE>Corrosive Damage.",
      "accuracy": 100,
      "wallAttack": 534,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "gazal-machete.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "178.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2b/DjinnMachete.png/revision/latest?cb=20180206084638",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gazal_Machete",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 29.26,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, low attack speed. Can be paired with Djinn's Fatal Attraction for approximately 16.6% uptime. ✪",
      "stance": "Sundering Weave",
      "stanceNotes": "",
      "combo": "Rapid Current",
      "component": false
    },
    {
      "name": "Gaze",
      "uniqueName": "/Lotus/Weapons/SolarisUnited/Secondary/SUModularSecondarySet1/Barrel/SUModularSecondaryBarrelDPart",
      "omegaAttenuation": 0.89999998,
      "type": "Secondary",
      "imageName": "gaze.png",
      "category": "Kitgun",
      "tradable": false,
      "acquisition": "Rude Zuud (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Gaze"
    },
    {
      "name": "Glaive",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Glaives/LightGlaive/LightGlaiveWeapon",
      "omegaAttenuation": 1.22,
      "totalDamage": 105,
      "trigger": "Melee",
      "description": "Dating back to the time of the first Tenno, the Glaive is a uniquely deadly weapon. This multi-bladed disc is not only effective for melee combat; it can also be thrown like a boomerang to cut down enemies at a distance.",
      "accuracy": 100,
      "wallAttack": 315,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "glaive.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "105.0",
      "projectile": "Thrown",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d4/DEGlaive.png/revision/latest?cb=20190826002632",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Glaive",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Glaive Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Glaives/PrimeGlaive/PrimeGlaiveWeapon",
      "omegaAttenuation": 1.22,
      "totalDamage": 164,
      "trigger": "Melee",
      "description": "The Glaive Prime is a deadly and beautiful weapon from the Orokin era. The blades are as effective in close quarters as they are when thrown at distant enemies.",
      "accuracy": 100,
      "wallAttack": 492,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "glaive-prime.png",
      "category": "Glaive",
      "tradable": true,
      "channeling": 1.5,
      "damage": "164.0",
      "projectile": "Thrown",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/73/PrimeGlaive.png/revision/latest?cb=20140314174506",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Glaive_Prime",
      "disposition": 4,
      "releaseDate": "2013 11 20",
      "vaultDate": "2015 10 06",
      "estimatedVaultDate": "2015 10 06",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 33.27,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, very high attack speed. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "name": "Glaxion",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpFreezeRay/CrpFreezeRayRifle",
      "omegaAttenuation": 1.3,
      "totalDamage": 26,
      "trigger": "Held",
      "description": "Fires a photon beam that halts molecular vibrations, causing instant and painful freezing.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "glaxion.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "26.0 cold",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/CrpFreezeRayRifle.png/revision/latest?cb=20140828170518",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Glaxion",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Glaxion Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpFreezeRay/Vandal/CrpFreezeRayVandalRifle",
      "omegaAttenuation": 1.25,
      "totalDamage": 29,
      "trigger": "Held",
      "description": "A cutting-edge, halogen-cooled electron accelerator capable of snap-freezing a target in moments.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "glaxion-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "29.0 cold",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1a/GlaxionVandal.png/revision/latest?cb=20190523234909",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Glaxion_Vandal",
      "disposition": 4,
      "acquisition": "Operation: Hostile Mergers",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot; beam munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 40.2472135955,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Gorgon",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/HeavyRifle",
      "omegaAttenuation": 1.4,
      "totalDamage": 25,
      "trigger": "Auto",
      "description": "The Gorgon sports a large magazine that allows it to provide suppressing fire and sustain a high damage rate over a long time. Its high Fire Rate is only achieved following a short wind-up cycle.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "gorgon.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "25.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/Gorgon.png/revision/latest?cb=20161126005232",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gorgon",
      "disposition": 5,
      "acquisition": "Heavy Gunners",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Gorgon Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/WraithGorgon/WraithGorgon",
      "omegaAttenuation": 1.35,
      "totalDamage": 27,
      "trigger": "Auto",
      "description": "The Gorgon Wraith is a powerful variant of its precursor that features unique styling.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "gorgon-wraith.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "27.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/60/WraithGorgon.png/revision/latest?cb=20140313231518",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gorgon_Wraith",
      "disposition": 5,
      "acquisition": "Razorback Armada",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Grakata",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerAssaultRifle/GrnAssaultRifle",
      "omegaAttenuation": 1.3,
      "totalDamage": 11,
      "trigger": "Auto",
      "description": "Equipped with a huge Magazine and impressive Fire Rate, the Grakata is the preferred weapon of Grineer Lancers.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "LongGuns",
      "itemCount": 1,
      "parents": [
        "Twin Grakatas"
      ],
      "type": "Primary",
      "imageName": "grakata.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "11.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2e/GrineerAssaultRifle.png/revision/latest?cb=20161126003539",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Grakata",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Gram",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/GreatSword/GreatSword",
      "omegaAttenuation": 1.4400001,
      "totalDamage": 160,
      "trigger": "Melee",
      "description": "The heavy two-handed sword known as Gram requires great strength to wield, but it is notorious for its splitting power. Can hit multiple targets with each strike.",
      "accuracy": 100,
      "wallAttack": 320,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "gram.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "160.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/55/DEGram.png/revision/latest?cb=20140101053337",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gram",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Gram Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PrimeGram/PrimeGram",
      "omegaAttenuation": 1.4400001,
      "totalDamage": 300,
      "trigger": "Melee",
      "description": "Born anew, the father of swords returns.",
      "accuracy": 100,
      "wallAttack": 600,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "gram-prime.png",
      "category": "Heavy Blade",
      "tradable": true,
      "channeling": 1.5,
      "damage": "300.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/GramPrime.png/revision/latest?cb=20180925193624",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gram_Prime",
      "disposition": 5,
      "releaseDate": "2018 09 25",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 06 18",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 28.96,
      "tierRank": 2,
      "weaponNotes": "Very high damage per hit, very low attack speed. ✪",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "name": "Granmu Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/Set1/Barrel/SentAmpSet1BarrelPartC",
      "omegaAttenuation": 1,
      "type": "Amp",
      "imageName": "granmu-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Granmu_Prism"
    },
    {
      "name": "Grattler",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/RepurposedGrineerAntiAircraftGun/ArchGRNAAGun",
      "omegaAttenuation": 0.94999999,
      "totalDamage": 148,
      "trigger": "Auto",
      "description": "Shatter your targets with explosive shells from this devastating Archwing cannon.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "SpaceGuns",
      "imageName": "grattler.png",
      "tradable": false,
      "damage": "58.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/70/GrnAntiAirGun.png/revision/latest?cb=20150731174941",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Grattler",
      "disposition": 3,
      "type": "Archwing Gun",
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Devourer/Devourer",
      "name": "Grendel",
      "description": "Consumer of worlds and everything else.",
      "masteryReq": 0,
      "sprintSpeed": 0.94999999,
      "passiveDescription": "Each enemy consumed grants |ARMOUR| bonus armor.",
      "type": "Warframe",
      "imageName": "grendel.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 4339763,
      "introduced": "26",
      "sex": "Male",
      "sprint": 0.95,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9f/Grendel.png/revision/latest?cb=20191103032317",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Grendel",
      "acquisition": "Arbitration Honors Vendor",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Grinlok",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerLeverActionRifle/GLARifle",
      "omegaAttenuation": 1.3,
      "totalDamage": 187,
      "trigger": "Semi",
      "description": "With pinpoint accuracy, the Grinlok lever-action repeating rifle can easily find the soft spot on any target.",
      "accuracy": 44.444443,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "grinlok.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "187.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/DEGrinlok.png/revision/latest?cb=20140214215111",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Grinlok",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Guandao",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/TnGuandaoPolearm/TnGuandaoPolearmWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 202,
      "trigger": "Melee",
      "description": "Harvest the enemy with this towering polearm.",
      "accuracy": 100,
      "wallAttack": 337,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "guandao.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "202.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/05/Guandao.png/revision/latest?cb=20170720170251",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Guandao",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 66.13,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, low attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Cresting Peak",
      "component": false
    },
    {
      "name": "Gunsen",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Warfan/WarfanWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 160,
      "trigger": "Melee",
      "description": "Lacerate attackers with two razor sharp warfans.",
      "accuracy": 100,
      "wallAttack": 480,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "gunsen.png",
      "category": "Warfan",
      "tradable": false,
      "channeling": 1.5,
      "damage": "160.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/45/WarfanWeapon.png/revision/latest?cb=20171221214434",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Gunsen",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 36.47,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Slicing Feathers",
      "stanceNotes": "",
      "combo": "Scathing Plume",
      "component": false
    },
    {
      "name": "Halikar",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnBoomerang/GrnBoomerang",
      "omegaAttenuation": 1.4400001,
      "totalDamage": 149,
      "trigger": "Melee",
      "description": "This jet powered Grineer throwing mace always comes back to its master and is even capable of disarming targets.",
      "accuracy": 100,
      "wallAttack": 447,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "halikar.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "149.0",
      "projectile": "Thrown",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/01/GrnBoomerang.png/revision/latest?cb=20141024143413",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Halikar",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 47.16,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, high attack speed. Thrown attacks can disarm opponents. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "name": "Harpak",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnHarpoonGun/GrnHarpoonGun",
      "omegaAttenuation": 1.55,
      "totalDamage": 50,
      "trigger": "Burst",
      "description": "Spike enemies to the wall or reel them in with this burst harpoon gun.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "harpak.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "50.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Harpoon",
        "speed": 1.5,
        "crit_chance": 25,
        "crit_mult": 2.3,
        "status_chance": 0.1,
        "shot_type": "Projectile",
        "shot_speed": null,
        "impact": 40,
        "slash": 10,
        "puncture": 50
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0d/GrnHarpoonGun.png/revision/latest?cb=20150731174941",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Harpak",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot; projectile munitions. Three-round burst is wasteful at times. Alt fire launches a harpoon can be used to drag enemies closer. Exposing Harpoon augment gives it the edge needed to compte but still relatively lacklustre. ",
      "dmg": "Crit/Status",
      "rank": 69.0340579025362,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Priest/Priest",
      "name": "Harrow",
      "description": "Always prepared to sacrifice. This monastic Warframe uses the Void to bolster allies' defenses and amplify their lethality.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Overshield cap doubled.",
      "type": "Warframe",
      "imageName": "harrow.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 3874852,
      "introduced": "21",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4d/Harrow.png/revision/latest?cb=20180121173742",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Harrow",
      "acquisition": "Chains of Harrow (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Hate",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Scythe/StalkerScytheWeapon",
      "omegaAttenuation": 1.36,
      "totalDamage": 230,
      "trigger": "Melee",
      "description": "Hate is a scythe with a cruel blade, wielded by The Stalker.",
      "accuracy": 100,
      "wallAttack": 460,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "hate.png",
      "category": "Scythe",
      "tradable": false,
      "channeling": 1.5,
      "damage": "230.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/99/DEStalkerScythe.png/revision/latest?cb=20140116153508",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hate",
      "disposition": 5,
      "acquisition": "Stalker",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Heavy Attack",
      "rank": 20.78,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, low attack speed. ✪",
      "stance": "Reaping Spiral",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Heat Dagger",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Dagger/Dagger",
      "omegaAttenuation": 1.4400001,
      "totalDamage": 208,
      "trigger": "Melee",
      "description": "This short blade weapon has limited range but comes out fast and can inflict fire damage.",
      "accuracy": 100,
      "wallAttack": 624,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "heat-dagger.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "62.0 heat",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3c/HeatDagger.png/revision/latest?cb=20160221144237",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Heat_Dagger",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 43.26,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, very low attack speed. Slam attacks deal Heat damage and have high chance of proccing Heat. ",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Heat Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/HeatSword/HeatLongSword",
      "omegaAttenuation": 1.48,
      "totalDamage": 147,
      "trigger": "Melee",
      "description": "A strong blade capable of inflicting <DT_SLASH>Slash Damage to its foes.",
      "accuracy": 100,
      "wallAttack": 441,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "heat-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "147.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c4/Heat.png/revision/latest?cb=20130426080625",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Heat_Sword",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 39.65,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, very low attack speed. Suffers from relatively poor consistency. ",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Hek",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/QuadShotgun",
      "omegaAttenuation": 1.1,
      "totalDamage": 525,
      "trigger": "Semi",
      "description": "The Hek is a powerful shotgun that fires its shots with a tight spread, making it efficient at medium range as long as its strong recoil is properly managed.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "hek.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "525.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a6/Hek.png/revision/latest?cb=20130426074025",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hek",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Heliocor",
      "uniqueName": "/Lotus/Weapons/Cephalon/Melee/Hammer/CephHammerWeapon",
      "omegaAttenuation": 0.94,
      "totalDamage": 280,
      "trigger": "Melee",
      "description": "Obtain enlightenment with this massive hammer that performs a Codex scan on each fatal strike. Scans require an equipped Codex Scanner and an available charge.",
      "accuracy": 100,
      "wallAttack": 560,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "heliocor.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "280.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ae/CephHammer.png/revision/latest?cb=20160728154011",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Heliocor",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 62.66,
      "tierRank": 0,
      "weaponNotes": "Very high damage per hit, low attack speed. Suffers from relatively poor consistency. Gives one codex scan upon kill. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "",
      "combo": "Raging Whirlwind",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/MeleePetPowerSuit",
      "name": "Helios",
      "description": "With 'Investigator' as its unique Precept and 'Deconstructor' as its weapon, the versatile Helios Sentinel acts as both a lethal guardian and an automatic codex scanner. Scans require an equipped Codex Scanner and an available charge.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "helios.png",
      "tradable": false,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Helios"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/PrimeHeliosPowerSuit",
      "name": "Helios Prime",
      "description": "This knowledge hungry protector defends its master with Deconstructor Prime.",
      "masteryReq": 8,
      "type": "Sentinel",
      "imageName": "helios-prime.png",
      "tradable": true,
      "releaseDate": "2017 02 28",
      "vaultDate": "2018 12 12",
      "estimatedVaultDate": "2018 12 12",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Helios_Prime"
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/ChargerKubrowPetPowerSuit",
      "name": "Helminth Charger",
      "description": "An Infested pet bred from the Helminth Cyst",
      "type": "Companion",
      "imageName": "helminth-charger.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Helminth_Charger"
    },
    {
      "name": "Hema",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/InfWFAccompanyingPri/InfestedBurstRifle",
      "omegaAttenuation": 1.3,
      "totalDamage": 47,
      "trigger": "Burst",
      "description": "A bloodsucker. This symbiotic burst-rifle leeches health to forge its ammo and then restores health with each headshot.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "hema.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "47.0 viral",
      "flight": "???",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5f/InfestedBurstRifle.png/revision/latest?cb=20161222143411",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hema",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot; projectile munitions. Heals warframe on headshots. Three-round burst is wasteful at times. ✪",
      "dmg": "Crit/Status",
      "rank": 52.7304951684997,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Hikou",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/TennoStars",
      "omegaAttenuation": 1.2,
      "totalDamage": 26,
      "trigger": "Auto",
      "description": "As an alternative to Kunai, these Tenno throwing stars do cause less Damage but they come with expanded Ammo Capacity and a higher Fire Rate.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "hikou.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "26.0",
      "flight": 70,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d9/Hikou.png/revision/latest?cb=20171219142910",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hikou",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Hikou Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/PrimeThrowingStar/PrimeHikou",
      "omegaAttenuation": 1.15,
      "totalDamage": 36,
      "trigger": "Auto",
      "description": "As deadly as any bullet without the associated noise or commotion.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "hikou-prime.png",
      "category": "Thrown",
      "tradable": true,
      "damage": "36.0",
      "flight": 70,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b4/PrimeHikou.png/revision/latest?cb=20140923195818",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hikou_Prime",
      "disposition": 4,
      "releaseDate": "2014 09 23",
      "vaultDate": "2016 08 23",
      "estimatedVaultDate": "2016 08 23",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot; projectile munitions. ",
      "dmg": "Status",
      "rank": 73.9679483388679,
      "tierRank": 1,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/IronFrame/IronFrame",
      "name": "Hildryn",
      "description": "The best defense is a good offense. Hildryn draws from her Shields to fuel her Abilities, while Energy recharges her Shields.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Become invulnerable for a brief moment after shields are depleted. This ability is restored when shields fully recharge.",
      "type": "Warframe",
      "imageName": "hildryn.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 3160387,
      "introduced": "24.4",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/19/HildrynIcon272.png/revision/latest?cb=20190308054142",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hildryn",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Hind",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/BurstRifle/GrnBurstRifle",
      "omegaAttenuation": 1.42,
      "totalDamage": 30,
      "trigger": "Burst",
      "description": "A powerful mid-range rifle used by Grineer shock troops, the Hind fires in five round bursts.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "hind.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 2.5,
        "crit_chance": 15,
        "crit_mult": 2,
        "status_chance": 0.1,
        "impact": 12,
        "slash": 36,
        "puncture": 12
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6d/Hind.png/revision/latest?cb=20130816203128",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hind",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; hitscan munitions. Alt fire has better DPS on paper but due to low fire rate it still doesn't do enough. ",
      "dmg": "Crit/Status",
      "rank": 193.818481453284,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Hirudo",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/InfWFAccompanyingSparring/InfestedKogake",
      "omegaAttenuation": 0.5,
      "totalDamage": 130,
      "trigger": "Melee",
      "description": "Rip into the enemy with fists of razor sharp cartilage. Steals health with each critical hit.",
      "accuracy": 100,
      "wallAttack": 390,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "hirudo.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "130.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/InfestedKogake.png/revision/latest?cb=20161222002135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hirudo",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 44.56,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, high attack speed. Suffers from relatively poor consistency. Upon crit, heal you for 5% of damage dealt, and gives up to 5 stacks of Invigorate (+5% max health, 15s). ",
      "stance": "Grim Fury",
      "stanceNotes": "",
      "combo": "Inferno",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/FurtiveKubrowPetPowerSuit",
      "name": "Huras Kubrow",
      "description": "Prized for its ability to sneak up on unsuspecting prey, the Huras Kubrow were first used as hunting companions by the Orokin elite. Orokin Era Tenno soon adapted the strain for use in covert missions and assassinations.",
      "type": "Companion",
      "imageName": "huras-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Huras_Kubrow"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Pirate/Pirate",
      "name": "Hydroid",
      "description": "Rising from the ocean depths, Hydroid harnesses the power of water to a devastating effect.",
      "masteryReq": 0,
      "sprintSpeed": 1.05,
      "passiveDescription": "Slam Attacks have a |CHANCE|% chance to summon a tentacle for |DURATION|s.",
      "type": "Warframe",
      "imageName": "hydroid.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 3751229,
      "introduced": "13",
      "sex": "Male",
      "sprint": 1.05,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9f/HydroidNewLook.png/revision/latest?cb=20141124023113",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hydroid",
      "acquisition": "Councilor Vay Hek (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Pirate/HydroidPrime",
      "name": "Hydroid Prime",
      "description": "Command the ocean’s fury with this king of gold and silver. Featuring altered mod polarities for greater customization.",
      "masteryReq": 5,
      "sprintSpeed": 1.05,
      "passiveDescription": "Slam Attacks have a |CHANCE|% chance to summon a tentacle for |DURATION|s.",
      "type": "Warframe",
      "imageName": "hydroid-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 2565666,
      "introduced": "21.6",
      "sex": "Male",
      "sprint": 1.05,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6f/HydroidPrimeBust.png/revision/latest?cb=20170903163610",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hydroid_Prime",
      "releaseDate": "2017 08 29",
      "vaultDate": "2019 07 07",
      "estimatedVaultDate": "2019 07 07",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Hystrix",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/QuillDartgun/QuillDartGunWeapon",
      "omegaAttenuation": 1.15,
      "totalDamage": 36.000004,
      "trigger": "Auto",
      "description": "Heat, cold, electricity, or toxin: choose an element and launch a flurry of deadly quills. This versatile sidearm is Khora’s signature weapon.",
      "accuracy": 14.285714,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "hystrix.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "36.1",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Fire / Electric Quill",
        "crit_chance": 24,
        "crit_mult": 2.2,
        "status_chance": 0.1,
        "shot_type": "Projectile",
        "impact": 2.4,
        "slash": 3.2,
        "puncture": 34.4
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a7/Hystrix.png/revision/latest?cb=20180417184116",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Hystrix",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; projectile munitions. Bolts munitions have pros and cons. Clip is small for fire rate and despite quick reload will end up being annoying. Alt-fire changes elemental damage to one of four basic types (Fire, Ice, Poison, Electricity) with guaranteed procs which scales more if corresponding elemental mod is installed. ",
      "dmg": "Crit/Status",
      "rank": 58.2899799195977,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Ignis",
      "uniqueName": "/Lotus/Weapons/ClanTech/Chemical/FlameThrower",
      "omegaAttenuation": 0.60000002,
      "totalDamage": 33,
      "trigger": "Held",
      "description": "Ignis produces a stream of intense heat.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "ignis.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "33.0 heat",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/99/GrineerFlameThrower.png/revision/latest?cb=20151028181038",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ignis",
      "disposition": 1,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ignis Wraith",
      "uniqueName": "/Lotus/Weapons/ClanTech/Chemical/FlameThrowerWraith",
      "omegaAttenuation": 0.55000001,
      "totalDamage": 35,
      "trigger": "Held",
      "description": "A blood-red variant of this destructive flamethrower.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "ignis-wraith.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "35.0 heat",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/IgnisWraith.png/revision/latest?cb=20170303123043",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ignis_Wraith",
      "disposition": 1,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; beam munitions. AOE works like how you'd imagine an actual flamethrower would. ",
      "dmg": "Crit/Status",
      "rank": 27.7401754250991,
      "tierRank": 3,
      "component": false,
      "specialNote": "Item are limited."
    },
    {
      "name": "Imperator",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/FoldingMachineGun/ArchMachineGun",
      "omegaAttenuation": 0.85000002,
      "totalDamage": 22,
      "trigger": "Auto",
      "description": "A long range rifle capable of firing in space, the Imperator's versatility makes it an ideal weapon for space combat.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "SpaceGuns",
      "imageName": "imperator.png",
      "tradable": false,
      "damage": "22.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4a/ArchwingMachinegun.png/revision/latest?cb=20141024143733",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Imperator",
      "disposition": 2,
      "type": "Archwing Gun",
      "acquisition": "The Archwing (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Imperator Vandal",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/FoldingMachineGun/ArchMachineGunVandal",
      "omegaAttenuation": 0.85000002,
      "totalDamage": 22,
      "trigger": "Auto",
      "description": "The Imperator Vandal has been customized by the Tenno with a blue-green metallic finish and Lotus branding on the barrel.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "SpaceGuns",
      "imageName": "imperator-vandal.png",
      "tradable": true,
      "damage": "22.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ed/ImperatorVandal.png/revision/latest?cb=20141214174720",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Imperator_Vandal",
      "disposition": 2,
      "type": "Archwing Gun",
      "acquisition": "Fomorian Sabotage",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Sandman/Sandman",
      "name": "Inaros",
      "description": "Risen from the sands, Inaros commands the desert's fearsome power.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "While bleeding-out, Inaros becomes entombed in a protective Sarcophagus. He can revive himself by draining the life-force from nearby enemies and allies.",
      "type": "Warframe",
      "imageName": "inaros.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 2696224,
      "introduced": "18.5",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3a/InarosNewLook.png/revision/latest?cb=20160308025219",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Inaros",
      "acquisition": "Sands of Inaros (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/StealthJetPack/StealthJetPack",
      "name": "Itzal",
      "description": "Designed for quick clandestine attacks, the Itzal Archwing excels at striking from the darkness of space.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "type": "Vehicle",
      "imageName": "itzal.png",
      "category": "Archwing",
      "tradable": false,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Itzal"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ranger/Ranger",
      "name": "Ivara",
      "description": "With her quiver of tactical arrows, this huntress prowls unseen and strikes without warning.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Senses nearby enemies within |RADIUS|m.",
      "type": "Warframe",
      "imageName": "ivara.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 3812902,
      "introduced": "18",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/IvaraNewLook.png/revision/latest?cb=20151204065626",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ivara",
      "acquisition": "Spy Missions",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Ranger/IvaraPrime",
      "name": "Ivara Prime",
      "description": "As regal and lethal as a nighttime wood, this is the queen of the hunt in her ultimate form.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "Senses nearby enemies within |RADIUS|m.",
      "type": "Warframe",
      "imageName": "ivara-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 12825227,
      "introduced": "27.0.4",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a8/IvaraPrime.png/revision/latest?cb=20191217235626",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ivara_Prime",
      "releaseDate": "2019 12 17",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 09 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Jat Kittag",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerJetPoweredPolearm/GrineerJetPolearm",
      "omegaAttenuation": 0.75,
      "totalDamage": 199.99998,
      "trigger": "Melee",
      "description": "Deliver crushing blows with this Grineer built, jet powered mace.",
      "accuracy": 100,
      "wallAttack": 400,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "jat-kittag.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "200.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/01/GrnJetPwrPolearm.png/revision/latest?cb=20170406043411",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Jat_Kittag",
      "disposition": 1,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 63.18,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, low attack speed. Vulcan Blitz cause kills to explode dealing 300 (+60% of enemy health) Blast damage in 6m radius. Part of the Tenno Space Program. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "",
      "combo": "Raging Whirlwind",
      "component": false
    },
    {
      "name": "Jat Kusar",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnKusarigama/GrnKusarigamaWeapon",
      "omegaAttenuation": 0.81,
      "totalDamage": 218,
      "trigger": "Melee",
      "description": "Overwhelm hostiles with this jet-powered sickle and razor-chain weapon. Charged strikes ignite an explosive blast at range.",
      "accuracy": 100,
      "wallAttack": 654,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "jat-kusar.png",
      "category": "Blade and Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "81.0 heat",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b2/JatKusar.png/revision/latest?cb=20170728205719",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Jat_Kusar",
      "disposition": 2,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 36.28,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, low attack speed. ",
      "stance": "Defiled Snapdragon",
      "stanceNotes": "",
      "combo": "Claws of the Drake",
      "component": false
    },
    {
      "name": "Javlok",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnFlameSpear/GrnFlameSpear",
      "omegaAttenuation": 1.25,
      "totalDamage": 280,
      "trigger": "Charge",
      "description": "Launch super-heated slugs at individual foes, or hurl the entire weapon and ignite groups of enemies in a flash inferno.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "javlok.png",
      "category": "Speargun",
      "tradable": false,
      "chargeTime": 0.3,
      "damage": 160,
      "projectile": "Projectile",
      "secondary": {
        "name": "Throw Spear",
        "speed": 1,
        "crit_chance": 20,
        "crit_mult": 2,
        "status_chance": 0.3,
        "charge_time": 0.5,
        "shot_type": "Projectile",
        "shot_speed": null,
        "impact": 45,
        "slash": 30,
        "puncture": 75
      },
      "secondaryArea": {
        "name": "Spear Explosion",
        "status_chance": 25,
        "radius": 500,
        "heat": 300,
        "damage": "300.0 heat"
      },
      "statusChance": 25,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1d/GrnFlameSpear.png/revision/latest?cb=20161217014834",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Javlok",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. Alt fire creats a localized explosion. ",
      "dmg": "Crit/Status",
      "rank": 69.9055521304275,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Jaw Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/JawSword/JawLongSword",
      "omegaAttenuation": 1.47,
      "totalDamage": 120,
      "trigger": "Melee",
      "description": "A blade with a serrated edge that delivers strong quick attacks.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "jaw-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "120.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f3/Jaw.png/revision/latest?cb=20130426080629",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Jaw_Sword",
      "disposition": 5,
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 46.71,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, low attack speed. Suffers from relatively poor consistency. Blade of Truth increases damage by 100% and gives Truth (Gas, health, parkour) effects. ",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Kama",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/DualKamas/SingleKama",
      "omegaAttenuation": 1.47,
      "totalDamage": 90,
      "trigger": "Melee",
      "description": "The Kama is a Tenno style hatchet, capable of making short work of any foe.",
      "accuracy": 100,
      "wallAttack": 270,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "kama.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "90.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f0/Kama.png/revision/latest?cb=20130914111402",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kama",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 52.62,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Sundering Weave",
      "stanceNotes": "",
      "combo": "Rapid Current",
      "component": true
    },
    {
      "name": "Karak",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerM16Homage/GrineerM16Rifle",
      "omegaAttenuation": 1.35,
      "totalDamage": 29,
      "trigger": "Auto",
      "description": "Solid, dependable and deadly. The Karak is a standard issue rifle in many Grineer platoons.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "karak.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "29.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ea/GrineerM16Rifle.png/revision/latest?cb=20131231184734",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Karak",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Karak Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerM16Homage/KarakWraith",
      "omegaAttenuation": 1.28,
      "totalDamage": 31,
      "trigger": "Auto",
      "description": "A different take on the Grineer assault rifle, the Karak Wraith features unique styling.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "karak-wraith.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "31.2",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c7/KarakWraith.png/revision/latest?cb=20150512233117",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Karak_Wraith",
      "disposition": 4,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; hitscan munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 95.3397017233528,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Karyst",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/KrisDagger/KrisDagger",
      "omegaAttenuation": 1.29,
      "totalDamage": 273,
      "trigger": "Melee",
      "description": "Once the blade weapon of choice for an exclusive order of Tenno assassins, the Karyst dagger grew to become a symbol of honor and duty for all Tenno.",
      "accuracy": 100,
      "wallAttack": 819,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "karyst.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "87.0 toxin",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/80/KarystDagger.png/revision/latest?cb=20140818235505",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Karyst",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 30.6,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, very low attack speed. ",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Kaszas",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/ArchScythe/ArchScythe",
      "omegaAttenuation": 1,
      "totalDamage": 325,
      "trigger": "Melee",
      "description": "Become an angel of death, with this Archwing scythe.",
      "accuracy": 100,
      "wallAttack": 325,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "SpaceMelee",
      "imageName": "kaszas.png",
      "tradable": false,
      "damage": "325.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/ArchScythe.png/revision/latest?cb=20151002090141",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kaszas",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Kesheg",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerHalberd/GrnHalberd",
      "omegaAttenuation": 1.24,
      "totalDamage": 241,
      "trigger": "Melee",
      "description": "Slice through mobs of unruly enemies with this fierce halberd; the signature weapon of the Kuva Guardians.",
      "accuracy": 100,
      "wallAttack": 402,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "kesheg.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "241.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/64/GrnHalberd.png/revision/latest?cb=20161113000420",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kesheg",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 37.73,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, low attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Cresting Peak",
      "component": false
    },
    {
      "name": "Kestrel",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Glaives/Boomerang/BoomerangWeapon",
      "omegaAttenuation": 1.45,
      "totalDamage": 84,
      "trigger": "Melee",
      "description": "The Kestrel boomerang is a heavy throwing weapon that can knock down enemies at a distance.",
      "accuracy": 100,
      "wallAttack": 252,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "kestrel.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "84.0",
      "projectile": "Thrown",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/70/Kestrel.png/revision/latest?cb=20130607215549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kestrel",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 71.02,
      "tierRank": 0,
      "weaponNotes": "Very low damage per hit, high attack speed. Suffers from relatively poor consistency. Entropy Flight grants +140% flight speed and Entropy (Magnetic, Energy) effects. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Khora/Khora",
      "name": "Khora",
      "description": "Tenno and beast, red in whip and claw. Khora and her Kavat companion, Venari, embody lethal versatility. Two bodies, one will.",
      "masteryReq": 0,
      "sprintSpeed": 1.05,
      "passiveDescription": "The ferocious kavat, Venari, fights by Khora's side and provides her with a |SPEED|% speed boost while active. If killed, Venari will reappear after |RESPAWN|s.",
      "type": "Warframe",
      "imageName": "khora.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 2893609,
      "introduced": "22.18.0",
      "sex": "Female",
      "sprint": 1.05,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/08/Khora.png/revision/latest?cb=20180910140009",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Khora",
      "acquisition": "Sanctuary Onslaught",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Klamora Prism",
      "uniqueName": "/Lotus/Weapons/Corpus/OperatorAmplifiers/Set1/Barrel/CorpAmpSet1BarrelPartC",
      "omegaAttenuation": 1,
      "type": "Amp",
      "imageName": "klamora-prism.png",
      "tradable": false,
      "acquisition": "Little Duck (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Klamora_Prism"
    },
    {
      "name": "Knell",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TnPriestPistolScope/TnPriestPistolWeapon",
      "omegaAttenuation": 1.25,
      "totalDamage": 150,
      "trigger": "Auto",
      "description": "Ring the death knell. Headshots briefly turn this scoped pistol into a rapid-fire, Critical Damage fiend that uses no ammo. When used by Harrow, Knell has a 2-round mag.",
      "accuracy": 32,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "knell.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "150.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8a/PriestPistol.png/revision/latest?cb=20170629034316",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Knell",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "High damage per shot; hitscan munitions. Headshot grants Death Knell buff. Death Knell can stack up to 3 times, lasting 3 seconds per stack. Stack-count regardless, 20% status chance and infinite ammo is granted. Critical Multiplier increases (x1.5, x2., x2.5) per stack. ✪",
      "dmg": "Crit/Speed",
      "rank": 29.3493588689618,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Knux",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/GrnArchHand/GrnArchHandWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 325,
      "trigger": "Melee",
      "description": "Gallium-alloy gauntlets for close-range Archwing combat. Designed by the infamous Tyl Regor.",
      "accuracy": 100,
      "wallAttack": 325,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "SpaceMelee",
      "imageName": "knux.png",
      "tradable": false,
      "damage": "325.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/49/GrnArchHand.png/revision/latest?cb=20150820004111",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Knux",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Kogake",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/BrassKnuckles/BrassKnuckles",
      "omegaAttenuation": 1.46,
      "totalDamage": 120,
      "trigger": "Melee",
      "description": "These coverings for the hands and feet allow devastating high flying hand-to-hand combat attacks without risking harm to the user.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "kogake.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "120.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/Kogake0.png/revision/latest?cb=20160221144254",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kogake",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Kogake Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeKogake/KogakePrimeKnuckles",
      "omegaAttenuation": 1.46,
      "totalDamage": 242,
      "trigger": "Melee",
      "description": "Deliver a golden knockout with these prime Melee Weapons.",
      "accuracy": 100,
      "wallAttack": 726,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "kogake-prime.png",
      "category": "Sparring",
      "tradable": true,
      "channeling": 1.5,
      "damage": "242.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4c/MirageKogakePrime.png/revision/latest?cb=20171213095337",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kogake_Prime",
      "disposition": 5,
      "releaseDate": "2017 12 12",
      "vaultDate": "2019 10 01",
      "estimatedVaultDate": "2019 10 01",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 35.12,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, low attack speed. Increases movement speed by 5% when equipped. ",
      "stance": "Brutal Tide",
      "stanceNotes": "",
      "combo": "Inferno",
      "component": false
    },
    {
      "name": "Kohm",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnSpark/GrnSparkRifle",
      "omegaAttenuation": 1.4,
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "For every shot fired in rapid succession the Kohm releases an additional bolt and grows more lethal.",
      "accuracy": 8,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kohm.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b0/GrineerSparkGun.png/revision/latest?cb=20141211221301",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kohm",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; hitscan munitions. Spool up increases bullets shot and fire rate to the point where status effects are still reliably proc'd despite using shotgun calcs as well as having insane innate punchthrough. Riven disposition is relatively high for DPS potential and can help reach 100% status chance. Suffers from relatively poor consistency. ✪",
      "dmg": "Status",
      "rank": 42.7497252664309,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kohmak",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnKohmPistol/GrnKohmPistol",
      "omegaAttenuation": 1.35,
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Like the larger Kohm, this hand-shotgun doubles its volley with each successive shot.",
      "accuracy": 8,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "kohmak.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/81/GrnWindUpPistol.png/revision/latest?cb=20150320022624",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kohmak",
      "disposition": 5,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Komorex",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpSentAmlgSniper/CrpSentAmlgSniper",
      "omegaAttenuation": 1.1,
      "totalDamage": 87,
      "trigger": "Semi",
      "description": "Corpus ingenuity leveraging Tau-tech to create a high-capacity bi-modal sniper weapon of terrifying capability. Zoom in to reduce recoil and add punch through. Zoom again to fire a bursting viral round, but with a lower rate of fire. Komorex features built-in ammo conversion.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "komorex.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "87.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "3.5x Zoom Mode",
        "speed": 1.5,
        "impact": 17.4,
        "slash": 83.6,
        "puncture": 73
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/14/Komorex.png/revision/latest?cb=20190523234909",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Komorex",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "High damage per shot; projectile munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 41.9144823004795,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Korrudo",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnSparring/GrnSpiderSparring/GrnSpiderSparring",
      "omegaAttenuation": 1,
      "totalDamage": 193,
      "trigger": "Melee",
      "description": "When they go high, go low. Powerful pneumatic grips and toecaps amplify every blow. Four ways to deal twice the pain.",
      "accuracy": 100,
      "wallAttack": 579,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "korrudo.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "193.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f6/Korrudo.png/revision/latest?cb=20190405175331",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Korrudo",
      "disposition": 3,
      "acquisition": "Tusk Thumper (Plains of Eidolon)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 45.29,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, low attack speed. Suffers from relatively poor consistency. ",
      "stance": "Brutal Tide",
      "stanceNotes": "",
      "combo": "Inferno",
      "component": false
    },
    {
      "name": "Kraken",
      "uniqueName": "/Lotus/Weapons/Grineer/GrineerPistol/GrnHeavyPistol",
      "omegaAttenuation": 1.53,
      "totalDamage": 49,
      "trigger": "Burst",
      "description": "The Kraken is a heavy pistol of Grineer design that fires two quick shots with a single pull of the trigger. Skilled marksmen will appreciate the value in this deadly accurate weapon.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Pistols",
      "itemCount": 1,
      "parents": [
        "Kulstar"
      ],
      "type": "Secondary",
      "imageName": "kraken.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "49.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d3/Kraken.png/revision/latest?cb=20170406043414",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kraken",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot; hitscan munitions. ",
      "dmg": "Status",
      "rank": 185.680841540335,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Kreska",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/CrpVenusHatchet/CrpVenusHatchet",
      "omegaAttenuation": 1,
      "totalDamage": 190,
      "trigger": "Melee",
      "description": "This unsophisticated Corpus survival tool does what it was designed for: hacking and splitting whatever it strikes.",
      "accuracy": 100,
      "wallAttack": 570,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "kreska.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "100.0 heat",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/ba/Kreska.png/revision/latest?cb=20181110200536",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kreska",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 46.29,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, low attack speed. ",
      "stance": "Sundering Weave",
      "stanceNotes": "",
      "combo": "Rapid Current",
      "component": false
    },
    {
      "name": "Krohkur",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnEgyptSwd/GrnEgyptSwdWeapon",
      "omegaAttenuation": 1.22,
      "totalDamage": 217,
      "trigger": "Melee",
      "description": "This hooked blade rewards critical hits to those skilled enough to strike with finesse.",
      "accuracy": 100,
      "wallAttack": 651,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "krohkur.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "217.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/09/GrnEgyptSword.png/revision/latest?cb=20171015014020",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Krohkur",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 25.67,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, low attack speed. ✪",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": true
    },
    {
      "name": "Kronen",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Tonfa/TonfaContestWinner/TennoTonfa",
      "omegaAttenuation": 1.4299999,
      "totalDamage": 130,
      "trigger": "Melee",
      "description": "The Kronen resurrects a lethal fighting style once thought lost to the ages.",
      "accuracy": 100,
      "wallAttack": 260,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "kronen.png",
      "category": "Tonfa",
      "tradable": false,
      "channeling": 1.5,
      "damage": "130.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/da/TennoTonfa.png/revision/latest?cb=20140828170521",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kronen",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Kronen Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Tonfa/TonfaContestWinnerPrime/TonfaContestWinnerPrimeWeapon",
      "omegaAttenuation": 1.4299999,
      "totalDamage": 212,
      "trigger": "Melee",
      "description": "Ancient blades, perfected for today’s combat.",
      "accuracy": 100,
      "wallAttack": 424,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "kronen-prime.png",
      "category": "Tonfa",
      "tradable": true,
      "channeling": 1.5,
      "damage": "212.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f6/KronenPrime.png/revision/latest?cb=20180313200756",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kronen_Prime",
      "disposition": 5,
      "releaseDate": "2018 03 20",
      "vaultDate": "2019 12 17",
      "estimatedVaultDate": "2019 12 17",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 26.1,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, very high attack speed. ✪",
      "stance": "Gemini Cross",
      "stanceNotes": "",
      "combo": "Vagrant Blight",
      "component": false
    },
    {
      "name": "Kronsh Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipSix",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "kronsh.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Kronsh_Strike"
    },
    {
      "name": "Kulstar",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnTorpedoPistol/GrnTorpedoPistol",
      "omegaAttenuation": 1.3,
      "totalDamage": 500,
      "trigger": "Active",
      "description": "Rain hell on the enemy with this handheld cluster-rocket launcher.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "kulstar.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "200.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondaryArea": {
        "name": "Cluster Bombs",
        "status_chance": 19,
        "pellet": {
          "name": "Bomb",
          "count": 3
        },
        "blast": 225,
        "damage": "225.0 blast"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f0/GrnTorpedoPistol.png/revision/latest?cb=20150731174942",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kulstar",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; projectile munitions. Rocket impact will release 3 additional bomblets. Suffers from relatively poor consistency. ",
      "dmg": "Raw",
      "rank": 102.319548602267,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Kunai",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/Kunai",
      "omegaAttenuation": 1.51,
      "totalDamage": 45.999996,
      "trigger": "Auto",
      "description": "Kunai throwing daggers offer a silent alternative to the traditional side arm. Perfect for assassins.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "kunai.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "46.0",
      "flight": 70,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/35/Kunai2.png/revision/latest?cb=20170210002129",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kunai",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot; projectile munitions. Good luck landing a precise shot. ",
      "dmg": "Status",
      "rank": 178.629330940315,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Kuva Ayanga",
      "uniqueName": "/Lotus/Weapons/Grineer/HeavyWeapons/GrnHeavyGrenadeLauncher",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 130,
      "trigger": "Auto",
      "description": "Sweep aside hordes of enemies with flaming fury of this powerful, automatic, grenade launching archgun.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "SpaceGuns",
      "imageName": "kuva-ayanga.png",
      "tradable": false,
      "damage": "30.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3b/KuvaAyanga.png/revision/latest?cb=20191102023834",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Ayanga",
      "disposition": 3,
      "type": "Archwing Gun",
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Kuva Brakk",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/Secondaries/Brakk/KuvaBrakk",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 130,
      "trigger": "Semi",
      "description": "This Lich-variant semi-automatic hand cannon delivers a lot of punch in a small package. Higher fire rate, magazine capacity and reload speed. ",
      "accuracy": 7.6923075,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "kuva-brakk.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "130.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0b/KuvaBrakk.png/revision/latest?cb=20191102024052",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Brakk",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot,  hitscan munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 30.7,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Bramma",
      "uniqueName": "/Lotus/Weapons/Grineer/Bows/GrnBow/GrnBowWeapon",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 1026,
      "trigger": "Charge",
      "description": "This Grineer bow delivers vengeance in the form of clusterbomb-tipped arrows that can be detonated mid-air or on impact.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 15,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kuva-bramma.png",
      "category": "Bow",
      "tradable": false,
      "chargeTime": 0.4,
      "damage": 187,
      "projectile": "Projectile",
      "secondaryArea": {
        "name": "Cluster Bombs",
        "pellet": {
          "name": "Bomblet",
          "count": 6
        },
        "blast": 1122,
        "damage": "1122.0 blast"
      },
      "statusChance": 21,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Bramma",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; projectile munitions. Arrows explode in 7m AOE and scatter 6 bomblets. Suffers from relatively poor consistency. ✪",
      "dmg": "Crit/Status",
      "rank": 17.2247448713916,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Chakkhurr",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnKuvaLichRifle/GrnKuvaLichRifleWeapon",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 366,
      "trigger": "Semi",
      "description": "Detonate heads with this slow-firing rifle that rewards precision.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 15,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kuva-chakkhurr.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "260.0",
      "flight": 30,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/43/KuvaChakkhurr.png/revision/latest?cb=20191102024053",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Chakkhurr",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "High damage per shot; projectile munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 33.0366600265341,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Drakgoon",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/LongGuns/Drakgoon/KuvaDrakgoon",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 460,
      "trigger": "Charge",
      "description": "The Kuva Drakgoon flak cannon sends volleys of intensely hot shrapnel ricocheting around the room that do not slow down. Larger Magazine Capacity and Reload Speed. Can be fired in wide or concentrated bursts.",
      "accuracy": 1.4285715,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kuva-drakgoon.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "230.0",
      "flight": 100,
      "projectile": "Hitscan",
      "statusChance": 30,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c9/KuvaDrakgoon.png/revision/latest?cb=20191102024053",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Drakgoon",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; hitscan munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 41.2832396974191,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Hind",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/LongGuns/Hind/KuvaHind",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 30,
      "trigger": "Burst",
      "description": "This powerful Grineer burst rifle has been retrofitted to add semi-automatic and automatic fire modes. ",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 15,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kuva-hind.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi",
        "speed": 2.5,
        "crit_chance": 37,
        "crit_mult": 2.9,
        "status_chance": 0.2,
        "shot_type": "Hit-Scan",
        "impact": 18,
        "slash": 54,
        "puncture": 18
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f1/KuvaHind.png/revision/latest?cb=20200205044256",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Hind",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 44.2733200530682,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Kuva Karak",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/LongGuns/Karak/KuvaKarak",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 23,
      "trigger": "Auto",
      "description": "The custom weapon of a fearsome Kuva Lich. It has greater reload speed, lower recoil and greater accuracy than the standard-issue Karak rifle.",
      "accuracy": 80,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kuva-karak.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "23.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/20/KuvaKarak.png/revision/latest?cb=20191102024054",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Karak",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 45.5888543819998,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Kuva Kohm",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/LongGuns/Kohm/KuvaKohm",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "The Kuva Kohm variant has a higher fire rate than the original. For every shot fired in rapid succession the Kuva Kohm releases an additional bolt and grows more lethal.",
      "accuracy": 8,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kuva-kohm.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "20.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/90/KuvaKohm.png/revision/latest?cb=20191102024056",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Kohm",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; hitscan munitions. ✪",
      "dmg": "Status",
      "rank": 26,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Kraken",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/Secondaries/Kraken/KuvaKraken",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 43,
      "trigger": "Burst",
      "description": "A custom variant that fires three quick shots with a single pull of the trigger, or can alt-fire burst the remainder of its magazine. Higher Fire Rate, Magazine Capacity and Reload Speed.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 15,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "kuva-kraken.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "43.0",
      "projectile": "Hitscan",
      "secondary": {
        "speed": 6.77,
        "impact": 32.25,
        "slash": 5.38,
        "puncture": 5.38
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/89/KuvaKraken.png/revision/latest?cb=20191102024221",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Kraken",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot,  hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 48.4,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Nukor",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/Secondaries/Nukor/KuvaNukor",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 21,
      "trigger": "Held",
      "description": "A highly-optimized Nukor that allows for the weapon’s microwave field to hit up to four additional targets.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "kuva-nukor.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "21.0 radiation",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5f/KuvaNukor.png/revision/latest?cb=20200205044628",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Nukor",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot,  beam munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 24.5,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Ogris",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/LongGuns/Ogris/KuvaOgris",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 714,
      "trigger": "Semi",
      "description": "The custom weapon of a fearsome Kuva Lich. Unlike the basic version the Kuva Ogris fires detonite-infused casings semi-automatically, from a smaller magazine, while dealing greater damage per shot.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 15,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kuva-ogris.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "27.0",
      "flight": 40,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/73/KuvaOgris.png/revision/latest?cb=20191102024221",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Ogris",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot; projectile munitions. ✪",
      "dmg": "Status",
      "rank": 29.1038404810405,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Quartakk",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/LongGuns/Quartakk/KuvaQuartakk",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 54,
      "trigger": "Auto",
      "description": "Unlike a standard Quartakk this Kuva Lich variant fires automatically from the hip while retaining its signature feature when aimed: annihilating targets with four simultaneous shots.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kuva-quartakk.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "54.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "While Aiming",
        "speed": 6.33,
        "crit_chance": 31,
        "crit_mult": 2.3,
        "status_chance": 0.3,
        "impact": 20,
        "slash": 18.35,
        "puncture": 15.65
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/ff/KuvaQuartakk.png/revision/latest?cb=20191102024222",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Quartakk",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; hitscan munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 35.5038404810405,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Seer",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/Secondaries/Seer/KuvaSeer",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 200,
      "trigger": "Semi",
      "description": "This variant pistol has higher fire rate and magazine capacity. Superior zoom capabilities plus projectiles have a small Corrosive burst.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 15,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "kuva-seer.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "131.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bd/KuvaSeer.png/revision/latest?cb=20191102024222",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Seer",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "High damage per shot,  projectile munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 38,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Shildeg",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnKuvaLichScythe/GrnKuvaLichScytheWeapon",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 205,
      "trigger": "Melee",
      "description": "A crushing, killing, rocket-powered stab-hammer. Grineer, naturally.",
      "accuracy": 100,
      "wallAttack": 410,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "kuva-shildeg.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "205.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/ba/KuvaShildeg.png/revision/latest?cb=20191102024222",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Shildeg",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 33.61,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, low attack speed. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "",
      "combo": "Raging Whirlwind",
      "component": false
    },
    {
      "name": "Kuva Tonkor",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/LongGuns/Tonkor/KuvaTonkor",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 733,
      "trigger": "Semi",
      "description": "This Lich-variant grenade launcher hurls mayhem and destruction with an increased Reload Speed.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "kuva-tonkor.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "59.0",
      "flight": 30,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/89/KuvaTonkor.png/revision/latest?cb=20191102024223",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Tonkor",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "High damage per shot; projectile munitions. Suffers from relatively poor consistency. ✪",
      "dmg": "Crit/Status",
      "rank": 35.6495901363954,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Kuva Twin Stubbas",
      "uniqueName": "/Lotus/Weapons/Grineer/KuvaLich/Secondaries/Stubba/KuvaStubba",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 27,
      "trigger": "Auto",
      "description": "Double-fist rapid-fire bursts of pain with these dual-wield variants of the Grineer submachine gun. Higher Fire Rate and Magazine Capacity.",
      "accuracy": 36.363636,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "kuva-twin-stubbas.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "27.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/46/KuvaTwinStubbas.png/revision/latest?cb=20191104205215",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Kuva_Twin_Stubbas",
      "disposition": 3,
      "acquisition": "Kuva Lich",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot,  hitscan munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 37.1,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Lacera",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/StalkerMios/StalkerMios",
      "omegaAttenuation": 1.3099999,
      "totalDamage": 216,
      "trigger": "Melee",
      "description": "In the practiced hands of a master, this blade and whip becomes exceedingly devastating.",
      "accuracy": 100,
      "wallAttack": 648,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "lacera.png",
      "category": "Blade and Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "100.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e8/StalkerMios.png/revision/latest?cb=20151204013306",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lacera",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 32.34,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, very low attack speed. Suffers from relatively poor consistency. ",
      "stance": "Defiled Snapdragon",
      "stanceNotes": "",
      "combo": "Claws of the Drake",
      "component": false
    },
    {
      "name": "Lambeo Moa",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetParts/MoaPetHeadLambeo",
      "omegaAttenuation": 1,
      "type": "Sentinel",
      "imageName": "lambeo-moa.png",
      "tradable": false,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Lambeo_Moa"
    },
    {
      "name": "Lanka",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/Railgun",
      "omegaAttenuation": 0.89999998,
      "totalDamage": 525,
      "trigger": "Charge",
      "description": "The Lanka fires a high velocity projectile through magnetic induction.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "lanka.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "200.0 electricity",
      "flight": 200,
      "projectile": "Projectile",
      "statusChance": 25,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1a/CorpusSniperRifle.png/revision/latest?cb=20180418123152",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lanka",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; projectile munitions. Sniper combo counter rampup is very good (min. 2), zooming in gives additive bonus to Crit Chance (20%/30%/50%). Innate Electric damage and high direct damage potential makes the Lanka the choice weapon for Eidolon hunting. ",
      "dmg": "Crit/Status",
      "rank": 48.788435821109,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Larkspur",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/TnShieldframeArchGun/TnShieldFrameArchGun",
      "omegaAttenuation": 0.80000001,
      "totalDamage": 32,
      "trigger": "Held",
      "description": "From death blooms the Larkspur. A unique and menacing Archgun with a wild initial attack that locks onto a target then chains other targets close to the first. It also sports an explosive projectile mode. In Hildryn's grip the Larkspur carries more reserve ammo.",
      "accuracy": 8.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "SpaceGuns",
      "imageName": "larkspur.png",
      "tradable": false,
      "damage": "30.0 radiation",
      "secondaryArea": {
        "name": "Explosion",
        "radius": 800,
        "radiation": 400,
        "blast": 400,
        "damage": "400.0 radiation"
      },
      "statusChance": 34,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c4/Larkspur.png/revision/latest?cb=20190309000707",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Larkspur",
      "disposition": 2,
      "type": "Archwing Gun",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Laser Rifle",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/LaserRifle",
      "omegaAttenuation": 1.21,
      "totalDamage": 8,
      "trigger": "Auto",
      "description": "A laser rifle developed by reverse-engineering Corpus technology.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "laser-rifle.png",
      "tradable": false,
      "damage": "8.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d4/DESentinelLaserRifle.png/revision/latest?cb=20140122154228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Laser_Rifle",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Lato",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/Pistol",
      "omegaAttenuation": 1.4,
      "totalDamage": 30,
      "trigger": "Semi",
      "description": "The Lato is a highly accurate pistol used by the Tenno everywhere.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "lato.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/Lato.png/revision/latest?cb=20170210002056",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lato",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Lato Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/LatoPrime",
      "omegaAttenuation": 1.35,
      "totalDamage": 48,
      "trigger": "Semi",
      "description": "The Lato is a highly accurate pistol used by the Tenno everywhere. Prime model offers slightly increased damage.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "lato-prime.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "48.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/LatoPrime.png/revision/latest?cb=20161029030340",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lato_Prime",
      "disposition": 5,
      "acquisition": "Unobtainable (Founders)",
      "checked": false,
      "unobtainable": true,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Lato Vandal",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/LatoVandal",
      "omegaAttenuation": 1.35,
      "totalDamage": 46,
      "trigger": "Semi",
      "description": "A special version of the standard Lato pistol with a slower Fire Rate but offering higher Accuracy and Damage values. The Lato Vandal has been customized by the Tenno with a blue-green metallic finish and Lotus branding on the grips.",
      "accuracy": 22.988506,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "lato-vandal.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "46.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/59/DELatoVandal.png/revision/latest?cb=20180422234655",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lato_Vandal",
      "disposition": 5,
      "acquisition": "Sanctuary Onslaught",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 75,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Latron",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/SemiAutoRifle",
      "omegaAttenuation": 1.4,
      "totalDamage": 55,
      "trigger": "Semi",
      "description": "The Latron is a highly efficient rifle that performs well at medium and at long range, its accuracy making it a deadly weapon in the hands of skilled marksmen.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "latron.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "55.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6e/Latron.png/revision/latest?cb=20130426073836",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Latron",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Latron Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/LatronPrime",
      "omegaAttenuation": 1.3,
      "totalDamage": 90,
      "trigger": "Semi",
      "description": "The ornamental Latron Prime exploits ancient Orokin technology to get a slight damage increase over the standard Latron.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "latron-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "90.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c1/DELatronPrime.png/revision/latest?cb=20140124171644",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Latron_Prime",
      "disposition": 4,
      "releaseDate": "2013 05 03",
      "vaultDate": "2015 04 01",
      "estimatedVaultDate": "2015 04 01",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 70.1946402922797,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Latron Wraith",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/WraithLatron/WraithLatron",
      "omegaAttenuation": 1.35,
      "totalDamage": 60,
      "trigger": "Semi",
      "description": "The Latron Wraith is a powerful variation of the standard, semi-automatic rifle that features unique styling.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "latron-wraith.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "60.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/09/WraithLatron.png/revision/latest?cb=20140828170521",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Latron_Wraith",
      "disposition": 5,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Lecta",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Whip/CorpusWhipWeapon",
      "omegaAttenuation": 0.5,
      "totalDamage": 101,
      "trigger": "Melee",
      "description": "Half taser, half whip. The Corpus Lecta delivers a deadly shock to anything it touches.",
      "accuracy": 100,
      "wallAttack": 303,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "lecta.png",
      "category": "Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "56.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ab/Lecta.png/revision/latest?cb=20171113155403",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lecta",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Lega Prism",
      "uniqueName": "/Lotus/Weapons/Corpus/OperatorAmplifiers/Set1/Barrel/CorpAmpSet1BarrelPartB",
      "omegaAttenuation": 1,
      "type": "Amp",
      "imageName": "lega-prism.png",
      "tradable": false,
      "acquisition": "Little Duck (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Lega_Prism"
    },
    {
      "name": "Lenz",
      "uniqueName": "/Lotus/Weapons/Corpus/Bow/Longbow/CrpBow",
      "omegaAttenuation": 0.94999999,
      "totalDamage": 60,
      "trigger": "Charge",
      "description": "Bolts from this Corpus bow deliver a one-two punch of an icy pulse, followed by a conventional explosion. Excess ammo picked up for other weapons will be converted into charges for the Lenz. Warning: Safety-protocols do not exist on this prototype.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "lenz.png",
      "category": "Bow",
      "tradable": false,
      "chargeTime": 1.2,
      "damage": 50,
      "projectile": "Projectile",
      "secondaryArea": {
        "name": "Bubble Collapse",
        "radius": 600,
        "blast": 660,
        "damage": "660.0 blast"
      },
      "statusChance": 5,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/89/Lenz.png/revision/latest?cb=20170803215404",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lenz",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; projectile munitions. Each arrow procs procs Impact on direct hit, Cold AOE immediately afterwards, and finally Blast AOE explosion. ",
      "dmg": "Crit/Status",
      "rank": 45,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Lesion",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/TipedoStaff/InfTipedoStaff",
      "omegaAttenuation": 0.5,
      "totalDamage": 237,
      "trigger": "Melee",
      "description": "An instrument of unrelenting harm.",
      "accuracy": 100,
      "wallAttack": 395,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "lesion.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "237.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/10/InfTipedo.png/revision/latest?cb=20160304215549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lesion",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 28.92,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, low attack speed. Causing status proc buffs the weapon to give it 15% more innate attack speed and toxin damage. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Cresting Peak",
      "component": false
    },
    {
      "name": "Lex",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/HeavyPistol",
      "omegaAttenuation": 1.15,
      "totalDamage": 130,
      "trigger": "Semi",
      "description": "The Lex is a powerful, accurate pistol that has a low Fire Rate and Magazine Capacity. Very efficient at long range.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "lex.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "130.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6f/Lex.png/revision/latest?cb=20130426074737",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lex",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Lex Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeLex/PrimeLex",
      "omegaAttenuation": 1.1,
      "totalDamage": 150,
      "trigger": "Semi",
      "description": "The Lex Prime is a powerful, accurate pistol that has a low Fire Rate and Magazine Capacity. Very efficient at long range.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "lex-prime.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "150.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9e/PrimeLex.png/revision/latest?cb=20140410055707",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Lex_Prime",
      "disposition": 3,
      "releaseDate": "2014 06 09",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; hitscan munitions. Massive recoil hurts overall DPS. ",
      "dmg": "Crit/Status",
      "rank": 93.9197744313082,
      "tierRank": 0,
      "component": true
    },
    {
      "uniqueName": "/Lotus/Powersuits/Magician/Magician",
      "name": "Limbo",
      "description": "Limbo manipulates the very planes of existence to divide his enemies and conquer them in the rift.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Dodge to enter and exit the Rift. Entering leaves behind a small Rift portal lasting |DURATION|s. Energy slowly recharges in the Rift, and each enemy killed in there also gives |ENERGY| Energy.",
      "type": "Warframe",
      "imageName": "limbo.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 2370346,
      "introduced": "15",
      "sex": "Male",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/14/LimboNewLook.png/revision/latest?cb=20141124023126",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Limbo",
      "acquisition": "The Limbo Theorem (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Magician/LimboPrime",
      "name": "Limbo Prime",
      "description": "Dance between realms with this golden rift walker. Featuring altered mod polarities for greater customization.",
      "masteryReq": 4,
      "sprintSpeed": 1.15,
      "passiveDescription": "Dodge to enter and exit the Rift. Entering leaves behind a small Rift portal lasting |DURATION|s. Energy slowly recharges in the Rift, and each enemy killed in there also gives |ENERGY| Energy.",
      "type": "Warframe",
      "imageName": "limbo-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 3618353,
      "introduced": "23.0.3",
      "sex": "Male",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a8/Limbo_PrimeIcon272.png/revision/latest?cb=20180703112244",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Limbo_Prime",
      "releaseDate": "2018 06 19",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 03 18",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Loki/Loki",
      "name": "Loki",
      "description": "Desired by advanced players, Loki offers a variety of specialized reconfiguring abilities. The creativity of Loki's powers allows players to master the battlefield through manipulation.",
      "masteryReq": 0,
      "sprintSpeed": 1.25,
      "passiveDescription": "Able to hang from walls |MULT|x longer than normal.",
      "type": "Warframe",
      "imageName": "loki.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 3555649,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 1.25,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1c/LokiNewLook.png/revision/latest?cb=20141124023132",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Loki",
      "acquisition": "Hyena Pack (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Loki/LokiPrime",
      "name": "Loki Prime",
      "description": "Confuse, deceive and destroy with Loki Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.25,
      "passiveDescription": "Able to hang from walls |MULT|x longer than normal.",
      "type": "Warframe",
      "imageName": "loki-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 3486764,
      "introduced": "13.7",
      "sex": "Male",
      "sprint": 1.25,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/LokiPrimeNewLook.png/revision/latest?cb=20141124023139",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Loki_Prime",
      "releaseDate": "2014 06 11",
      "vaultDate": "2016 05 17",
      "estimatedVaultDate": "2016 05 17",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Machete",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerMachetteAndCleaver/Machete",
      "omegaAttenuation": 1.45,
      "totalDamage": 120,
      "trigger": "Melee",
      "description": "A ferocious Melee Weapon crafted by the Grineer and carried by their elite melee forces.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "machete.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "120.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/Machete.png/revision/latest?cb=20180903180540",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Machete",
      "disposition": 5,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Machete Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerMachetteAndCleaver/WraithMacheteWeapon",
      "omegaAttenuation": 1.45,
      "totalDamage": 211,
      "trigger": "Melee",
      "description": "A different take on a familiar combat knife, the Machete Wraith features unique styling.",
      "accuracy": 100,
      "wallAttack": 633,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "machete-wraith.png",
      "category": "Machete",
      "tradable": true,
      "channeling": 1.5,
      "damage": "211.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ef/DEWraithMachete.png/revision/latest?cb=20170127211343",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Machete_Wraith",
      "disposition": 5,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 29.67,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. ✪",
      "stance": "Sundering Weave",
      "stanceNotes": "",
      "combo": "Rapid Current",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Mag/Mag",
      "name": "Mag",
      "description": "With full command of surrounding magnetic energy, Mag is an expert at enemy manipulation.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Bullet jumping pulls-in nearby items for easy collection.",
      "type": "Warframe",
      "imageName": "mag.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 3096394,
      "introduced": "Vanilla",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bf/MagNewLook.png/revision/latest?cb=20141124023147",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mag",
      "acquisition": "The Sergeant (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Mag/MagPrime",
      "name": "Mag Prime",
      "description": "The exquisite Mag Prime offers the same abilities as Mag but with unique mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Bullet jumping pulls-in nearby items for easy collection.",
      "type": "Warframe",
      "imageName": "mag-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 7761756,
      "introduced": "10",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/MagPrimeNewLook.png/revision/latest?cb=20141124023154",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mag_Prime",
      "releaseDate": "2013 09 13",
      "vaultDate": "2015 07 07",
      "estimatedVaultDate": "2015 07 07",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Magistar",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Maces/PaladinMace/PaladinMaceWeapon",
      "omegaAttenuation": 1.09,
      "totalDamage": 209.99998,
      "trigger": "Melee",
      "description": "The Magistar mace wields justice and truth in the form of bone-crushing blows.",
      "accuracy": 100,
      "wallAttack": 420,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "magistar.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "210.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3e/PaladinMace.png/revision/latest?cb=20140124180233",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Magistar",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Magnus",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/Magnum/Magnum",
      "omegaAttenuation": 1.53,
      "totalDamage": 76,
      "trigger": "Semi",
      "description": "The versatile Magnus revolver is a lethal sidearm for any Tenno.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "magnus.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "76.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/TennoMagnum.png/revision/latest?cb=20140123005414",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Magnus",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Mara Detron",
      "uniqueName": "/Lotus/Weapons/VoidTrader/VTDetron",
      "omegaAttenuation": 1,
      "totalDamage": 280,
      "trigger": "Semi",
      "description": "For Orokin-era smugglers, this fearsome handheld shotgun was a favored tool for 'dispute resolution'.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "mara-detron.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "280.0 radiation",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c5/MaraDetron.png/revision/latest?cb=20141212183103",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mara_Detron",
      "disposition": 3,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; projectile munitions. Suffers from relatively poor consistency. ✪",
      "dmg": "Status",
      "rank": 47.5115214431216,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Marelok",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerLeverActionPistol/GLAPistol",
      "omegaAttenuation": 1.05,
      "totalDamage": 160,
      "trigger": "Semi",
      "description": "The Marelok combines the stopping power of a rifle with the portability of a pistol.",
      "accuracy": 10,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "marelok.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "160.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7e/GrineerLeverActionPistol.png/revision/latest?cb=20140227055729",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Marelok",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Masseter",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/TnChiselKanabo/TnChiselKanabo",
      "omegaAttenuation": 1,
      "totalDamage": 241,
      "trigger": "Melee",
      "description": "Tear and chew through enemies with this unusual crankshaft-style greatsword. When wielded by Grendel he is immune to staggers and knockdowns during heavy attacks.",
      "accuracy": 100,
      "wallAttack": 482,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "masseter.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "241.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5f/Masseter.png/revision/latest?cb=20191102024223",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Masseter",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 49.16,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Cowgirl/Cowgirl",
      "name": "Mesa",
      "description": "With a steady hand and quick reflexes, Mesa is a true gunfighter.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Shoot dual-wielded sidearms |SPEED|% faster and reload single-handed sidearms |RELOAD|% more rapidly. Gain |HEALTH| Bonus Health when not using Melee Weapons.",
      "type": "Warframe",
      "imageName": "mesa.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 13219451,
      "introduced": "15.5",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a6/MesaLarge.png/revision/latest?cb=20141211171927",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mesa",
      "acquisition": "Mutalist Alad V (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Cowgirl/MesaPrime",
      "name": "Mesa Prime",
      "description": "Cast a long shadow with this lethal enforcer. Featuring altered mod polarities for greater customization.",
      "masteryReq": 2,
      "sprintSpeed": 1.1,
      "passiveDescription": "Shoot dual-wielded sidearms |SPEED|% faster and reload single-handed sidearms |RELOAD|% more rapidly. Gain |HEALTH| Bonus Health when not using Melee Weapons.",
      "type": "Warframe",
      "imageName": "mesa-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 3353891,
      "introduced": "24.2.2",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/81/MesaPrime.png/revision/latest?cb=20181218224145",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mesa_Prime",
      "releaseDate": "2018 12 12",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 09 18",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mewan Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipThree",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "mewan.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Mewan_Strike"
    },
    {
      "name": "Mios",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Swords/Mios/Mios",
      "omegaAttenuation": 0.94999999,
      "totalDamage": 177,
      "trigger": "Melee",
      "description": "This bone-forged sword includes a tendon-whip to distract and maim the enemy.",
      "accuracy": 100,
      "wallAttack": 531,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "mios.png",
      "category": "Blade and Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "177.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6e/DEMios.png/revision/latest?cb=20151113025556",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mios",
      "disposition": 3,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 38.39,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Defiled Snapdragon",
      "stanceNotes": "",
      "combo": "Claws of the Drake",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Harlequin/Harlequin",
      "name": "Mirage",
      "description": "A master of illusion, Mirage confounds the enemy in a spectacle of style and power.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "Sliding lasts |DURATION|% longer and acrobatic maneuvers are |SPEED|% faster.",
      "type": "Warframe",
      "imageName": "mirage.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 7429982,
      "introduced": "14",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/MirageNewLook.png/revision/latest?cb=20141124023203",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mirage",
      "acquisition": "Hidden Messages (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Harlequin/MiragePrime",
      "name": "Mirage Prime",
      "description": "Dazzle the opposition with this golden master of illusion and mayhem. Featuring altered mod polarities allow for greater customization.",
      "masteryReq": 8,
      "sprintSpeed": 1.2,
      "passiveDescription": "Sliding lasts |DURATION|% longer and acrobatic maneuvers are |SPEED|% faster.",
      "type": "Warframe",
      "imageName": "mirage-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 4209205,
      "introduced": "22.7",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/ff/MiragePrime.png/revision/latest?cb=20171220211538",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mirage_Prime",
      "releaseDate": "2017 12 12",
      "vaultDate": "2019 10 01",
      "estimatedVaultDate": "2019 10 01",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mire",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Swords/Mire/MireSword",
      "omegaAttenuation": 1.4299999,
      "totalDamage": 158,
      "trigger": "Melee",
      "description": "A relic from the Great Plague, the Mire Infested Sword is a brutal weapon. It not only cuts into the enemy, it infects the wounds of its victim with a toxic nerve poison. Deals <DT_POISON>Toxin Damage on Ground Slam attacks.",
      "accuracy": 100,
      "wallAttack": 474,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "mire.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "65.0 toxin",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/MireInfestedSword.png/revision/latest?cb=20130430050417",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mire",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 27.13,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. Innate +10% toxin damage boost. Toxic Blight increases toxin damage by 100% and causes Blight (Viral, Energy) effects. ✪",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Miter",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerSawbladeGun/SawBladeGun",
      "omegaAttenuation": 1.55,
      "totalDamage": 250,
      "trigger": "Charge",
      "description": "The Miter launches high velocity saw blades, tearing apart anyone unfortunate enough to be in their path.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "LongGuns",
      "itemCount": 1,
      "parents": [
        "Panthera"
      ],
      "type": "Primary",
      "imageName": "miter.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "100.0",
      "flight": 60,
      "projectile": "Projectile",
      "statusChance": 50,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Miter",
      "disposition": 5,
      "acquisition": "Captain Vor and Lieutenant Lech Kril (Boss Duo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. Neutralizing Justice can instantly destroy nullifier bubbles and has Justice (Blast, Health, Armor) effects. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 96.0442472725881,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Mk1-Bo",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Bo",
      "omegaAttenuation": 1.29,
      "totalDamage": 90,
      "trigger": "Melee",
      "description": "The MK1-Bo is the standard issue staff weapon for all Tenno.",
      "accuracy": 100,
      "wallAttack": 150,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "mk1-bo.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "90.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/74/BoStaff.png/revision/latest?cb=20170210002058",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Bo",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Braton",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/StartingRifle",
      "omegaAttenuation": 1.3,
      "totalDamage": 18,
      "trigger": "Auto",
      "description": "The MK1-Braton is the standard issue rifle for all Tenno. A versatile weapon that can be customized to support a wide variety of play styles.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "mk1-braton.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "18.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/19/Braton.png/revision/latest?cb=20170210002053",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Braton",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Furax",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Furax",
      "omegaAttenuation": 1.38,
      "totalDamage": 90,
      "trigger": "Melee",
      "description": "The MK1-Furax is the standard issue fist weapon for all Tenno.",
      "accuracy": 100,
      "wallAttack": 270,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "mk1-furax.png",
      "category": "Fist",
      "tradable": false,
      "channeling": 1.5,
      "damage": "90.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/Furax.png/revision/latest?cb=20130426080553",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Furax",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Furis",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Furis",
      "omegaAttenuation": 1.4,
      "totalDamage": 12.999999,
      "trigger": "Auto",
      "description": "The MK1-Furis are the standard issue automatic pistol for all Tenno.",
      "accuracy": 22.222221,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "mk1-furis.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "13.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3e/Furis.png/revision/latest?cb=20170606011114",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Furis",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Kunai",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Kunai",
      "omegaAttenuation": 1.51,
      "totalDamage": 40,
      "trigger": "Auto",
      "description": "The MK1-Kunai is the standard issue throwing knives for all Tenno.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "mk1-kunai.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "40.0",
      "flight": 70,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/35/Kunai2.png/revision/latest?cb=20170210002129",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Kunai",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Paris",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Paris",
      "omegaAttenuation": 1.4,
      "totalDamage": 230,
      "trigger": "Charge",
      "description": "The MK1-Paris is the standard issue bow for all Tenno.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "mk1-paris.png",
      "category": "Bow",
      "tradable": false,
      "damage": "115.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7d/Paris.png/revision/latest?cb=20170210002054",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Paris",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mk1-Strun",
      "uniqueName": "/Lotus/Weapons/MK1Series/MK1Strun",
      "omegaAttenuation": 1.45,
      "totalDamage": 180,
      "trigger": "Semi",
      "description": "The Strun is a standard shotgun. Reliable, versatile and deadly.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "mk1-strun.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "180.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/Strun.png/revision/latest?cb=20161125225500",
      "wikiaUrl": "http://warframe.fandom.com/wiki/MK1-Strun",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mote Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/SentTrainingAmplifier/SentAmpTrainingBarrel",
      "omegaAttenuation": 1,
      "type": "Amp",
      "imageName": "mote-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Mote_Prism"
    },
    {
      "name": "Multron",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetComponents/HextraWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 5,
      "trigger": "Auto",
      "description": "Fires a burst of armor-piercing rounds.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 3,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "multron.png",
      "tradable": false,
      "damage": "5.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/97/Multron.png/revision/latest?cb=20181110220523",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Multron",
      "disposition": 3,
      "acquisition": "Comes with Companion (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mutalist Cernos",
      "uniqueName": "/Lotus/Weapons/Infested/Bow/InfCernosBow/InfCernos",
      "omegaAttenuation": 1.35,
      "totalDamage": 465,
      "trigger": "Charge",
      "description": "Overcome with Infestation, this bow's arrows now spread poisonous contagion to any surface they hit.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "mutalist-cernos.png",
      "category": "Bow",
      "tradable": false,
      "damage": "205.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 49,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/82/InfCernos.png/revision/latest?cb=20160304215549",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mutalist_Cernos",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. Fully charged arrows leave a gas trail that continues to proc status effects. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 67.9247166206396,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Mutalist Quanta",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/InfCrpShockSwarm/InfCrpShockSwarmRifle",
      "omegaAttenuation": 1.55,
      "totalDamage": 25,
      "trigger": "Auto",
      "description": "A bizarre union of Corpus technology and Infested biology, this automatic rifle can also deploy an irradiated airborne infested mass. Further field testing is required to fully understand the potential of this weapon.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "mutalist-quanta.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "25.0",
      "flight": 100,
      "projectile": "Projectile",
      "secondary": {
        "name": "Orb Explosion",
        "speed": 10,
        "crit_chance": 5,
        "crit_mult": 1.5,
        "status_chance": 0,
        "toxin": 100,
        "damage": "100.0 toxin"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/InfCrpShockSwarm.png/revision/latest?cb=20190925142901",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Mutalist_Quanta",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot; projectile munitions. Alt fire creats a bubble that can be combined up to three times. Firing through the bubble increase damage and critical chance. Bursting Mass changes the interaction by absorbing 200% of the damage passing through and detonating it every time another bubble is launched. ✪",
      "dmg": "Status",
      "rank": 54.8583258795408,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Nagantaka",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/GarudaCrossbow/GarudaCrossbow",
      "omegaAttenuation": 1.25,
      "totalDamage": 158.99998,
      "trigger": "Semi",
      "description": "Slash targets with a single precise bolt from Garuda's signature crossbow. Alt-fire to let loose a barrage of bolts. All bolts have a chance to cause Bleeding and Headshots have a chance to increase Reload Speed. When wielded by Garuda Nagantaka gains a slight Punch Through.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "nagantaka.png",
      "category": "Crossbow",
      "tradable": false,
      "damage": "159.0",
      "projectile": "Projectile",
      "secondary": {
        "name": "Burst Shot",
        "speed": 5.81,
        "crit_chance": 15,
        "crit_mult": 2.3,
        "status_chance": 0.4,
        "shot_type": "Projectile",
        "shot_speed": 100,
        "impact": 1.6,
        "slash": 143.1,
        "puncture": 14.3
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d8/Nagantaka.png/revision/latest?cb=20181110000514",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nagantaka",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot; projectile munitions. Headshots have a chance to increase reload speed. Secondary fire empties clip with little additional recoil and is highly recommended. ",
      "dmg": "Crit/Status",
      "rank": 55.6736441353328,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Nami Skyla",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/CutlassAndPoignard/CutlassPoignardSwords",
      "omegaAttenuation": 1.175,
      "totalDamage": 125,
      "trigger": "Melee",
      "description": "Like the surge and crash of storm waves, a master of the Nami cutlass and Skyla dagger turns these two separate weapons into one fluid attack.",
      "accuracy": 100,
      "wallAttack": 375,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "nami-skyla.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "125.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/TnoCutlassAndPoignard.png/revision/latest?cb=20140410055707",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nami_Skyla",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Nami Skyla Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PrimeNamiSkyla/PrimeNamiSkyla",
      "omegaAttenuation": 1.175,
      "totalDamage": 180,
      "trigger": "Melee",
      "description": "Forged by a forgotten master, these exquisite blades are bounty from a golden-age long gone.",
      "accuracy": 100,
      "wallAttack": 540,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "nami-skyla-prime.png",
      "category": "Dual Swords",
      "tradable": true,
      "channeling": 1.5,
      "damage": "180.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/68/PrimeNamiSkyla.png/revision/latest?cb=20170829215440",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nami_Skyla_Prime",
      "disposition": 4,
      "releaseDate": "2017 08 29",
      "vaultDate": "2019 07 07",
      "estimatedVaultDate": "2019 07 07",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 25.2,
      "tierRank": 3,
      "weaponNotes": "Low damage per hit, very high attack speed. ✪",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Nami Solo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/CutlassAndPoignard/TennoCutlass",
      "omegaAttenuation": 1.4299999,
      "totalDamage": 172,
      "trigger": "Melee",
      "description": "Evoking the oceans of earth, this exquisite cutlass is a deadly work of art.",
      "accuracy": 100,
      "wallAttack": 516,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "nami-solo.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "172.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/dd/DENamiSolo.png/revision/latest?cb=20140529190718",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nami_Solo",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 33.76,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, low attack speed. Suffers from relatively poor consistency. ✪",
      "stance": "Sundering Weave",
      "stanceNotes": "",
      "combo": "Rapid Current",
      "component": false
    },
    {
      "name": "Needlenose",
      "uniqueName": "/Lotus/Types/Vehicles/Hoverboard/HoverboardParts/PartComponents/HoverboardCorpusB/HoverboardCorpusBDeck",
      "omegaAttenuation": 1,
      "type": "Vehicle",
      "imageName": "needlenose.png",
      "category": "K-Drive",
      "tradable": false,
      "acquisition": "Roky (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Needlenose"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Necro/Necro",
      "name": "Nekros",
      "description": "Nekros uses his dark powers to manipulate his enemies, both living and dead.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Restore |HEALTH| Health with every enemy death within |RADIUS|m.",
      "type": "Warframe",
      "imageName": "nekros.png",
      "tradable": false,
      "conclave": true,
      "color": 3685444,
      "introduced": "10",
      "sex": "Male",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/cc/NekrosNewLook.png/revision/latest?cb=20141124023210",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nekros",
      "acquisition": "Lephantis (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Necro/NekrosPrime",
      "name": "Nekros Prime",
      "description": "Death's new master. Featuring altered mod polarities allow for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Restore |HEALTH| Health with every enemy death within |RADIUS|m.",
      "type": "Warframe",
      "imageName": "nekros-prime.png",
      "tradable": true,
      "conclave": true,
      "color": 1973018,
      "introduced": "The Silver Grove 3",
      "sex": "Male",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/86/NekrosPrimeNewLook.png/revision/latest?cb=20180419201132",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nekros_Prime",
      "releaseDate": "2016 08 23",
      "vaultDate": "2018 06 19",
      "estimatedVaultDate": "2018 06 19",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Nezha/Nezha",
      "name": "Nezha",
      "description": "A petite and playful facade conceals this frame's immense power.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Slide |SPEED|% faster and go |RANGE|% farther.",
      "type": "Warframe",
      "imageName": "nezha.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 13341821,
      "introduced": "18.1",
      "sex": "Male",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/45/NezhaNewLook.png/revision/latest?cb=20151217010251",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nezha",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Infestation/Infestation",
      "name": "Nidus",
      "description": "Command the Infestation to mutate and grow ever more destructive.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "If Nidus is killed with at least |STACKS| stacks of Mutation, those |STACKS| stacks are consumed; this grants |DURATION|s of invulnerability and restores Health to |HEAL|%.",
      "type": "Warframe",
      "imageName": "nidus.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 4141618,
      "introduced": "19.5",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4c/NidusNewLook.png/revision/latest?cb=20161223053121",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nidus",
      "acquisition": "The Glast Gambit (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Nikana",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/KatanaAndWakizashi/Katana",
      "omegaAttenuation": 0.5,
      "totalDamage": 142,
      "trigger": "Melee",
      "description": "The Nikana reintroduces a lost Tenno blade and with it another fragment of the old ways.",
      "accuracy": 100,
      "wallAttack": 304,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Melee",
      "itemCount": 1,
      "parents": [
        "Dragon Nikana"
      ],
      "type": "Melee",
      "imageName": "nikana.png",
      "category": "Nikana",
      "tradable": false,
      "channeling": 1.5,
      "damage": "142.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e9/Katana.png/revision/latest?cb=20140410055706",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nikana",
      "disposition": 1,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Nikana Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PrimeKatana/PrimeNikana",
      "omegaAttenuation": 0.5,
      "totalDamage": 198,
      "trigger": "Melee",
      "description": "An ancient blade predating the fall of the Orokin Empire. Forged using techniques lost over the centuries, the edge remains sharper than that of any modern Nikana.",
      "accuracy": 100,
      "wallAttack": 424,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "nikana-prime.png",
      "category": "Nikana",
      "tradable": true,
      "channeling": 1.5,
      "damage": "198.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/PrimeNikana.png/revision/latest?cb=20160205233131",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nikana_Prime",
      "disposition": 1,
      "releaseDate": "2016 02 16",
      "vaultDate": "2017 12 12",
      "estimatedVaultDate": "2017 12 12",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 25.97,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, high attack speed. ",
      "stance": "Decisive Judgement",
      "stanceNotes": "",
      "combo": "Swift Retribution",
      "component": false
    },
    {
      "name": "Ninkondi",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Nunchaku/Nunchaku/Nunchaku",
      "omegaAttenuation": 1.41,
      "totalDamage": 190,
      "trigger": "Melee",
      "description": "With its lightning-fast strikes, the Ninkondi pays respect to the old ways.",
      "accuracy": 100,
      "wallAttack": 570,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "itemCount": 1,
      "parents": [
        "Shaku"
      ],
      "type": "Melee",
      "imageName": "ninkondi.png",
      "category": "Nunchaku",
      "tradable": false,
      "channeling": 1.5,
      "damage": "100.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7d/Nunchaku.png/revision/latest?cb=20150911162035",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ninkondi",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Ninkondi Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeNinkondi/PrimeNikondi",
      "omegaAttenuation": 1.41,
      "totalDamage": 234,
      "trigger": "Melee",
      "description": "An ancient weapon imbued with a new truth.",
      "accuracy": 100,
      "wallAttack": 702,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ninkondi-prime.png",
      "category": "Nunchaku",
      "tradable": true,
      "channeling": 1.5,
      "damage": "90.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d6/NinkondiPrime.png/revision/latest?cb=20190707115632",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ninkondi_Prime",
      "disposition": 5,
      "releaseDate": "2019 07 07",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 03 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 39.14,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, high attack speed. ",
      "stance": "Atlantis Vulcan",
      "stanceNotes": "",
      "combo": "Molten Whirlpool",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/AntiMatter/Anti",
      "name": "Nova",
      "description": "Nova uses electromagnetic energy to contain and control highly volatile antimatter that fuels her abilities.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "When knocked-over, emit a |RADIUS|m defensive burst that topples attacking enemies and deals |DAMAGE| Damage.",
      "type": "Warframe",
      "imageName": "nova.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 5132112,
      "introduced": "9",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/52/NovaNewLook.png/revision/latest?cb=20141124023217",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nova",
      "acquisition": "The Raptors (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/AntiMatter/NovaPrime",
      "name": "Nova Prime",
      "description": "Nova Prime wreaks devastation on her enemies using volatile antimatter. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "When knocked-over, emit a |RADIUS|m defensive burst that topples attacking enemies and deals |DAMAGE| Damage.",
      "type": "Warframe",
      "imageName": "nova-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 1974051,
      "introduced": "15.7",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/38/NovaPrimeNewLook.png/revision/latest?cb=20150204035825",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nova_Prime",
      "releaseDate": "2014 12 16",
      "vaultDate": "2016 11 22",
      "estimatedVaultDate": "2016 11 22",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Nukor",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerMicrowavegun/GrnMicrowavePistol",
      "omegaAttenuation": 1.45,
      "totalDamage": 22,
      "trigger": "Held",
      "description": "Creates and focuses a high-frequency field of microwaves, literally cooking the target from within.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "nukor.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "22.0 radiation",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d3/GrineerMicrowaveGun.png/revision/latest?cb=20140828170520",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nukor",
      "disposition": 5,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot; beam munitions. Hitting a specific part multiple times increases damage dealt to that part by 5%. Unusually, Nukor has very high Critical Multiplier but poor Critical Chance, hence it's DPS increase from flat Crit Chance modifiers is relatively higher than other weapons. ",
      "dmg": "Status",
      "rank": 78.6742346141748,
      "tierRank": 1,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Jade/Jade",
      "name": "Nyx",
      "description": "Mind control and psychic attacks make Nyx a very dangerous foe. Her ability to reach into enemy consciousness and manipulate their behavior can turn the tide of battle.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Enemies are |PERCENT|% less accurate when targeting Nyx.",
      "type": "Warframe",
      "imageName": "nyx.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 4014654,
      "introduced": "6",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/cb/NyxNewLook.png/revision/latest?cb=20141124023223",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nyx",
      "acquisition": "Phorid (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Jade/NyxPrime",
      "name": "Nyx Prime",
      "description": "Infiltrate the minds of your enemies with Nyx Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.125,
      "passiveDescription": "Enemies are |PERCENT|% less accurate when targeting Nyx Prime.",
      "type": "Warframe",
      "imageName": "nyx-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": true,
      "color": 10854532,
      "introduced": "14.8",
      "sex": "Female",
      "sprint": 1.125,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/aa/NyxPrimeNewLook.png/revision/latest?cb=20141124023232",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Nyx_Prime",
      "releaseDate": "2014 09 23",
      "vaultDate": "2016 08 23",
      "estimatedVaultDate": "2016 08 23",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Paladin/Paladin",
      "name": "Oberon",
      "description": "Equally adept at healing friends or striking down the enemy. Oberon embodies the balance Tenno are sworn to uphold.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Allied pets receive |HEALTH|% Health, Armor and Shield buffs. In addition, your pet receives an instant revive per mission.",
      "type": "Warframe",
      "imageName": "oberon.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 2895659,
      "introduced": "11.5",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/OberonNewLook.png/revision/latest?cb=20150223022507",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Oberon",
      "acquisition": "Eximus Enemies",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Paladin/PaladinPrime",
      "name": "Oberon Prime",
      "description": "Protect the balance with this regal forest guardian. Featuring altered mod polarities for greater customization.",
      "masteryReq": 8,
      "sprintSpeed": 1,
      "passiveDescription": "Allied pets receive |HEALTH|% Health, Armor and Shield buffs. In addition, your pet receives an instant revive per mission.",
      "type": "Warframe",
      "imageName": "oberon-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 2829096,
      "introduced": "20.6.2",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/08/OberonPrimeBust.png/revision/latest?cb=20200208131010",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Oberon_Prime",
      "releaseDate": "2017 05 30",
      "vaultDate": "2019 03 27",
      "estimatedVaultDate": "2019 03 27",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Obex",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/KickAndPunch/KickPunchWeapon",
      "omegaAttenuation": 1.1,
      "totalDamage": 120,
      "trigger": "Melee",
      "description": "The Obex system multiplies the kinetic energy of a Tenno's kicks and punches, delivering devastating blows to any target.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "obex.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "120.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f5/CorpusKickNPunch.png/revision/latest?cb=20140314173617",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Obex",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Bard/Bard",
      "name": "Octavia",
      "description": "Compose her song and then conduct the mighty Mandachord, turning bass, beat and melody into an anthem of devastation.",
      "masteryReq": 0,
      "sprintSpeed": 1.05,
      "passiveDescription": "Replenish |ENERGY| energy over |DURATION|s for Octavia and allies within |RANGE|m when abilities are activated.",
      "type": "Warframe",
      "imageName": "octavia.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": true,
      "color": 2171179,
      "introduced": "20",
      "sex": "Female",
      "sprint": 1.05,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a9/Octavia.png/revision/latest?cb=20190722173303",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Octavia",
      "acquisition": "Octavia's Anthem (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ocucor",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpSentExperimentPistol/CrpSentExperimentPistol",
      "omegaAttenuation": 1.15,
      "totalDamage": 22,
      "trigger": "Held",
      "description": "A weapon that reaches for its next victim even as it kills. With each takedown, this pistol spawns an energy tendril that reaches for a nearby target.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "ocucor.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "20.0 radiation",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/83/Ocucor.png/revision/latest?cb=20181110201040",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ocucor",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot; beam munitions. Each enemy killed will create an additional tendril that damages other targettable enemies in sight. Tendrils reset upon reloading. ✪",
      "dmg": "Crit/Status",
      "rank": 54.5038404810405,
      "tierRank": 2,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/StandardJetPack/StandardJetPack",
      "name": "Odonata",
      "description": "The systems built into this Archwing balance offensive capabilities with defensive countermeasures.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "type": "Vehicle",
      "imageName": "odonata.png",
      "category": "Archwing",
      "tradable": false,
      "acquisition": "The Archwing (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Odonata"
    },
    {
      "uniqueName": "/Lotus/Powersuits/Archwing/PrimeJetPack/PrimeJetPack",
      "name": "Odonata Prime",
      "description": "This enhanced version of the first Archwing prototype takes the design to its theoretical limits.",
      "masteryReq": 0,
      "sprintSpeed": 1.05,
      "type": "Vehicle",
      "imageName": "odonata-prime.png",
      "category": "Archwing",
      "tradable": true,
      "releaseDate": "2015 03 24",
      "vaultDate": "2017 02 28",
      "estimatedVaultDate": "2017 02 28",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Odonata_Prime"
    },
    {
      "name": "Ogris",
      "uniqueName": "/Lotus/Weapons/ClanTech/Chemical/RocketLauncher",
      "omegaAttenuation": 1.3,
      "totalDamage": 700,
      "trigger": "Charge",
      "description": "Ogris fires detonite-infused casings.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "ogris.png",
      "category": "Launcher",
      "tradable": false,
      "chargeTime": 0.3,
      "damage": 100,
      "projectile": "Projectile",
      "statusChance": 35,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/24/OgrisNew.png/revision/latest?cb=20150324200739",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ogris",
      "disposition": 4,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. Nightwatch Napalm turns the Ogris into an area denial weapon. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 103.495453691367,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ohma",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/CrpTonfa/CrpTonfa",
      "omegaAttenuation": 1,
      "totalDamage": 224,
      "trigger": "Melee",
      "description": "Bring the enemy to its knees with these twin electrified tonfas.",
      "accuracy": 100,
      "wallAttack": 448,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ohma.png",
      "category": "Tonfa",
      "tradable": false,
      "channeling": 1.5,
      "damage": "110.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bc/CorpusTonfa.png/revision/latest?cb=20170119002703",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ohma",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 26.28,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, low attack speed. Suffers from relatively poor consistency. Slams have guaranteed Electricity proc in 8.5m radius. ",
      "stance": "Sovereign Outcast",
      "stanceNotes": "",
      "combo": "Rogue Edict",
      "component": false
    },
    {
      "name": "Okina",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/TennoSai/TennoSais",
      "omegaAttenuation": 1.3099999,
      "totalDamage": 140,
      "trigger": "Melee",
      "description": "Perforate enemies with these two needle-sharp sai.",
      "accuracy": 100,
      "wallAttack": 420,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "okina.png",
      "category": "Dual Daggers",
      "tradable": false,
      "channeling": 1.5,
      "damage": "140.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/49/TennoSais.png/revision/latest?cb=20160710174242",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Okina",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 38.19,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, high attack speed. Suffers from relatively poor consistency. ",
      "stance": "Spinning Needle",
      "stanceNotes": "",
      "combo": "True Kiss",
      "component": false
    },
    {
      "name": "Oloro Moa",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetParts/MoaPetHeadOloro",
      "omegaAttenuation": 1,
      "type": "Sentinel",
      "imageName": "oloro-moa.png",
      "tradable": false,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Oloro_Moa"
    },
    {
      "name": "Onorix",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/Archaxe/ArchAxeWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 290,
      "trigger": "Melee",
      "description": "This laser bladed battle-axe easily hacks through a ship's defenses and the forces protecting it.",
      "accuracy": 100,
      "wallAttack": 290,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "SpaceMelee",
      "imageName": "onorix.png",
      "tradable": false,
      "damage": "290.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/22/Archaxe.png/revision/latest?cb=20141028221205",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Onorix",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ooltha Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee01/Tip/TipTwo",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "ooltha.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Ooltha_Strike"
    },
    {
      "name": "Opticor",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpBFG/CrpBFG",
      "omegaAttenuation": 1.05,
      "totalDamage": 999.99994,
      "trigger": "Charge",
      "description": "Once charged this Corpus laser cannon dispatches a devastating blast of light energy.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "opticor.png",
      "category": "Rifle",
      "tradable": false,
      "chargeTime": 2,
      "damage": 1000,
      "projectile": "Hitscan",
      "statusChance": 20,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a7/CrpBFG.png/revision/latest?cb=20141024143412",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Opticor",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; hitscan munitions. Do not stare directly into beam. Suffers from relatively poor consistency. ",
      "dmg": "Critical",
      "rank": 74.1378334412485,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Opticor Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpBFG/Vandal/VandalCrpBFG",
      "omegaAttenuation": 1,
      "totalDamage": 400,
      "trigger": "Charge",
      "description": "With a precision crafted lens, this customized Opticor achieves a level of performance previously thought impossible.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "opticor-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "chargeTime": 0.6,
      "damage": 400,
      "projectile": "Hitscan",
      "statusChance": 30,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7e/OpticorVandal.png/revision/latest?cb=20190925144954",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Opticor_Vandal",
      "disposition": 3,
      "acquisition": "Buried Debts (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 46.9679483388679,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Orthos",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/PolearmWeapon",
      "omegaAttenuation": 0.5,
      "totalDamage": 185,
      "trigger": "Melee",
      "description": "The Tenno forged Orthos is a rare double bladed polearm. Those who take the time to master it speak of its impressive striking distance and ability to hit multiple targets.",
      "accuracy": 100,
      "wallAttack": 308,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "orthos.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "185.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/74/DEOrthos.png/revision/latest?cb=20140407041822",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Orthos",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Orthos Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/PrimePolearmWeapon",
      "omegaAttenuation": 0.5,
      "totalDamage": 234,
      "trigger": "Melee",
      "description": "Orthos Prime is an ancient Orokin martial weapon, forged from the purest rubidium making it extremely light-weight.",
      "accuracy": 100,
      "wallAttack": 390,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "orthos-prime.png",
      "category": "Polearm",
      "tradable": true,
      "channeling": 1.5,
      "damage": "234.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/PrimePolearm.png/revision/latest?cb=20130713203618",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Orthos_Prime",
      "disposition": 1,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Critical/Crit & Status",
      "rank": 26.67,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, very high attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Cresting Peak",
      "component": false
    },
    {
      "name": "Orvius",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Glaives/TeshinGlaive/TnTeshinGlaiveWep",
      "omegaAttenuation": 1.15,
      "totalDamage": 195,
      "trigger": "Melee",
      "description": "Turn foes into puppets with Teshin’s versatile throwing disc.",
      "accuracy": 100,
      "wallAttack": 585,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "orvius.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "195.0",
      "projectile": "Thrown",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6b/TeshinGlaive.png/revision/latest?cb=20180314033633",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Orvius",
      "disposition": 4,
      "acquisition": "The War Within (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 57.4,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, very low attack speed. Suffers from relatively poor consistency. Heavy Attack while Blocking suspends enemies in midair. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/RadarPowerSuit",
      "name": "Oxylus",
      "description": "With 'Scan Aquatic Lifeforms' and 'Scan Matter' as default Precepts, Oxylus was designed to assist in Search-and-Rescue operations through the harsh landscape around The Orb Vallis. Oxylus also comes with a Multron rifle.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "oxylus.png",
      "tradable": false,
      "acquisition": "The Business (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Oxylus"
    },
    {
      "name": "Pandero",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TnBardPistol/TnBardPistolGun",
      "omegaAttenuation": 1.05,
      "totalDamage": 72,
      "trigger": "Semi",
      "description": "Octavia's pistol hammers foes with single shots or a rapid volley of bullets. When wielded by Octavia, alt-fire Headshot Kills increase Reload Speed.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "pandero.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "72.0",
      "projectile": "Hitscan",
      "secondary": {
        "speed": 7.69,
        "impact": 18,
        "slash": 36,
        "puncture": 18
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/cb/TnBardPistol.png/revision/latest?cb=20170324230208",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pandero",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot; hitscan munitions. Alt-fire empties clip onto enemy with some worrying recoil. ",
      "dmg": "Crit/Status",
      "rank": 59.8190046219458,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Pangolin Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PangolinSword/PangolinLongSword",
      "omegaAttenuation": 1.47,
      "totalDamage": 150,
      "trigger": "Melee",
      "description": "A unique blade used by an old Tenno clan.",
      "accuracy": 100,
      "wallAttack": 450,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "pangolin-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "150.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/28/Pangolin.png/revision/latest?cb=20130426080637",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pangolin_Sword",
      "disposition": 5,
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 36.1,
      "tierRank": 1,
      "weaponNotes": "Very low damage per hit, low attack speed. Jump attacks always proc Electricity. ",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Panthera",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/Miter/TnoMiter",
      "omegaAttenuation": 1.4,
      "totalDamage": 100,
      "trigger": "Auto",
      "description": "Firing high-velocity blades, this weapon can also be used as a battle-saw, shredding anything unfortunate enough to get within range.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "panthera.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "100.0",
      "flight": 40,
      "projectile": "Projectile",
      "secondary": {
        "speed": 2,
        "crit_chance": 25,
        "crit_mult": 2,
        "status_chance": 0.3,
        "shot_type": "Continuous",
        "impact": 10,
        "slash": 80,
        "puncture": 10
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6f/TennoMiter.png/revision/latest?cb=20150115004023",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Panthera",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. Alt-fire puts a spinning blade a few meters in from of the weapon that constantly spin and deal damage. ",
      "dmg": "Crit/Status",
      "rank": 65.5799598391955,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Para Moa",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetParts/MoaPetHeadPara",
      "omegaAttenuation": 1,
      "type": "Sentinel",
      "imageName": "para-moa.png",
      "tradable": false,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Para_Moa"
    },
    {
      "name": "Paracesis",
      "uniqueName": "/Lotus/Weapons/Orokin/BallasSword/BallasSwordWeapon",
      "omegaAttenuation": 1,
      "maxLevelCap": 40,
      "totalDamage": 222,
      "trigger": "Melee",
      "description": "The Sentient slayer. An offering from Ballas.",
      "accuracy": 100,
      "wallAttack": 444,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "paracesis.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "222.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b7/BallasSword.png/revision/latest?cb=20181012151715",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Paracesis",
      "disposition": 3,
      "acquisition": "Chimera Prologue (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 34.13,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, low attack speed. Suffers from relatively poor consistency. Has max modslot of 90 including stance. Using forma on this weapon will increase damage to Tau faction (up to 60% after 5 forma). ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "name": "Paracyst",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/QuantaFullyInfested/InfQuantaRifle",
      "omegaAttenuation": 1.3099999,
      "totalDamage": 33,
      "trigger": "Burst",
      "description": "Completely overwhelmed by Infested biology, this former Quanta now fires organic ordnance and a harpoon like appendage.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "paracyst.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "33.0 toxin",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Infested Harpoon",
        "speed": 11.11,
        "crit_chance": 10,
        "crit_mult": 2,
        "status_chance": 0.3,
        "shot_type": "Projectile",
        "shot_speed": null,
        "toxin": 33,
        "damage": "33.0 toxin"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/ca/InfQuantaRifle.png/revision/latest?cb=20141127182550",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Paracyst",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; projectile munitions. Three-round burst is wasteful at times. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 93.8439327330338,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Paris",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/HuntingBow",
      "omegaAttenuation": 1.35,
      "totalDamage": 320,
      "trigger": "Charge",
      "description": "Based on one of the world's oldest weapon designs, this Tenno-crafted weapon can be used both in stealth and in open combat. The Paris uses a chargeable magnetic field to launch arrows capable of impaling enemies to walls.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "paris.png",
      "category": "Bow",
      "tradable": false,
      "damage": "160.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 10,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7d/Paris.png/revision/latest?cb=20170210002054",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Paris",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Paris Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Bows/PrimeHuntingBow",
      "omegaAttenuation": 1.3,
      "totalDamage": 360,
      "trigger": "Charge",
      "description": "Discovered deep inside an ancient Orokin derelict, the Paris Prime increases the kinetic energy of any bolt it fires, dealing more damage than its more common counterpart.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "paris-prime.png",
      "category": "Bow",
      "tradable": true,
      "damage": "180.0",
      "flight": 70,
      "projectile": "Projectile",
      "statusChance": 20,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/PrimeBowM.png/revision/latest?cb=20130713213733",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Paris_Prime",
      "disposition": 4,
      "releaseDate": "2013 07 13",
      "vaultDate": "never",
      "estimatedVaultDate": "never",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot; projectile munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 55.5768716422179,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Pathocyst",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/InfBoomerang/InfBoomerangWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 262,
      "trigger": "Melee",
      "description": "Each strike of this infested glaive infects its target with viral pathogens. Occasionally, it discharges the spores of rabid, enemy-seeking maggots, either in-flight or on contact with the enemy.",
      "accuracy": 100,
      "wallAttack": 786,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "pathocyst.png",
      "category": "Glaive",
      "tradable": false,
      "channeling": 1.5,
      "damage": "89.0 viral",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ec/Pathocyst.png/revision/latest?cb=20190928122043",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pathocyst",
      "disposition": 3,
      "acquisition": "Emissary Derelict Assassinate",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 49.45,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, very low attack speed. ",
      "stance": "Astral Twilight",
      "stanceNotes": "",
      "combo": "Morning Sun",
      "component": false
    },
    {
      "name": "Pennant",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/TnRailjackGreatKatana/TnRailJackGreatKatanaWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 200,
      "trigger": "Melee",
      "description": "The steel flag of Old War Railjack crews, the Pennant was invaluable in repelling boarders. With each heavy attack kill the Pennant's speed of attack increases.",
      "accuracy": 100,
      "wallAttack": 400,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "pennant.png",
      "category": "Two-Handed Nikana",
      "tradable": false,
      "channeling": 1.5,
      "damage": "200.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1a/Pennant.png/revision/latest?cb=20191214133608",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pennant",
      "disposition": 3,
      "acquisition": "Empyrean",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Heavy Attack",
      "rank": 22.97,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, low attack speed. Increases attack speed after a heavy attack. ✪",
      "stance": "Wise Razor",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Penta",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/GrenadeLauncher/GrenadeLauncher",
      "omegaAttenuation": 1.35,
      "totalDamage": 425,
      "trigger": "Active",
      "description": "The Penta Launcher fires up to five grenades that can be remotely triggered at just the right moment.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "penta.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "75.0",
      "flight": 20,
      "projectile": "Projectile",
      "secondary": {
        "name": "Grenade Detonation",
        "blast": 350,
        "damage": "350.0 blast"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/DEPenta.png/revision/latest?cb=20160215091348",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Penta",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Phaedra",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/ArchLongRifle/ArchLongRifle",
      "omegaAttenuation": 1.15,
      "totalDamage": 35,
      "trigger": "Auto",
      "description": "Devastate free-space enemies with Phaedra, the Soma's big-sister.",
      "accuracy": 10.526316,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "SpaceGuns",
      "imageName": "phaedra.png",
      "tradable": false,
      "damage": "35.0",
      "projectile": "Projecile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/35/ArchLongRifle.png/revision/latest?cb=20151002090140",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Phaedra",
      "disposition": 4,
      "type": "Archwing Gun",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Phage",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/Tentacluster/InfestedShotgun",
      "omegaAttenuation": 1.46,
      "totalDamage": 35,
      "trigger": "Held",
      "description": "Fires seven beams of continuous biochemical energy which depletes the life of any surface they contact.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "phage.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "35.0 viral",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9e/InfestedLongGunTwo.png/revision/latest?cb=20140206061957",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Phage",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; beam munitions. Scoping narrows down the beam to a single point. ✪",
      "dmg": "Status",
      "rank": 49.6832396974191,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Phantasma",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/RevenantShotgun/RevenantShotgun",
      "omegaAttenuation": 1,
      "totalDamage": 75,
      "trigger": "Held",
      "description": "Irradiate enemies with a continuous stream of deadly plasma. Charging secondary fire releases a glob of plasma that erupts with homing bomblets on impact. Increased Magazine Capacity when wielded by Revenant.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "phantasma.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "50.0 radiation",
      "projectile": "Hitscan",
      "secondaryArea": {
        "name": "Cluster Bombs",
        "status_chance": 37,
        "pellet": {
          "name": "Bomblet",
          "count": 5
        },
        "impact": 75
      },
      "statusChance": 37,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d6/RevenantShotgun.png/revision/latest?cb=20180825053839",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Phantasma",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; beam munitions. Primary fire has usable AOE. Alt fire charges the weapon to fire an exploding glob that also releases seeking projectiles. Longer charge imparts more damage. ✪",
      "dmg": "Status",
      "rank": 36.7021728866443,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Plague Keewar Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMeleeInfested/Tips/InfestedTipTwo",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "plague-keewar.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Operation Plague Star (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Plague_Keewar_Strike"
    },
    {
      "name": "Plague Kripath Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMeleeInfested/Tips/InfestedTipOne",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "plague-kripath.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Operation Plague Star (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Plague_Kripath_Strike"
    },
    {
      "name": "Plasma Sword",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/PlasmaSword/PlasmaLongSword",
      "omegaAttenuation": 1.48,
      "totalDamage": 200,
      "trigger": "Melee",
      "description": "An advanced blade that delivers high-damage attacks. Delivers a high percentage of critical strikes.",
      "accuracy": 100,
      "wallAttack": 600,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "plasma-sword.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "66.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/90/Plasma.png/revision/latest?cb=20130426080642",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Plasma_Sword",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 34.73,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, very low attack speed. ✪",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Plinx",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpSonificBlastor/CrpBlastorWeapon",
      "omegaAttenuation": 1.15,
      "totalDamage": 46,
      "trigger": "Semi",
      "description": "Cultivate a meaningful relationship with this deceptively simple battery-powered pistol. The Plinx rewards attention and investment from the wise.",
      "accuracy": 50,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "plinx.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "20.0 heat",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e5/Plinx.png/revision/latest?cb=20190927104229",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Plinx",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 62.5811388300842,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Pox",
      "uniqueName": "/Lotus/Weapons/Infested/Pistols/InfProximityStars/InfProximityStars",
      "omegaAttenuation": 1.05,
      "totalDamage": 170,
      "trigger": "Auto",
      "description": "These festering sacs of pus and gas burst violently on impact.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "pox.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "50.0 toxin",
      "flight": "???",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bc/InfProximityStars.png/revision/latest?cb=20160819234428",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pox",
      "disposition": 3,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; projectile munitions. Firing launches gas darts that will fill a moderate AOE with gas. Modding 100% status is highly recommended. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 57,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Prime Laser Rifle",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/PrimeLaserRifle",
      "omegaAttenuation": 1.21,
      "totalDamage": 11.999999,
      "trigger": "Auto",
      "description": "A Prime Laser Rifle.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "prime-laser-rifle.png",
      "tradable": true,
      "damage": "12.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/93/SentinelBurstLaserPrime.png/revision/latest?cb=20140718041009",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prime_Laser_Rifle",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prisma Angstrum",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpHandRL/PrismaAngstrum",
      "omegaAttenuation": 1.3,
      "totalDamage": 1350,
      "trigger": "Charge",
      "description": "Imbued with the finest Prisma crystal, this refined Angstrum features boosted charge and reload speeds.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "prisma-angstrum.png",
      "category": "Pistol",
      "tradable": false,
      "chargeTime": 0.2,
      "damage": 200,
      "projectile": "Projectile",
      "secondary": {
        "name": "3-Rocket Barrage Explosion",
        "pellet": {
          "count": 3,
          "name": "Rocket"
        },
        "blast": 750,
        "damage": "750.0 blast"
      },
      "secondaryArea": {
        "name": "3-Rocket Barrage Impact",
        "status_chance": 59.5,
        "pellet": {
          "name": "Rocket",
          "count": 3
        },
        "blast": 600,
        "damage": "600.0 blast"
      },
      "statusChance": 26,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5f/PrismaAngstrum.png/revision/latest?cb=20170908141430",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Angstrum",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; projectile munitions. Multishot causes the rocket to spread out further. Can be charged to launch more rockets at once. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 97.2294316524253,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prisma Burst Laser",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/PrismaBurstLaserPistol",
      "omegaAttenuation": 1.45,
      "totalDamage": 10,
      "trigger": "Burst",
      "description": "Fires a small burst of lasers.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "prisma-burst-laser.png",
      "tradable": false,
      "damage": "10.0",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/PrismaSentinelBurstLaser.png/revision/latest?cb=20160216223831",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Burst_Laser",
      "disposition": 5,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prisma Dual Cleavers",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerMachetteAndCleaver/PrismaDualCleavers",
      "omegaAttenuation": 1,
      "totalDamage": 133,
      "trigger": "Melee",
      "description": "Blades of energized prisma crystal make these ornamental cleavers cut as sharply as they look.",
      "accuracy": 100,
      "wallAttack": 399,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "prisma-dual-cleavers.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "133.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/57/PrismaDualCleavers.png/revision/latest?cb=20150710171818",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Dual_Cleavers",
      "disposition": 3,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Critical",
      "rank": 29.42,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. Augment adds Justice (Blast, Health, Armor) effects and +100% to base damage. ",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Prisma Gorgon",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/VoidTraderGorgon/VTGorgon",
      "omegaAttenuation": 1.3,
      "totalDamage": 23.000002,
      "trigger": "Auto",
      "description": "Adorned with void hardened prisma crystal, this Gorgon variant is prized for its beauty and enhanced mechanics.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "prisma-gorgon.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "23.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/54/PrismaGorgon.png/revision/latest?cb=20150612204850",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Gorgon",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. Roll for recoil reduction in riven. ✪",
      "dmg": "Crit/Status",
      "rank": 43.4142135623731,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Prisma Grakata",
      "uniqueName": "/Lotus/Weapons/VoidTrader/PrismaGrakata",
      "omegaAttenuation": 1.25,
      "totalDamage": 15,
      "trigger": "Auto",
      "description": "Encased in plates refined from pure prisma crystals, this rare element gives this assault rifle a radiant luster.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "prisma-grakata.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "15.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/80/PrismaGrakata.png/revision/latest?cb=20150612204849",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Grakata",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot; hitscan munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 48.5593268686171,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Prisma Grinlok",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerLeverActionRifle/PrismaGrinlokWeapon",
      "omegaAttenuation": 1.25,
      "totalDamage": 187,
      "trigger": "Semi",
      "description": "Prisma-crystal enhancement creates here a prestige instrument; a weapon capable of taking life at astonishing range with but a single pull of its exquisitely-tooled trigger.",
      "accuracy": 32,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "prisma-grinlok.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "187.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/47/PrismaGrinlok.png/revision/latest?cb=20190309000413",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Grinlok",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Augment adds 200% CC and Sequence (Radiation, Shields, Max Shields) ",
      "dmg": "Crit/Status",
      "rank": 57.886335345031,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Prisma Obex",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/KickAndPunch/PrismaObex",
      "omegaAttenuation": 1.1,
      "totalDamage": 150,
      "trigger": "Melee",
      "description": "Dazzle, distract and destroy with these sparring weapons of impossibly hard prisma crystal.",
      "accuracy": 100,
      "wallAttack": 450,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "prisma-obex.png",
      "category": "Sparring",
      "tradable": false,
      "channeling": 1.5,
      "damage": "150.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/PrismaObex.png/revision/latest?cb=20170506061038",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Obex",
      "disposition": 3,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 42.39,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, very high attack speed. Suffers from relatively poor consistency. Entropy Detonation cause ground finisher kills to explode for 1,000 (+20% enemy max health) Blast damage and Entropy (Magnetic, Energy) effects. ",
      "stance": "Grim Fury",
      "stanceNotes": "",
      "combo": "Inferno",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/PrismaShadePowerSuit",
      "name": "Prisma Shade",
      "description": "A rare jewel of the void. How could anything so beautiful be crafted for stealth?",
      "type": "Sentinel",
      "imageName": "prisma-shade.png",
      "tradable": false,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Prisma_Shade"
    },
    {
      "name": "Prisma Skana",
      "uniqueName": "/Lotus/Weapons/VoidTrader/PrismaSkana",
      "omegaAttenuation": 1.22,
      "totalDamage": 170,
      "trigger": "Melee",
      "description": "Forged from raw prisma crystals and infused with Void energy, this blade's pristine edge is honed razor-sharp to eviscerate even the most deadly of foes.",
      "accuracy": 100,
      "wallAttack": 510,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "prisma-skana.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "170.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f0/PrismaSkana.png/revision/latest?cb=20150612204850",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Skana",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 31.74,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. Bright Purity adds 100% melee damage and Purity (Corrosive, health) effects. ",
      "stance": "Iron Phoenix",
      "stanceNotes": "",
      "combo": "Wings and Beak",
      "component": false
    },
    {
      "name": "Prisma Tetra",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CorpusUMP/PrismaCorpusUMP",
      "omegaAttenuation": 1.45,
      "totalDamage": 38,
      "trigger": "Auto",
      "description": "When bathed in Void energy and prisma crystal, the simple Tetra becomes a beacon of style and intimidation.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "prisma-tetra.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "38.0",
      "flight": 100,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/PrismaTetra.png/revision/latest?cb=20150808232059",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Tetra",
      "disposition": 5,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; projectile munitions. ",
      "dmg": "Status",
      "rank": 100.690415759823,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prisma Twin Gremlins",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerBulbousSMG/Prisma/PrismaTwinGremlinsWeapon",
      "omegaAttenuation": 1.15,
      "totalDamage": 27,
      "trigger": "Auto",
      "description": "Fused with prisma crystals, these pristine Grineer sidearms are sure to intimidate any foe.",
      "accuracy": 36.363636,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "prisma-twin-gremlins.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "27.0",
      "flight": 65,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3a/PrismaTwinGremlins.png/revision/latest?cb=20180825235519",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Twin_Gremlins",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; projectile munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 47.5493588689618,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Prisma Veritux",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/VoidTraderArchsword/VTArchSwordWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 300,
      "trigger": "Melee",
      "description": "A rare object of beauty, this Archwing sword has been sheathed in prisma crystal and baptized in the Void’s energy.",
      "accuracy": 100,
      "wallAttack": 300,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "SpaceMelee",
      "imageName": "prisma-veritux.png",
      "tradable": false,
      "damage": "300.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ed/PrismaVerituxFix.png/revision/latest?cb=20150123055945",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prisma_Veritux",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prova",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/ElectroProd",
      "omegaAttenuation": 1.29,
      "totalDamage": 128,
      "trigger": "Melee",
      "description": "The Prova is a Melee Weapon that delivers a high-intensity shock to its target.",
      "accuracy": 100,
      "wallAttack": 384,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "prova.png",
      "category": "Machete",
      "tradable": false,
      "channeling": 1.5,
      "damage": "76.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/92/Prova8point2.png/revision/latest?cb=20131006131115",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prova",
      "disposition": 4,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Prova Vandal",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/VandalElectroProd",
      "omegaAttenuation": 1.29,
      "totalDamage": 198,
      "trigger": "Melee",
      "description": "A customized version of the vicious Prova, with metallic finish and Lotus decal.",
      "accuracy": 100,
      "wallAttack": 594,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "prova-vandal.png",
      "category": "Machete",
      "tradable": true,
      "channeling": 1.5,
      "damage": "118.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/61/VandalElectroProd.png/revision/latest?cb=20140619213520",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Prova_Vandal",
      "disposition": 4,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 34.26,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, low attack speed. Slam attacks always proc Electricity. Static Discharge deals 80% of weapon damage as Electricity damage to nearby enemies. ",
      "stance": "Sundering Weave",
      "stanceNotes": "",
      "combo": "Rapid Current",
      "component": false
    },
    {
      "name": "Pupacyst",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Staff/InfStaff/InfStaff",
      "omegaAttenuation": 1,
      "totalDamage": 284,
      "trigger": "Melee",
      "description": "A two-pronged attack; the bone-grafted cocoon at the tip of this staff rends flesh, while the viral mass living within spreads itself into the wounds of each new victim.",
      "accuracy": 100,
      "wallAttack": 473,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "pupacyst.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "145.0 viral",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1f/InfStaff.png/revision/latest?cb=20181013134554",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pupacyst",
      "disposition": 3,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 40.06,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, very low attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Cresting Peak",
      "component": false
    },
    {
      "name": "Pyrana",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/SawnOffShotgun/TennoHandShotgun",
      "omegaAttenuation": 0.69999999,
      "totalDamage": 264,
      "trigger": "Auto",
      "description": "Chew through the enemy with this vicious automatic hand shotgun.",
      "accuracy": 5,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "pyrana.png",
      "category": "Shotgun Sidearm",
      "tradable": false,
      "damage": "264.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/SawnOffShotgun.png/revision/latest?cb=20140604224124",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pyrana",
      "disposition": 1,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Pyrana Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimePyrana/PrimePyranaPistol",
      "omegaAttenuation": 0.60000002,
      "totalDamage": 240,
      "trigger": "Auto",
      "description": "Three kills in rapid succession to summon a second ethereal Pyrana for twice the deadly punch.",
      "accuracy": 6.060606,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "pyrana-prime.png",
      "category": "Shotgun Sidearm",
      "tradable": true,
      "damage": "240.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e3/PyranaPrime.png/revision/latest?cb=20180619191908",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Pyrana_Prime",
      "disposition": 1,
      "releaseDate": "2018 06 19",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 03 18",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; hitscan munitions. Killing 3 enemies within 3 seconds summons another Pyrana Prime for 5 seconds, which doubles your fire rate and current ammo (of which up to 12 remains after it is gone). ",
      "dmg": "Critical",
      "rank": 43.6635642126553,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Quanta",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpShockRifle/CrpShockRifle",
      "omegaAttenuation": 1.4,
      "totalDamage": 20,
      "trigger": "Held",
      "description": "This weapon was designed to assist with the excavation of mineral deposits from large asteroids, but has been adapted for military purposes.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "quanta.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "20.0 electricity",
      "projectile": "Discharge",
      "secondary": {
        "name": "Cube (Shot by player)",
        "speed": 4,
        "crit_chance": 5,
        "crit_mult": 1.5,
        "status_chance": 0.3,
        "blast": 600,
        "damage": "600.0 blast"
      },
      "secondaryArea": {
        "name": "Cube Explosion",
        "radius": 50,
        "blast": 150,
        "damage": "150.0 blast"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/CrpShockRifle.png/revision/latest?cb=20140731223522",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Quanta",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Quanta Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CrpShockRifle/QuantaVandal",
      "omegaAttenuation": 1.35,
      "totalDamage": 26,
      "trigger": "Held",
      "description": "A customized version of the Quanta, with metallic finish and Lotus decal.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "quanta-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "26.0 electricity",
      "projectile": "Discharge",
      "secondary": {
        "name": "Cube (Shot by player)",
        "speed": 4,
        "crit_chance": 5,
        "crit_mult": 1.5,
        "status_chance": 0.3,
        "blast": 600,
        "damage": "600.0 blast"
      },
      "secondaryArea": {
        "name": "Cube Explosion",
        "radius": 50,
        "blast": 150,
        "damage": "150.0 blast"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/91/QuantaVandal.png/revision/latest?cb=20150519212443",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Quanta_Vandal",
      "disposition": 5,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; beam munitions. Could do with punchthrough but build is tight as it is. Alt fire useful to learn Euclidean geometry. ✪",
      "dmg": "Crit/Status",
      "rank": 49.0822070014845,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Quartakk",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnFourBarrelRifle/GrnFourBarrelRifleWeapon",
      "omegaAttenuation": 1.25,
      "totalDamage": 49,
      "trigger": "Burst",
      "description": "Annihilate targets with four simultaneous shots from this high-caliber Grineer rifle.",
      "accuracy": 90.909088,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "quartakk.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "49.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8d/GrnFourBarrelRifleWeapon.png/revision/latest?cb=20171221214432",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Quartakk",
      "disposition": 4,
      "acquisition": "Cetus Bounty (Ghoul)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot; hitscan munitions. Four-shot burst is wasteful at times. ",
      "dmg": "Crit/Status",
      "rank": 67.6384682042344,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Quatz",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnAmphisPistol/GrnAmphisPistol",
      "omegaAttenuation": 1,
      "totalDamage": 29,
      "trigger": "Auto",
      "description": "A compact four-barreled design packing a self-charging capacitor that discharges upon every reload from empty. Features auto hip-fire and aimed fire is semi-auto, four-shot instant burst.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "quatz.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "11.0 electricity",
      "secondary": {
        "name": "Burst",
        "speed": 10,
        "crit_chance": 27,
        "crit_mult": 2.5,
        "status_chance": 0.2,
        "impact": 9,
        "slash": 7,
        "puncture": 2,
        "electricity": 11,
        "damage": "11.0 electricity"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/14/Quatz.png/revision/latest?cb=20190718204836",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Quatz",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. Reloading when the clip is emptied causes an Electric damage proc (with 100% status chance) around you. ",
      "dmg": "Critical",
      "rank": 51.0803508501983,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Quellor",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnRailjackRifle/RailjackRifleGun",
      "omegaAttenuation": 1,
      "totalDamage": 58,
      "trigger": "Auto",
      "description": "The Quellor was standard-issue to Dax Railjack crews of the Old War, dating back to the earliest, pre-Sigma craft. A rapid-fire assault rifle with a hefty magazine-size, the Quellor is an all-round workhorse. Also capable of large, short-range cryo-blasts.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "quellor.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "16.0 cold",
      "projectile": "?",
      "secondary": {
        "speed": 1,
        "crit_chance": 40,
        "crit_mult": 2.2,
        "status_chance": 0.1,
        "charge_time": 1.2,
        "shot_type": "?",
        "shot_speed": null,
        "impact": 600,
        "cold": 800,
        "damage": "800.0 cold"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4d/Quellor.png/revision/latest?cb=20191214131539",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Quellor",
      "disposition": 3,
      "acquisition": "Empyrean",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; unknown munitions. Secondary fire has a post-fire delay before the next action, whether it be reloading or going back to primary fire.  Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 46.6187226143525,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Rabvee Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee02/Tip/TipTen",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "rabvee.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Rabvee_Strike"
    },
    {
      "name": "Rahn Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/Set2/Barrel/SentAmpSet2BarrelPartA",
      "omegaAttenuation": 1,
      "type": "Amp",
      "imageName": "rahn-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Rahn_Prism"
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/GuardKubrowPetPowerSuit",
      "name": "Raksa Kubrow",
      "description": "Designed by the Orokin to be the perfect companion, a Kubrow was never far from its master's side. Loyal and obedient, these creatures made ideal bodyguards. Equipped with shield generators for added protection, their fierce growl could paralyze any attacker with fear.",
      "type": "Companion",
      "imageName": "raksa-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Raksa_Kubrow"
    },
    {
      "name": "Rakta Ballistica",
      "uniqueName": "/Lotus/Weapons/Syndicates/RedVeil/Pistols/RVBallistica",
      "omegaAttenuation": 1.15,
      "totalDamage": 300,
      "trigger": "Charge",
      "description": "This modified ballistica is the weapon of choice used by Red Veil Assassins to take out high-priority marks.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "rakta-ballistica.png",
      "category": "Crossbow",
      "tradable": true,
      "chargeTime": 1,
      "damage": 300,
      "projectile": "Projectile",
      "secondary": {
        "name": "Burst Shot",
        "speed": 11.43,
        "crit_chance": 5,
        "crit_mult": 1.5,
        "status_chance": 0,
        "shot_type": "Projectile",
        "shot_speed": 100,
        "impact": 3.75,
        "slash": 3.75,
        "puncture": 67.5
      },
      "statusChance": 10,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/2a/RVBallistica.png/revision/latest?cb=20141127183101",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rakta_Ballistica",
      "disposition": 4,
      "acquisition": "Red Veil (Exalted)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; projectile munitions. Blight (Viral, energy, movement speed) is useful at times. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 135.697999839974,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Rakta Cernos",
      "uniqueName": "/Lotus/Weapons/Syndicates/RedVeil/Bows/RVCernos",
      "omegaAttenuation": 1.2,
      "totalDamage": 470,
      "trigger": "Charge",
      "description": "A finely tuned instrument of assassination.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "rakta-cernos.png",
      "category": "Bow",
      "tradable": true,
      "damage": "235.0",
      "flight": 100,
      "projectile": "Projectile",
      "statusChance": 15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9c/SyndicateRVCernos.png/revision/latest?cb=20150902215135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rakta_Cernos",
      "disposition": 4,
      "acquisition": "Red Veil (Exalted)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; projectile munitions. Good syndicate proc (Viral + energy restore) helps weaken enemies for the Slash proc from Hunters Munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 51.7768716422179,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Rakta Dark Dagger",
      "uniqueName": "/Lotus/Weapons/Syndicates/RedVeil/Melee/RVDarkDagger",
      "omegaAttenuation": 0.51999998,
      "totalDamage": 246,
      "trigger": "Melee",
      "description": "Infiltrate undetected; reduced visibility when held. Then strike with confidence; hits to irradiated targets restores shields and creates overshields.",
      "accuracy": 100,
      "wallAttack": 738,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "rakta-dark-dagger.png",
      "category": "Dagger",
      "tradable": true,
      "channeling": 1.5,
      "damage": "96.0 radiation",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/46/RVDarkDagger.png/revision/latest?cb=20160916030245",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rakta_Dark_Dagger",
      "disposition": 1,
      "acquisition": "Red Veil (Exalted)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 30.1,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, low attack speed. Can use the Gleaming Blight augment for +100% Status Chance. Blight (Viral, energy, movement speed) effects. While wielded, enemies have reduced detection radius. Radiation procs restore shields and may grant overshields. ",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Raplak Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/Set1/Barrel/SentAmpSet1BarrelPartA",
      "omegaAttenuation": 1,
      "type": "Amp",
      "imageName": "raplak-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Raplak_Prism"
    },
    {
      "name": "Rathbone",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/ArchHammer/ArchHammer",
      "omegaAttenuation": 1,
      "totalDamage": 280,
      "trigger": "Melee",
      "description": "Using Archwing’s jets for thrust, this massive hammer crushes anything in its path.",
      "accuracy": 100,
      "wallAttack": 280,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "SpaceMelee",
      "imageName": "rathbone.png",
      "tradable": false,
      "damage": "280.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8a/ArchHammer.png/revision/latest?cb=20141024143734",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rathbone",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Rattleguts",
      "uniqueName": "/Lotus/Weapons/SolarisUnited/Secondary/SUModularSecondarySet1/Barrel/SUModularSecondaryBarrelCPart",
      "omegaAttenuation": 0.69999999,
      "type": "Secondary",
      "imageName": "rattleguts.png",
      "category": "Kitgun",
      "tradable": false,
      "acquisition": "Rude Zuud (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Rattleguts"
    },
    {
      "name": "Reaper Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Scythe/ReaperWeapon",
      "omegaAttenuation": 1.29,
      "totalDamage": 200,
      "trigger": "Melee",
      "description": "Reaper Prime is an ornamental scythe, with a blade forged from tempered rubidium.",
      "accuracy": 100,
      "wallAttack": 400,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "reaper-prime.png",
      "category": "Scythe",
      "tradable": true,
      "channeling": 1.5,
      "damage": "200.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/67/ReaperPrime.png/revision/latest?cb=20140314071744",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Reaper_Prime",
      "disposition": 4,
      "releaseDate": "2013 05 03",
      "vaultDate": "2015 04 01",
      "estimatedVaultDate": "2015 04 01",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Heavy Attack",
      "rank": 21.55,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, high attack speed. ✪",
      "stance": "Reaping Spiral",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Redeemer",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gunblade/TnoGunblade",
      "omegaAttenuation": 1.17,
      "totalDamage": 180,
      "trigger": "Melee",
      "description": "Striking with massive twin blades, the Redeemer fires the killing blow with its built-in shotgun.",
      "accuracy": 100,
      "wallAttack": 540,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "redeemer.png",
      "category": "Gunblade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "180.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d6/TnoGunblade.png/revision/latest?cb=20141127183103",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Redeemer",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Redeemer Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gunblade/RedeemerPrime/RedeemerPrimeWep",
      "omegaAttenuation": 1.17,
      "totalDamage": 212,
      "trigger": "Melee",
      "description": "Deal double-bladed, double-barreled death with this primed gunblade.",
      "accuracy": 100,
      "wallAttack": 636,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "redeemer-prime.png",
      "category": "Gunblade",
      "tradable": true,
      "channeling": 1.5,
      "damage": "212.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b9/RedeemerPrime.png/revision/latest?cb=20181218224304",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Redeemer_Prime",
      "disposition": 4,
      "releaseDate": "2018 12 12",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 09 18",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Hybrid",
      "rank": 32.27,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, low attack speed. Shots from the gunblade only deals Blast damage and status effects unless modded for 100% status, which would grant IPS effects too. Would be advisable to get a high status chance riven for Redeemer as it would allow for Crit-based modding instead.",
      "stance": "High Noon",
      "stanceNotes": "",
      "combo": "Single-tap Final Showdown into Heavy Attack",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Revenant/Revenant",
      "name": "Revenant",
      "description": "Rise from the broken remains of the Eidolon to seduce an army of zealous thralls.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Shield depletion smashes enemies within |RADIUS|m with a |DAMAGE| Damage knockdown shockwave.",
      "type": "Warframe",
      "imageName": "revenant.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 3228743,
      "introduced": "23.5",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/07/Revenant.png/revision/latest?cb=20180827015802",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Revenant",
      "acquisition": "Mask of the Lost One (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Rhino/Rhino",
      "name": "Rhino",
      "description": "Rhino is the heaviest Warframe, combining offensive and defensive capabilities.",
      "masteryReq": 0,
      "sprintSpeed": 0.94999999,
      "passiveDescription": "Emit a shockwave dealing |DAMAGE| damage after landing from a great height.",
      "type": "Warframe",
      "imageName": "rhino.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 3417636,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 0.95,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/40/RhinoNewLook.png/revision/latest?cb=20141124023302",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rhino",
      "acquisition": "Jackal (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Rhino/RhinoPrime",
      "name": "Rhino Prime",
      "description": "Takes Rhino's ground-shaking abilities to the next level with altered mod polarities that offer greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Emit a shockwave dealing |DAMAGE| damage after landing from a great height.",
      "type": "Warframe",
      "imageName": "rhino-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 2039064,
      "introduced": "12.4",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/54/RhinoPrimeNewLook.png/revision/latest?cb=20141124023312",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rhino_Prime",
      "releaseDate": "2014 03 06",
      "vaultDate": "2016 02 16",
      "estimatedVaultDate": "2016 02 16",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Ripkas",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerClaws/GrnClaws",
      "omegaAttenuation": 1.38,
      "totalDamage": 173,
      "trigger": "Melee",
      "description": "Motorized saw claw weapon.",
      "accuracy": 100,
      "wallAttack": 519,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "ripkas.png",
      "category": "Claws",
      "tradable": false,
      "channeling": 1.5,
      "damage": "173.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/38/GrnClaws.png/revision/latest?cb=20150320022623",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Ripkas",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 40.61,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, low attack speed. Hunter's Bonesaw increases damage by 90% and status chance by 60% on grounded enemies. ",
      "stance": "Malicious Raptor",
      "stanceNotes": "",
      "combo": "Jagged Gash",
      "component": false
    },
    {
      "name": "Rubico",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/FiveShotSniper/FiveShotSniper",
      "omegaAttenuation": 0.69999999,
      "totalDamage": 179.99998,
      "trigger": "Semi",
      "description": "Scope out the enemy with this long-range revolver style rifle.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "rubico.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "180.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/FiveShotSniper.png/revision/latest?cb=20151204013135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rubico",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Rubico Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/RubicoPrime/RubicoPrimeWeapon",
      "omegaAttenuation": 0.64999998,
      "totalDamage": 187,
      "trigger": "Semi",
      "description": "For the hunter, the apex of the sniper's art. For the hunted, a gateway to the next life.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "rubico-prime.png",
      "category": "Sniper Rifle",
      "tradable": true,
      "damage": "187.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e6/RubicoPrime.png/revision/latest?cb=20180929023357",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Rubico_Prime",
      "disposition": 1,
      "releaseDate": "2018 09 25",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 06 18",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; hitscan munitions. Sniper combo counter rampup is amazing (min. 1), zooming in gives additive bonus to Crit Multiplier (35%/50%). High direct damage potential and smooth handling makes Rubico Prime a popular choice for Eidolon Hunting. ",
      "dmg": "Crit/Status",
      "rank": 43.0076809620811,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Runway",
      "uniqueName": "/Lotus/Types/Vehicles/Hoverboard/HoverboardParts/PartComponents/HoverboardCorpusC/HoverboardCorpusCDeck",
      "omegaAttenuation": 1,
      "type": "Vehicle",
      "imageName": "runway.png",
      "category": "K-Drive",
      "tradable": false,
      "acquisition": "Roky (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Runway"
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/AdventurerKubrowPetPowerSuit",
      "name": "Sahasa Kubrow",
      "description": "Enterprising Orokin genetic designers recognized that the Kubrow's affinity for games of fetch could be used for more serious endeavors. They soon developed a strain adept at reconnaissance and contraband recovery. Tenno often used the creatures to help resupply while in the field.",
      "type": "Companion",
      "imageName": "sahasa-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Sahasa_Kubrow"
    },
    {
      "name": "Sancti Castanas",
      "uniqueName": "/Lotus/Weapons/Syndicates/NewLoka/Pistols/NLCastanas",
      "omegaAttenuation": 1.35,
      "totalDamage": 300,
      "trigger": "Active",
      "description": "This remotely detonated electrical trap is used by devotees of New Loka to protect their temples and shrines.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "sancti-castanas.png",
      "category": "Thrown",
      "tradable": true,
      "damage": "300.0 electricity",
      "flight": 30,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/ca/NLCastanas.png/revision/latest?cb=20141127182955",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sancti_Castanas",
      "disposition": 5,
      "acquisition": "New Loka (Flawless)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; projectile munitions. Purity (Corrosive, health) can be useful at times. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 82.4852813742386,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Sancti Magistar",
      "uniqueName": "/Lotus/Weapons/Syndicates/NewLoka/Melee/NLMagistar",
      "omegaAttenuation": 1.09,
      "totalDamage": 239.99998,
      "trigger": "Melee",
      "description": "Each charged attack turns the enemy’s pain into a healing pulse that washes over allies. Also, creates resistance to Status Effects when held.",
      "accuracy": 100,
      "wallAttack": 480,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "sancti-magistar.png",
      "category": "Hammer",
      "tradable": true,
      "channeling": 1.5,
      "damage": "240.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/15/NLMagistar.png/revision/latest?cb=20160916030244",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sancti_Magistar",
      "disposition": 3,
      "acquisition": "New Loka (Flawless)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 65,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, high attack speed. Suffers from relatively poor consistency. Innate 10% Blast effect proc. Reduces damage from status effects by 75%. Charge attacks heals nearby allies based on damage dealt. ",
      "stance": "Shattering Storm",
      "stanceNotes": "",
      "combo": "Falling Rock",
      "component": false
    },
    {
      "name": "Sancti Tigris",
      "uniqueName": "/Lotus/Weapons/Syndicates/NewLoka/LongGuns/NLTigris",
      "omegaAttenuation": 0.60000002,
      "totalDamage": 1260,
      "trigger": "Duplex",
      "description": "Echo nature's violent beauty with this special Tigris.",
      "accuracy": 6.4516129,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "sancti-tigris.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "1260.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/94/SyndicateNLTigris.png/revision/latest?cb=20150902215134",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sancti_Tigris",
      "disposition": 1,
      "acquisition": "New Loka (Flawless)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; hitscan munitions. Duplex trigger might take a while to get used to. Purity (Corrosive, health) effect can be useful. Suffers from relatively poor consistency. ",
      "dmg": "Critical",
      "rank": 73.1547532151501,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sarpa",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gunblade/GunbladeAutomatic/TnoGunbladeAutomatic",
      "omegaAttenuation": 1.24,
      "totalDamage": 160,
      "trigger": "Melee",
      "description": "Makes sweeping cuts punctuated by bursts of heavy gunfire.",
      "accuracy": 100,
      "wallAttack": 480,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "sarpa.png",
      "category": "Gunblade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "160.0",
      "statusChance": 28,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c2/TnoGunbladeAuto.png/revision/latest?cb=20160819234433",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sarpa",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Heavy Attack",
      "rank": 59.21,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, low attack speed. ",
      "stance": "Bullet Dance",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Saryn/Saryn",
      "name": "Saryn",
      "description": "Saryn's venomous attacks are horrifyingly effective against organic and synthetic enemies, and her ability to 'shed' her skin makes her very elusive.",
      "masteryReq": 0,
      "sprintSpeed": 0.94999999,
      "passiveDescription": "Status Effects inflicted upon enemies last |DURATION|% longer.",
      "type": "Warframe",
      "imageName": "saryn.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 3947584,
      "introduced": "7",
      "sex": "Female",
      "sprint": 0.95,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d9/SarynNewLook.png/revision/latest?cb=20141124023331",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Saryn",
      "acquisition": "Kela De Thaym (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Saryn/SarynPrime",
      "name": "Saryn Prime",
      "description": "A golden blossom conceals deadly nectar. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Status Effects inflicted upon enemies last |DURATION|% longer.",
      "type": "Warframe",
      "imageName": "saryn-prime.png",
      "tradable": true,
      "aura": "vazarin",
      "conclave": true,
      "color": 3223605,
      "introduced": "18.4.12",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/08/SarynPrimeLarge.png/revision/latest?cb=20160217235603",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Saryn_Prime",
      "releaseDate": "2016 02 16",
      "vaultDate": "2017 12 12",
      "estimatedVaultDate": "2017 12 12",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Scindo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Axe/AxeWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 200,
      "trigger": "Melee",
      "description": "The Scindo is a heavy war axe crafted by the Tenno. Reduced speed and agility is balanced by heavy, devastating strikes capable of connecting with multiple targets at once.",
      "accuracy": 100,
      "wallAttack": 400,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "scindo.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "200.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b6/DEScindo.png/revision/latest?cb=20140416121340",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Scindo",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Scindo Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Axe/PrimeScindo/PrimeScindoWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 250,
      "trigger": "Melee",
      "description": "An ancient executioners weapon, the honor of decapitation by the Scindo Prime was reserved for the Orokin's most respected enemies.",
      "accuracy": 100,
      "wallAttack": 500,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "scindo-prime.png",
      "category": "Heavy Blade",
      "tradable": true,
      "channeling": 1.5,
      "damage": "250.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/38/PrimeScindo.png/revision/latest?cb=20140923195818",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Scindo_Prime",
      "disposition": 3,
      "releaseDate": "2014 09 23",
      "vaultDate": "2016 08 23",
      "estimatedVaultDate": "2016 08 23",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Critical/Crit & Status",
      "rank": 39.42,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, low attack speed. ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "name": "Scoliac",
      "uniqueName": "/Lotus/Weapons/Infested/Melee/Whip/InfestedWhip/InfestedWhipWeapon",
      "omegaAttenuation": 1.3,
      "totalDamage": 150,
      "trigger": "Melee",
      "description": "The Scoliac Whip is a nasty parasitic growth of sinew and bone that can inflict heart stopping <DT_POISON>Toxin Damage with attacks.",
      "accuracy": 100,
      "wallAttack": 450,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "scoliac.png",
      "category": "Whip",
      "tradable": false,
      "channeling": 1.5,
      "damage": "150.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/34/DEScoliac2.png/revision/latest?cb=20140407035857",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Scoliac",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Heavy Attack",
      "rank": 29.9,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, very high attack speed. ✪",
      "stance": "Burning Wasp",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Scourge",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnPriestSpear/TnPriestSpearGun",
      "omegaAttenuation": 1.15,
      "totalDamage": 125,
      "trigger": "Auto",
      "description": "Blast targets with corrosive plasma projectiles, or toss the scepter to inflict an energy field upon nearby enemies that amplifies their brain waves to attract bullets.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "scourge.png",
      "category": "Speargun",
      "tradable": false,
      "damage": "70.0 corrosive",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Spear Explosion",
        "corrosive": 50,
        "damage": "50.0 corrosive"
      },
      "secondaryArea": {
        "name": "Throw Spear",
        "status_chance": 30,
        "speed": 1,
        "impact": 105,
        "slash": 22.5,
        "puncture": 22.5
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c8/PriestSpearGun.png/revision/latest?cb=20170629034316",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Scourge",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; projectile munitions. Alt fire creates a localized bullet attractor field on nearby enemies' head. ✪",
      "dmg": "Status",
      "rank": 38.6832396974191,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Secura Dual Cestra",
      "uniqueName": "/Lotus/Weapons/Syndicates/PerrinSequence/Pistols/PSDualCestra",
      "omegaAttenuation": 1.3,
      "totalDamage": 28,
      "trigger": "Auto",
      "description": "The favored side-arms of Perrin Sequence executives, these pistols have been modified to improve efficiency and killing potential.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "secura-dual-cestra.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "28.0",
      "flight": 100,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8f/PSDualCestra.png/revision/latest?cb=20141127182956",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Secura_Dual_Cestra",
      "disposition": 4,
      "acquisition": "The Perrin Sequence (Partner)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very low damage per shot; projectile munitions. Sequence (Radiation, shields) can be useful at times. ✪",
      "dmg": "Crit/Status",
      "rank": 57.4494897427832,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Secura Lecta",
      "uniqueName": "/Lotus/Weapons/Syndicates/PerrinSequence/Melee/PSLecta",
      "omegaAttenuation": 0.5,
      "totalDamage": 176,
      "trigger": "Melee",
      "description": "Whip the enemy out of their ill-gotten gains; double credit drops on kills.",
      "accuracy": 100,
      "wallAttack": 528,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "secura-lecta.png",
      "category": "Whip",
      "tradable": true,
      "channeling": 1.5,
      "damage": "80.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0c/PSLecta.png/revision/latest?cb=20160916030244",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Secura_Lecta",
      "disposition": 1,
      "acquisition": "The Perrin Sequence (Partner)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Heavy Attack",
      "rank": 26.89,
      "tierRank": 3,
      "weaponNotes": "Low damage per hit, very high attack speed. Killing an enemy with this weapon equipped gives bonus credits.",
      "stance": "Burning Wasp",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "name": "Secura Penta",
      "uniqueName": "/Lotus/Weapons/Syndicates/PerrinSequence/LongGuns/PSPenta",
      "omegaAttenuation": 1.3,
      "totalDamage": 375,
      "trigger": "Active",
      "description": "Ruthless and efficient, just like the free-market.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "secura-penta.png",
      "category": "Launcher",
      "tradable": true,
      "damage": "75.0",
      "flight": 25,
      "projectile": "Projectile",
      "secondary": {
        "name": "Grenade Detonation",
        "crit_chance": 26,
        "crit_mult": 2,
        "status_chance": 0.3,
        "blast": 300,
        "damage": "300.0 blast"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/69/SyndicatePSPenta.png/revision/latest?cb=20150902215135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Secura_Penta",
      "disposition": 4,
      "acquisition": "The Perrin Sequence (Partner)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; projectile munitions. Napalm Grenades adds 30% Status Chance (not affected by mods) and causes instant explosions while leaving a burning patch on the ground. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 55.5799598391955,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Seer",
      "uniqueName": "/Lotus/Weapons/Grineer/GrineerPistol/GrnScopedPistolPlayer",
      "omegaAttenuation": 1.5,
      "totalDamage": 101,
      "trigger": "Semi",
      "description": "Captain Vor's prized Orokin-Grineer hybrid pistol has an average rate of fire, but it has high damage and superior zoom capabilities.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "seer.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "101.01",
      "flight": 200,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/75/CaptainVorPistol.png/revision/latest?cb=20130713203008",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Seer",
      "disposition": 5,
      "acquisition": "Captain Vor (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. ",
      "dmg": "Status",
      "rank": 223.125775020647,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sepfahn Strike",
      "uniqueName": "/Lotus/Weapons/Ostron/Melee/ModularMelee02/Tip/TipNine",
      "omegaAttenuation": 1,
      "type": "Melee",
      "imageName": "sepfahn.png",
      "category": "Zaw",
      "tradable": false,
      "acquisition": "Hok's Anvil (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Sepfahn_Strike"
    },
    {
      "name": "Serro",
      "uniqueName": "/Lotus/Weapons/Corpus/Melee/Polearm/CorpusPolearm01/CorpusPolearmWeapon",
      "omegaAttenuation": 1.38,
      "totalDamage": 234,
      "trigger": "Melee",
      "description": "Developed as an energy saw to scrap obsolete ships, this tool was quickly banned when rebels in the Sedna region discovered it also made an excellent weapon.",
      "accuracy": 100,
      "wallAttack": 390,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "serro.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "138.0 electricity",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9f/Corpuspolearm.png/revision/latest?cb=20140526165634",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Serro",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 36.26,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, low attack speed. Suffers from relatively poor consistency. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Cresting Peak",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/ShadePowerSuit",
      "name": "Shade",
      "description": "With 'Revenge' and 'Ghost' as default Precepts, Shade is well suited for stealth gameplay. Shade also comes with a burst laser pistol.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "shade.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Shade"
    },
    {
      "name": "Shaku",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Nunchaku/TnoNunchaku/TnoNunchaku",
      "omegaAttenuation": 1.35,
      "totalDamage": 180,
      "trigger": "Melee",
      "description": "With these blazing fast nunchaku, the enemy will never know what hit them.",
      "accuracy": 100,
      "wallAttack": 540,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "shaku.png",
      "category": "Nunchaku",
      "tradable": false,
      "channeling": 1.5,
      "damage": "180.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b6/TnoNunchaku.png/revision/latest?cb=20151210032859",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Shaku",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 43.52,
      "tierRank": 0,
      "weaponNotes": "Low damage per hit, very high attack speed. ",
      "stance": "Atlantis Vulcan",
      "stanceNotes": "",
      "combo": "Molten Whirlpool",
      "component": false
    },
    {
      "name": "Shedu",
      "uniqueName": "/Lotus/Weapons/Sentients/Shedu/SheduHeavyWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 158,
      "trigger": "Auto",
      "description": "This arm-cannon, ripped from a Sentient, rapid-fires thermal pulses that explode in an electrical blast. Features an ammo-less quick charge capacitor, that emits a knock-back pulse and strips Sentient damage resistances when fully discharged.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "shedu.png",
      "category": "Arm-Cannon",
      "tradable": false,
      "damage": "71.0 heat",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Radial Attack",
        "electricity": 87,
        "damage": "87.0 electricity"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/Shedu.png/revision/latest?cb=20191217140732",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Shedu",
      "disposition": 3,
      "acquisition": "Symbilysts (Railjack Anomaly)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; projectile munitions. Depleting your ammo releases a pulse that deals Electric damage, stuns, and resets sentient resistance. ✪",
      "dmg": "Crit/Status",
      "rank": 39.5811388300842,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Sheev",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrineerCombatKnife/GrineerCombatKnife",
      "omegaAttenuation": 1.25,
      "totalDamage": 270,
      "trigger": "Melee",
      "description": "Built for close combat, the Sheev's plasma blade slices through flesh and armor with equal ease.",
      "accuracy": 100,
      "wallAttack": 810,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "sheev.png",
      "category": "Dagger",
      "tradable": false,
      "channeling": 1.5,
      "damage": "270.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ed/GrineerCombatKnife.png/revision/latest?cb=20140918035807",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sheev",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 39.76,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, very low attack speed. Slam attacks guarantees heat proc. ",
      "stance": "Stinging Thorn",
      "stanceNotes": "",
      "combo": "Carving Spike",
      "component": false
    },
    {
      "name": "Shwaak Prism",
      "uniqueName": "/Lotus/Weapons/Sentients/OperatorAmplifiers/Set1/Barrel/SentAmpSet1BarrelPartB",
      "omegaAttenuation": 1,
      "type": "Amp",
      "imageName": "shwaak-prism.png",
      "tradable": false,
      "acquisition": "The Quills (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Shwaak_Prism"
    },
    {
      "name": "Sibear",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Hammer/IceHammer/IceHammer",
      "omegaAttenuation": 1.35,
      "totalDamage": 270,
      "trigger": "Melee",
      "description": "Ice in motion can crush mountains, this frozen hammer is no different.",
      "accuracy": 100,
      "wallAttack": 540,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "sibear.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "130.0 cold",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/IceHammer.png/revision/latest?cb=20160407005429",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sibear",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 40.82,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, low attack speed. Charge attacks gives +50% status chance for 4s. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "",
      "combo": "Raging Whirlwind",
      "component": false
    },
    {
      "name": "Sicarus",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/BurstPistol",
      "omegaAttenuation": 1.2,
      "totalDamage": 30,
      "trigger": "Burst",
      "description": "The Sicarus fires 3-round bursts, which provides a balance between the lethality of auto-pistols and the accuracy of semi-automatic pistols.",
      "accuracy": 20,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "sicarus.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/59/Sicarus.png/revision/latest?cb=20130426074741",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sicarus",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sicarus Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeSicarus/PrimeSicarusPistol",
      "omegaAttenuation": 1.1,
      "totalDamage": 50,
      "trigger": "Burst",
      "description": "The Sicarus Prime is an ornamental firearm that fires rounds in rapid bursts, providing a balance between the lethality of auto-pistols and the accuracy of semi-automatic pistols.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "sicarus-prime.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "50.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d7/DESicarus_Prime.png/revision/latest?cb=20140124172933",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sicarus_Prime",
      "disposition": 3,
      "releaseDate": "2013 11 20",
      "vaultDate": "2015 10 06",
      "estimatedVaultDate": "2015 10 06",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. Three-round burst is wasteful at times. ",
      "dmg": "Crit/Status",
      "rank": 56.7320508075689,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Sigma & Octantis",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/SwordsAndBoards/SundialSwordBoard/SundialBoardSword",
      "omegaAttenuation": 1,
      "totalDamage": 174,
      "trigger": "Melee",
      "description": "Deadly slashes from the Sigma sword are matched only by the force of the Octantis shield when thrown from the air.",
      "accuracy": 100,
      "wallAttack": 522,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "sigma-&-octantis.png",
      "category": "Sword and Shield",
      "tradable": false,
      "channeling": 1.5,
      "damage": "174.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/5a/SundialSwordAndBoard.png/revision/latest?cb=20171031145328",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sigma_%26_Octantis",
      "disposition": 3,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 27.13,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, high attack speed. ",
      "stance": "Final Harbinger",
      "stanceNotes": "",
      "combo": "Null Warning",
      "component": false
    },
    {
      "name": "Silva & Aegis",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/SwordsAndBoards/MeleeContestWinnerOne/TennoSwordShield",
      "omegaAttenuation": 1,
      "totalDamage": 98,
      "trigger": "Melee",
      "description": "This fiery sword and shield combination perfects the balance of Tenno offense and defense prowess. In the hands of a Master, even a defensive tool like a shield can be used as a weapon.",
      "accuracy": 100,
      "wallAttack": 294,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "silva-&-aegis.png",
      "category": "Sword and Shield",
      "tradable": false,
      "channeling": 1.5,
      "damage": "98.0 heat",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/10/TennoSwordShield.png/revision/latest?cb=20140718094659",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Silva_%26_Aegis",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Silva & Aegis Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeSilvaAegis/PrimeSilvaAegis",
      "omegaAttenuation": 1,
      "totalDamage": 318,
      "trigger": "Melee",
      "description": "A perfectly crafted pairing, this mace and shield combination is sculpted for exhibition but balanced for the battlefield.",
      "accuracy": 100,
      "wallAttack": 954,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "silva-&-aegis-prime.png",
      "category": "Sword and Shield",
      "tradable": true,
      "channeling": 1.5,
      "damage": "318.0 heat",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f7/SilvaAegisPrime.png/revision/latest?cb=20170530191856",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Silva_%26_Aegis_Prime",
      "disposition": 3,
      "releaseDate": "2017 05 30",
      "vaultDate": "2019 03 27",
      "estimatedVaultDate": "2019 03 27",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 27.74,
      "tierRank": 2,
      "weaponNotes": "Very high damage per hit, very low attack speed. Blocking adds up to 4 charges that increases critical and status chance by 15% additively. Avenging Truth absorbs 50% of incoming damage and releases it on the next charge attack and Truth (Gas, health, parkour) effects. ",
      "stance": "Final Harbinger",
      "stanceNotes": "",
      "combo": "Null Warning",
      "component": false
    },
    {
      "name": "Simulor",
      "uniqueName": "/Lotus/Weapons/Cephalon/Primary/CephPrimary/CephPrimary",
      "omegaAttenuation": 1.2,
      "totalDamage": 75,
      "trigger": "Active",
      "description": "Creates miniature gravitational singularities that can be used for scientific study or self-defense.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "simulor.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "50.0 magnetic",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Orb Explosion",
        "crit_chance": 12,
        "crit_mult": 2,
        "status_chance": 0.3,
        "magnetic": 75,
        "damage": "75.0 magnetic"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/9a/CephPrimary.png/revision/latest?cb=20150625220225",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Simulor",
      "disposition": 4,
      "acquisition": "Cephalon Simaris (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Skana",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/LongSword/LongSword",
      "omegaAttenuation": 1.22,
      "totalDamage": 120,
      "trigger": "Melee",
      "description": "Before all other weapons, Tenno master the Skana. This simple blade becomes immensely powerful in the hands of a master. For Tenno, it is the foundation of their fighting style and a pillar of their culture.",
      "accuracy": 100,
      "wallAttack": 360,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "skana.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "120.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/cf/DESkana.png/revision/latest?cb=20140407035855",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Skana",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Skana Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/LongSword/SkanaPrime",
      "omegaAttenuation": 1.22,
      "totalDamage": 210,
      "trigger": "Melee",
      "description": "A basic blade known as a Skana. It is widely used by the Tenno. Prime model offers slightly increased damage.",
      "accuracy": 100,
      "wallAttack": 630,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "skana-prime.png",
      "category": "Sword",
      "tradable": false,
      "channeling": 1.5,
      "damage": "210.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/05/SkanaPrime.png/revision/latest?cb=20130426080650",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Skana_Prime",
      "disposition": 4,
      "acquisition": "Unobtainable (Founders)",
      "checked": false,
      "unobtainable": true,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Skiajati",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/UmbraKatana/UmbraKatana",
      "omegaAttenuation": 1,
      "totalDamage": 175,
      "trigger": "Melee",
      "description": "Forged of steel grafted from Umbra's flesh, this elegant Nikana unites with its Warframe to form a single being of seething purpose.",
      "accuracy": 100,
      "wallAttack": 375,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "skiajati.png",
      "category": "Nikana",
      "tradable": false,
      "channeling": 1.5,
      "damage": "175.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ac/Skiajati.png/revision/latest?cb=20180615221604",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Skiajati",
      "disposition": 3,
      "acquisition": "The Sacrifice (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 25.63,
      "tierRank": 3,
      "weaponNotes": "Low damage per hit, very high attack speed. Grants invisibility upon finisher, which will expire when attacking, using an ability, or after 5s.",
      "stance": "Decisive Judgement",
      "stanceNotes": "",
      "combo": "Swift Retribution",
      "component": false,
      "specialNote": "Item are fully ranked when obtained."
    },
    {
      "uniqueName": "/Lotus/Types/Game/CatbrowPet/CheshireCatbrowPetPowerSuit",
      "name": "Smeeta Kavat",
      "description": "This sly feline is playful yet devious.",
      "type": "Companion",
      "imageName": "smeeta-kavat.png",
      "category": "Kavat",
      "tradable": false,
      "acquisition": "Kavat Incubator Upgrade Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Smeeta_Kavat"
    },
    {
      "name": "Snipetron",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/SniperRifle",
      "omegaAttenuation": 1.3,
      "totalDamage": 180,
      "trigger": "Semi",
      "description": "Manufactured by the Corpus, the Snipetron is a powerful and accurate rifle that sports optical zoom capabilities. Perfect for long range engagements.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "snipetron.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "180.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1a/CorpusSniperRifle.png/revision/latest?cb=20180418123152",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Snipetron",
      "disposition": 4,
      "acquisition": "Operation Plague Star (Cetus)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Snipetron Vandal",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/VandalSniperRifle",
      "omegaAttenuation": 1.25,
      "totalDamage": 200,
      "trigger": "Semi",
      "description": "A customized version of the elusive Snipetron, with metallic finish and Lotus decal.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "snipetron-vandal.png",
      "category": "Sniper Rifle",
      "tradable": true,
      "damage": "200.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/76/DESnipertronVandal.png/revision/latest?cb=20180418123231",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Snipetron_Vandal",
      "disposition": 4,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Sniper combo counter rampup is average (min. 3), zooming in gives additive bonus to headshots (30%/50%). ",
      "dmg": "Crit/Status",
      "rank": 53.3911649915626,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Sobek",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/DoubleBarrelShotgun",
      "omegaAttenuation": 1.33,
      "totalDamage": 350,
      "trigger": "Auto",
      "description": "Sobek is a rapid-firing Grineer shotgun that has reduced damage per shot but boasts extra large magazine capacity.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "sobek.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "350.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f5/GrnDBSG.png/revision/latest?cb=20130713214005",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sobek",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Shattering Justice (Blast, Health, Armor) can make it reach 100% status chance while Acid Shells can be used to provide some AOE damage. ",
      "dmg": "Status",
      "rank": 63.1833001326704,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Soma",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/TennoAR",
      "omegaAttenuation": 1,
      "totalDamage": 12,
      "trigger": "Auto",
      "description": "Accuracy coupled with a massive magazine makes the Soma assault rifle a formidable weapon.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "soma.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "12.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a5/U10DesignCouncilTennoAR.png/revision/latest?cb=20130914111405",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Soma",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Soma Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeSoma/PrimeSomaRifle",
      "omegaAttenuation": 1,
      "totalDamage": 12,
      "trigger": "Auto",
      "description": "Known for taking down whole squads with its single massive magazine, few weapons were as feared as the Prime Soma.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "soma-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "12.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a6/PrimeSoma.png/revision/latest?cb=20141217030947",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Soma_Prime",
      "disposition": 3,
      "releaseDate": "2014 12 16",
      "vaultDate": "2016 11 22",
      "estimatedVaultDate": "2016 11 22",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot; hitscan munitions. Best paired with Frost Prime and Scindo Prime. ",
      "dmg": "Crit/Status",
      "rank": 57.5013511046644,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Sonicor",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpAirPistol/CrpAirPistolArray",
      "omegaAttenuation": 1.05,
      "totalDamage": 50,
      "trigger": "Semi",
      "description": "Blasts targets with a massive wave of sonic energy. Results reported to be: 'Very Satisfying'.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "sonicor.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "150.0",
      "flight": 80,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a8/CrpAirPistolArray.png/revision/latest?cb=20151002090143",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sonicor",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. The tenno space program has been replaced by the tenno ragdoll simulator. Explosions may cause status effects. Suffers from relatively poor consistency. ",
      "dmg": "Raw/Status",
      "rank": 95.1130553854464,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Spectra",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/CrpLaserPistol",
      "omegaAttenuation": 1.49,
      "totalDamage": 18,
      "trigger": "Held",
      "description": "While its intended design is for deep space construction, the concentrated laser beam of the Spectra is highly effective against organic and synthetic enemies.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "spectra.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "18.0",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7a/Spectra.png/revision/latest?cb=20131006130117",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Spectra",
      "disposition": 5,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Spectra Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CorpusModularPistol/Vandal/CrpLaserPistolVandal",
      "omegaAttenuation": 1.45,
      "totalDamage": 22,
      "trigger": "Held",
      "description": "A special-order Corpus cutting tool for master crafters only. Features distinctive azurite plating and a focusing crystal of precision clarity and cut.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "spectra-vandal.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "22.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/82/SpectraVandal.png/revision/latest?cb=20190523234911",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Spectra_Vandal",
      "disposition": 5,
      "acquisition": "Operation: Hostile Mergers",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot; beam munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 45.1235384061671,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Spira",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/LiDagger/LiDagger",
      "omegaAttenuation": 1.2,
      "totalDamage": 82,
      "trigger": "Auto",
      "description": "A flash of red ribbon is the last thing most victims of these throwing-daggers see.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "spira.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "82.0",
      "flight": "???",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c5/LiDagger.png/revision/latest?cb=20150924014336",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Spira",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Spira Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/PrimeLiDagger/PrimeLiDagger",
      "omegaAttenuation": 1.15,
      "totalDamage": 60,
      "trigger": "Auto",
      "description": "These rare, braided throwing daggers were a favorite tool of high ranking Orokin assassins.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "spira-prime.png",
      "category": "Thrown",
      "tradable": true,
      "damage": "60.0",
      "flight": 70,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/02/PrimeLiDagger.png/revision/latest?cb=20160207121252",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Spira_Prime",
      "disposition": 4,
      "releaseDate": "2016 02 16",
      "vaultDate": "2017 12 12",
      "estimatedVaultDate": "2017 12 12",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot; projectile munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 53.4495901363954,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Staticor",
      "uniqueName": "/Lotus/Weapons/Corpus/Pistols/CrpElectroMag/CrpElectroMag",
      "omegaAttenuation": 0.52999997,
      "totalDamage": 132,
      "trigger": "Charge",
      "description": "Send a massive charge of potential energy hurling toward unfortunate targets.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "staticor.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "44.0 radiation",
      "flight": 50,
      "projectile": "Projectile",
      "secondaryArea": {
        "name": "Fully Charged Explosion",
        "radius": 800,
        "radiation": 352,
        "damage": "352.0 radiation"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/64/CrpElectroMag.png/revision/latest?cb=20160205013734",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Staticor",
      "disposition": 1,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "High damage per shot; projectile munitions. Bolt and resulting explosion has independent chance to proc status effects, making it highly capable of stripping armor. ",
      "dmg": "Crit/Status",
      "rank": 38.4736441353328,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Stinger",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/SentBioWeapon",
      "omegaAttenuation": 1.3150001,
      "totalDamage": 15,
      "trigger": "Semi",
      "description": "Standard issue weapon for Djinn Sentinel. Fires poisonous projectiles.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "stinger.png",
      "tradable": false,
      "damage": "15.0 toxin",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/12/DESentinelStinger.png/revision/latest?cb=20140122154228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stinger",
      "disposition": 5,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Stradavar",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TennoTommyGun/TennoTommyGunRifle",
      "omegaAttenuation": 1.05,
      "totalDamage": 28,
      "trigger": "Auto",
      "description": "A high-capacity, high-damage enforcer, this weapon can switch between the high crit semi-automatic and full automatic firing modes.",
      "accuracy": 14.285714,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "stradavar.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "28.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 5,
        "crit_chance": 28,
        "crit_mult": 2,
        "status_chance": 0.2,
        "shot_type": "Hit-Scan",
        "impact": 7.5,
        "slash": 12.5,
        "puncture": 30
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8e/TennoTommyGun.png/revision/latest?cb=20160512010246",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stradavar",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Stradavar Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeStradavar/PrimeStradavarGun",
      "omegaAttenuation": 1.05,
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Between measured staccato and staggering crescendo, Stradavar Prime never fails to call down a devastating finale.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "stradavar-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "30.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 3.33,
        "crit_chance": 30,
        "crit_mult": 2.8,
        "status_chance": 0.2,
        "shot_type": "Hit-Scan",
        "impact": 8,
        "slash": 48,
        "puncture": 24
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d2/StradavarPrime.png/revision/latest?cb=20190925153736",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stradavar_Prime",
      "disposition": 3,
      "releaseDate": "2019 03 27",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 12 19",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot; hitscan munitions. Can alternate between semi-auto (better DPS) and full-auto (useful for breaking nullifier bubbles). Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 53.8476798574163,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Strun",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/Shotgun",
      "omegaAttenuation": 1.4,
      "totalDamage": 300,
      "trigger": "Semi",
      "description": "The Strun is a standard shotgun. Reliable, versatile and deadly.",
      "accuracy": 4,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 1,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "strun.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "300.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/26/Strun.png/revision/latest?cb=20161125225500",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Strun",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Strun Wraith",
      "uniqueName": "/Lotus/Weapons/Tenno/Shotgun/ShotgunVandal",
      "omegaAttenuation": 1.35,
      "totalDamage": 400,
      "trigger": "Semi",
      "description": "A different take on a familiar shotgun, the Strun Wraith features unique styling.",
      "accuracy": 6.6666665,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "strun-wraith.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "400.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3b/WraithStrun.png/revision/latest?cb=20161125225323",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Strun_Wraith",
      "disposition": 5,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Required to mod for 100% status chance. ",
      "dmg": "Status",
      "rank": 56.1165750888103,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Stubba",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnUzi/GrnUziWeapon",
      "omegaAttenuation": 1.35,
      "totalDamage": 33,
      "trigger": "Auto",
      "description": "Inflict rapid-fire bursts of pain with this Grineer submachine gun.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "stubba.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "33.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/17/GrnUziWeapon.png/revision/latest?cb=20171221214433",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stubba",
      "disposition": 5,
      "acquisition": "Cetus Bounty (Ghoul)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. Suffers from relatively poor consistency. ✪",
      "dmg": "Crit/Status",
      "rank": 55.1231056256177,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Stug",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrineerCrossbow/GrineerGooGun",
      "omegaAttenuation": 1.48,
      "totalDamage": 85,
      "trigger": "Auto",
      "description": "Firing a sticky, toxic, explosive compound, the Stug Gel Gun offers multiple ejection modes, delivering maximum damage in all situations.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "stug.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "4.0 corrosive",
      "flight": 35,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fc/GrineerCrossbowGooGun.png/revision/latest?cb=20140124172529",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Stug",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very high damage per shot; projectile munitions. Each shot launches a blob. Up to six blobs can accumulate at a single site on the target. Alt-fire charges the weapon to launch a single, larger blob. While the shots itself does not cause status effects, the blobs do. ",
      "dmg": "Status",
      "rank": 199.683321445548,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Game/KubrowPet/HunterKubrowPetPowerSuit",
      "name": "Sunika Kubrow",
      "description": "Once the value of Orokin guard-pets had been realized, Orokin scientists began experimenting with strains designed for combat. These were no longer household pets but superior war animals bred for ferocity and aggression.",
      "type": "Companion",
      "imageName": "sunika-kubrow.png",
      "category": "Kubrow",
      "tradable": false,
      "acquisition": "Incubator Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Sunika_Kubrow"
    },
    {
      "name": "Supra",
      "uniqueName": "/Lotus/Weapons/ClanTech/Energy/CrpHeavyRifle",
      "omegaAttenuation": 0.89999998,
      "totalDamage": 40,
      "trigger": "Auto",
      "description": "The SUPRA is a heavy laser gun with a short wind up time.",
      "accuracy": 14.285714,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "supra.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "40.0",
      "flight": 80,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6d/CorpusMachineGun.png/revision/latest?cb=20170303062459",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Supra",
      "disposition": 3,
      "acquisition": "Energy Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Supra Vandal",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/Machinegun/SupraVandal",
      "omegaAttenuation": 0.85000002,
      "totalDamage": 40,
      "trigger": "Auto",
      "description": "A customized version of the powerful Supra, featuring a metallic finish and Lotus decal.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "supra-vandal.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "40.0",
      "flight": 80,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/15/SupraVandal.png/revision/latest?cb=20170504184740",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Supra_Vandal",
      "disposition": 2,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot; projectile munitions. Entropy Burst (Magnetic, Energy) can greatly increase status chance. ",
      "dmg": "Crit/Status",
      "rank": 56.2809720581776,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Sweeper",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/SentShotgun",
      "omegaAttenuation": 1,
      "totalDamage": 41.999996,
      "trigger": "Auto",
      "description": "Standard issue weapon for Carrier Sentinel. Fires shotgun rounds.",
      "accuracy": 3.3333333,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "sweeper.png",
      "tradable": false,
      "damage": "42.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/25/DESentinelSweeper.png/revision/latest?cb=20140122154229",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sweeper",
      "disposition": 3,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sweeper Prime",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/PrimeSentShotgun",
      "omegaAttenuation": 1,
      "totalDamage": 60,
      "trigger": "Auto",
      "description": "Standard issue weapon for Carrier Prime Sentinel. Fires shotgun rounds.",
      "accuracy": 3.3333333,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "sweeper-prime.png",
      "tradable": true,
      "damage": "60.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/81/SentinelSweeperPrime.png/revision/latest?cb=20150707200907",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sweeper_Prime",
      "disposition": 3,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sybaris",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnoLeverAction/TnoLeverActionRifle",
      "omegaAttenuation": 1.2,
      "totalDamage": 80,
      "trigger": "Burst",
      "description": "This Tenno crafted, lever action rifle, is equal parts elegance and executioner.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "sybaris.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "80.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/TnoLeverActionRifle.png/revision/latest?cb=20140515184212",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sybaris",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Sybaris Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeSybaris/PrimeSybarisRifle",
      "omegaAttenuation": 1.1,
      "totalDamage": 88,
      "trigger": "Burst",
      "description": "Sleek and slender, a golden symbol of Tenno perfection.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "sybaris-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "87.9",
      "projectile": "Hitscan",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sybaris_Prime",
      "disposition": 3,
      "releaseDate": "2017 05 30",
      "vaultDate": "2019 03 27",
      "estimatedVaultDate": "2019 03 27",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot; hitscan munitions. Two-round burst is wasteful at times and the magazine is relatively small for how fast it fires. ",
      "dmg": "Crit/Status",
      "rank": 57.2832396974191,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Sydon",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnTrident/GrnTridentWeapon",
      "omegaAttenuation": 0.83999997,
      "totalDamage": 225,
      "trigger": "Melee",
      "description": "Inflict maximum devastation with this massive Grineer trident.",
      "accuracy": 100,
      "wallAttack": 375,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "sydon.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "225.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bd/GrnTridentWeapon.png/revision/latest?cb=20160120124034",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Sydon",
      "disposition": 2,
      "acquisition": "Chem Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Synapse",
      "uniqueName": "/Lotus/Weapons/Infested/LongGuns/InfestedRifle",
      "omegaAttenuation": 1.3099999,
      "totalDamage": 20,
      "trigger": "Held",
      "description": "Powered by a bio-chemical reaction, the infested Synapse rifle fries its targets with a steady stream of <DT_CORROSIVE>Corrosive energy.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "synapse.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "20.0 corrosive",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c0/U10InfPrimary.png/revision/latest?cb=20130914111405",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Synapse",
      "disposition": 5,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Low damage per shot; beam munitions. ✪",
      "dmg": "Crit/Status",
      "rank": 39.2832396974191,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Synoid Gammacor",
      "uniqueName": "/Lotus/Weapons/Syndicates/CephalonSuda/Pistols/CSSynoidGammacor",
      "omegaAttenuation": 1,
      "totalDamage": 21,
      "trigger": "Held",
      "description": "Deployed by the Cephalon Suda, once a data-analyzing instrument the Gammacor main focus is defense.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "synoid-gammacor.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "20.0 magnetic",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3b/SynoidGammacor.png/revision/latest?cb=20141127183102",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Synoid_Gammacor",
      "disposition": 3,
      "acquisition": "Cephalon Suda (Genius)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot; beam munitions. Innate Entropy (Magnetic, Energy) is useful at times. ✪",
      "dmg": "Crit/Status",
      "rank": 41.4431676725155,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Synoid Heliocor",
      "uniqueName": "/Lotus/Weapons/Syndicates/CephalonSuda/Melee/CSHeliocor",
      "omegaAttenuation": 0.94,
      "totalDamage": 280,
      "trigger": "Melee",
      "description": "This intelligent hammer takes an enemy killed by a Heavy Attack and recomposes them as an ally. Any fatal strike with this weapon also performs a Codex scan.",
      "accuracy": 100,
      "wallAttack": 560,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "synoid-heliocor.png",
      "category": "Hammer",
      "tradable": true,
      "channeling": 1.5,
      "damage": "280.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/13/CSHeliocor.png/revision/latest?cb=20160916030243",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Synoid_Heliocor",
      "disposition": 3,
      "acquisition": "Cephalon Suda (Genius)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 41.01,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, high attack speed. Suffers from relatively poor consistency. Scans kills into codex, and if the target's Codex entry is complete it will create a friendly Spectre of said target. Spectre lasts 30s. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "",
      "combo": "Raging Whirlwind",
      "component": false
    },
    {
      "name": "Synoid Simulor",
      "uniqueName": "/Lotus/Weapons/Syndicates/CephalonSuda/LongGuns/CSSimulor",
      "omegaAttenuation": 1.15,
      "totalDamage": 75,
      "trigger": "Active",
      "description": "Cephalon Suda’s custom issue Simulor was built to satisfy her curiosity.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "synoid-simulor.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "50.0 magnetic",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Orb Explosion",
        "crit_chance": 14,
        "crit_mult": 2,
        "status_chance": 0.3,
        "magnetic": 75,
        "damage": "75.0 magnetic"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/09/SyndicateCSSimulor.png/revision/latest?cb=20150902215134",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Synoid_Simulor",
      "disposition": 4,
      "acquisition": "Cephalon Suda (Genius)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; projectile munitions. ",
      "dmg": "Status",
      "rank": 137.749842765741,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Talons",
      "uniqueName": "/Lotus/Weapons/Tenno/ThrowingWeapons/U18ThrowingKnives/U18throwingknives",
      "omegaAttenuation": 1.4400001,
      "totalDamage": 120,
      "trigger": "Active",
      "description": "The claws of these tactical bombs dig into the target and detonate on command.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "talons.png",
      "category": "Thrown",
      "tradable": false,
      "damage": "120.0 blast",
      "flight": 50,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c2/U18throwingknives.png/revision/latest?cb=20151204013310",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Talons",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 93.0277350426339,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tatsu",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/TnTwoHandedKatana/TnTwoHandedKatana",
      "omegaAttenuation": 1,
      "totalDamage": 214,
      "trigger": "Melee",
      "description": "Fearsome and noble, the elegant two-handed Nikana is the pride of any Arsenal. Kills build charges and seeking projectiles are unleashed with a Slide Attack to find and stun unwitting enemies. When Revenant wields this blade, Tatsu’s charge cap is increased.",
      "accuracy": 100,
      "wallAttack": 428,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "tatsu.png",
      "category": "Two-Handed Nikana",
      "tradable": false,
      "channeling": 1.5,
      "damage": "72.0 radiation",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/58/Tatsu.png/revision/latest?cb=20190308235812",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tatsu",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Heavy Attack",
      "rank": 25.95,
      "tierRank": 3,
      "weaponNotes": "Low damage per hit, low attack speed. Kills will grant up to 5 charges that can be expended upon slide attacks to launch a homing projectile which will also stun enemies. ",
      "stance": "Wise Razor",
      "stanceNotes": "",
      "combo": "Heavy Attack",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/TnSentinelCrossPowerSuit",
      "name": "Taxon",
      "description": "With 'Assault Mode' and 'Molecular Conversion' as default Precepts, Taxon protects its owner with shield restoration. Equipped with the Artax ice-beam.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "taxon.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Taxon"
    },
    {
      "name": "Tazicor",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetComponents/TazronWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 6,
      "trigger": "Auto",
      "description": "Burst rifle that fires electrified rounds.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 3,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "tazicor.png",
      "tradable": false,
      "damage": "6.0 electricity",
      "projectile": "Discharge",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/ad/Taxicor.png/revision/latest?cb=20181110220614",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tazicor",
      "disposition": 3,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tekko",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Gauntlet/BrawlerKnuckles/BrawlerKnuckles",
      "omegaAttenuation": 1.4,
      "totalDamage": 160,
      "trigger": "Melee",
      "description": "These iron fists that rip through foes are Atlas' signature weapons. When wielded by Atlas they receive a Status Chance increase.",
      "accuracy": 100,
      "wallAttack": 480,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "tekko.png",
      "category": "Fist",
      "tradable": false,
      "channeling": 1.5,
      "damage": "160.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c1/BrawlerKnuckles.png/revision/latest?cb=20151002090142",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tekko",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tekko Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeTekko/PrimeTekko",
      "omegaAttenuation": 1.4,
      "totalDamage": 180,
      "trigger": "Melee",
      "description": "As merciless and indestructible as Atlas Prime himself, Tekko Prime crush and split with tectonic force.",
      "accuracy": 100,
      "wallAttack": 540,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "tekko-prime.png",
      "category": "Fist",
      "tradable": true,
      "channeling": 1.5,
      "damage": "180.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/da/TekkoPrime.png/revision/latest?cb=20191002055417",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tekko_Prime",
      "disposition": 5,
      "releaseDate": "2019 10 01",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 06 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Critical/Crit & Status",
      "rank": 30.89,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, high attack speed. ✪",
      "stance": "Seismic Palm",
      "stanceNotes": "",
      "combo": "Quaking Touch",
      "component": false
    },
    {
      "name": "Telos Akbolto",
      "uniqueName": "/Lotus/Weapons/Syndicates/ArbitersOfHexis/Pistols/AHAkbolto",
      "omegaAttenuation": 0.89999998,
      "totalDamage": 47,
      "trigger": "Semi",
      "description": "For the Arbiters of Hexis these pistols are more than simple weapons, they are symbols of truth and discipline.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "telos-akbolto.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "47.0",
      "flight": 75,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ec/AHAkbolto.png/revision/latest?cb=20141127181924",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Telos_Akbolto",
      "disposition": 3,
      "acquisition": "Arbiters of Hexis (Maxim)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Low damage per shot; projectile munitions. Truth (Gas, health, parkour) is useful at times. ",
      "dmg": "Status",
      "rank": 117.621395872617,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Telos Boltace",
      "uniqueName": "/Lotus/Weapons/Syndicates/ArbitersOfHexis/Melee/AHBoltace",
      "omegaAttenuation": 1,
      "totalDamage": 209.99998,
      "trigger": "Melee",
      "description": "Spinning attacks unleash the Stormpath, a tempest of mayhem that hurls any foes in its way.",
      "accuracy": 100,
      "wallAttack": 420,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "telos-boltace.png",
      "category": "Tonfa",
      "tradable": true,
      "channeling": 1.5,
      "damage": "210.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/3c/AHBoltace.png/revision/latest?cb=20160916030243",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Telos_Boltace",
      "disposition": 3,
      "acquisition": "Arbiters of Hexis (Maxim)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 24.62,
      "tierRank": 3,
      "weaponNotes": "Low damage per hit, high attack speed. Slide attack triggers Stormpath, which vacuums enemies in a 14m radius. Retriggering Stormpath within 8s puts it into a 6s cooldown and ragdoll enemies. Also gives 20% boost to parkour. ",
      "stance": "Gemini Cross",
      "stanceNotes": "",
      "combo": "Vagrant Blight",
      "component": false
    },
    {
      "name": "Telos Boltor",
      "uniqueName": "/Lotus/Weapons/Syndicates/ArbitersOfHexis/LongGuns/AHBoltor",
      "omegaAttenuation": 1.1,
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Bring down judgement, with this boltor crafted by the Arbiters of Hexis.",
      "accuracy": 25,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "telos-boltor.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "30.0",
      "flight": 65,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7c/SyndicateAHBoltor.png/revision/latest?cb=20150902215134",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Telos_Boltor",
      "disposition": 3,
      "acquisition": "Arbiters of Hexis (Maxim)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot; projectile munitions. Truth (Gas, health, parkour) syndicate proc is helpful at times. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 52.8583258795408,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Tenora",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnBardRifle/TnBardRifle",
      "omegaAttenuation": 1.1,
      "totalDamage": 24,
      "trigger": "Auto",
      "description": "Unload percussive machine gun fire, or strike a heavy chord with a single charge shot. When Octavia wields her signature rifle alt-fire Headshot Kills have a chance to instantly refill the magazine.",
      "accuracy": 12.5,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "tenora.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "24.0",
      "projectile": "Hitscan",
      "secondary": {
        "speed": 10,
        "crit_chance": 34,
        "crit_mult": 3,
        "status_chance": 0.1,
        "charge_time": 0.8,
        "shot_type": "Projectile",
        "shot_speed": null,
        "impact": 48,
        "slash": 48,
        "puncture": 144
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d6/TnBardRifle.png/revision/latest?cb=20170324230206",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tenora",
      "disposition": 3,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Low damage per shot; hitscan munitions. Has a decent alt-fire that can be used to take down medium units quickly. Light units and heavy units should still be dealt with using primary fire. ",
      "dmg": "Crit/Status",
      "rank": 51.9748873851023,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Tetra",
      "uniqueName": "/Lotus/Weapons/Corpus/LongGuns/CorpusUMP/CorpusUMP",
      "omegaAttenuation": 1.5,
      "totalDamage": 32,
      "trigger": "Auto",
      "description": "Drawing from its huge quad-chambered magazine, the Tetra is capable of unleashing a sustained barrage of lethal energy bolts.",
      "accuracy": 18.181818,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "tetra.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "32.0",
      "flight": 100,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f7/DETetra.png/revision/latest?cb=20140122223131",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tetra",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tiberon",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/DrakeRifle/DrakeRifle",
      "omegaAttenuation": 0.89999998,
      "totalDamage": 44,
      "trigger": "Burst",
      "description": "Forged by a master gunsmith, this Tenno burst rifle will strike down targets with swift precision.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "tiberon.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "44.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/31/Tiberon.png/revision/latest?cb=20141001220957",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tiberon",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tiberon Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeTiberon/PrimeTiberonRifle",
      "omegaAttenuation": 0.85000002,
      "totalDamage": 46,
      "trigger": "Burst",
      "description": "Art meets ingenuity with this beautifully deadly rifle.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "tiberon-prime.png",
      "category": "Rifle",
      "tradable": true,
      "damage": "46.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Auto",
        "speed": 8.33,
        "crit_chance": 16,
        "crit_mult": 2.8,
        "status_chance": 0.3,
        "shot_type": "Hit-Scan",
        "impact": 13.8,
        "slash": 13.8,
        "puncture": 18.4
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/25/TiberonPrime.png/revision/latest?cb=20180313200757",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tiberon_Prime",
      "disposition": 2,
      "releaseDate": "2018 03 20",
      "vaultDate": "2019 12 17",
      "estimatedVaultDate": "2019 12 17",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot; hitscan munitions. Alt-fire toggles between 3-round burst, semi-auto, and auto. Testing so far shows that burst fire has 5% edge on DPS compared to semi-auto at the expense of ammo economy. ",
      "dmg": "Crit/Status",
      "rank": 48.388435821109,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Tigris",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/DoubleBarrelShotgun/TennoDoubleBarrelShotgun",
      "omegaAttenuation": 0.64999998,
      "totalDamage": 1050,
      "trigger": "Duplex",
      "description": "The double-barreled Tigris shotgun fires two bursts in rapid succession, easily taking down the toughest prey.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "tigris.png",
      "category": "Shotgun",
      "tradable": false,
      "damage": "1050.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/43/DETigris.png/revision/latest?cb=20140101064243",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tigris",
      "disposition": 1,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tigris Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeTigris/PrimeTigris",
      "omegaAttenuation": 0.55000001,
      "totalDamage": 1560,
      "trigger": "Duplex",
      "description": "An artifact of exquisite beauty. A weapon of deadly purpose.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 13,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "tigris-prime.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "1560.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/aa/PrimeTigris342.png/revision/latest?cb=20160820032128",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tigris_Prime",
      "disposition": 1,
      "releaseDate": "2016 08 23",
      "vaultDate": "2018 06 19",
      "estimatedVaultDate": "2018 06 19",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Duplex trigger might take a while to get used to. Required to mod for 100% status chance. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 64.0249567472754,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Tipedo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/MonkSpade/TnoMonkStaff",
      "omegaAttenuation": 1.3099999,
      "totalDamage": 124.00001,
      "trigger": "Melee",
      "description": "With its crescent shaped blades flying in sweeping arcs and striking at tremendous speed, the Tipedo demands focus from those wishing to unlock its true power.",
      "accuracy": 100,
      "wallAttack": 207,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "tipedo.png",
      "category": "Staff",
      "tradable": false,
      "channeling": 1.5,
      "damage": "124.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e5/Tipedo.png/revision/latest?cb=20150109200607",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tipedo",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Tipedo Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Staff/TipedoPrime/TipedoPrimeWeapon",
      "omegaAttenuation": 1.3099999,
      "totalDamage": 170,
      "trigger": "Melee",
      "description": "With their final breath they look to the moon, and are gone.",
      "accuracy": 100,
      "wallAttack": 283,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "tipedo-prime.png",
      "category": "Staff",
      "tradable": true,
      "channeling": 1.5,
      "damage": "170.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/07/TipedoPrime.png/revision/latest?cb=20190403021436",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tipedo_Prime",
      "disposition": 5,
      "releaseDate": "2019 03 27",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2020 12 19",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 31.1,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, very high attack speed. ",
      "stance": "Clashing Forest",
      "stanceNotes": "",
      "combo": "Resolute Flurry",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Fairy/Fairy",
      "name": "Titania",
      "description": "Take flight with this mischievous pixie.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Bullet Jump creates a trampoline lasting |DURATION|s that enhances Bullet Jump maneuvers by |JUMP|% when used by allies.",
      "type": "Warframe",
      "imageName": "titania.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 2637385,
      "introduced": "The Silver Grove",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/84/TitaniaNewLook.png/revision/latest?cb=20160822154359",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Titania",
      "acquisition": "The Silver Grove (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tombfinger",
      "uniqueName": "/Lotus/Weapons/SolarisUnited/Secondary/SUModularSecondarySet1/Barrel/SUModularSecondaryBarrelBPart",
      "omegaAttenuation": 0.64999998,
      "type": "Secondary",
      "imageName": "tombfinger.png",
      "category": "Kitgun",
      "tradable": false,
      "acquisition": "Rude Zuud (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Tombfinger"
    },
    {
      "name": "Tonbo",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Polearms/FlowerPowerPolearm/FlowerPowerPolearmWep",
      "omegaAttenuation": 1.38,
      "totalDamage": 184,
      "trigger": "Melee",
      "description": "During the darkest days of the Old War many a Tenno relied solely on the Tonbo to keep them alive.",
      "accuracy": 100,
      "wallAttack": 307,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "tonbo.png",
      "category": "Polearm",
      "tradable": false,
      "channeling": 1.5,
      "damage": "184.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7b/FlowerPowerPolearm.png/revision/latest?cb=20150218211409",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tonbo",
      "disposition": 5,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Status",
      "rank": 38.93,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, low attack speed. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Cresting Peak",
      "component": false
    },
    {
      "name": "Tonkor",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnGrenadeLauncher/GrnGrenadeLauncher",
      "omegaAttenuation": 1.3,
      "totalDamage": 725,
      "trigger": "Semi",
      "description": "Hurl mayhem and destruction with this Grineer grenade launcher.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "tonkor.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "75.0",
      "flight": 30,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8e/GrnGrenadeLauncher.png/revision/latest?cb=20150423210905",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tonkor",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. Grenades can cause self damage. Suffers from relatively poor consistency. ",
      "dmg": "Critical",
      "rank": 90.6880324164707,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Torid",
      "uniqueName": "/Lotus/Weapons/ClanTech/Bio/BioWeapon",
      "omegaAttenuation": 1.3,
      "totalDamage": 540,
      "trigger": "Semi",
      "description": "Torid lobs a toxic payload.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "torid.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "100.0 toxin",
      "flight": 25,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/12/GrineerGrenadeLauncher.png/revision/latest?cb=20140326211459",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Torid",
      "disposition": 4,
      "acquisition": "Bio Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; projectile munitions. Thing fired stick on surfaces/targets and continue to emit gas that deals damage and causes status effects. ",
      "dmg": "Status",
      "rank": 107.492249290599,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Trinity/Trinity",
      "name": "Trinity",
      "description": "Trinity is great for players who prefer a supportive role. Warframes with healing technology are rare making Trinity a great equalizer when the odds are stacked against the Tenno.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Revive fallen allies |SPEED|% faster and from |RANGE|% farther away.",
      "type": "Warframe",
      "imageName": "trinity.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 3089443,
      "introduced": "Vanilla",
      "sex": "Female",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/00/TrinityNewLook.png/revision/latest?cb=20141124023338",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Trinity",
      "acquisition": "Ambulas (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Trinity/TrinityPrime",
      "name": "Trinity Prime",
      "description": "Become the bastion that defends allies using powerful healing abilities with Trinity Prime. Featuring altered mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Revive fallen allies |SPEED|% faster and from |RANGE|% farther away.",
      "type": "Warframe",
      "imageName": "trinity-prime.png",
      "tradable": true,
      "aura": "vazarin",
      "conclave": true,
      "color": 1512722,
      "introduced": "17.6",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/78/TrinityPrimeMain.png/revision/latest?cb=20200208134535",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Trinity_Prime",
      "releaseDate": "2015 10 06",
      "vaultDate": "2017 08 29",
      "estimatedVaultDate": "2017 08 29",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Twin Basolk",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnDualFireAxe/GrnDualFireAxe",
      "omegaAttenuation": 1.1799999,
      "totalDamage": 210.00002,
      "trigger": "Melee",
      "description": "These nasty, little hatchets slice through steel as if it were flesh.",
      "accuracy": 100,
      "wallAttack": 630,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "twin-basolk.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "85.0 heat",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/45/GrnDualFireAxe.png/revision/latest?cb=20151022005953",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Basolk",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Status",
      "rank": 27.76,
      "tierRank": 2,
      "weaponNotes": "Low damage per hit, low attack speed. Rift Strike teleports user to a target within 25m on charge attack. ✪",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Twin Grakatas",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerAssaultRifle/TwinGrakatas",
      "omegaAttenuation": 1.15,
      "totalDamage": 20,
      "trigger": "Auto",
      "description": "When one Grakata isn't enough, bring another for extra firepower.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "twin-grakatas.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "20.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f8/Akgrakata.png/revision/latest?cb=20150731174941",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Grakatas",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 60.3452078799117,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Twin Gremlins",
      "uniqueName": "/Lotus/Weapons/Grineer/GrineerPistol/GrineerAkimboPistol",
      "omegaAttenuation": 1.2,
      "totalDamage": 37,
      "trigger": "Auto",
      "description": "Designed as a pair, these Grineer sidearms fire projectiles at a slower rate but with greater force and accuracy.",
      "accuracy": 16.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "twin-gremlins.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "36.99",
      "flight": 65,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/db/Gremlin.png/revision/latest?cb=20140314173236",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Gremlins",
      "disposition": 4,
      "acquisition": "Captain Vor and Lieutenant Lech Kril (Boss Duo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Twin Kohmak",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnDWUniques/GrnTwinKohmaks",
      "omegaAttenuation": 1.25,
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Doubling their volley on each successive shot, the Twin Kohmaks decimate foes in seconds.",
      "accuracy": 5.7142859,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "twin-kohmak.png",
      "category": "Dual Shotguns",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/de/DualKohmak.png/revision/latest?cb=20160502123410",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Kohmak",
      "disposition": 4,
      "acquisition": "Kela De Thaym (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot; hitscan munitions. Spool up increases pellets shot and fire rate to the point where status effects are still reliably proc'd despite using shotgun calcs. Suffers from relatively poor consistency. ✪",
      "dmg": "Raw/Status",
      "rank": 54.2391488719487,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Twin Krohkur",
      "uniqueName": "/Lotus/Weapons/Grineer/Melee/GrnEgyptSwd/DualGrnEgyptSwdWeapon",
      "omegaAttenuation": 1.48,
      "totalDamage": 250,
      "trigger": "Melee",
      "description": "Battlefield butchery becomes all too easy with a Krohkur blade in each hand.",
      "accuracy": 100,
      "wallAttack": 750,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "twin-krohkur.png",
      "category": "Dual Swords",
      "tradable": false,
      "channeling": 1.5,
      "damage": "250.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/37/DualGrnEgyptSwords.png/revision/latest?cb=20171023080140",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Krohkur",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 30.24,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, low attack speed. ✪",
      "stance": "Swirling Tiger",
      "stanceNotes": "",
      "combo": "Winding Claws",
      "component": false
    },
    {
      "name": "Twin Rogga",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/GrnQueenGuardDualPistol/GrnQueenGuardDualPistols",
      "omegaAttenuation": 1.25,
      "totalDamage": 705,
      "trigger": "Semi",
      "description": "These twin barrels of destruction are the signature pistols of the Kuva Guardians.",
      "accuracy": 8,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "twin-rogga.png",
      "category": "Dual Shotguns",
      "tradable": false,
      "damage": "705.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b0/GrnQueenGuardDualPistols.png/revision/latest?cb=20161113000420",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Rogga",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Very high damage per shot; hitscan munitions. ✪",
      "dmg": "Status",
      "rank": 54.9888543819998,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Twin Vipers",
      "uniqueName": "/Lotus/Weapons/Tenno/Akimbo/AkimboViperPistols",
      "omegaAttenuation": 1.45,
      "totalDamage": 17,
      "trigger": "Auto",
      "description": "A Viper equipped in each hand.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 5,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "twin-vipers.png",
      "category": "Dual Pistols",
      "tradable": false,
      "damage": "17.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/ed/Viper%2C_dual.png/revision/latest?cb=20130426075530",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Vipers",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Twin Vipers Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/WraithTwinVipers/WraithTwinVipers",
      "omegaAttenuation": 1.41,
      "totalDamage": 18,
      "trigger": "Auto",
      "description": "The uniquely styled Twin Vipers Wraith are a powerful variation on the standard akimbo machine-pistols.",
      "accuracy": 11.111111,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "twin-vipers-wraith.png",
      "category": "Dual Pistols",
      "tradable": true,
      "damage": "18.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a0/DEWraithTwinVipers.png/revision/latest?cb=20140124174609",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Twin_Vipers_Wraith",
      "disposition": 5,
      "acquisition": "Invasions",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; hitscan munitions. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 110.910427743244,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Tysis",
      "uniqueName": "/Lotus/Weapons/Infested/Pistols/InfestedDartPistol/InfestedDartPistol",
      "omegaAttenuation": 1.45,
      "totalDamage": 130,
      "trigger": "Semi",
      "description": "The Tysis pistol spits out caustic darts that corrode their victims from within.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "tysis.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "81.0 corrosive",
      "flight": 75,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/aa/DETysis.png/revision/latest?cb=20140116153508",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Tysis",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "Low damage per shot; projectile munitions. Suffers from relatively poor consistency. ✪",
      "dmg": "Status",
      "rank": 63.1749476985159,
      "tierRank": 2,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Berserker/Berserker",
      "name": "Valkyr",
      "description": "Forged in the labs of the Zanuka project, the original Valkyr was subject to cruel experiments, leaving her scarred, angry and frighteningly adept at killing.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Recover |PERCENT|% faster from being knocked down.",
      "type": "Warframe",
      "imageName": "valkyr.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 3025188,
      "introduced": "11",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/0e/ValkyrNewLook.png/revision/latest?cb=20141124023346",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Valkyr",
      "acquisition": "Alad V (Boss)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Berserker/ValkyrPrime",
      "name": "Valkyr Prime",
      "description": "A proud fighter emerges unscarred by time or malice. Featuring altered mod polarities allow for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1.1,
      "passiveDescription": "Recover |PERCENT|% faster from being knocked down.",
      "type": "Warframe",
      "imageName": "valkyr-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 4603443,
      "introduced": "19.0.7",
      "sex": "Female",
      "sprint": 1.1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/14/ValkyrPrimeProfilePicture.png/revision/latest?cb=20180316165322",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Valkyr_Prime",
      "releaseDate": "2016 11 22",
      "vaultDate": "2018 09 25",
      "estimatedVaultDate": "2018 09 25",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Game/CatbrowPet/VampireCatbrowPetPowerSuit",
      "name": "Vasca Kavat",
      "description": "A true child of the night, and a drinker of life.",
      "type": "Companion",
      "imageName": "vasca-kavat.png",
      "category": "Kavat",
      "tradable": false,
      "acquisition": "Kavat Incubator Upgrade Segment (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Vasca_Kavat"
    },
    {
      "name": "Vasto",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistol/RevolverPistol",
      "omegaAttenuation": 1.4,
      "totalDamage": 58,
      "trigger": "Semi",
      "description": "Steady and reliable, the Vasto revolver combines speed and power for a classic gunslinger feel.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "vasto.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "58.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/6b/Vasto.png/revision/latest?cb=20130803104340",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vasto",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Vasto Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/PrimeVasto/PrimeVastoPistol",
      "omegaAttenuation": 1.35,
      "totalDamage": 66,
      "trigger": "Semi",
      "description": "This elegant rapid-fire revolver is the embodiment of superior Orokin craftsmanship.",
      "accuracy": 16,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "vasto-prime.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "66.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f6/PrimeVasto.png/revision/latest?cb=20141217030947",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vasto_Prime",
      "disposition": 5,
      "releaseDate": "2014 12 16",
      "vaultDate": "2016 11 22",
      "estimatedVaultDate": "2016 11 22",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "High damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 77.7358966777358,
      "tierRank": 1,
      "component": true
    },
    {
      "uniqueName": "/Lotus/Powersuits/Trapper/Trapper",
      "name": "Vauban",
      "description": "The highly tactical Vauban uses his powers to create deadly traps that can zap, imprison and dimensionally crush enemies.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Deal |DAMAGE|% Extra Damage to incapacitated enemies.",
      "type": "Warframe",
      "imageName": "vauban.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 3946550,
      "introduced": "7.11",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/23/VaubanNewLook.png/revision/latest?cb=20141124023352",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vauban",
      "acquisition": "Nightwave",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Trapper/TrapperPrime",
      "name": "Vauban Prime",
      "description": "Transform the battlefield into a weapon with this gilded tactician. Features unique mod polarities for extended customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Deal |DAMAGE|% Extra Damage to incapacitated enemies.",
      "type": "Warframe",
      "imageName": "vauban-prime.png",
      "tradable": true,
      "aura": "naramon",
      "conclave": false,
      "color": 1583150,
      "introduced": "18.12",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/69/VaubanPrimeNewLook.png/revision/latest?cb=20160528082318",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vauban_Prime",
      "releaseDate": "2016 05 17",
      "vaultDate": "2018 03 20",
      "estimatedVaultDate": "2018 03 20",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vaykor Hek",
      "uniqueName": "/Lotus/Weapons/Syndicates/SteelMeridian/LongGuns/SMHek",
      "omegaAttenuation": 1,
      "totalDamage": 525,
      "trigger": "Semi",
      "description": "Forged in the fires of rebel struggle, this shotgun is a force for liberation.",
      "accuracy": 9.090909,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 12,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "vaykor-hek.png",
      "category": "Shotgun",
      "tradable": true,
      "damage": "525.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/df/SyndicateSMHek.png/revision/latest?cb=20150902215135",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vaykor_Hek",
      "disposition": 3,
      "acquisition": "Steel Meridian (General)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Justice (Blast, Health, Armor) effects can be useful. ",
      "dmg": "Critical",
      "rank": 53.7637059362411,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Vaykor Marelok",
      "uniqueName": "/Lotus/Weapons/Syndicates/SteelMeridian/Pistols/SMMarelok",
      "omegaAttenuation": 1,
      "totalDamage": 160,
      "trigger": "Semi",
      "description": "Taken from defeated Grineer commanders and rebuilt to improve combat efficiency and reliability.",
      "accuracy": 10,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "vaykor-marelok.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "160.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a1/SMMarelok.png/revision/latest?cb=20141127183101",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vaykor_Marelok",
      "disposition": 3,
      "acquisition": "Steel Meridian (General)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; hitscan munitions. Justice (Blast, health, armor) can be helpful at times. ",
      "dmg": "Crit/Status",
      "rank": 86.5283525619832,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vaykor Sydon",
      "uniqueName": "/Lotus/Weapons/Syndicates/SteelMeridian/Melee/SMSydon",
      "omegaAttenuation": 0.83999997,
      "totalDamage": 212.99998,
      "trigger": "Melee",
      "description": "Justice blinds. Block hits to charge a Radial Blind, when fully charged Block+Heavy Attack to unleash it.",
      "accuracy": 100,
      "wallAttack": 355,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 11,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "vaykor-sydon.png",
      "category": "Polearm",
      "tradable": true,
      "channeling": 1.5,
      "damage": "213.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7a/SMSydon.png/revision/latest?cb=20160916030245",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vaykor_Sydon",
      "disposition": 2,
      "acquisition": "Steel Meridian (General)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "dmg": "Crit & Status",
      "rank": 31.45,
      "tierRank": 2,
      "weaponNotes": "High damage per hit, high attack speed. Blocking adds up to 15 stacks, which will emit Radial Blind in a 15m radius for 5s upon reaching the 15th stack. Also adds 50% resistance to knockdown/knockback. ",
      "stance": "Twirling Spire",
      "stanceNotes": "",
      "combo": "Cresting Peak",
      "component": false
    },
    {
      "name": "Vectis",
      "uniqueName": "/Lotus/Weapons/Tenno/Rifle/TennoSniperRifle",
      "omegaAttenuation": 0.94999999,
      "totalDamage": 225,
      "trigger": "Semi",
      "description": "A classic Tenno sniper rifle, the Vectis is ideal for ranged takedowns.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 2,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "vectis.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "225.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/80/DEVectis.png/revision/latest?cb=20161125231122",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vectis",
      "disposition": 3,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vectis Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeVectis/PrimeVectisRifle",
      "omegaAttenuation": 0.85000002,
      "totalDamage": 350,
      "trigger": "Semi",
      "description": "Once thought destroyed, the newly uncovered Vectis Prime revives Tenno martial traditions.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "vectis-prime.png",
      "category": "Sniper Rifle",
      "tradable": true,
      "damage": "350.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/68/VectisPrime.png/revision/latest?cb=20161125231239",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vectis_Prime",
      "disposition": 2,
      "releaseDate": "2015 07 07",
      "vaultDate": "2017 05 30",
      "estimatedVaultDate": "2017 05 30",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very high damage per shot; hitscan munitions. Sniper combo counter rampup is slow (min. 5), zooming in gives additive bonus to headshots (40%/60%). ",
      "dmg": "Critical",
      "rank": 37.1213203435596,
      "tierRank": 3,
      "component": false
    },
    {
      "name": "Veldt",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/TnRevolverRifle/TnRevolverRifleGun",
      "omegaAttenuation": 1.25,
      "totalDamage": 90,
      "trigger": "Semi",
      "description": "Precise calibration, rapid trigger-pull and a steady hand all combine to bring down the hardiest prey on two legs or four.",
      "accuracy": 32,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 8,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "veldt.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "90.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b5/Veldt.png/revision/latest?cb=20180417192137",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Veldt",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; hitscan munitions. Alt-fire toggles higher magnification on zoom. ",
      "dmg": "Crit/Status",
      "rank": 74.3011626335213,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Velocitus",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Primary/Railgun/ArchRailgun",
      "omegaAttenuation": 1.05,
      "totalDamage": 580,
      "trigger": "Charge",
      "description": "When fully charged, the magnetized barrel of the Velocitus accelerates a metal slug to tremendous speeds, piercing hulls and obliterating armor.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "SpaceGuns",
      "imageName": "velocitus.png",
      "tradable": false,
      "damage": "290.0 magnetic",
      "projectile": "Projectile",
      "statusChance": 25,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e5/ArchRailgun.png/revision/latest?cb=20141113011105",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Velocitus",
      "disposition": 3,
      "type": "Archwing Gun",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Venka",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Claws/TennoClaws",
      "omegaAttenuation": 0.5,
      "totalDamage": 140,
      "trigger": "Melee",
      "description": "Utilizing a new fighting stance, this Tenno weapon turns fists into claws and enemies into messy piles of meat and scrap metal.",
      "accuracy": 100,
      "wallAttack": 420,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "venka.png",
      "category": "Claws",
      "tradable": false,
      "channeling": 1.5,
      "damage": "140.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e5/TennoClaws.png/revision/latest?cb=20140626182008",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Venka",
      "disposition": 1,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Venka Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/PrimeVenKa/PrimeVenkaClaws",
      "omegaAttenuation": 0.5,
      "totalDamage": 188,
      "trigger": "Melee",
      "description": "Gleaming blades of white draw blood of the deepest red.",
      "accuracy": 100,
      "wallAttack": 564,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "venka-prime.png",
      "category": "Claws",
      "tradable": true,
      "channeling": 1.5,
      "damage": "188.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/12/VenkaPrime.png/revision/latest?cb=20161112234903",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Venka_Prime",
      "disposition": 1,
      "releaseDate": "2016 11 22",
      "vaultDate": "2018 09 25",
      "estimatedVaultDate": "2018 09 25",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": true,
      "tier": "Top",
      "dmg": "Crit & Status",
      "rank": 25.92,
      "tierRank": 3,
      "weaponNotes": "High damage per hit, high attack speed. ",
      "stance": "Malicious Raptor",
      "stanceNotes": "",
      "combo": "Jagged Gash",
      "component": false
    },
    {
      "name": "Veritux",
      "uniqueName": "/Lotus/Weapons/Tenno/Archwing/Melee/Archsword/ArchSwordWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 300,
      "trigger": "Melee",
      "description": "Weightless space turns this impossibly massive sword into an agile instrument of destruction.",
      "accuracy": 100,
      "wallAttack": 300,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 0,
      "productCategory": "SpaceMelee",
      "imageName": "veritux.png",
      "tradable": false,
      "damage": "300.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/dc/ArchSword.png/revision/latest?cb=20141024143613",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Veritux",
      "disposition": 3,
      "type": "Archwing Melee",
      "acquisition": "The Archwing (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Viper",
      "uniqueName": "/Lotus/Weapons/Grineer/GrineerPistol/GrineerLightPistol",
      "omegaAttenuation": 1.4,
      "totalDamage": 17,
      "trigger": "Auto",
      "description": "A full-auto pistol known as the most compact and lightweight weapon of the Grineer arsenal. Though it has a small Magazine Capacity, the Viper has a very high Fire Rate and ultra-fast reload times thanks to a simplified magazine design.",
      "accuracy": 15.384615,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "itemCount": 1,
      "parents": [
        "Hystrix",
        "Twin Vipers"
      ],
      "type": "Secondary",
      "imageName": "viper.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "17.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/99/Viper.png/revision/latest?cb=20130426074750",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Viper",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": true
    },
    {
      "name": "Viper Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/Pistols/WraithSingleViper/WraithSingleViper",
      "omegaAttenuation": 1.35,
      "totalDamage": 18,
      "trigger": "Auto",
      "description": "The uniquely styled Viper Wraith is a powerful variation on the standard machine-pistol.",
      "accuracy": 28.571428,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 4,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "viper-wraith.png",
      "category": "Pistol",
      "tradable": true,
      "damage": "18.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/72/ViperWraith.png/revision/latest?cb=20180121144809",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Viper_Wraith",
      "disposition": 5,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; hitscan munitions. ",
      "dmg": "Crit/Status",
      "rank": 110.070225614927,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Volnus",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Hammer/GlassHammer/GlassHammer",
      "omegaAttenuation": 1.2,
      "totalDamage": 220.00002,
      "trigger": "Melee",
      "description": "Tear and maim with this agile, lightweight glass hammer. When Gara's wields her signature melee weapon, it gains additional Slam Radial Damage.",
      "accuracy": 100,
      "wallAttack": 440,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 9,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "volnus.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "220.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/e/e8/GlassHammer.png/revision/latest?cb=20171017224241",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Volnus",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 38.03,
      "tierRank": 1,
      "weaponNotes": "Low damage per hit, very high attack speed. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "",
      "combo": "Raging Whirlwind",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Volt/Volt",
      "name": "Volt",
      "description": "Volt can create and harness electrical elements. This is a high-damage Warframe perfect for players who want a potent alternative to gun-play.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Grounded movement generates an electrical charge building up |DAMAGE| Damage per meter that is unleashed with the next attack.",
      "type": "Warframe",
      "imageName": "volt.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": true,
      "color": 3354664,
      "introduced": "Vanilla",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4d/VoltNewLook.png/revision/latest?cb=20141124023359",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Volt",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Volt/VoltPrime",
      "name": "Volt Prime",
      "description": "A glorious warrior from the past, Volt Prime features the same abilities as Volt but with unique mod polarities for greater customization.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "Grounded movement generates an electrical charge building up |DAMAGE| Damage per meter that is unleashed with the next attack.",
      "type": "Warframe",
      "imageName": "volt-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": true,
      "color": 14004844,
      "introduced": "16.1",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/bd/VoltPrimeLarge.png/revision/latest?cb=20150324224840",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Volt_Prime",
      "releaseDate": "2015 03 24",
      "vaultDate": "2017 02 28",
      "estimatedVaultDate": "2017 02 28",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vulcax",
      "uniqueName": "/Lotus/Types/Friendly/Pets/MoaPets/MoaPetComponents/ThermocorMoaWeapon",
      "omegaAttenuation": 1,
      "totalDamage": 35,
      "trigger": "Charge",
      "description": "Charges up a powerful blast of ultra-heated plasma.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 14,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "vulcax.png",
      "tradable": false,
      "chargeTime": 1,
      "damage": 35,
      "projectile": "Discharge",
      "statusChance": 10,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/7f/Vulcax.png/revision/latest?cb=20181110220625",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vulcax",
      "disposition": 3,
      "acquisition": "Legs (Fortuna)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vulkar",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerSniperRifle/GrnSniperRifle",
      "omegaAttenuation": 1.45,
      "totalDamage": 224.99998,
      "trigger": "Semi",
      "description": "Built by the Grineer for their elite troopers, the Vulkar is a devastating distance weapon. In the right hands it is capable of taking down targets long before they get into attack range.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 3,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "vulkar.png",
      "category": "Sniper Rifle",
      "tradable": false,
      "damage": "225.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/8/8c/Vulkar.png/revision/latest?cb=20171110221622",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vulkar",
      "disposition": 5,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Vulkar Wraith",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrineerSniperRifle/VulkarWraith",
      "omegaAttenuation": 1.4,
      "totalDamage": 273,
      "trigger": "Semi",
      "description": "A blood-red variant of this devastating sniper rifle.",
      "accuracy": 13.333333,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "vulkar-wraith.png",
      "category": "Sniper Rifle",
      "tradable": true,
      "damage": "273.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/b3/VulkarWraith.png/revision/latest?cb=20160209150222",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vulkar_Wraith",
      "disposition": 5,
      "acquisition": "Baro Ki'Teer (Relay)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very high damage per shot; hitscan munitions. Sniper combo counter rampup is very good (min. 2), zooming in gives additive bonus to headshots (35%/55%/70%). ",
      "dmg": "Critical",
      "rank": 62.2199601592045,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Vulklok",
      "uniqueName": "/Lotus/Types/Sentinels/SentinelWeapons/SentElecRailgun",
      "omegaAttenuation": 1.245,
      "totalDamage": 85,
      "trigger": "Auto",
      "description": "Standard issue sniper rifle for Diriga.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": true,
      "masteryReq": 0,
      "productCategory": "SentinelWeapons",
      "type": "Sentinel Weapon",
      "imageName": "vulklok.png",
      "tradable": false,
      "damage": "85.0 electricity",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/34/SentinelElectricRailgun.png/revision/latest?cb=20150902215133",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Vulklok",
      "disposition": 4,
      "acquisition": "Comes with Companion",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "War",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Swords/StalkerTwo/StalkerTwoGreatSword",
      "omegaAttenuation": 0.5,
      "totalDamage": 250,
      "trigger": "Melee",
      "description": "The Stalker's sword as bestowed on him by the Sentient Hunhow.",
      "accuracy": 100,
      "wallAttack": 500,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "war.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "250.0",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fd/StalkerTwoGreatSword.png/revision/latest?cb=20151204013307",
      "wikiaUrl": "http://warframe.fandom.com/wiki/War",
      "disposition": 1,
      "acquisition": "The Second Dream (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "dmg": "Crit & Status",
      "rank": 38.25,
      "tierRank": 1,
      "weaponNotes": "High damage per hit, low attack speed. What is it good for? ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Wisp/Wisp",
      "name": "Wisp",
      "description": "Elemental and elusive, Wisp is both guardian and gateway. ",
      "masteryReq": 0,
      "sprintSpeed": 1.2,
      "passiveDescription": "Flowing between dimensions Wisp becomes invisible to enemies while in the air. ",
      "type": "Warframe",
      "imageName": "wisp.png",
      "tradable": false,
      "aura": "naramon",
      "conclave": false,
      "color": 3947074,
      "introduced": "25.0",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a3/WispIcon272.png/revision/latest?cb=20190518000814",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Wisp",
      "acquisition": "Ropalolyst",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Wolf Sledge",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/Hammer/ThrowingHammer",
      "omegaAttenuation": 0.95999998,
      "totalDamage": 259,
      "trigger": "Melee",
      "description": "The signature weapon of the only lunatic fearsome enough to bust out of the Saturn Six Max-Pen. Once loosed this formidable throwing hammer always finds its way home.",
      "accuracy": 100,
      "wallAttack": 518,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "wolf-sledge.png",
      "category": "Hammer",
      "tradable": false,
      "channeling": 1.5,
      "damage": "259.8",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Wolf_Sledge",
      "disposition": 3,
      "acquisition": "Wolf of Saturn Six",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Crit & Status",
      "rank": 46.74,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, high attack speed. ",
      "stance": "Crushing Ruin",
      "stanceNotes": "",
      "combo": "Raging Whirlwind",
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/MonkeyKing/MonkeyKing",
      "name": "Wukong",
      "description": "A primal warrior with the heart of a trickster.",
      "masteryReq": 0,
      "sprintSpeed": 1,
      "passiveDescription": "After taking fatal damage Wukong automatically uses one of his mastered survival techniques. These techniques can only be invoked three times per mission.",
      "type": "Warframe",
      "imageName": "wukong.png",
      "tradable": false,
      "aura": "madurai",
      "conclave": false,
      "color": 3817802,
      "introduced": "17.12",
      "sex": "Male",
      "sprint": 1,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/91/WukongNewIcon.png/revision/latest?cb=20151125205508",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Wukong",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/MonkeyKing/WukongPrime",
      "name": "Wukong Prime",
      "description": "The trickster-warrior ascends to his ultimate incarnation. ",
      "masteryReq": 5,
      "sprintSpeed": 1.05,
      "passiveDescription": "After taking fatal damage Wukong automatically uses one of his mastered survival techniques. These techniques can only be invoked three times per mission.",
      "type": "Warframe",
      "imageName": "wukong-prime.png",
      "tradable": true,
      "aura": "madurai",
      "conclave": false,
      "color": 0,
      "introduced": "25.3.0",
      "sex": "Male",
      "sprint": 1.05,
      "wikiaUrl": "http://warframe.fandom.com/wiki/Wukong_Prime",
      "releaseDate": "2019 07 07",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 03 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/WyrmPowerSuit",
      "name": "Wyrm",
      "description": "With 'Assault Mode' and 'Crowd Dispersion' as default Precepts, Wyrm is a highly offensive Sentinel. Wyrm also comes with a laser rifle.Note: This item requires two open slots.",
      "type": "Sentinel",
      "imageName": "wyrm.png",
      "tradable": false,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Wyrm"
    },
    {
      "uniqueName": "/Lotus/Types/Sentinels/SentinelPowersuits/PrimeWyrmPowerSuit",
      "name": "Wyrm Prime",
      "description": "Both bodyguard and status symbol, the Wyrm Prime Sentinel was the last line of defense for high ranking Tenno in the Orokin Era.",
      "type": "Sentinel",
      "imageName": "wyrm-prime.png",
      "tradable": true,
      "releaseDate": "2014 06 11",
      "vaultDate": "2016 05 17",
      "estimatedVaultDate": "2016 05 17",
      "vaulted": false,
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false,
      "wikiaUrl": "http://warframe.wikia.com/wiki/Wyrm_Prime"
    },
    {
      "name": "Zakti",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/TnGuandoPistol/TnGuandoPistolGun",
      "omegaAttenuation": 1.2,
      "totalDamage": 30,
      "trigger": "Semi",
      "description": "Fires razor-sharp darts that anchor themselves in their target before erupting in a plume of toxic gas.",
      "accuracy": 26.666666,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "zakti.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "30.0",
      "flight": 66,
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/a7/Zakti.png/revision/latest?cb=20170720170336",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zakti",
      "disposition": 4,
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "Very low damage per shot; projectile munitions. Pellets explode after landing, causing Impact status and Gas damage and status. Suffers from relatively poor consistency. ",
      "dmg": "Status",
      "rank": 84.7710157857599,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Zarr",
      "uniqueName": "/Lotus/Weapons/Grineer/LongGuns/GrnCannon/GrnCannonWeapon",
      "omegaAttenuation": 1.15,
      "totalDamage": 200,
      "trigger": "Semi",
      "description": "Unload a barrage of explosives or a huge shot of flak from this cannon’s enormous barrel.",
      "accuracy": 100,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 7,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "zarr.png",
      "category": "Launcher",
      "tradable": false,
      "damage": "25.0",
      "flight": "???",
      "projectile": "Projectile",
      "secondary": {
        "name": "Barrage Mode",
        "speed": 3,
        "crit_chance": 17,
        "status_chance": 0.3,
        "pellet": {
          "count": 10
        },
        "impact": 240,
        "slash": 160,
        "puncture": 400
      },
      "secondaryArea": {
        "name": "Cannon Mode Cluster Bombs",
        "status_chance": 29,
        "pellet": {
          "name": "Bomb",
          "count": 6
        },
        "blast": 300,
        "damage": "300.0 blast"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/4b/GrineerCannon.png/revision/latest?cb=20161117022350",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zarr",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Viable",
      "notes": "Very low damage per shot; projectile munitions. First explosion from primary fire can damage self but subsequent cluster bomblets won't. Each bomblet can cause status effect on it's own. Alt fire switches to shotgun mode. Suffers from relatively poor consistency. ",
      "dmg": "Crit/Status",
      "rank": 62.2166435825965,
      "tierRank": 1,
      "component": false
    },
    {
      "name": "Zenistar",
      "uniqueName": "/Lotus/Weapons/Tenno/Melee/SunDialAxe/SundialAxeWeapon",
      "omegaAttenuation": 0.5,
      "totalDamage": 298,
      "trigger": "Melee",
      "description": "Scorch enemies with blistering blows, or set them ablaze with the flying fire disc.",
      "accuracy": 100,
      "wallAttack": 596,
      "slot": 5,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Melee",
      "type": "Melee",
      "imageName": "zenistar.png",
      "category": "Heavy Blade",
      "tradable": false,
      "channeling": 1.5,
      "damage": "150.0 heat",
      "secondary": {
        "name": "Attacks while disc deployed",
        "crit_chance": 5,
        "crit_mult": 2,
        "status_chance": 0.3,
        "heat": 525,
        "damage": "525.0 heat"
      },
      "secondaryArea": {
        "name": "Disc Aura",
        "status_chance": 50,
        "duration": 4500,
        "radius": 400,
        "speed": 1.2,
        "heat": 50,
        "damage": "50.0 heat"
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/90/SundialAxe.png/revision/latest?cb=20171031145300",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zenistar",
      "disposition": 1,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "dmg": "Status",
      "rank": 61.54,
      "tierRank": 0,
      "weaponNotes": "High damage per hit, very low attack speed. Suffers from relatively poor consistency. Charge attack deploys flying disc that deals AOE damage and allow the rest of the weapon to deal physical damage. ",
      "stance": "Cleaving Whirlwind",
      "stanceNotes": "",
      "combo": "Broken Bull",
      "component": false
    },
    {
      "name": "Zenith",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/LoginPrimary/SundialRifle",
      "omegaAttenuation": 1.1,
      "totalDamage": 30,
      "trigger": "Auto",
      "description": "Deploy the radar disc to reveal hidden enemies and then strike with precisions shots that punch through all obstacles in the way.",
      "accuracy": 33.333332,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "zenith.png",
      "category": "Rifle",
      "tradable": false,
      "damage": "30.0",
      "projectile": "Hitscan",
      "secondary": {
        "name": "Semi-Auto Mode",
        "speed": 3,
        "crit_chance": 35,
        "crit_mult": 2.5,
        "status_chance": 0.1,
        "impact": 15,
        "slash": 15,
        "puncture": 120
      },
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/10/SundialRifle.png/revision/latest?cb=20171031145242",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zenith",
      "disposition": 3,
      "acquisition": "Login Reward",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Top",
      "notes": "Very low damage per shot; hitscan munitions. Secondary fire launches a disc that scans enemies and switches the weapon to semi-auto until the magazine is depleted. Semi-auto mode has more DPS and infinite punchthrough. ✪",
      "dmg": "Crit/Status",
      "rank": 38.5038404810405,
      "tierRank": 3,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Tengu/Tengu",
      "name": "Zephyr",
      "description": "Specializing in air attacks and mobility, Zephyr dominates from above.",
      "masteryReq": 0,
      "sprintSpeed": 1.15,
      "passiveDescription": "Move faster while Airborne and fall |PERCENT|% slower.",
      "type": "Warframe",
      "imageName": "zephyr.png",
      "tradable": false,
      "aura": "vazarin",
      "conclave": true,
      "color": 14471877,
      "introduced": "12",
      "sex": "Female",
      "sprint": 1.15,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fc/ZephyrNewLook.png/revision/latest?cb=20141124023407",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zephyr",
      "acquisition": "Tenno Lab (Dojo)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "uniqueName": "/Lotus/Powersuits/Tengu/ZephyrPrime",
      "name": "Zephyr Prime",
      "description": "Take to the skies with this golden bird of destruction.",
      "masteryReq": 6,
      "sprintSpeed": 1.2,
      "passiveDescription": "Move faster while Airborne and fall |PERCENT|% slower.",
      "type": "Warframe",
      "imageName": "zephyr-prime.png",
      "tradable": true,
      "aura": "vazarin",
      "conclave": true,
      "color": 2565413,
      "introduced": "22.16.4",
      "sex": "Female",
      "sprint": 1.2,
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/68/ZephyrPrimeIcon.png/revision/latest?cb=20180320221426",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zephyr_Prime",
      "releaseDate": "2018 03 20",
      "vaultDate": "2019 12 17",
      "estimatedVaultDate": "2019 12 17",
      "vaulted": true,
      "acquisition": "Relics (Vaulted)",
      "checked": false,
      "unobtainable": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Zhuge",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/RepeatingCrossbow/RepeatingCrossbow",
      "omegaAttenuation": 1.2,
      "totalDamage": 100,
      "trigger": "Auto",
      "description": "This devastating automatic crossbow is the perfect marriage of ancient Earth weaponry and Tenno technology.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 10,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "zhuge.png",
      "category": "Crossbow",
      "tradable": false,
      "damage": "100.0",
      "flight": "???",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/41/RepeatingCrossbow.png/revision/latest?cb=20160317010054",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zhuge",
      "disposition": 4,
      "acquisition": "Market (Orbiter)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": false,
      "tierRank": 0,
      "component": false
    },
    {
      "name": "Zhuge Prime",
      "uniqueName": "/Lotus/Weapons/Tenno/LongGuns/PrimeZhuge/PrimeZhugeCrossbow",
      "omegaAttenuation": 1.15,
      "totalDamage": 50,
      "trigger": "Auto",
      "description": "Tenno artistry. Ancient craft. A weapon of surgical precision and devastating effect. Each bolt fired by Zhuge Prime explodes shortly after embedding.",
      "accuracy": 40,
      "wallAttack": 0,
      "slot": 1,
      "noise": "Silent",
      "sentinel": false,
      "masteryReq": 14,
      "productCategory": "LongGuns",
      "type": "Primary",
      "imageName": "zhuge-prime.png",
      "category": "Crossbow",
      "tradable": true,
      "damage": "50.0",
      "flight": "???",
      "projectile": "Projectile",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/fa/ZhugePrime.png/revision/latest?cb=20190707115545",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zhuge_Prime",
      "disposition": 4,
      "releaseDate": "2019 07 07",
      "vaultDate": "n/a",
      "estimatedVaultDate": "2021 03 21",
      "acquisition": "Relics",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Contender",
      "notes": "High damage per shot; projectile munitions. Bolts will explode a short duration after hitting a wall, potentially causing self damage. ✪",
      "dmg": "Crit/Status",
      "rank": 46.1777087639997,
      "tierRank": 2,
      "component": false
    },
    {
      "name": "Zylok",
      "uniqueName": "/Lotus/Weapons/Tenno/Pistols/ConclaveLeverPistol/ConclaveLeverPistol",
      "omegaAttenuation": 1.25,
      "totalDamage": 140,
      "trigger": "Duplex",
      "description": "Hammer the enemy with this light-bodied heavy hitter. Featuring a double-action trigger that fires hard and fast. ",
      "accuracy": 23.529411,
      "wallAttack": 0,
      "slot": 0,
      "noise": "Alarming",
      "sentinel": false,
      "masteryReq": 6,
      "productCategory": "Pistols",
      "type": "Secondary",
      "imageName": "zylok.png",
      "category": "Pistol",
      "tradable": false,
      "damage": "140.0",
      "projectile": "Hitscan",
      "wikiaThumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/67/Zylok.png/revision/latest?cb=20180831004228",
      "wikiaUrl": "http://warframe.fandom.com/wiki/Zylok",
      "disposition": 4,
      "acquisition": "The Pyrys Project (Quest)",
      "checked": false,
      "unobtainable": false,
      "vaulted": false,
      "tierData": true,
      "tier": "Need buffs",
      "notes": "High damage per shot; hitscan munitions. ",
      "dmg": "Status",
      "rank": 95.2961527075647,
      "tierRank": 0,
      "component": false
    }
  ],
  "fetched": "2020.03.04 09:10:28 CET+01:00",
  "version": {
    "pc": "27.1.2",
    "ps4": "27.1.0",
    "xbox": "27.1.0",
    "switch": "27.1.0",
    "tier": "Warframe Patch 27.1.2 - Zaws and Kuva Weapons added. Other equipment pending tests are marked as such. "
  }
}

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_vendor_foundation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/vendor/foundation.js */ "./src/js/vendor/foundation.js");
/* harmony import */ var _js_vendor_foundation_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_js_vendor_foundation_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _js_warframe_data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/warframe-data.js */ "./src/js/warframe-data.js");
/* harmony import */ var _js_warframe_data_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_js_warframe_data_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _js_app_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/app.js */ "./src/js/app.js");
/* harmony import */ var _js_app_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_js_app_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _js_clock_eidolon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/clock-eidolon.js */ "./src/js/clock-eidolon.js");
/* harmony import */ var _js_clock_eidolon_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_clock_eidolon_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _js_clock_orbvallis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/clock-orbvallis */ "./src/js/clock-orbvallis.js");
/* harmony import */ var _js_clock_orbvallis__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_js_clock_orbvallis__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _views_beginner_guide_hbs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./views/beginner-guide.hbs */ "./src/views/beginner-guide.hbs");
/* harmony import */ var _views_beginner_guide_hbs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_views_beginner_guide_hbs__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _views_all_items_hbs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./views/all-items.hbs */ "./src/views/all-items.hbs");
/* harmony import */ var _views_all_items_hbs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_views_all_items_hbs__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _views_filter_hbs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./views/filter.hbs */ "./src/views/filter.hbs");
/* harmony import */ var _views_filter_hbs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_views_filter_hbs__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _views_item_hbs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./views/item.hbs */ "./src/views/item.hbs");
/* harmony import */ var _views_item_hbs__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_views_item_hbs__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _views_item_modal_hbs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./views/item-modal.hbs */ "./src/views/item-modal.hbs");
/* harmony import */ var _views_item_modal_hbs__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_views_item_modal_hbs__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _views_search_hbs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./views/search.hbs */ "./src/views/search.hbs");
/* harmony import */ var _views_search_hbs__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_views_search_hbs__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _views_search_indicator_hbs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./views/search-indicator.hbs */ "./src/views/search-indicator.hbs");
/* harmony import */ var _views_search_indicator_hbs__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_views_search_indicator_hbs__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _views_status_hbs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./views/status.hbs */ "./src/views/status.hbs");
/* harmony import */ var _views_status_hbs__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_views_status_hbs__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _views_pages_help_hbs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./views/pages/help.hbs */ "./src/views/pages/help.hbs");
/* harmony import */ var _views_pages_help_hbs__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_views_pages_help_hbs__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _views_pages_stats_hbs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./views/pages/stats.hbs */ "./src/views/pages/stats.hbs");
/* harmony import */ var _views_pages_stats_hbs__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_views_pages_stats_hbs__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _views_pages_user_hbs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./views/pages/user.hbs */ "./src/views/pages/user.hbs");
/* harmony import */ var _views_pages_user_hbs__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_views_pages_user_hbs__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _font_fontello_eot__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./font/fontello.eot */ "./src/font/fontello.eot");
/* harmony import */ var _font_fontello_eot__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_eot__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _font_fontello_svg__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./font/fontello.svg */ "./src/font/fontello.svg");
/* harmony import */ var _font_fontello_svg__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_svg__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _font_fontello_ttf__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./font/fontello.ttf */ "./src/font/fontello.ttf");
/* harmony import */ var _font_fontello_ttf__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_ttf__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _font_fontello_woff__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./font/fontello.woff */ "./src/font/fontello.woff");
/* harmony import */ var _font_fontello_woff__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_woff__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _font_fontello_woff2__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./font/fontello.woff2 */ "./src/font/fontello.woff2");
/* harmony import */ var _font_fontello_woff2__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_font_fontello_woff2__WEBPACK_IMPORTED_MODULE_20__);
const path = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");

if (true) {
  console.log('We are in development mode');
}


























/***/ }),

/***/ "./src/scss/stylesheet.scss":
/*!**********************************!*\
  !*** ./src/scss/stylesheet.scss ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/views/all-items.hbs":
/*!*********************************!*\
  !*** ./src/views/all-items.hbs ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = container.invokePartial(__webpack_require__(/*! ./item.hbs */ "./src/views/item.hbs"),depth0,{"name":"item","data":data,"indent":"        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "<ul id=\"all-items\">\n"
    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":4,"column":13}}})) != null ? stack1 : "")
    + "</ul>\n";
},"usePartial":true,"useData":true});

/***/ }),

/***/ "./src/views/beginner-guide.hbs":
/*!**************************************!*\
  !*** ./src/views/beginner-guide.hbs ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<h1>Beginners guide to Warframe</h1>\n<h2>What should I do?</h2>\n<ul>\n<li>Unlock planets by completing junctions until you reach Pluto. Complete Pluto to recieve a mission called &quot;The War Within&quot;.</li>\n<li>Level frames, acquire weapons and strengthen mods with Endo.</li>\n<li>Play all available quest.</li>\n</ul>\n<h2>How do I do that?</h2>\n<ul>\n<li>Clear a path to each planets Junction, then check the requirement for that Junction. Complete the list. Move on to the next planet.</li>\n<li>Your first goal is Fossa on Venus. Repeat Fossa until you have required all parts for Rhinos. Build all the parts needed, then buy the blueprint for Rhino in Market to build the complete frame. Rhino is a tank and very durable, you will need Rhino to progress. </li>\n<li>Your second goal should be unlocking Seimeni on Ceres. Seimeni is a great credit-farm, and you will need credits. </li>\n<li>Next goal is Helene on Saturn. Helene is a great affinity-farm (XP) and will help in leveling weapons and frames.</li>\n<li>Acquire more frames and weapons by farming Assasination missions on each planet.</li>\n<li>Unlock Sedna Junction on Pluto. This will reward you with a mission called &quot;The War Within&quot;. Complete this mission to unlock the final part of Warframe, where the fun really begins :)</li>\n</ul>\n<h2>What do I need to know before i proceed?</h2>\n<ul>\n<li>Do not spend platinum on anything else than slots for frames and weapons.</li>\n<li>You will gain affinity (XP) from your team-members kills. No need to chop up all those enemies yourself.</li>\n<li>You will lose affinity if you die. Wait for a team-member to revive you.</li>\n<li>Your gain mastery ranking by leveling items to level 30.</li>\n<li>You can sell items to clear out slots: Menu &gt; Equipment &gt; Inventory</li>\n<li>Most weapons you can acquire early on are trash. Check <a href=\"https://www.cephalonwannab.com/\">cephalonwannab.com/</a> for info on what weapons to keep.</li>\n<li>The game will not provide much help, so you need to use Google to learn about the game, or check the <a href=\"https://warframe.fandom.com/wiki\">Warframe Wikia</a>.</li>\n<li>Certain resources are hard to find. Do not spend your <em>Neurodes</em>, <em>Orokins Cells</em> or <em>Neural Sensors</em> on weapons until you know where to acquire these resources.</li>\n</ul>\n<h2>How should I spend my platinum?</h2>\n<ul>\n<li>Do not spend platinum on anything else than slots for frames and weapons. Seriously.</li>\n</ul>\n<h2>Where do I find resources?</h2>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/clock-modal.hbs":
/*!***********************************!*\
  !*** ./src/views/clock-modal.hbs ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div id=\"eidolon-clock\">\n    <div class=\"clock-title\">PLANES OF EIDOLON</div>\n    <div class=\"time time-box\">\n        <div class=\"time-indicator\"></div>\n        <div class=\"big-hour hour\"></div>\n        <div class=\"big-hour-divider\">:</div>\n        <div class=\"big-minute minute\"></div>\n        <div class=\"big-hour-divider\">:</div>\n        <div class=\"big-second second\"></div>\n    </div>\n    <div class=\"time-info\">\n        until <span class=\"day\"></span>\n    </div>\n    <div id=\"warning-container\"></div>\n</div>\n\n<div id=\"orbvallis-clock\" class=\"\">\n    <div class=\"clock-title\">ORB VALLIS</div>\n    <div class=\"weather time-box\">\n        <div class=\"time-indicator\"></div>\n        <div class=\"big-minute minute\"></div>\n    </div>\n    <div class=\"time-info\">\n        until <span class=\"next-period\"></span>\n    </div>\n</div>\n\n<a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/filter.hbs":
/*!******************************!*\
  !*** ./src/views/filter.hbs ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div id=\"filter\">\n        <span id=\"filter-clear\" onclick=\"app.search.clear();\">Clear <i class=\"icon-cancel\"></i></span>\n    <label for=\"filter-all\">\n        <input type=\"radio\" name=\"filter-status\" class=\"filter-status\" value=\"all\" id=\"filter-all\" checked=\"checked\" onclick=\"app.filter.activate('all');\">\n        <span>All</span>\n    </label>\n    <label for=\"filter-ranked\" onclick=\"app.filter.activate('ranked');\">\n        <input type=\"radio\" name=\"filter-status\" class=\"filter-status\" value=\"ranked\" id=\"filter-ranked\">\n        <span>Ranked</span>\n    </label>\n    <label for=\"filter-unranked\" onclick=\"app.filter.activate('ranked');\">\n        <input type=\"radio\" name=\"filter-status\" class=\"filter-status\" value=\"unranked\" id=\"filter-unranked\">\n        <span>Unranked</span>\n    </label>\n</div>\n\n<div id=\"search-indicator\">\n    <i class=\"icon-search\"></i><span id=\"search-indicator-string\"></span>Showing <span id=\"search-indicator-value\">443</span>\n</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/item-modal.hbs":
/*!**********************************!*\
  !*** ./src/views/item-modal.hbs ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    return "        <i class=\"icon-check\"></i>\n";
},"3":function(container,depth0,helpers,partials,data) {
    var helper;

  return "<div class=\"thumbnail-wrapper\"><img class=\"thumbnail\"  src=\"https://cdn.warframestat.us/img/"
    + container.escapeExpression(((helper = (helper = helpers.imageName || (depth0 != null ? depth0.imageName : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"imageName","hash":{},"data":data,"loc":{"start":{"line":8,"column":92},"end":{"line":8,"column":105}}}) : helper)))
    + "\"></div>\n";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing;

  return "        <tr>\n            <td class=\"table-left\">Category:</td>\n            <td class=\"table-right\"> <a onclick=\"app.search.searchFor('"
    + container.escapeExpression((helpers.escape||(depth0 && depth0.escape)||alias2).call(alias1,(depth0 != null ? depth0.type : depth0),{"name":"escape","hash":{},"data":data,"loc":{"start":{"line":15,"column":71},"end":{"line":15,"column":87}}}))
    + "');\">"
    + ((stack1 = ((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"type","hash":{},"data":data,"loc":{"start":{"line":15,"column":92},"end":{"line":15,"column":102}}}) : helper))) != null ? stack1 : "")
    + "</a></td>\n        </tr>\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing;

  return "        <tr>\n            <td class=\"table-left\">Type:</td>\n            <td class=\"table-right\"> <a onclick=\"app.search.searchFor('"
    + container.escapeExpression((helpers.escape||(depth0 && depth0.escape)||alias2).call(alias1,(depth0 != null ? depth0.category : depth0),{"name":"escape","hash":{},"data":data,"loc":{"start":{"line":21,"column":71},"end":{"line":21,"column":91}}}))
    + "');\">"
    + ((stack1 = ((helper = (helper = helpers.category || (depth0 != null ? depth0.category : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"category","hash":{},"data":data,"loc":{"start":{"line":21,"column":96},"end":{"line":21,"column":110}}}) : helper))) != null ? stack1 : "")
    + "</a></td>\n        </tr>\n";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing;

  return "        <tr>\n            <td class=\"table-left\">Acquisition:</td>\n            <td class=\"table-right\"> <a onclick=\"app.search.searchFor('"
    + container.escapeExpression((helpers.escape||(depth0 && depth0.escape)||alias2).call(alias1,(depth0 != null ? depth0.acquisition : depth0),{"name":"escape","hash":{},"data":data,"loc":{"start":{"line":27,"column":71},"end":{"line":27,"column":94}}}))
    + "');\">"
    + ((stack1 = ((helper = (helper = helpers.acquisition || (depth0 != null ? depth0.acquisition : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"acquisition","hash":{},"data":data,"loc":{"start":{"line":27,"column":99},"end":{"line":27,"column":116}}}) : helper))) != null ? stack1 : "")
    + "</a>"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.vaulted : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":27,"column":120},"end":{"line":27,"column":168}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.unobtainable : depth0),{"name":"if","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":27,"column":168},"end":{"line":27,"column":226}}})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond||(depth0 && depth0.ifCond)||alias2).call(alias1,(depth0 != null ? depth0.masteryReq : depth0),">=",1,{"name":"ifCond","hash":{},"fn":container.program(14, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":27,"column":226},"end":{"line":27,"column":286}}})) != null ? stack1 : "")
    + "</td>\n        </tr>\n";
},"10":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-lock\"></i>";
},"12":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-attention\"></i>";
},"14":function(container,depth0,helpers,partials,data) {
    var helper;

  return " | MR-"
    + container.escapeExpression(((helper = (helper = helpers.masteryReq || (depth0 != null ? depth0.masteryReq : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"masteryReq","hash":{},"data":data,"loc":{"start":{"line":27,"column":261},"end":{"line":27,"column":275}}}) : helper)));
},"16":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "        <tr>\n            <td class=\"table-left\">Wikia:</td>\n            <td class=\"table-right\"><a href=\""
    + alias4(((helper = (helper = helpers.wikiaUrl || (depth0 != null ? depth0.wikiaUrl : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"wikiaUrl","hash":{},"data":data,"loc":{"start":{"line":33,"column":45},"end":{"line":33,"column":57}}}) : helper)))
    + "\" target=\"_blank\">"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":33,"column":75},"end":{"line":33,"column":83}}}) : helper)))
    + " <i class=\"icon-link-ext\"></i></a></td>\n        </tr>\n";
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <tr>\n            <td class=\"table-left\">Description:</td>\n            <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"description","hash":{},"data":data,"loc":{"start":{"line":42,"column":37},"end":{"line":42,"column":54}}}) : helper))) != null ? stack1 : "")
    + "</td>\n        </tr>\n";
},"20":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing;

  return "        <tr>\n            <td class=\"table-left\">Tier:</td>\n            <td class=\"table-right\">\n"
    + ((stack1 = (helpers.ifCond||(depth0 && depth0.ifCond)||alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","3",{"name":"ifCond","hash":{},"fn":container.program(21, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":49,"column":16},"end":{"line":53,"column":27}}})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond||(depth0 && depth0.ifCond)||alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","2",{"name":"ifCond","hash":{},"fn":container.program(23, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":54,"column":16},"end":{"line":58,"column":27}}})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond||(depth0 && depth0.ifCond)||alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","1",{"name":"ifCond","hash":{},"fn":container.program(25, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":59,"column":16},"end":{"line":63,"column":27}}})) != null ? stack1 : "")
    + "                 ("
    + container.escapeExpression(((helper = (helper = helpers.tier || (depth0 != null ? depth0.tier : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"tier","hash":{},"data":data,"loc":{"start":{"line":64,"column":18},"end":{"line":64,"column":26}}}) : helper)))
    + ")</td>\n        </tr>\n";
},"21":function(container,depth0,helpers,partials,data) {
    return "                <span class=\"tier-rank tier-rank-3\">\n                    <i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i>\n                </span>\n";
},"23":function(container,depth0,helpers,partials,data) {
    return "                <span class=\"tier-rank tier-rank-2\">\n                    <i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i>\n                </span>\n";
},"25":function(container,depth0,helpers,partials,data) {
    return "                <span class=\"tier-rank tier-rank-1\">\n                    <i class=\"icon-star-empty\"></i>\n                </span>\n";
},"27":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <tr>\n            <td class=\"table-left\">Rank:</td>\n            <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.rank || (depth0 != null ? depth0.rank : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"rank","hash":{},"data":data,"loc":{"start":{"line":70,"column":37},"end":{"line":70,"column":47}}}) : helper))) != null ? stack1 : "")
    + "</td>\n        </tr>\n";
},"29":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <tr>\n            <td class=\"table-left\">Release date:</td>\n            <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.releaseDate || (depth0 != null ? depth0.releaseDate : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"releaseDate","hash":{},"data":data,"loc":{"start":{"line":76,"column":37},"end":{"line":76,"column":54}}}) : helper))) != null ? stack1 : "")
    + "</td>\n        </tr>\n";
},"31":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Special:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.specialNote || (depth0 != null ? depth0.specialNote : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"specialNote","hash":{},"data":data,"loc":{"start":{"line":82,"column":41},"end":{"line":82,"column":58}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"33":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Notes:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.notes || (depth0 != null ? depth0.notes : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"notes","hash":{},"data":data,"loc":{"start":{"line":88,"column":41},"end":{"line":88,"column":52}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"35":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Weapon notes:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.weaponNotes || (depth0 != null ? depth0.weaponNotes : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"weaponNotes","hash":{},"data":data,"loc":{"start":{"line":94,"column":41},"end":{"line":94,"column":58}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"37":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Damage:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.dmg || (depth0 != null ? depth0.dmg : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"dmg","hash":{},"data":data,"loc":{"start":{"line":100,"column":41},"end":{"line":100,"column":50}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"39":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Abilities:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.abilities || (depth0 != null ? depth0.abilities : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"abilities","hash":{},"data":data,"loc":{"start":{"line":106,"column":41},"end":{"line":106,"column":56}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"41":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Trigger:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.trigger || (depth0 != null ? depth0.trigger : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"trigger","hash":{},"data":data,"loc":{"start":{"line":112,"column":41},"end":{"line":112,"column":54}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"43":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Projectile:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.projectile || (depth0 != null ? depth0.projectile : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"projectile","hash":{},"data":data,"loc":{"start":{"line":118,"column":41},"end":{"line":118,"column":57}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"45":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Stance:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.stance || (depth0 != null ? depth0.stance : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"stance","hash":{},"data":data,"loc":{"start":{"line":124,"column":41},"end":{"line":124,"column":53}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"47":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Stance notes:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.stanceNotes || (depth0 != null ? depth0.stanceNotes : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"stanceNotes","hash":{},"data":data,"loc":{"start":{"line":130,"column":41},"end":{"line":130,"column":58}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"49":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Combo:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.combo || (depth0 != null ? depth0.combo : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"combo","hash":{},"data":data,"loc":{"start":{"line":136,"column":41},"end":{"line":136,"column":52}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"51":function(container,depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <tr>\n                <td class=\"table-left\">Use:</td>\n                <td class=\"table-right\"> "
    + ((stack1 = ((helper = (helper = helpers.use || (depth0 != null ? depth0.use : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"use","hash":{},"data":data,"loc":{"start":{"line":142,"column":41},"end":{"line":142,"column":50}}}) : helper))) != null ? stack1 : "")
    + "</td>\n            </tr>\n";
},"53":function(container,depth0,helpers,partials,data) {
    return "            <tr>\n                <td class=\"table-left\">Component:</td>\n                <td class=\"table-right\"><a href=\"http://warframe.wikia.com/wiki/Weapons_Required_as_Crafting_Ingredients#Combined_blueprints\" target=\"_blank\">Item are a component, read more about build-chains. <i class=\"icon-link-ext\"></i></a></td>\n            </tr>\n";
},"55":function(container,depth0,helpers,partials,data) {
    return "        <p class=\"text-is-grey margin-top-medium\">Data from <a href=\"https://www.cephalonwannab.com/\" target=\"_blank\">cephalonwannab.com <i class=\"icon-link-ext\"></i></a></p>\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {});

  return "<h2 id=\"modalTitle\" class=\"name\">\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.checked : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":4,"column":11}}})) != null ? stack1 : "")
    + "    "
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":5,"column":4},"end":{"line":5,"column":12}}}) : helper)))
    + "\n</h2>\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.imageName : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":7,"column":0},"end":{"line":9,"column":7}}})) != null ? stack1 : "")
    + "<div class=\"data\">\n    <table class=\"left-right-table\">\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.type : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":12,"column":8},"end":{"line":17,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.category : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":18,"column":8},"end":{"line":23,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.acquisition : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":24,"column":8},"end":{"line":29,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.wikiaUrl : depth0),{"name":"if","hash":{},"fn":container.program(16, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":30,"column":8},"end":{"line":35,"column":15}}})) != null ? stack1 : "")
    + "        <tr>\n            <td colspan=\"2\"><hr></td>\n        </tr>\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.description : depth0),{"name":"if","hash":{},"fn":container.program(18, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":39,"column":8},"end":{"line":44,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.tier : depth0),{"name":"if","hash":{},"fn":container.program(20, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":45,"column":8},"end":{"line":66,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.rank : depth0),{"name":"if","hash":{},"fn":container.program(27, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":67,"column":8},"end":{"line":72,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.releaseDate : depth0),{"name":"if","hash":{},"fn":container.program(29, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":73,"column":8},"end":{"line":78,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.specialNote : depth0),{"name":"if","hash":{},"fn":container.program(31, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":79,"column":8},"end":{"line":84,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.notes : depth0),{"name":"if","hash":{},"fn":container.program(33, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":85,"column":8},"end":{"line":90,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.weaponNotes : depth0),{"name":"if","hash":{},"fn":container.program(35, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":91,"column":8},"end":{"line":96,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.dmg : depth0),{"name":"if","hash":{},"fn":container.program(37, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":97,"column":8},"end":{"line":102,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.abilities : depth0),{"name":"if","hash":{},"fn":container.program(39, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":103,"column":8},"end":{"line":108,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.trigger : depth0),{"name":"if","hash":{},"fn":container.program(41, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":109,"column":8},"end":{"line":114,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.projectile : depth0),{"name":"if","hash":{},"fn":container.program(43, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":115,"column":8},"end":{"line":120,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.stance : depth0),{"name":"if","hash":{},"fn":container.program(45, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":121,"column":8},"end":{"line":126,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.stanceNotes : depth0),{"name":"if","hash":{},"fn":container.program(47, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":127,"column":8},"end":{"line":132,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.combo : depth0),{"name":"if","hash":{},"fn":container.program(49, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":133,"column":8},"end":{"line":138,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.use : depth0),{"name":"if","hash":{},"fn":container.program(51, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":139,"column":8},"end":{"line":144,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.component : depth0),{"name":"if","hash":{},"fn":container.program(53, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":145,"column":8},"end":{"line":150,"column":15}}})) != null ? stack1 : "")
    + "    </table>\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.tier : depth0),{"name":"if","hash":{},"fn":container.program(55, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":152,"column":4},"end":{"line":154,"column":11}}})) != null ? stack1 : "")
    + "    <a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/item.hbs":
/*!****************************!*\
  !*** ./src/views/item.hbs ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    return "item-checked";
},"3":function(container,depth0,helpers,partials,data) {
    return "item-unchecked";
},"5":function(container,depth0,helpers,partials,data) {
    return " item-vaulted";
},"7":function(container,depth0,helpers,partials,data) {
    return " item-unobtainable";
},"9":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-lock\"></i>";
},"11":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-attention\"></i>";
},"13":function(container,depth0,helpers,partials,data) {
    var helper;

  return "        <span class=\"tier-rank tier-rank-3\" onclick=\"app.item.toggleInfo('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data,"loc":{"start":{"line":5,"column":74},"end":{"line":5,"column":82}}}) : helper)))
    + "')\">\n            <i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i>\n        </span>\n";
},"15":function(container,depth0,helpers,partials,data) {
    var helper;

  return "        <span class=\"tier-rank tier-rank-2\" onclick=\"app.item.toggleInfo('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data,"loc":{"start":{"line":10,"column":74},"end":{"line":10,"column":82}}}) : helper)))
    + "')\">\n            <i class=\"icon-star-empty\"></i><i class=\"icon-star-empty\"></i>\n        </span>\n";
},"17":function(container,depth0,helpers,partials,data) {
    var helper;

  return "        <span class=\"tier-rank tier-rank-1\" onclick=\"app.item.toggleInfo('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data,"loc":{"start":{"line":15,"column":74},"end":{"line":15,"column":82}}}) : helper)))
    + "')\">\n            <i class=\"icon-star-empty\"></i>\n        </span>\n";
},"19":function(container,depth0,helpers,partials,data) {
    var helper;

  return "<span class=\"component\" onclick=\"app.item.toggleInfo('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data,"loc":{"start":{"line":19,"column":80},"end":{"line":19,"column":88}}}) : helper)))
    + "')\"><i class=\"icon-puzzle\"></i></span>";
},"21":function(container,depth0,helpers,partials,data) {
    var helper;

  return "            <i class=\"icon-check icon-2x\" onclick=\"app.item.check('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data,"loc":{"start":{"line":22,"column":67},"end":{"line":22,"column":75}}}) : helper)))
    + "', false)\"></i>\n";
},"23":function(container,depth0,helpers,partials,data) {
    var helper;

  return "            <i class=\"icon-check-empty icon-2x\" onclick=\"app.item.check('"
    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"data":data,"loc":{"start":{"line":24,"column":73},"end":{"line":24,"column":81}}}) : helper)))
    + "', true)\"></i>\n";
},"25":function(container,depth0,helpers,partials,data) {
    var helper;

  return ": "
    + container.escapeExpression(((helper = (helper = helpers.category || (depth0 != null ? depth0.category : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"category","hash":{},"data":data,"loc":{"start":{"line":28,"column":83},"end":{"line":28,"column":95}}}) : helper)));
},"27":function(container,depth0,helpers,partials,data) {
    var helper;

  return "<span class=\"mastery-rank\"> | MR-"
    + container.escapeExpression(((helper = (helper = helpers.masteryReq || (depth0 != null ? depth0.masteryReq : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"masteryReq","hash":{},"data":data,"loc":{"start":{"line":29,"column":70},"end":{"line":29,"column":84}}}) : helper)))
    + "</span>";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "<li class=\"item "
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.checked : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":72}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.vaulted : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":72},"end":{"line":1,"column":107}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.unobtainable : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":107},"end":{"line":1,"column":152}}})) != null ? stack1 : "")
    + "\" data-name=\""
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":1,"column":165},"end":{"line":1,"column":173}}}) : helper)))
    + "\">\n    <span class=\"name\" onclick=\"app.item.toggleInfo('"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":2,"column":53},"end":{"line":2,"column":61}}}) : helper)))
    + "')\">"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":2,"column":65},"end":{"line":2,"column":73}}}) : helper)))
    + "</span>\n    <span class=\"acquisition\" onclick=\"app.item.toggleInfo('"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":3,"column":60},"end":{"line":3,"column":68}}}) : helper)))
    + "')\">"
    + alias4(((helper = (helper = helpers.acquisition || (depth0 != null ? depth0.acquisition : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"acquisition","hash":{},"data":data,"loc":{"start":{"line":3,"column":72},"end":{"line":3,"column":87}}}) : helper)))
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.vaulted : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":87},"end":{"line":3,"column":135}}})) != null ? stack1 : "")
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.unobtainable : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":135},"end":{"line":3,"column":193}}})) != null ? stack1 : "")
    + "</span>\n"
    + ((stack1 = (helpers.ifCond||(depth0 && depth0.ifCond)||alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","3",{"name":"ifCond","hash":{},"fn":container.program(13, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":4},"end":{"line":8,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond||(depth0 && depth0.ifCond)||alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","2",{"name":"ifCond","hash":{},"fn":container.program(15, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":4},"end":{"line":13,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = (helpers.ifCond||(depth0 && depth0.ifCond)||alias2).call(alias1,(depth0 != null ? depth0.tierRank : depth0),"==","1",{"name":"ifCond","hash":{},"fn":container.program(17, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":14,"column":4},"end":{"line":18,"column":15}}})) != null ? stack1 : "")
    + "    "
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.component : depth0),{"name":"if","hash":{},"fn":container.program(19, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":133}}})) != null ? stack1 : "")
    + "\n    <span class=\"check\">\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.checked : depth0),{"name":"if","hash":{},"fn":container.program(21, data, 0),"inverse":container.program(23, data, 0),"data":data,"loc":{"start":{"line":21,"column":8},"end":{"line":25,"column":15}}})) != null ? stack1 : "")
    + "    </span>\n    <div class=\"specification\">\n        <span class=\"type\">"
    + alias4(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"type","hash":{},"data":data,"loc":{"start":{"line":28,"column":27},"end":{"line":28,"column":35}}}) : helper)))
    + "</span><span class=\"category\">"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.category : depth0),{"name":"if","hash":{},"fn":container.program(25, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":28,"column":65},"end":{"line":28,"column":102}}})) != null ? stack1 : "")
    + "</span>\n        "
    + ((stack1 = (helpers.ifCond||(depth0 && depth0.ifCond)||alias2).call(alias1,(depth0 != null ? depth0.masteryReq : depth0),">=",1,{"name":"ifCond","hash":{},"fn":container.program(27, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":29,"column":8},"end":{"line":29,"column":102}}})) != null ? stack1 : "")
    + "\n        <a href=\""
    + alias4(((helper = (helper = helpers.wikiaUrl || (depth0 != null ? depth0.wikiaUrl : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"wikiaUrl","hash":{},"data":data,"loc":{"start":{"line":30,"column":17},"end":{"line":30,"column":29}}}) : helper)))
    + "\" target=\"_blank\" class=\"wikia-link\"><i class=\"icon-link-ext\"></i></a>\n    </div>\n</li>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/pages/help.hbs":
/*!**********************************!*\
  !*** ./src/views/pages/help.hbs ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=container.escapeExpression, alias2=container.lambda;

  return "<h2>Help</h2>\n\n<h3>Legend</h3>\n<p><i class=\"legend-icon icon-check-empty\"></i> Item are un-checked</p>\n<p><i class=\"legend-icon icon-check\"></i> Item are checked</p>\n<p><i class=\"legend-icon icon-star-empty\"></i> Item rating (1 to 3 stars)</p>\n<p><i class=\"legend-icon icon-lock\"></i> Item are currently vaulted</p>\n<p><i class=\"legend-icon icon-attention\"></i> Item are unobtainable</p>\n<p><i class=\"legend-icon icon-puzzle\"></i> Item are a component (save this item in your Inventory)</p>\n<p><i class=\"legend-icon icon-link-ext\"></i> External link, will open in a new tab</p>\n<p><span class=\"legend-color legend-unchecked\"></span> Item are unchecked</p>\n<p><span class=\"legend-color legend-checked\"></span> Item are checked</p>\n<p><span class=\"legend-color legend-vaulted\"></span> Item are vaulted</p>\n<p><span class=\"legend-color legend-unobtainable\"></span> Item are unobtainable</p>\n\n<p><img src=\"/helper/include/images/legend.png\" id=\"legend-image\" alt=\"Site legend\"></p>\n\n<h3>Useful links</h3>\n<ul>\n    <li><a href=\"https://drops.warframestat.us/\" target=\"_blank\"><b>Drop Data (easily searchable)</b></a></li>\n    <li><a href=\"https://n8k6e2y6.ssl.hwcdn.net/repos/hnfvc0o3jnfvc873njb03enrf56.html\" target=\"_blank\"><b>Official Drop Rates &amp; Locations</b></a></li>\n    <li><a href=\"https://www.cephalonwannab.com/\" target=\"_blank\"><b>i_wanna_b_the_guy's Tier List</b></a></li>\n    <li><a href=\"https://www.tenno.zone/planner/\" target=\"_blank\"><b>Tenno Zone's guide to find relics</b></a></li>\n    <li><a href=\"https://www.framemastery.com/\" target=\"_blank\"><b>FrameMastery.com - Guides for everything</b></a></li>\n    <li><a href=\"http://content.warframe.com/dynamic/worldState.php\" target=\"_blank\">Official World-state API</a></li>\n    <li><a href=\"https://hub.warframestat.us\" target=\"_blank\">Warframe Hub</a></li>\n    <li><a href=\"http://warframe-builder.com/\" target=\"_blank\">Warframe Builds</a></li>\n    <li><a href=\"https://semlar.com/fish\" target=\"_blank\">Guide to fishing</a></li>\n    <li><a href=\"https://warframeguide.com/resources-farming-in-warframe/\" target=\"_blank\">Guide to resource farming</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Mastery_Rank\" target=\"_blank\">All about mastery rank</a></li>\n</ul>\n\n<h3>Notes</h3>\n<p><b>Unobtainable items</b></p>\n<p>Three items are considered \"Unobtainable\" since they were only accessible from the <a href=\"https://warframe.fandom.com/wiki/Founders\" target=\"_blank\">Founder Packages</a>:</p>\n<ul>\n    <li><a href=\"https://warframe.fandom.com/wiki/Excalibur_Prime\" target=\"_blank\">Excalibur Prime</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Lato_Prime\" target=\"_blank\">Lato Prime</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Skana_Prime\" target=\"_blank\">Skana Prime</a></li>\n</ul>\n<p><b>Fully ranked items</b></p>\n<p>Two items comes fully ranked and will add to mastery once obtained:</p>\n<ul>\n    <li><a href=\"https://warframe.fandom.com/wiki/Excalibur_Umbra\" target=\"_blank\">Excalibur Umbra</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Skiajati\" target=\"_blank\">Skiajati</a></li>\n</ul>\n<p><b>Unique items</b></p>\n<p><a href=\"https://warframe.fandom.com/wiki/Khora\" target=\"_blank\">Khora's</a> companion Venari will grant 6000 points towards mastery rank.</p>\n<p>Several item can reach level 40 and grant an additional 1000 points, but are considered mastered at level 30:</p>\n<ul>\n    <li><a href=\"https://warframe.fandom.com/wiki/Paracesis\" target=\"_blank\">Paracesis</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Ayanga\" target=\"_blank\">Kuva Ayanga</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Brakk\" target=\"_blank\">Kuva Brakk</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Bramma\" target=\"_blank\">Kuva Bramma</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Chakkhurr\" target=\"_blank\">Kuva Chakkhurr</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Drakgoon\" target=\"_blank\">Kuva Drakgoon</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Hind\" target=\"_blank\">Kuva Hind</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Karak\" target=\"_blank\">Kuva Karak</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Kohm\" target=\"_blank\">Kuva Kohm</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Kraken\" target=\"_blank\">Kuva Kraken</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Nukor\" target=\"_blank\">Kuva Nukor</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Ogris\" target=\"_blank\">Kuva Ogris</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Quartakk\" target=\"_blank\">Kuva Quartakk</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Seer\" target=\"_blank\">Kuva Seer</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Shildeg\" target=\"_blank\">Kuva Shildeg</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Tonkor\" target=\"_blank\">Kuva Tonkor</a></li>\n    <li><a href=\"https://warframe.fandom.com/wiki/Kuva_Twin_Stubbas\" target=\"_blank\">Kuva Twin Stubbas</a></li>\n</ul>\n\n<h3>I'm MR-28, what do I do?</h3>\n<p>Check all items by typing this in browser console:</p>\n<p><code>app.item.checkAll()</code></p>\n<p>Logout and login to flush the local storage</p>\n<p>Search for 'Unobtainable' and remove all Founders items</p>\n<p>Search for 'Login reward' and check those items</p>\n<p>Search for 'Kuva' and check all items obtained from Kuva Liches</p>\n<p>Open Stats and check all categories against in-game menu if the numbers don't add up</p>\n\n\n<h3>Functions</h3>\n<p>Check all items</p>\n<p><code>app.item.checkAll()</code></p>\n<p>Uncheck all items</p>\n<p><code>app.item.unCheckAll()</code></p>\n<p>Copy data for checked items to clipboard (Works for Chrome):</p>\n<p><code>copy(app.storage.list())</code></p>\n<p>Import data</p>\n<p><code>app.import.showModal()</code></p>\n<p>Export data</p>\n<p><code>app.export.showModal()</code></p>\n<p>Download CSV</p>\n<p><code>app.export.csv()</code></p>\n\n<h3>About this app</h3>\n<p>UX, frontend &amp; backend by <a href=\"https://andersbrandt.se/\">Anders Brandt</a></p>\n<p>Item data are supplied by <a href=\"https://github.com/WFCD/\" target=\"_blank\">Warframe Community Developers</a> repo\n    <a href=\"https://github.com/WFCD/warframe-items/\" target=\"_blank\">warframe-items</a>, thank you guys!</p>\n<p>Tier-list are supplied by <a href=\"https://www.cephalonwannab.com/\" target=\"_blank\">i_wanna_b_the_guy's Tier List</a>\n</p>\n<p>\n    <b>Data fetched:</b><br />\n    "
    + alias1(((helper = (helper = helpers.fetched || (depth0 != null ? depth0.fetched : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"fetched","hash":{},"data":data,"loc":{"start":{"line":102,"column":4},"end":{"line":102,"column":17}}}) : helper)))
    + "\n</p>\n<p>\n    <b>Data actual for versions:</b><br />\n    PC: "
    + alias1(alias2(((stack1 = (depth0 != null ? depth0.version : depth0)) != null ? stack1.pc : stack1), depth0))
    + "<br />\n    PS4: "
    + alias1(alias2(((stack1 = (depth0 != null ? depth0.version : depth0)) != null ? stack1.ps4 : stack1), depth0))
    + "<br />\n    Xbox: "
    + alias1(alias2(((stack1 = (depth0 != null ? depth0.version : depth0)) != null ? stack1.xbox : stack1), depth0))
    + "<br />\n    Switch: "
    + alias1(alias2(((stack1 = (depth0 != null ? depth0.version : depth0)) != null ? stack1["switch"] : stack1), depth0))
    + "<br />\n</p>\n\n<h3>Privacy</h3>\n<p>We will not store any personal information. Login are delegated to Google using <a target=\"_blank\" href=\"https://developers.google.com/api-client-library/\">Google API Client</a></p>\n<p>The only data we store are your <a target=\"_blank\" href=\"https://www.google.com/search?q=what%27s+my+google+id\">public Google ID</a>. Your ID is used in a obfuscated format in this app.</p>\n<p>Your firstname (displayed in user-menu) are stored in session only, and never stored in database or on disk.</p>\n<p><b>We will not send you emails or store your email-address.</b></p>\n\n<a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n\n<div class=\"text-right\">\n    <button type=\"button\" class=\"btn btn-default\" onclick=\"app.tools.closeModal();\">Close</button>\n</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/pages/stats.hbs":
/*!***********************************!*\
  !*** ./src/views/pages/stats.hbs ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression;

  return "        <tr>\n            <td class=\"name\">"
    + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0))
    + "</td>\n            <td class=\"unranked\">"
    + ((stack1 = helpers["if"].call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? depth0.unranked : depth0)) != null ? stack1.length : stack1),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.program(4, data, 0),"data":data,"loc":{"start":{"line":19,"column":33},"end":{"line":19,"column":137}}})) != null ? stack1 : "")
    + "</td>\n            <td class=\"ranked\">"
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.ranked : depth0)) != null ? stack1.length : stack1), depth0))
    + "</td>\n            <td class=\"total\">"
    + alias2(alias1((depth0 != null ? depth0.total : depth0), depth0))
    + "</td>\n        </tr>\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1;

  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.unranked : depth0)) != null ? stack1.length : stack1), depth0));
},"4":function(container,depth0,helpers,partials,data) {
    return " <i class=\"icon-ok color-green\"></i> ";
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {});

  return "<div class=\"stats-item\">\n    <div class=\"name\">\n        <b>"
    + container.escapeExpression(container.lambda((depth0 != null ? depth0.name : depth0), depth0))
    + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.unranked : depth0)) != null ? stack1.length : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.program(4, data, 0),"data":data,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":132}}})) != null ? stack1 : "")
    + " </b>\n    </div>\n    <div class=\"ranked\">\n"
    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.unranked : depth0),{"name":"each","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":40,"column":8},"end":{"line":42,"column":17}}})) != null ? stack1 : "")
    + "    </div>\n</div>\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1;

  return " ("
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.unranked : depth0)) != null ? stack1.length : stack1), depth0))
    + ") ";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {});

  return "        <a href=\""
    + alias2(alias1((depth0 != null ? depth0.url : depth0), depth0))
    + "\" target=\"_blank\">"
    + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0))
    + ((stack1 = helpers["if"].call(alias3,(depth0 != null ? depth0.unobtainable : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":41,"column":62},"end":{"line":41,"column":109}}})) != null ? stack1 : "")
    + "</a>"
    + ((stack1 = helpers.unless.call(alias3,(data && data.last),{"name":"unless","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":41,"column":113},"end":{"line":41,"column":143}}})) != null ? stack1 : "")
    + "\n";
},"10":function(container,depth0,helpers,partials,data) {
    return " (Unobtainable)";
},"12":function(container,depth0,helpers,partials,data) {
    return ", ";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.lambda, alias3=container.escapeExpression;

  return "<h2>Statistics</h2>\n\n<h3>Ranked items by type</h3>\n<p>\n    These categories match the in-game menu Profile > Equipment.<br>\n    Note: Unless you are a Founder, there are 3 unobtainable items. Read more in Help.\n</p>\n<table>\n    <thead>\n        <th>Type</th>\n        <th>Unranked</th>\n        <th>Ranked</th>\n        <th>Total items</th>\n    </thead>\n    <tbody>\n"
    + ((stack1 = helpers.each.call(alias1,depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":16,"column":8},"end":{"line":23,"column":17}}})) != null ? stack1 : "")
    + "        <tr class=\"divider\">\n            <td>&nbsp;</td>\n            <td class=\"unranked\">"
    + alias3(alias2((depth0 != null ? depth0.totalItemsUnranked : depth0), depth0))
    + "</td>\n            <td class=\"ranked\">"
    + alias3(alias2((depth0 != null ? depth0.totalItemsRanked : depth0), depth0))
    + "</td>\n            <td class=\"total\">"
    + alias3(alias2((depth0 != null ? depth0.totalItems : depth0), depth0))
    + "</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3>Unranked items by type</h3>\n"
    + ((stack1 = helpers.each.call(alias1,depth0,{"name":"each","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":34,"column":0},"end":{"line":45,"column":9}}})) != null ? stack1 : "")
    + "\n<a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n\n<div class=\"text-right\">\n    <button type=\"button\" class=\"btn btn-default\" onclick=\"app.tools.closeModal();\">Close</button>\n</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/pages/user.hbs":
/*!**********************************!*\
  !*** ./src/views/pages/user.hbs ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression;

  return "<div id=\"user-wrapper\">\n    <h2>User</h2>\n    <p>\n        <a onclick=\"app.import.showModal();\">Import data from array</a><br />\n        <a onclick=\"app.export.showModal();\">Export data as array</a><br />\n        <a onclick=\"app.export.csv();\">Download data as CSV</a>\n    </p>\n    <hr />\n    <p>\n        Signed in as <b>"
    + alias2(alias1((depth0 != null ? depth0.firstName : depth0), depth0))
    + "</b><br>\n    </p>\n    <!--\n    <p>\n        Application User Id: "
    + alias2(alias1((depth0 != null ? depth0.uid : depth0), depth0))
    + "\n    </p>\n    -->\n    <p><a class=\"button\" href=\"../user/logout.php\">Logout</a></p>\n</div>\n\n<a class=\"close-reveal-modal\" aria-label=\"Close\">&#215;</a>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/search-indicator.hbs":
/*!****************************************!*\
  !*** ./src/views/search-indicator.hbs ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div id=\"search-indicator\"><i class=\"icon-search\"></i> Showing <span id=\"search-indicator-value\"></span> items</div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/search.hbs":
/*!******************************!*\
  !*** ./src/views/search.hbs ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<input type=\"text\" id=\"search\" name=\"search\" onkeyup=\"app.search.action()\" placeholder=\"Search name, type, category or acquisition\" autocomplete=\"off\" />\n<div id=\"search-clear\" onclick=\"app.search.clear();\"><i class=\"icon-cancel\"></i></div>\n";
},"useData":true});

/***/ }),

/***/ "./src/views/status.hbs":
/*!******************************!*\
  !*** ./src/views/status.hbs ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "<div class=\"row\">\n    <div class=\"column small-12 medium-12\">\n        <div id=\"ranked-indicator\" title=\"\">\n           <span>Ranked:</span> <b id=\"checked-items-value\">"
    + alias4(((helper = (helper = helpers.checkedItems || (depth0 != null ? depth0.checkedItems : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"checkedItems","hash":{},"data":data,"loc":{"start":{"line":4,"column":60},"end":{"line":4,"column":76}}}) : helper)))
    + "</b> / <b>"
    + alias4(((helper = (helper = helpers.availableItems || (depth0 != null ? depth0.availableItems : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"availableItems","hash":{},"data":data,"loc":{"start":{"line":4,"column":86},"end":{"line":4,"column":104}}}) : helper)))
    + "</b>\n        </div>\n    </div>\n</div>\n";
},"useData":true});

/***/ }),

/***/ 0:
/*!******************************************************!*\
  !*** multi ./src/main.js ./src/scss/stylesheet.scss ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./src/main.js */"./src/main.js");
module.exports = __webpack_require__(/*! ./src/scss/stylesheet.scss */"./src/scss/stylesheet.scss");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,